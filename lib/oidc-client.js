(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! exports provided: Log, OidcClient, OidcClientSettings, WebStorageStateStore, InMemoryWebStorage, UserManager, AccessTokenEvents, MetadataService, CordovaPopupNavigator, CordovaIFrameNavigator, CheckSessionIFrame, TokenRevocationClient, SessionMonitor, Global, User, ErrorResponse, State, SigninState, Version */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _src_Log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/Log.js */ "./src/Log.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Log", function() { return _src_Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"]; });

/* harmony import */ var _src_OidcClient_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/OidcClient.js */ "./src/OidcClient.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "OidcClient", function() { return _src_OidcClient_js__WEBPACK_IMPORTED_MODULE_1__["OidcClient"]; });

/* harmony import */ var _src_OidcClientSettings_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./src/OidcClientSettings.js */ "./src/OidcClientSettings.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "OidcClientSettings", function() { return _src_OidcClientSettings_js__WEBPACK_IMPORTED_MODULE_2__["OidcClientSettings"]; });

/* harmony import */ var _src_WebStorageStateStore_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/WebStorageStateStore.js */ "./src/WebStorageStateStore.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WebStorageStateStore", function() { return _src_WebStorageStateStore_js__WEBPACK_IMPORTED_MODULE_3__["WebStorageStateStore"]; });

/* harmony import */ var _src_InMemoryWebStorage_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./src/InMemoryWebStorage.js */ "./src/InMemoryWebStorage.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "InMemoryWebStorage", function() { return _src_InMemoryWebStorage_js__WEBPACK_IMPORTED_MODULE_4__["InMemoryWebStorage"]; });

/* harmony import */ var _src_UserManager_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./src/UserManager.js */ "./src/UserManager.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UserManager", function() { return _src_UserManager_js__WEBPACK_IMPORTED_MODULE_5__["UserManager"]; });

/* harmony import */ var _src_AccessTokenEvents_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./src/AccessTokenEvents.js */ "./src/AccessTokenEvents.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AccessTokenEvents", function() { return _src_AccessTokenEvents_js__WEBPACK_IMPORTED_MODULE_6__["AccessTokenEvents"]; });

/* harmony import */ var _src_MetadataService_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./src/MetadataService.js */ "./src/MetadataService.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MetadataService", function() { return _src_MetadataService_js__WEBPACK_IMPORTED_MODULE_7__["MetadataService"]; });

/* harmony import */ var _src_CordovaPopupNavigator_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./src/CordovaPopupNavigator.js */ "./src/CordovaPopupNavigator.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CordovaPopupNavigator", function() { return _src_CordovaPopupNavigator_js__WEBPACK_IMPORTED_MODULE_8__["CordovaPopupNavigator"]; });

/* harmony import */ var _src_CordovaIFrameNavigator_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./src/CordovaIFrameNavigator.js */ "./src/CordovaIFrameNavigator.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CordovaIFrameNavigator", function() { return _src_CordovaIFrameNavigator_js__WEBPACK_IMPORTED_MODULE_9__["CordovaIFrameNavigator"]; });

/* harmony import */ var _src_CheckSessionIFrame_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./src/CheckSessionIFrame.js */ "./src/CheckSessionIFrame.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CheckSessionIFrame", function() { return _src_CheckSessionIFrame_js__WEBPACK_IMPORTED_MODULE_10__["CheckSessionIFrame"]; });

/* harmony import */ var _src_TokenRevocationClient_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./src/TokenRevocationClient.js */ "./src/TokenRevocationClient.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TokenRevocationClient", function() { return _src_TokenRevocationClient_js__WEBPACK_IMPORTED_MODULE_11__["TokenRevocationClient"]; });

/* harmony import */ var _src_SessionMonitor_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./src/SessionMonitor.js */ "./src/SessionMonitor.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SessionMonitor", function() { return _src_SessionMonitor_js__WEBPACK_IMPORTED_MODULE_12__["SessionMonitor"]; });

/* harmony import */ var _src_Global_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./src/Global.js */ "./src/Global.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Global", function() { return _src_Global_js__WEBPACK_IMPORTED_MODULE_13__["Global"]; });

/* harmony import */ var _src_User_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./src/User.js */ "./src/User.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "User", function() { return _src_User_js__WEBPACK_IMPORTED_MODULE_14__["User"]; });

/* harmony import */ var _src_ErrorResponse__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./src/ErrorResponse */ "./src/ErrorResponse.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ErrorResponse", function() { return _src_ErrorResponse__WEBPACK_IMPORTED_MODULE_15__["ErrorResponse"]; });

/* harmony import */ var _src_State__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./src/State */ "./src/State.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "State", function() { return _src_State__WEBPACK_IMPORTED_MODULE_16__["State"]; });

/* harmony import */ var _src_SigninState__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./src/SigninState */ "./src/SigninState.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SigninState", function() { return _src_SigninState__WEBPACK_IMPORTED_MODULE_17__["SigninState"]; });

/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./version.js */ "./version.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Version", function() { return _version_js__WEBPACK_IMPORTED_MODULE_18__["Version"]; });

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.




















/***/ }),

/***/ "./jsrsasign/dist/jsrsasign.js":
/*!*************************************!*\
  !*** ./jsrsasign/dist/jsrsasign.js ***!
  \*************************************/
/*! exports provided: SecureRandom, rng_seed_time, BigInteger, RSAKey, EDSA, DSA, Signature, MessageDigest, Mac, Cipher, KEYUTIL, ASN1HEX, X509, CryptoJS, b64tohex, b64toBA, stoBA, BAtos, BAtohex, stohex, stob64, stob64u, b64utos, b64tob64u, b64utob64, hex2b64, hextob64u, b64utohex, utf8tob64u, b64utoutf8, utf8tob64, b64toutf8, utf8tohex, hextoutf8, hextorstr, rstrtohex, hextob64, hextob64nl, b64nltohex, hextopem, pemtohex, hextoArrayBuffer, ArrayBuffertohex, zulutomsec, zulutosec, zulutodate, datetozulu, uricmptohex, hextouricmp, ipv6tohex, hextoipv6, hextoip, iptohex, encodeURIComponentAll, newline_toUnix, newline_toDos, hextoposhex, intarystrtohex, strdiffidx, KJUR, crypto, asn1, jws, lang */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SecureRandom", function() { return SecureRandom; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rng_seed_time", function() { return rng_seed_time; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BigInteger", function() { return BigInteger; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RSAKey", function() { return RSAKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EDSA", function() { return EDSA; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DSA", function() { return DSA; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Signature", function() { return Signature; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MessageDigest", function() { return MessageDigest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Mac", function() { return Mac; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Cipher", function() { return Cipher; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KEYUTIL", function() { return KEYUTIL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ASN1HEX", function() { return ASN1HEX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "X509", function() { return X509; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CryptoJS", function() { return CryptoJS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b64tohex", function() { return b64tohex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b64toBA", function() { return b64toBA; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stoBA", function() { return stoBA; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BAtos", function() { return BAtos; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BAtohex", function() { return BAtohex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stohex", function() { return stohex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stob64", function() { return stob64; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stob64u", function() { return stob64u; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b64utos", function() { return b64utos; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b64tob64u", function() { return b64tob64u; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b64utob64", function() { return b64utob64; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hex2b64", function() { return hex2b64; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hextob64u", function() { return hextob64u; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b64utohex", function() { return b64utohex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "utf8tob64u", function() { return utf8tob64u; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b64utoutf8", function() { return b64utoutf8; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "utf8tob64", function() { return utf8tob64; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b64toutf8", function() { return b64toutf8; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "utf8tohex", function() { return utf8tohex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hextoutf8", function() { return hextoutf8; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hextorstr", function() { return hextorstr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rstrtohex", function() { return rstrtohex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hextob64", function() { return hextob64; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hextob64nl", function() { return hextob64nl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b64nltohex", function() { return b64nltohex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hextopem", function() { return hextopem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pemtohex", function() { return pemtohex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hextoArrayBuffer", function() { return hextoArrayBuffer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ArrayBuffertohex", function() { return ArrayBuffertohex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zulutomsec", function() { return zulutomsec; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zulutosec", function() { return zulutosec; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zulutodate", function() { return zulutodate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "datetozulu", function() { return datetozulu; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "uricmptohex", function() { return uricmptohex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hextouricmp", function() { return hextouricmp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ipv6tohex", function() { return ipv6tohex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hextoipv6", function() { return hextoipv6; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hextoip", function() { return hextoip; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "iptohex", function() { return iptohex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "encodeURIComponentAll", function() { return encodeURIComponentAll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "newline_toUnix", function() { return newline_toUnix; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "newline_toDos", function() { return newline_toDos; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hextoposhex", function() { return hextoposhex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "intarystrtohex", function() { return intarystrtohex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "strdiffidx", function() { return strdiffidx; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KJUR", function() { return KJUR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "crypto", function() { return _crypto; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "asn1", function() { return asn1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "jws", function() { return jws; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lang", function() { return lang; });
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*
 * jsrsasign(all) 8.0.12 (2018-04-22) (c) 2010-2018 Kenji Urushima | kjur.github.com/jsrsasign/license
 */
var navigator = {};
navigator.userAgent = false;
var window = {};
/*!
Copyright (c) 2011, Yahoo! Inc. All rights reserved.
Code licensed under the BSD License:
http://developer.yahoo.com/yui/license.html
version: 2.9.0
*/

if (YAHOO === undefined) {
  var YAHOO = {};
}

YAHOO.lang = {
  extend: function extend(g, h, f) {
    if (!h || !g) {
      throw new Error("YAHOO.lang.extend failed, please check that all dependencies are included.");
    }

    var d = function d() {};

    d.prototype = h.prototype;
    g.prototype = new d();
    g.prototype.constructor = g;
    g.superclass = h.prototype;

    if (h.prototype.constructor == Object.prototype.constructor) {
      h.prototype.constructor = h;
    }

    if (f) {
      var b;

      for (b in f) {
        g.prototype[b] = f[b];
      }

      var e = function e() {},
          c = ["toString", "valueOf"];

      try {
        if (/MSIE/.test(navigator.userAgent)) {
          e = function e(j, i) {
            for (b = 0; b < c.length; b = b + 1) {
              var l = c[b],
                  k = i[l];

              if (typeof k === "function" && k != Object.prototype[l]) {
                j[l] = k;
              }
            }
          };
        }
      } catch (a) {}

      e(g.prototype, f);
    }
  }
};
/*! CryptoJS v3.1.2 core-fix.js
 * code.google.com/p/crypto-js
 * (c) 2009-2013 by Jeff Mott. All rights reserved.
 * code.google.com/p/crypto-js/wiki/License
 * THIS IS FIX of 'core.js' to fix Hmac issue.
 * https://code.google.com/p/crypto-js/issues/detail?id=84
 * https://crypto-js.googlecode.com/svn-history/r667/branches/3.x/src/core.js
 */

var CryptoJS = CryptoJS || function (e, g) {
  var a = {};
  var b = a.lib = {};

  var j = b.Base = function () {
    function n() {}

    return {
      extend: function extend(p) {
        n.prototype = this;
        var o = new n();

        if (p) {
          o.mixIn(p);
        }

        if (!o.hasOwnProperty("init")) {
          o.init = function () {
            o.$super.init.apply(this, arguments);
          };
        }

        o.init.prototype = o;
        o.$super = this;
        return o;
      },
      create: function create() {
        var o = this.extend();
        o.init.apply(o, arguments);
        return o;
      },
      init: function init() {},
      mixIn: function mixIn(p) {
        for (var o in p) {
          if (p.hasOwnProperty(o)) {
            this[o] = p[o];
          }
        }

        if (p.hasOwnProperty("toString")) {
          this.toString = p.toString;
        }
      },
      clone: function clone() {
        return this.init.prototype.extend(this);
      }
    };
  }();

  var l = b.WordArray = j.extend({
    init: function init(o, n) {
      o = this.words = o || [];

      if (n != g) {
        this.sigBytes = n;
      } else {
        this.sigBytes = o.length * 4;
      }
    },
    toString: function toString(n) {
      return (n || h).stringify(this);
    },
    concat: function concat(t) {
      var q = this.words;
      var p = t.words;
      var n = this.sigBytes;
      var s = t.sigBytes;
      this.clamp();

      if (n % 4) {
        for (var r = 0; r < s; r++) {
          var o = p[r >>> 2] >>> 24 - r % 4 * 8 & 255;
          q[n + r >>> 2] |= o << 24 - (n + r) % 4 * 8;
        }
      } else {
        for (var r = 0; r < s; r += 4) {
          q[n + r >>> 2] = p[r >>> 2];
        }
      }

      this.sigBytes += s;
      return this;
    },
    clamp: function clamp() {
      var o = this.words;
      var n = this.sigBytes;
      o[n >>> 2] &= 4294967295 << 32 - n % 4 * 8;
      o.length = e.ceil(n / 4);
    },
    clone: function clone() {
      var n = j.clone.call(this);
      n.words = this.words.slice(0);
      return n;
    },
    random: function random(p) {
      var o = [];

      for (var n = 0; n < p; n += 4) {
        o.push(e.random() * 4294967296 | 0);
      }

      return new l.init(o, p);
    }
  });
  var m = a.enc = {};
  var h = m.Hex = {
    stringify: function stringify(p) {
      var r = p.words;
      var o = p.sigBytes;
      var q = [];

      for (var n = 0; n < o; n++) {
        var s = r[n >>> 2] >>> 24 - n % 4 * 8 & 255;
        q.push((s >>> 4).toString(16));
        q.push((s & 15).toString(16));
      }

      return q.join("");
    },
    parse: function parse(p) {
      var n = p.length;
      var q = [];

      for (var o = 0; o < n; o += 2) {
        q[o >>> 3] |= parseInt(p.substr(o, 2), 16) << 24 - o % 8 * 4;
      }

      return new l.init(q, n / 2);
    }
  };
  var d = m.Latin1 = {
    stringify: function stringify(q) {
      var r = q.words;
      var p = q.sigBytes;
      var n = [];

      for (var o = 0; o < p; o++) {
        var s = r[o >>> 2] >>> 24 - o % 4 * 8 & 255;
        n.push(String.fromCharCode(s));
      }

      return n.join("");
    },
    parse: function parse(p) {
      var n = p.length;
      var q = [];

      for (var o = 0; o < n; o++) {
        q[o >>> 2] |= (p.charCodeAt(o) & 255) << 24 - o % 4 * 8;
      }

      return new l.init(q, n);
    }
  };
  var c = m.Utf8 = {
    stringify: function stringify(n) {
      try {
        return decodeURIComponent(escape(d.stringify(n)));
      } catch (o) {
        throw new Error("Malformed UTF-8 data");
      }
    },
    parse: function parse(n) {
      return d.parse(unescape(encodeURIComponent(n)));
    }
  };
  var i = b.BufferedBlockAlgorithm = j.extend({
    reset: function reset() {
      this._data = new l.init();
      this._nDataBytes = 0;
    },
    _append: function _append(n) {
      if (typeof n == "string") {
        n = c.parse(n);
      }

      this._data.concat(n);

      this._nDataBytes += n.sigBytes;
    },
    _process: function _process(w) {
      var q = this._data;
      var x = q.words;
      var n = q.sigBytes;
      var t = this.blockSize;
      var v = t * 4;
      var u = n / v;

      if (w) {
        u = e.ceil(u);
      } else {
        u = e.max((u | 0) - this._minBufferSize, 0);
      }

      var s = u * t;
      var r = e.min(s * 4, n);

      if (s) {
        for (var p = 0; p < s; p += t) {
          this._doProcessBlock(x, p);
        }

        var o = x.splice(0, s);
        q.sigBytes -= r;
      }

      return new l.init(o, r);
    },
    clone: function clone() {
      var n = j.clone.call(this);
      n._data = this._data.clone();
      return n;
    },
    _minBufferSize: 0
  });
  var f = b.Hasher = i.extend({
    cfg: j.extend(),
    init: function init(n) {
      this.cfg = this.cfg.extend(n);
      this.reset();
    },
    reset: function reset() {
      i.reset.call(this);

      this._doReset();
    },
    update: function update(n) {
      this._append(n);

      this._process();

      return this;
    },
    finalize: function finalize(n) {
      if (n) {
        this._append(n);
      }

      var o = this._doFinalize();

      return o;
    },
    blockSize: 512 / 32,
    _createHelper: function _createHelper(n) {
      return function (p, o) {
        return new n.init(o).finalize(p);
      };
    },
    _createHmacHelper: function _createHmacHelper(n) {
      return function (p, o) {
        return new k.HMAC.init(n, o).finalize(p);
      };
    }
  });
  var k = a.algo = {};
  return a;
}(Math);
/*
CryptoJS v3.1.2 x64-core-min.js
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/


(function (g) {
  var a = CryptoJS,
      f = a.lib,
      e = f.Base,
      h = f.WordArray,
      a = a.x64 = {};
  a.Word = e.extend({
    init: function init(b, c) {
      this.high = b;
      this.low = c;
    }
  });
  a.WordArray = e.extend({
    init: function init(b, c) {
      b = this.words = b || [];
      this.sigBytes = c != g ? c : 8 * b.length;
    },
    toX32: function toX32() {
      for (var b = this.words, c = b.length, a = [], d = 0; d < c; d++) {
        var e = b[d];
        a.push(e.high);
        a.push(e.low);
      }

      return h.create(a, this.sigBytes);
    },
    clone: function clone() {
      for (var b = e.clone.call(this), c = b.words = this.words.slice(0), a = c.length, d = 0; d < a; d++) {
        c[d] = c[d].clone();
      }

      return b;
    }
  });
})();
/*
CryptoJS v3.1.2 enc-base64.js
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/


(function () {
  var h = CryptoJS,
      j = h.lib.WordArray;
  h.enc.Base64 = {
    stringify: function stringify(b) {
      var e = b.words,
          f = b.sigBytes,
          c = this._map;
      b.clamp();
      b = [];

      for (var a = 0; a < f; a += 3) {
        for (var d = (e[a >>> 2] >>> 24 - 8 * (a % 4) & 255) << 16 | (e[a + 1 >>> 2] >>> 24 - 8 * ((a + 1) % 4) & 255) << 8 | e[a + 2 >>> 2] >>> 24 - 8 * ((a + 2) % 4) & 255, g = 0; 4 > g && a + 0.75 * g < f; g++) {
          b.push(c.charAt(d >>> 6 * (3 - g) & 63));
        }
      }

      if (e = c.charAt(64)) for (; b.length % 4;) {
        b.push(e);
      }
      return b.join("");
    },
    parse: function parse(b) {
      var e = b.length,
          f = this._map,
          c = f.charAt(64);
      c && (c = b.indexOf(c), -1 != c && (e = c));

      for (var c = [], a = 0, d = 0; d < e; d++) {
        if (d % 4) {
          var g = f.indexOf(b.charAt(d - 1)) << 2 * (d % 4),
              h = f.indexOf(b.charAt(d)) >>> 6 - 2 * (d % 4);
          c[a >>> 2] |= (g | h) << 24 - 8 * (a % 4);
          a++;
        }
      }

      return j.create(c, a);
    },
    _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
  };
})();
/*
CryptoJS v3.1.2 sha256-min.js
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/


(function (k) {
  for (var g = CryptoJS, h = g.lib, v = h.WordArray, j = h.Hasher, h = g.algo, s = [], t = [], u = function u(q) {
    return 4294967296 * (q - (q | 0)) | 0;
  }, l = 2, b = 0; 64 > b;) {
    var d;

    a: {
      d = l;

      for (var w = k.sqrt(d), r = 2; r <= w; r++) {
        if (!(d % r)) {
          d = !1;
          break a;
        }
      }

      d = !0;
    }

    d && (8 > b && (s[b] = u(k.pow(l, 0.5))), t[b] = u(k.pow(l, 1 / 3)), b++);
    l++;
  }

  var n = [],
      h = h.SHA256 = j.extend({
    _doReset: function _doReset() {
      this._hash = new v.init(s.slice(0));
    },
    _doProcessBlock: function _doProcessBlock(q, h) {
      for (var a = this._hash.words, c = a[0], d = a[1], b = a[2], k = a[3], f = a[4], g = a[5], j = a[6], l = a[7], e = 0; 64 > e; e++) {
        if (16 > e) n[e] = q[h + e] | 0;else {
          var m = n[e - 15],
              p = n[e - 2];
          n[e] = ((m << 25 | m >>> 7) ^ (m << 14 | m >>> 18) ^ m >>> 3) + n[e - 7] + ((p << 15 | p >>> 17) ^ (p << 13 | p >>> 19) ^ p >>> 10) + n[e - 16];
        }
        m = l + ((f << 26 | f >>> 6) ^ (f << 21 | f >>> 11) ^ (f << 7 | f >>> 25)) + (f & g ^ ~f & j) + t[e] + n[e];
        p = ((c << 30 | c >>> 2) ^ (c << 19 | c >>> 13) ^ (c << 10 | c >>> 22)) + (c & d ^ c & b ^ d & b);
        l = j;
        j = g;
        g = f;
        f = k + m | 0;
        k = b;
        b = d;
        d = c;
        c = m + p | 0;
      }

      a[0] = a[0] + c | 0;
      a[1] = a[1] + d | 0;
      a[2] = a[2] + b | 0;
      a[3] = a[3] + k | 0;
      a[4] = a[4] + f | 0;
      a[5] = a[5] + g | 0;
      a[6] = a[6] + j | 0;
      a[7] = a[7] + l | 0;
    },
    _doFinalize: function _doFinalize() {
      var d = this._data,
          b = d.words,
          a = 8 * this._nDataBytes,
          c = 8 * d.sigBytes;
      b[c >>> 5] |= 128 << 24 - c % 32;
      b[(c + 64 >>> 9 << 4) + 14] = k.floor(a / 4294967296);
      b[(c + 64 >>> 9 << 4) + 15] = a;
      d.sigBytes = 4 * b.length;

      this._process();

      return this._hash;
    },
    clone: function clone() {
      var b = j.clone.call(this);
      b._hash = this._hash.clone();
      return b;
    }
  });
  g.SHA256 = j._createHelper(h);
  g.HmacSHA256 = j._createHmacHelper(h);
})(Math);
/*
CryptoJS v3.1.2 sha512-min.js
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/


(function () {
  function a() {
    return d.create.apply(d, arguments);
  }

  for (var n = CryptoJS, r = n.lib.Hasher, e = n.x64, d = e.Word, T = e.WordArray, e = n.algo, ea = [a(1116352408, 3609767458), a(1899447441, 602891725), a(3049323471, 3964484399), a(3921009573, 2173295548), a(961987163, 4081628472), a(1508970993, 3053834265), a(2453635748, 2937671579), a(2870763221, 3664609560), a(3624381080, 2734883394), a(310598401, 1164996542), a(607225278, 1323610764), a(1426881987, 3590304994), a(1925078388, 4068182383), a(2162078206, 991336113), a(2614888103, 633803317), a(3248222580, 3479774868), a(3835390401, 2666613458), a(4022224774, 944711139), a(264347078, 2341262773), a(604807628, 2007800933), a(770255983, 1495990901), a(1249150122, 1856431235), a(1555081692, 3175218132), a(1996064986, 2198950837), a(2554220882, 3999719339), a(2821834349, 766784016), a(2952996808, 2566594879), a(3210313671, 3203337956), a(3336571891, 1034457026), a(3584528711, 2466948901), a(113926993, 3758326383), a(338241895, 168717936), a(666307205, 1188179964), a(773529912, 1546045734), a(1294757372, 1522805485), a(1396182291, 2643833823), a(1695183700, 2343527390), a(1986661051, 1014477480), a(2177026350, 1206759142), a(2456956037, 344077627), a(2730485921, 1290863460), a(2820302411, 3158454273), a(3259730800, 3505952657), a(3345764771, 106217008), a(3516065817, 3606008344), a(3600352804, 1432725776), a(4094571909, 1467031594), a(275423344, 851169720), a(430227734, 3100823752), a(506948616, 1363258195), a(659060556, 3750685593), a(883997877, 3785050280), a(958139571, 3318307427), a(1322822218, 3812723403), a(1537002063, 2003034995), a(1747873779, 3602036899), a(1955562222, 1575990012), a(2024104815, 1125592928), a(2227730452, 2716904306), a(2361852424, 442776044), a(2428436474, 593698344), a(2756734187, 3733110249), a(3204031479, 2999351573), a(3329325298, 3815920427), a(3391569614, 3928383900), a(3515267271, 566280711), a(3940187606, 3454069534), a(4118630271, 4000239992), a(116418474, 1914138554), a(174292421, 2731055270), a(289380356, 3203993006), a(460393269, 320620315), a(685471733, 587496836), a(852142971, 1086792851), a(1017036298, 365543100), a(1126000580, 2618297676), a(1288033470, 3409855158), a(1501505948, 4234509866), a(1607167915, 987167468), a(1816402316, 1246189591)], v = [], w = 0; 80 > w; w++) {
    v[w] = a();
  }

  e = e.SHA512 = r.extend({
    _doReset: function _doReset() {
      this._hash = new T.init([new d.init(1779033703, 4089235720), new d.init(3144134277, 2227873595), new d.init(1013904242, 4271175723), new d.init(2773480762, 1595750129), new d.init(1359893119, 2917565137), new d.init(2600822924, 725511199), new d.init(528734635, 4215389547), new d.init(1541459225, 327033209)]);
    },
    _doProcessBlock: function _doProcessBlock(a, d) {
      for (var f = this._hash.words, F = f[0], e = f[1], n = f[2], r = f[3], G = f[4], H = f[5], I = f[6], f = f[7], w = F.high, J = F.low, X = e.high, K = e.low, Y = n.high, L = n.low, Z = r.high, M = r.low, $ = G.high, N = G.low, aa = H.high, O = H.low, ba = I.high, P = I.low, ca = f.high, Q = f.low, k = w, g = J, z = X, x = K, A = Y, y = L, U = Z, B = M, l = $, h = N, R = aa, C = O, S = ba, D = P, V = ca, E = Q, m = 0; 80 > m; m++) {
        var s = v[m];
        if (16 > m) var j = s.high = a[d + 2 * m] | 0,
            b = s.low = a[d + 2 * m + 1] | 0;else {
          var j = v[m - 15],
              b = j.high,
              p = j.low,
              j = (b >>> 1 | p << 31) ^ (b >>> 8 | p << 24) ^ b >>> 7,
              p = (p >>> 1 | b << 31) ^ (p >>> 8 | b << 24) ^ (p >>> 7 | b << 25),
              u = v[m - 2],
              b = u.high,
              c = u.low,
              u = (b >>> 19 | c << 13) ^ (b << 3 | c >>> 29) ^ b >>> 6,
              c = (c >>> 19 | b << 13) ^ (c << 3 | b >>> 29) ^ (c >>> 6 | b << 26),
              b = v[m - 7],
              W = b.high,
              t = v[m - 16],
              q = t.high,
              t = t.low,
              b = p + b.low,
              j = j + W + (b >>> 0 < p >>> 0 ? 1 : 0),
              b = b + c,
              j = j + u + (b >>> 0 < c >>> 0 ? 1 : 0),
              b = b + t,
              j = j + q + (b >>> 0 < t >>> 0 ? 1 : 0);
          s.high = j;
          s.low = b;
        }
        var W = l & R ^ ~l & S,
            t = h & C ^ ~h & D,
            s = k & z ^ k & A ^ z & A,
            T = g & x ^ g & y ^ x & y,
            p = (k >>> 28 | g << 4) ^ (k << 30 | g >>> 2) ^ (k << 25 | g >>> 7),
            u = (g >>> 28 | k << 4) ^ (g << 30 | k >>> 2) ^ (g << 25 | k >>> 7),
            c = ea[m],
            fa = c.high,
            da = c.low,
            c = E + ((h >>> 14 | l << 18) ^ (h >>> 18 | l << 14) ^ (h << 23 | l >>> 9)),
            q = V + ((l >>> 14 | h << 18) ^ (l >>> 18 | h << 14) ^ (l << 23 | h >>> 9)) + (c >>> 0 < E >>> 0 ? 1 : 0),
            c = c + t,
            q = q + W + (c >>> 0 < t >>> 0 ? 1 : 0),
            c = c + da,
            q = q + fa + (c >>> 0 < da >>> 0 ? 1 : 0),
            c = c + b,
            q = q + j + (c >>> 0 < b >>> 0 ? 1 : 0),
            b = u + T,
            s = p + s + (b >>> 0 < u >>> 0 ? 1 : 0),
            V = S,
            E = D,
            S = R,
            D = C,
            R = l,
            C = h,
            h = B + c | 0,
            l = U + q + (h >>> 0 < B >>> 0 ? 1 : 0) | 0,
            U = A,
            B = y,
            A = z,
            y = x,
            z = k,
            x = g,
            g = c + b | 0,
            k = q + s + (g >>> 0 < c >>> 0 ? 1 : 0) | 0;
      }

      J = F.low = J + g;
      F.high = w + k + (J >>> 0 < g >>> 0 ? 1 : 0);
      K = e.low = K + x;
      e.high = X + z + (K >>> 0 < x >>> 0 ? 1 : 0);
      L = n.low = L + y;
      n.high = Y + A + (L >>> 0 < y >>> 0 ? 1 : 0);
      M = r.low = M + B;
      r.high = Z + U + (M >>> 0 < B >>> 0 ? 1 : 0);
      N = G.low = N + h;
      G.high = $ + l + (N >>> 0 < h >>> 0 ? 1 : 0);
      O = H.low = O + C;
      H.high = aa + R + (O >>> 0 < C >>> 0 ? 1 : 0);
      P = I.low = P + D;
      I.high = ba + S + (P >>> 0 < D >>> 0 ? 1 : 0);
      Q = f.low = Q + E;
      f.high = ca + V + (Q >>> 0 < E >>> 0 ? 1 : 0);
    },
    _doFinalize: function _doFinalize() {
      var a = this._data,
          d = a.words,
          f = 8 * this._nDataBytes,
          e = 8 * a.sigBytes;
      d[e >>> 5] |= 128 << 24 - e % 32;
      d[(e + 128 >>> 10 << 5) + 30] = Math.floor(f / 4294967296);
      d[(e + 128 >>> 10 << 5) + 31] = f;
      a.sigBytes = 4 * d.length;

      this._process();

      return this._hash.toX32();
    },
    clone: function clone() {
      var a = r.clone.call(this);
      a._hash = this._hash.clone();
      return a;
    },
    blockSize: 32
  });
  n.SHA512 = r._createHelper(e);
  n.HmacSHA512 = r._createHmacHelper(e);
})();
/*
CryptoJS v3.1.2 sha384-min.js
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/


(function () {
  var c = CryptoJS,
      a = c.x64,
      b = a.Word,
      e = a.WordArray,
      a = c.algo,
      d = a.SHA512,
      a = a.SHA384 = d.extend({
    _doReset: function _doReset() {
      this._hash = new e.init([new b.init(3418070365, 3238371032), new b.init(1654270250, 914150663), new b.init(2438529370, 812702999), new b.init(355462360, 4144912697), new b.init(1731405415, 4290775857), new b.init(2394180231, 1750603025), new b.init(3675008525, 1694076839), new b.init(1203062813, 3204075428)]);
    },
    _doFinalize: function _doFinalize() {
      var a = d._doFinalize.call(this);

      a.sigBytes -= 16;
      return a;
    }
  });
  c.SHA384 = d._createHelper(a);
  c.HmacSHA384 = d._createHmacHelper(a);
})();
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */


var b64map = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
var b64pad = "=";

function hex2b64(d) {
  var b;
  var e;
  var a = "";

  for (b = 0; b + 3 <= d.length; b += 3) {
    e = parseInt(d.substring(b, b + 3), 16);
    a += b64map.charAt(e >> 6) + b64map.charAt(e & 63);
  }

  if (b + 1 == d.length) {
    e = parseInt(d.substring(b, b + 1), 16);
    a += b64map.charAt(e << 2);
  } else {
    if (b + 2 == d.length) {
      e = parseInt(d.substring(b, b + 2), 16);
      a += b64map.charAt(e >> 2) + b64map.charAt((e & 3) << 4);
    }
  }

  if (b64pad) {
    while ((a.length & 3) > 0) {
      a += b64pad;
    }
  }

  return a;
}

function b64tohex(f) {
  var d = "";
  var e;
  var b = 0;
  var c;
  var a;

  for (e = 0; e < f.length; ++e) {
    if (f.charAt(e) == b64pad) {
      break;
    }

    a = b64map.indexOf(f.charAt(e));

    if (a < 0) {
      continue;
    }

    if (b == 0) {
      d += int2char(a >> 2);
      c = a & 3;
      b = 1;
    } else {
      if (b == 1) {
        d += int2char(c << 2 | a >> 4);
        c = a & 15;
        b = 2;
      } else {
        if (b == 2) {
          d += int2char(c);
          d += int2char(a >> 2);
          c = a & 3;
          b = 3;
        } else {
          d += int2char(c << 2 | a >> 4);
          d += int2char(a & 15);
          b = 0;
        }
      }
    }
  }

  if (b == 1) {
    d += int2char(c << 2);
  }

  return d;
}

function b64toBA(e) {
  var d = b64tohex(e);
  var c;
  var b = new Array();

  for (c = 0; 2 * c < d.length; ++c) {
    b[c] = parseInt(d.substring(2 * c, 2 * c + 2), 16);
  }

  return b;
}

;
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */

var dbits;
var canary = 244837814094590;
var j_lm = (canary & 16777215) == 15715070;

function BigInteger(e, d, f) {
  if (e != null) {
    if ("number" == typeof e) {
      this.fromNumber(e, d, f);
    } else {
      if (d == null && "string" != typeof e) {
        this.fromString(e, 256);
      } else {
        this.fromString(e, d);
      }
    }
  }
}

function nbi() {
  return new BigInteger(null);
}

function am1(f, a, b, e, h, g) {
  while (--g >= 0) {
    var d = a * this[f++] + b[e] + h;
    h = Math.floor(d / 67108864);
    b[e++] = d & 67108863;
  }

  return h;
}

function am2(f, q, r, e, o, a) {
  var k = q & 32767,
      p = q >> 15;

  while (--a >= 0) {
    var d = this[f] & 32767;
    var g = this[f++] >> 15;
    var b = p * d + g * k;
    d = k * d + ((b & 32767) << 15) + r[e] + (o & 1073741823);
    o = (d >>> 30) + (b >>> 15) + p * g + (o >>> 30);
    r[e++] = d & 1073741823;
  }

  return o;
}

function am3(f, q, r, e, o, a) {
  var k = q & 16383,
      p = q >> 14;

  while (--a >= 0) {
    var d = this[f] & 16383;
    var g = this[f++] >> 14;
    var b = p * d + g * k;
    d = k * d + ((b & 16383) << 14) + r[e] + o;
    o = (d >> 28) + (b >> 14) + p * g;
    r[e++] = d & 268435455;
  }

  return o;
}

if (j_lm && navigator.appName == "Microsoft Internet Explorer") {
  BigInteger.prototype.am = am2;
  dbits = 30;
} else {
  if (j_lm && navigator.appName != "Netscape") {
    BigInteger.prototype.am = am1;
    dbits = 26;
  } else {
    BigInteger.prototype.am = am3;
    dbits = 28;
  }
}

BigInteger.prototype.DB = dbits;
BigInteger.prototype.DM = (1 << dbits) - 1;
BigInteger.prototype.DV = 1 << dbits;
var BI_FP = 52;
BigInteger.prototype.FV = Math.pow(2, BI_FP);
BigInteger.prototype.F1 = BI_FP - dbits;
BigInteger.prototype.F2 = 2 * dbits - BI_FP;
var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
var BI_RC = new Array();
var rr, vv;
rr = "0".charCodeAt(0);

for (vv = 0; vv <= 9; ++vv) {
  BI_RC[rr++] = vv;
}

rr = "a".charCodeAt(0);

for (vv = 10; vv < 36; ++vv) {
  BI_RC[rr++] = vv;
}

rr = "A".charCodeAt(0);

for (vv = 10; vv < 36; ++vv) {
  BI_RC[rr++] = vv;
}

function int2char(a) {
  return BI_RM.charAt(a);
}

function intAt(b, a) {
  var d = BI_RC[b.charCodeAt(a)];
  return d == null ? -1 : d;
}

function bnpCopyTo(b) {
  for (var a = this.t - 1; a >= 0; --a) {
    b[a] = this[a];
  }

  b.t = this.t;
  b.s = this.s;
}

function bnpFromInt(a) {
  this.t = 1;
  this.s = a < 0 ? -1 : 0;

  if (a > 0) {
    this[0] = a;
  } else {
    if (a < -1) {
      this[0] = a + this.DV;
    } else {
      this.t = 0;
    }
  }
}

function nbv(a) {
  var b = nbi();
  b.fromInt(a);
  return b;
}

function bnpFromString(h, c) {
  var e;

  if (c == 16) {
    e = 4;
  } else {
    if (c == 8) {
      e = 3;
    } else {
      if (c == 256) {
        e = 8;
      } else {
        if (c == 2) {
          e = 1;
        } else {
          if (c == 32) {
            e = 5;
          } else {
            if (c == 4) {
              e = 2;
            } else {
              this.fromRadix(h, c);
              return;
            }
          }
        }
      }
    }
  }

  this.t = 0;
  this.s = 0;
  var g = h.length,
      d = false,
      f = 0;

  while (--g >= 0) {
    var a = e == 8 ? h[g] & 255 : intAt(h, g);

    if (a < 0) {
      if (h.charAt(g) == "-") {
        d = true;
      }

      continue;
    }

    d = false;

    if (f == 0) {
      this[this.t++] = a;
    } else {
      if (f + e > this.DB) {
        this[this.t - 1] |= (a & (1 << this.DB - f) - 1) << f;
        this[this.t++] = a >> this.DB - f;
      } else {
        this[this.t - 1] |= a << f;
      }
    }

    f += e;

    if (f >= this.DB) {
      f -= this.DB;
    }
  }

  if (e == 8 && (h[0] & 128) != 0) {
    this.s = -1;

    if (f > 0) {
      this[this.t - 1] |= (1 << this.DB - f) - 1 << f;
    }
  }

  this.clamp();

  if (d) {
    BigInteger.ZERO.subTo(this, this);
  }
}

function bnpClamp() {
  var a = this.s & this.DM;

  while (this.t > 0 && this[this.t - 1] == a) {
    --this.t;
  }
}

function bnToString(c) {
  if (this.s < 0) {
    return "-" + this.negate().toString(c);
  }

  var e;

  if (c == 16) {
    e = 4;
  } else {
    if (c == 8) {
      e = 3;
    } else {
      if (c == 2) {
        e = 1;
      } else {
        if (c == 32) {
          e = 5;
        } else {
          if (c == 4) {
            e = 2;
          } else {
            return this.toRadix(c);
          }
        }
      }
    }
  }

  var g = (1 << e) - 1,
      l,
      a = false,
      h = "",
      f = this.t;
  var j = this.DB - f * this.DB % e;

  if (f-- > 0) {
    if (j < this.DB && (l = this[f] >> j) > 0) {
      a = true;
      h = int2char(l);
    }

    while (f >= 0) {
      if (j < e) {
        l = (this[f] & (1 << j) - 1) << e - j;
        l |= this[--f] >> (j += this.DB - e);
      } else {
        l = this[f] >> (j -= e) & g;

        if (j <= 0) {
          j += this.DB;
          --f;
        }
      }

      if (l > 0) {
        a = true;
      }

      if (a) {
        h += int2char(l);
      }
    }
  }

  return a ? h : "0";
}

function bnNegate() {
  var a = nbi();
  BigInteger.ZERO.subTo(this, a);
  return a;
}

function bnAbs() {
  return this.s < 0 ? this.negate() : this;
}

function bnCompareTo(b) {
  var d = this.s - b.s;

  if (d != 0) {
    return d;
  }

  var c = this.t;
  d = c - b.t;

  if (d != 0) {
    return this.s < 0 ? -d : d;
  }

  while (--c >= 0) {
    if ((d = this[c] - b[c]) != 0) {
      return d;
    }
  }

  return 0;
}

function nbits(a) {
  var c = 1,
      b;

  if ((b = a >>> 16) != 0) {
    a = b;
    c += 16;
  }

  if ((b = a >> 8) != 0) {
    a = b;
    c += 8;
  }

  if ((b = a >> 4) != 0) {
    a = b;
    c += 4;
  }

  if ((b = a >> 2) != 0) {
    a = b;
    c += 2;
  }

  if ((b = a >> 1) != 0) {
    a = b;
    c += 1;
  }

  return c;
}

function bnBitLength() {
  if (this.t <= 0) {
    return 0;
  }

  return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);
}

function bnpDLShiftTo(c, b) {
  var a;

  for (a = this.t - 1; a >= 0; --a) {
    b[a + c] = this[a];
  }

  for (a = c - 1; a >= 0; --a) {
    b[a] = 0;
  }

  b.t = this.t + c;
  b.s = this.s;
}

function bnpDRShiftTo(c, b) {
  for (var a = c; a < this.t; ++a) {
    b[a - c] = this[a];
  }

  b.t = Math.max(this.t - c, 0);
  b.s = this.s;
}

function bnpLShiftTo(j, e) {
  var b = j % this.DB;
  var a = this.DB - b;
  var g = (1 << a) - 1;
  var f = Math.floor(j / this.DB),
      h = this.s << b & this.DM,
      d;

  for (d = this.t - 1; d >= 0; --d) {
    e[d + f + 1] = this[d] >> a | h;
    h = (this[d] & g) << b;
  }

  for (d = f - 1; d >= 0; --d) {
    e[d] = 0;
  }

  e[f] = h;
  e.t = this.t + f + 1;
  e.s = this.s;
  e.clamp();
}

function bnpRShiftTo(g, d) {
  d.s = this.s;
  var e = Math.floor(g / this.DB);

  if (e >= this.t) {
    d.t = 0;
    return;
  }

  var b = g % this.DB;
  var a = this.DB - b;
  var f = (1 << b) - 1;
  d[0] = this[e] >> b;

  for (var c = e + 1; c < this.t; ++c) {
    d[c - e - 1] |= (this[c] & f) << a;
    d[c - e] = this[c] >> b;
  }

  if (b > 0) {
    d[this.t - e - 1] |= (this.s & f) << a;
  }

  d.t = this.t - e;
  d.clamp();
}

function bnpSubTo(d, f) {
  var e = 0,
      g = 0,
      b = Math.min(d.t, this.t);

  while (e < b) {
    g += this[e] - d[e];
    f[e++] = g & this.DM;
    g >>= this.DB;
  }

  if (d.t < this.t) {
    g -= d.s;

    while (e < this.t) {
      g += this[e];
      f[e++] = g & this.DM;
      g >>= this.DB;
    }

    g += this.s;
  } else {
    g += this.s;

    while (e < d.t) {
      g -= d[e];
      f[e++] = g & this.DM;
      g >>= this.DB;
    }

    g -= d.s;
  }

  f.s = g < 0 ? -1 : 0;

  if (g < -1) {
    f[e++] = this.DV + g;
  } else {
    if (g > 0) {
      f[e++] = g;
    }
  }

  f.t = e;
  f.clamp();
}

function bnpMultiplyTo(c, e) {
  var b = this.abs(),
      f = c.abs();
  var d = b.t;
  e.t = d + f.t;

  while (--d >= 0) {
    e[d] = 0;
  }

  for (d = 0; d < f.t; ++d) {
    e[d + b.t] = b.am(0, f[d], e, d, 0, b.t);
  }

  e.s = 0;
  e.clamp();

  if (this.s != c.s) {
    BigInteger.ZERO.subTo(e, e);
  }
}

function bnpSquareTo(d) {
  var a = this.abs();
  var b = d.t = 2 * a.t;

  while (--b >= 0) {
    d[b] = 0;
  }

  for (b = 0; b < a.t - 1; ++b) {
    var e = a.am(b, a[b], d, 2 * b, 0, 1);

    if ((d[b + a.t] += a.am(b + 1, 2 * a[b], d, 2 * b + 1, e, a.t - b - 1)) >= a.DV) {
      d[b + a.t] -= a.DV;
      d[b + a.t + 1] = 1;
    }
  }

  if (d.t > 0) {
    d[d.t - 1] += a.am(b, a[b], d, 2 * b, 0, 1);
  }

  d.s = 0;
  d.clamp();
}

function bnpDivRemTo(n, h, g) {
  var w = n.abs();

  if (w.t <= 0) {
    return;
  }

  var k = this.abs();

  if (k.t < w.t) {
    if (h != null) {
      h.fromInt(0);
    }

    if (g != null) {
      this.copyTo(g);
    }

    return;
  }

  if (g == null) {
    g = nbi();
  }

  var d = nbi(),
      a = this.s,
      l = n.s;
  var v = this.DB - nbits(w[w.t - 1]);

  if (v > 0) {
    w.lShiftTo(v, d);
    k.lShiftTo(v, g);
  } else {
    w.copyTo(d);
    k.copyTo(g);
  }

  var p = d.t;
  var b = d[p - 1];

  if (b == 0) {
    return;
  }

  var o = b * (1 << this.F1) + (p > 1 ? d[p - 2] >> this.F2 : 0);
  var A = this.FV / o,
      z = (1 << this.F1) / o,
      x = 1 << this.F2;
  var u = g.t,
      s = u - p,
      f = h == null ? nbi() : h;
  d.dlShiftTo(s, f);

  if (g.compareTo(f) >= 0) {
    g[g.t++] = 1;
    g.subTo(f, g);
  }

  BigInteger.ONE.dlShiftTo(p, f);
  f.subTo(d, d);

  while (d.t < p) {
    d[d.t++] = 0;
  }

  while (--s >= 0) {
    var c = g[--u] == b ? this.DM : Math.floor(g[u] * A + (g[u - 1] + x) * z);

    if ((g[u] += d.am(0, c, g, s, 0, p)) < c) {
      d.dlShiftTo(s, f);
      g.subTo(f, g);

      while (g[u] < --c) {
        g.subTo(f, g);
      }
    }
  }

  if (h != null) {
    g.drShiftTo(p, h);

    if (a != l) {
      BigInteger.ZERO.subTo(h, h);
    }
  }

  g.t = p;
  g.clamp();

  if (v > 0) {
    g.rShiftTo(v, g);
  }

  if (a < 0) {
    BigInteger.ZERO.subTo(g, g);
  }
}

function bnMod(b) {
  var c = nbi();
  this.abs().divRemTo(b, null, c);

  if (this.s < 0 && c.compareTo(BigInteger.ZERO) > 0) {
    b.subTo(c, c);
  }

  return c;
}

function Classic(a) {
  this.m = a;
}

function cConvert(a) {
  if (a.s < 0 || a.compareTo(this.m) >= 0) {
    return a.mod(this.m);
  } else {
    return a;
  }
}

function cRevert(a) {
  return a;
}

function cReduce(a) {
  a.divRemTo(this.m, null, a);
}

function cMulTo(a, c, b) {
  a.multiplyTo(c, b);
  this.reduce(b);
}

function cSqrTo(a, b) {
  a.squareTo(b);
  this.reduce(b);
}

Classic.prototype.convert = cConvert;
Classic.prototype.revert = cRevert;
Classic.prototype.reduce = cReduce;
Classic.prototype.mulTo = cMulTo;
Classic.prototype.sqrTo = cSqrTo;

function bnpInvDigit() {
  if (this.t < 1) {
    return 0;
  }

  var a = this[0];

  if ((a & 1) == 0) {
    return 0;
  }

  var b = a & 3;
  b = b * (2 - (a & 15) * b) & 15;
  b = b * (2 - (a & 255) * b) & 255;
  b = b * (2 - ((a & 65535) * b & 65535)) & 65535;
  b = b * (2 - a * b % this.DV) % this.DV;
  return b > 0 ? this.DV - b : -b;
}

function Montgomery(a) {
  this.m = a;
  this.mp = a.invDigit();
  this.mpl = this.mp & 32767;
  this.mph = this.mp >> 15;
  this.um = (1 << a.DB - 15) - 1;
  this.mt2 = 2 * a.t;
}

function montConvert(a) {
  var b = nbi();
  a.abs().dlShiftTo(this.m.t, b);
  b.divRemTo(this.m, null, b);

  if (a.s < 0 && b.compareTo(BigInteger.ZERO) > 0) {
    this.m.subTo(b, b);
  }

  return b;
}

function montRevert(a) {
  var b = nbi();
  a.copyTo(b);
  this.reduce(b);
  return b;
}

function montReduce(a) {
  while (a.t <= this.mt2) {
    a[a.t++] = 0;
  }

  for (var c = 0; c < this.m.t; ++c) {
    var b = a[c] & 32767;
    var d = b * this.mpl + ((b * this.mph + (a[c] >> 15) * this.mpl & this.um) << 15) & a.DM;
    b = c + this.m.t;
    a[b] += this.m.am(0, d, a, c, 0, this.m.t);

    while (a[b] >= a.DV) {
      a[b] -= a.DV;
      a[++b]++;
    }
  }

  a.clamp();
  a.drShiftTo(this.m.t, a);

  if (a.compareTo(this.m) >= 0) {
    a.subTo(this.m, a);
  }
}

function montSqrTo(a, b) {
  a.squareTo(b);
  this.reduce(b);
}

function montMulTo(a, c, b) {
  a.multiplyTo(c, b);
  this.reduce(b);
}

Montgomery.prototype.convert = montConvert;
Montgomery.prototype.revert = montRevert;
Montgomery.prototype.reduce = montReduce;
Montgomery.prototype.mulTo = montMulTo;
Montgomery.prototype.sqrTo = montSqrTo;

function bnpIsEven() {
  return (this.t > 0 ? this[0] & 1 : this.s) == 0;
}

function bnpExp(h, j) {
  if (h > 4294967295 || h < 1) {
    return BigInteger.ONE;
  }

  var f = nbi(),
      a = nbi(),
      d = j.convert(this),
      c = nbits(h) - 1;
  d.copyTo(f);

  while (--c >= 0) {
    j.sqrTo(f, a);

    if ((h & 1 << c) > 0) {
      j.mulTo(a, d, f);
    } else {
      var b = f;
      f = a;
      a = b;
    }
  }

  return j.revert(f);
}

function bnModPowInt(b, a) {
  var c;

  if (b < 256 || a.isEven()) {
    c = new Classic(a);
  } else {
    c = new Montgomery(a);
  }

  return this.exp(b, c);
}

BigInteger.prototype.copyTo = bnpCopyTo;
BigInteger.prototype.fromInt = bnpFromInt;
BigInteger.prototype.fromString = bnpFromString;
BigInteger.prototype.clamp = bnpClamp;
BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
BigInteger.prototype.drShiftTo = bnpDRShiftTo;
BigInteger.prototype.lShiftTo = bnpLShiftTo;
BigInteger.prototype.rShiftTo = bnpRShiftTo;
BigInteger.prototype.subTo = bnpSubTo;
BigInteger.prototype.multiplyTo = bnpMultiplyTo;
BigInteger.prototype.squareTo = bnpSquareTo;
BigInteger.prototype.divRemTo = bnpDivRemTo;
BigInteger.prototype.invDigit = bnpInvDigit;
BigInteger.prototype.isEven = bnpIsEven;
BigInteger.prototype.exp = bnpExp;
BigInteger.prototype.toString = bnToString;
BigInteger.prototype.negate = bnNegate;
BigInteger.prototype.abs = bnAbs;
BigInteger.prototype.compareTo = bnCompareTo;
BigInteger.prototype.bitLength = bnBitLength;
BigInteger.prototype.mod = bnMod;
BigInteger.prototype.modPowInt = bnModPowInt;
BigInteger.ZERO = nbv(0);
BigInteger.ONE = nbv(1);
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */

function bnClone() {
  var a = nbi();
  this.copyTo(a);
  return a;
}

function bnIntValue() {
  if (this.s < 0) {
    if (this.t == 1) {
      return this[0] - this.DV;
    } else {
      if (this.t == 0) {
        return -1;
      }
    }
  } else {
    if (this.t == 1) {
      return this[0];
    } else {
      if (this.t == 0) {
        return 0;
      }
    }
  }

  return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0];
}

function bnByteValue() {
  return this.t == 0 ? this.s : this[0] << 24 >> 24;
}

function bnShortValue() {
  return this.t == 0 ? this.s : this[0] << 16 >> 16;
}

function bnpChunkSize(a) {
  return Math.floor(Math.LN2 * this.DB / Math.log(a));
}

function bnSigNum() {
  if (this.s < 0) {
    return -1;
  } else {
    if (this.t <= 0 || this.t == 1 && this[0] <= 0) {
      return 0;
    } else {
      return 1;
    }
  }
}

function bnpToRadix(c) {
  if (c == null) {
    c = 10;
  }

  if (this.signum() == 0 || c < 2 || c > 36) {
    return "0";
  }

  var f = this.chunkSize(c);
  var e = Math.pow(c, f);
  var i = nbv(e),
      j = nbi(),
      h = nbi(),
      g = "";
  this.divRemTo(i, j, h);

  while (j.signum() > 0) {
    g = (e + h.intValue()).toString(c).substr(1) + g;
    j.divRemTo(i, j, h);
  }

  return h.intValue().toString(c) + g;
}

function bnpFromRadix(m, h) {
  this.fromInt(0);

  if (h == null) {
    h = 10;
  }

  var f = this.chunkSize(h);
  var g = Math.pow(h, f),
      e = false,
      a = 0,
      l = 0;

  for (var c = 0; c < m.length; ++c) {
    var k = intAt(m, c);

    if (k < 0) {
      if (m.charAt(c) == "-" && this.signum() == 0) {
        e = true;
      }

      continue;
    }

    l = h * l + k;

    if (++a >= f) {
      this.dMultiply(g);
      this.dAddOffset(l, 0);
      a = 0;
      l = 0;
    }
  }

  if (a > 0) {
    this.dMultiply(Math.pow(h, a));
    this.dAddOffset(l, 0);
  }

  if (e) {
    BigInteger.ZERO.subTo(this, this);
  }
}

function bnpFromNumber(f, e, h) {
  if ("number" == typeof e) {
    if (f < 2) {
      this.fromInt(1);
    } else {
      this.fromNumber(f, h);

      if (!this.testBit(f - 1)) {
        this.bitwiseTo(BigInteger.ONE.shiftLeft(f - 1), op_or, this);
      }

      if (this.isEven()) {
        this.dAddOffset(1, 0);
      }

      while (!this.isProbablePrime(e)) {
        this.dAddOffset(2, 0);

        if (this.bitLength() > f) {
          this.subTo(BigInteger.ONE.shiftLeft(f - 1), this);
        }
      }
    }
  } else {
    var d = new Array(),
        g = f & 7;
    d.length = (f >> 3) + 1;
    e.nextBytes(d);

    if (g > 0) {
      d[0] &= (1 << g) - 1;
    } else {
      d[0] = 0;
    }

    this.fromString(d, 256);
  }
}

function bnToByteArray() {
  var b = this.t,
      c = new Array();
  c[0] = this.s;
  var e = this.DB - b * this.DB % 8,
      f,
      a = 0;

  if (b-- > 0) {
    if (e < this.DB && (f = this[b] >> e) != (this.s & this.DM) >> e) {
      c[a++] = f | this.s << this.DB - e;
    }

    while (b >= 0) {
      if (e < 8) {
        f = (this[b] & (1 << e) - 1) << 8 - e;
        f |= this[--b] >> (e += this.DB - 8);
      } else {
        f = this[b] >> (e -= 8) & 255;

        if (e <= 0) {
          e += this.DB;
          --b;
        }
      }

      if ((f & 128) != 0) {
        f |= -256;
      }

      if (a == 0 && (this.s & 128) != (f & 128)) {
        ++a;
      }

      if (a > 0 || f != this.s) {
        c[a++] = f;
      }
    }
  }

  return c;
}

function bnEquals(b) {
  return this.compareTo(b) == 0;
}

function bnMin(b) {
  return this.compareTo(b) < 0 ? this : b;
}

function bnMax(b) {
  return this.compareTo(b) > 0 ? this : b;
}

function bnpBitwiseTo(c, h, e) {
  var d,
      g,
      b = Math.min(c.t, this.t);

  for (d = 0; d < b; ++d) {
    e[d] = h(this[d], c[d]);
  }

  if (c.t < this.t) {
    g = c.s & this.DM;

    for (d = b; d < this.t; ++d) {
      e[d] = h(this[d], g);
    }

    e.t = this.t;
  } else {
    g = this.s & this.DM;

    for (d = b; d < c.t; ++d) {
      e[d] = h(g, c[d]);
    }

    e.t = c.t;
  }

  e.s = h(this.s, c.s);
  e.clamp();
}

function op_and(a, b) {
  return a & b;
}

function bnAnd(b) {
  var c = nbi();
  this.bitwiseTo(b, op_and, c);
  return c;
}

function op_or(a, b) {
  return a | b;
}

function bnOr(b) {
  var c = nbi();
  this.bitwiseTo(b, op_or, c);
  return c;
}

function op_xor(a, b) {
  return a ^ b;
}

function bnXor(b) {
  var c = nbi();
  this.bitwiseTo(b, op_xor, c);
  return c;
}

function op_andnot(a, b) {
  return a & ~b;
}

function bnAndNot(b) {
  var c = nbi();
  this.bitwiseTo(b, op_andnot, c);
  return c;
}

function bnNot() {
  var b = nbi();

  for (var a = 0; a < this.t; ++a) {
    b[a] = this.DM & ~this[a];
  }

  b.t = this.t;
  b.s = ~this.s;
  return b;
}

function bnShiftLeft(b) {
  var a = nbi();

  if (b < 0) {
    this.rShiftTo(-b, a);
  } else {
    this.lShiftTo(b, a);
  }

  return a;
}

function bnShiftRight(b) {
  var a = nbi();

  if (b < 0) {
    this.lShiftTo(-b, a);
  } else {
    this.rShiftTo(b, a);
  }

  return a;
}

function lbit(a) {
  if (a == 0) {
    return -1;
  }

  var b = 0;

  if ((a & 65535) == 0) {
    a >>= 16;
    b += 16;
  }

  if ((a & 255) == 0) {
    a >>= 8;
    b += 8;
  }

  if ((a & 15) == 0) {
    a >>= 4;
    b += 4;
  }

  if ((a & 3) == 0) {
    a >>= 2;
    b += 2;
  }

  if ((a & 1) == 0) {
    ++b;
  }

  return b;
}

function bnGetLowestSetBit() {
  for (var a = 0; a < this.t; ++a) {
    if (this[a] != 0) {
      return a * this.DB + lbit(this[a]);
    }
  }

  if (this.s < 0) {
    return this.t * this.DB;
  }

  return -1;
}

function cbit(a) {
  var b = 0;

  while (a != 0) {
    a &= a - 1;
    ++b;
  }

  return b;
}

function bnBitCount() {
  var c = 0,
      a = this.s & this.DM;

  for (var b = 0; b < this.t; ++b) {
    c += cbit(this[b] ^ a);
  }

  return c;
}

function bnTestBit(b) {
  var a = Math.floor(b / this.DB);

  if (a >= this.t) {
    return this.s != 0;
  }

  return (this[a] & 1 << b % this.DB) != 0;
}

function bnpChangeBit(c, b) {
  var a = BigInteger.ONE.shiftLeft(c);
  this.bitwiseTo(a, b, a);
  return a;
}

function bnSetBit(a) {
  return this.changeBit(a, op_or);
}

function bnClearBit(a) {
  return this.changeBit(a, op_andnot);
}

function bnFlipBit(a) {
  return this.changeBit(a, op_xor);
}

function bnpAddTo(d, f) {
  var e = 0,
      g = 0,
      b = Math.min(d.t, this.t);

  while (e < b) {
    g += this[e] + d[e];
    f[e++] = g & this.DM;
    g >>= this.DB;
  }

  if (d.t < this.t) {
    g += d.s;

    while (e < this.t) {
      g += this[e];
      f[e++] = g & this.DM;
      g >>= this.DB;
    }

    g += this.s;
  } else {
    g += this.s;

    while (e < d.t) {
      g += d[e];
      f[e++] = g & this.DM;
      g >>= this.DB;
    }

    g += d.s;
  }

  f.s = g < 0 ? -1 : 0;

  if (g > 0) {
    f[e++] = g;
  } else {
    if (g < -1) {
      f[e++] = this.DV + g;
    }
  }

  f.t = e;
  f.clamp();
}

function bnAdd(b) {
  var c = nbi();
  this.addTo(b, c);
  return c;
}

function bnSubtract(b) {
  var c = nbi();
  this.subTo(b, c);
  return c;
}

function bnMultiply(b) {
  var c = nbi();
  this.multiplyTo(b, c);
  return c;
}

function bnSquare() {
  var a = nbi();
  this.squareTo(a);
  return a;
}

function bnDivide(b) {
  var c = nbi();
  this.divRemTo(b, c, null);
  return c;
}

function bnRemainder(b) {
  var c = nbi();
  this.divRemTo(b, null, c);
  return c;
}

function bnDivideAndRemainder(b) {
  var d = nbi(),
      c = nbi();
  this.divRemTo(b, d, c);
  return new Array(d, c);
}

function bnpDMultiply(a) {
  this[this.t] = this.am(0, a - 1, this, 0, 0, this.t);
  ++this.t;
  this.clamp();
}

function bnpDAddOffset(b, a) {
  if (b == 0) {
    return;
  }

  while (this.t <= a) {
    this[this.t++] = 0;
  }

  this[a] += b;

  while (this[a] >= this.DV) {
    this[a] -= this.DV;

    if (++a >= this.t) {
      this[this.t++] = 0;
    }

    ++this[a];
  }
}

function NullExp() {}

function nNop(a) {
  return a;
}

function nMulTo(a, c, b) {
  a.multiplyTo(c, b);
}

function nSqrTo(a, b) {
  a.squareTo(b);
}

NullExp.prototype.convert = nNop;
NullExp.prototype.revert = nNop;
NullExp.prototype.mulTo = nMulTo;
NullExp.prototype.sqrTo = nSqrTo;

function bnPow(a) {
  return this.exp(a, new NullExp());
}

function bnpMultiplyLowerTo(b, f, e) {
  var d = Math.min(this.t + b.t, f);
  e.s = 0;
  e.t = d;

  while (d > 0) {
    e[--d] = 0;
  }

  var c;

  for (c = e.t - this.t; d < c; ++d) {
    e[d + this.t] = this.am(0, b[d], e, d, 0, this.t);
  }

  for (c = Math.min(b.t, f); d < c; ++d) {
    this.am(0, b[d], e, d, 0, f - d);
  }

  e.clamp();
}

function bnpMultiplyUpperTo(b, e, d) {
  --e;
  var c = d.t = this.t + b.t - e;
  d.s = 0;

  while (--c >= 0) {
    d[c] = 0;
  }

  for (c = Math.max(e - this.t, 0); c < b.t; ++c) {
    d[this.t + c - e] = this.am(e - c, b[c], d, 0, 0, this.t + c - e);
  }

  d.clamp();
  d.drShiftTo(1, d);
}

function Barrett(a) {
  this.r2 = nbi();
  this.q3 = nbi();
  BigInteger.ONE.dlShiftTo(2 * a.t, this.r2);
  this.mu = this.r2.divide(a);
  this.m = a;
}

function barrettConvert(a) {
  if (a.s < 0 || a.t > 2 * this.m.t) {
    return a.mod(this.m);
  } else {
    if (a.compareTo(this.m) < 0) {
      return a;
    } else {
      var b = nbi();
      a.copyTo(b);
      this.reduce(b);
      return b;
    }
  }
}

function barrettRevert(a) {
  return a;
}

function barrettReduce(a) {
  a.drShiftTo(this.m.t - 1, this.r2);

  if (a.t > this.m.t + 1) {
    a.t = this.m.t + 1;
    a.clamp();
  }

  this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);
  this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);

  while (a.compareTo(this.r2) < 0) {
    a.dAddOffset(1, this.m.t + 1);
  }

  a.subTo(this.r2, a);

  while (a.compareTo(this.m) >= 0) {
    a.subTo(this.m, a);
  }
}

function barrettSqrTo(a, b) {
  a.squareTo(b);
  this.reduce(b);
}

function barrettMulTo(a, c, b) {
  a.multiplyTo(c, b);
  this.reduce(b);
}

Barrett.prototype.convert = barrettConvert;
Barrett.prototype.revert = barrettRevert;
Barrett.prototype.reduce = barrettReduce;
Barrett.prototype.mulTo = barrettMulTo;
Barrett.prototype.sqrTo = barrettSqrTo;

function bnModPow(q, f) {
  var o = q.bitLength(),
      h,
      b = nbv(1),
      v;

  if (o <= 0) {
    return b;
  } else {
    if (o < 18) {
      h = 1;
    } else {
      if (o < 48) {
        h = 3;
      } else {
        if (o < 144) {
          h = 4;
        } else {
          if (o < 768) {
            h = 5;
          } else {
            h = 6;
          }
        }
      }
    }
  }

  if (o < 8) {
    v = new Classic(f);
  } else {
    if (f.isEven()) {
      v = new Barrett(f);
    } else {
      v = new Montgomery(f);
    }
  }

  var p = new Array(),
      d = 3,
      s = h - 1,
      a = (1 << h) - 1;
  p[1] = v.convert(this);

  if (h > 1) {
    var A = nbi();
    v.sqrTo(p[1], A);

    while (d <= a) {
      p[d] = nbi();
      v.mulTo(A, p[d - 2], p[d]);
      d += 2;
    }
  }

  var l = q.t - 1,
      x,
      u = true,
      c = nbi(),
      y;
  o = nbits(q[l]) - 1;

  while (l >= 0) {
    if (o >= s) {
      x = q[l] >> o - s & a;
    } else {
      x = (q[l] & (1 << o + 1) - 1) << s - o;

      if (l > 0) {
        x |= q[l - 1] >> this.DB + o - s;
      }
    }

    d = h;

    while ((x & 1) == 0) {
      x >>= 1;
      --d;
    }

    if ((o -= d) < 0) {
      o += this.DB;
      --l;
    }

    if (u) {
      p[x].copyTo(b);
      u = false;
    } else {
      while (d > 1) {
        v.sqrTo(b, c);
        v.sqrTo(c, b);
        d -= 2;
      }

      if (d > 0) {
        v.sqrTo(b, c);
      } else {
        y = b;
        b = c;
        c = y;
      }

      v.mulTo(c, p[x], b);
    }

    while (l >= 0 && (q[l] & 1 << o) == 0) {
      v.sqrTo(b, c);
      y = b;
      b = c;
      c = y;

      if (--o < 0) {
        o = this.DB - 1;
        --l;
      }
    }
  }

  return v.revert(b);
}

function bnGCD(c) {
  var b = this.s < 0 ? this.negate() : this.clone();
  var h = c.s < 0 ? c.negate() : c.clone();

  if (b.compareTo(h) < 0) {
    var e = b;
    b = h;
    h = e;
  }

  var d = b.getLowestSetBit(),
      f = h.getLowestSetBit();

  if (f < 0) {
    return b;
  }

  if (d < f) {
    f = d;
  }

  if (f > 0) {
    b.rShiftTo(f, b);
    h.rShiftTo(f, h);
  }

  while (b.signum() > 0) {
    if ((d = b.getLowestSetBit()) > 0) {
      b.rShiftTo(d, b);
    }

    if ((d = h.getLowestSetBit()) > 0) {
      h.rShiftTo(d, h);
    }

    if (b.compareTo(h) >= 0) {
      b.subTo(h, b);
      b.rShiftTo(1, b);
    } else {
      h.subTo(b, h);
      h.rShiftTo(1, h);
    }
  }

  if (f > 0) {
    h.lShiftTo(f, h);
  }

  return h;
}

function bnpModInt(e) {
  if (e <= 0) {
    return 0;
  }

  var c = this.DV % e,
      b = this.s < 0 ? e - 1 : 0;

  if (this.t > 0) {
    if (c == 0) {
      b = this[0] % e;
    } else {
      for (var a = this.t - 1; a >= 0; --a) {
        b = (c * b + this[a]) % e;
      }
    }
  }

  return b;
}

function bnModInverse(f) {
  var j = f.isEven();

  if (this.isEven() && j || f.signum() == 0) {
    return BigInteger.ZERO;
  }

  var i = f.clone(),
      h = this.clone();
  var g = nbv(1),
      e = nbv(0),
      l = nbv(0),
      k = nbv(1);

  while (i.signum() != 0) {
    while (i.isEven()) {
      i.rShiftTo(1, i);

      if (j) {
        if (!g.isEven() || !e.isEven()) {
          g.addTo(this, g);
          e.subTo(f, e);
        }

        g.rShiftTo(1, g);
      } else {
        if (!e.isEven()) {
          e.subTo(f, e);
        }
      }

      e.rShiftTo(1, e);
    }

    while (h.isEven()) {
      h.rShiftTo(1, h);

      if (j) {
        if (!l.isEven() || !k.isEven()) {
          l.addTo(this, l);
          k.subTo(f, k);
        }

        l.rShiftTo(1, l);
      } else {
        if (!k.isEven()) {
          k.subTo(f, k);
        }
      }

      k.rShiftTo(1, k);
    }

    if (i.compareTo(h) >= 0) {
      i.subTo(h, i);

      if (j) {
        g.subTo(l, g);
      }

      e.subTo(k, e);
    } else {
      h.subTo(i, h);

      if (j) {
        l.subTo(g, l);
      }

      k.subTo(e, k);
    }
  }

  if (h.compareTo(BigInteger.ONE) != 0) {
    return BigInteger.ZERO;
  }

  if (k.compareTo(f) >= 0) {
    return k.subtract(f);
  }

  if (k.signum() < 0) {
    k.addTo(f, k);
  } else {
    return k;
  }

  if (k.signum() < 0) {
    return k.add(f);
  } else {
    return k;
  }
}

var lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];
var lplim = (1 << 26) / lowprimes[lowprimes.length - 1];

function bnIsProbablePrime(e) {
  var d,
      b = this.abs();

  if (b.t == 1 && b[0] <= lowprimes[lowprimes.length - 1]) {
    for (d = 0; d < lowprimes.length; ++d) {
      if (b[0] == lowprimes[d]) {
        return true;
      }
    }

    return false;
  }

  if (b.isEven()) {
    return false;
  }

  d = 1;

  while (d < lowprimes.length) {
    var a = lowprimes[d],
        c = d + 1;

    while (c < lowprimes.length && a < lplim) {
      a *= lowprimes[c++];
    }

    a = b.modInt(a);

    while (d < c) {
      if (a % lowprimes[d++] == 0) {
        return false;
      }
    }
  }

  return b.millerRabin(e);
}

function bnpMillerRabin(f) {
  var g = this.subtract(BigInteger.ONE);
  var c = g.getLowestSetBit();

  if (c <= 0) {
    return false;
  }

  var h = g.shiftRight(c);
  f = f + 1 >> 1;

  if (f > lowprimes.length) {
    f = lowprimes.length;
  }

  var b = nbi();

  for (var e = 0; e < f; ++e) {
    b.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);
    var l = b.modPow(h, this);

    if (l.compareTo(BigInteger.ONE) != 0 && l.compareTo(g) != 0) {
      var d = 1;

      while (d++ < c && l.compareTo(g) != 0) {
        l = l.modPowInt(2, this);

        if (l.compareTo(BigInteger.ONE) == 0) {
          return false;
        }
      }

      if (l.compareTo(g) != 0) {
        return false;
      }
    }
  }

  return true;
}

BigInteger.prototype.chunkSize = bnpChunkSize;
BigInteger.prototype.toRadix = bnpToRadix;
BigInteger.prototype.fromRadix = bnpFromRadix;
BigInteger.prototype.fromNumber = bnpFromNumber;
BigInteger.prototype.bitwiseTo = bnpBitwiseTo;
BigInteger.prototype.changeBit = bnpChangeBit;
BigInteger.prototype.addTo = bnpAddTo;
BigInteger.prototype.dMultiply = bnpDMultiply;
BigInteger.prototype.dAddOffset = bnpDAddOffset;
BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;
BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;
BigInteger.prototype.modInt = bnpModInt;
BigInteger.prototype.millerRabin = bnpMillerRabin;
BigInteger.prototype.clone = bnClone;
BigInteger.prototype.intValue = bnIntValue;
BigInteger.prototype.byteValue = bnByteValue;
BigInteger.prototype.shortValue = bnShortValue;
BigInteger.prototype.signum = bnSigNum;
BigInteger.prototype.toByteArray = bnToByteArray;
BigInteger.prototype.equals = bnEquals;
BigInteger.prototype.min = bnMin;
BigInteger.prototype.max = bnMax;
BigInteger.prototype.and = bnAnd;
BigInteger.prototype.or = bnOr;
BigInteger.prototype.xor = bnXor;
BigInteger.prototype.andNot = bnAndNot;
BigInteger.prototype.not = bnNot;
BigInteger.prototype.shiftLeft = bnShiftLeft;
BigInteger.prototype.shiftRight = bnShiftRight;
BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;
BigInteger.prototype.bitCount = bnBitCount;
BigInteger.prototype.testBit = bnTestBit;
BigInteger.prototype.setBit = bnSetBit;
BigInteger.prototype.clearBit = bnClearBit;
BigInteger.prototype.flipBit = bnFlipBit;
BigInteger.prototype.add = bnAdd;
BigInteger.prototype.subtract = bnSubtract;
BigInteger.prototype.multiply = bnMultiply;
BigInteger.prototype.divide = bnDivide;
BigInteger.prototype.remainder = bnRemainder;
BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;
BigInteger.prototype.modPow = bnModPow;
BigInteger.prototype.modInverse = bnModInverse;
BigInteger.prototype.pow = bnPow;
BigInteger.prototype.gcd = bnGCD;
BigInteger.prototype.isProbablePrime = bnIsProbablePrime;
BigInteger.prototype.square = bnSquare;
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */

function Arcfour() {
  this.i = 0;
  this.j = 0;
  this.S = new Array();
}

function ARC4init(d) {
  var c, a, b;

  for (c = 0; c < 256; ++c) {
    this.S[c] = c;
  }

  a = 0;

  for (c = 0; c < 256; ++c) {
    a = a + this.S[c] + d[c % d.length] & 255;
    b = this.S[c];
    this.S[c] = this.S[a];
    this.S[a] = b;
  }

  this.i = 0;
  this.j = 0;
}

function ARC4next() {
  var a;
  this.i = this.i + 1 & 255;
  this.j = this.j + this.S[this.i] & 255;
  a = this.S[this.i];
  this.S[this.i] = this.S[this.j];
  this.S[this.j] = a;
  return this.S[a + this.S[this.i] & 255];
}

Arcfour.prototype.init = ARC4init;
Arcfour.prototype.next = ARC4next;

function prng_newstate() {
  return new Arcfour();
}

var rng_psize = 256;
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */

var rng_state;
var rng_pool;
var rng_pptr;

function rng_seed_int(a) {
  rng_pool[rng_pptr++] ^= a & 255;
  rng_pool[rng_pptr++] ^= a >> 8 & 255;
  rng_pool[rng_pptr++] ^= a >> 16 & 255;
  rng_pool[rng_pptr++] ^= a >> 24 & 255;

  if (rng_pptr >= rng_psize) {
    rng_pptr -= rng_psize;
  }
}

function rng_seed_time() {
  rng_seed_int(new Date().getTime());
}

if (rng_pool == null) {
  rng_pool = new Array();
  rng_pptr = 0;
  var t;

  if (window !== undefined && (window.crypto !== undefined || window.msCrypto !== undefined)) {
    var crypto = window.crypto || window.msCrypto;

    if (crypto.getRandomValues) {
      var ua = new Uint8Array(32);
      crypto.getRandomValues(ua);

      for (t = 0; t < 32; ++t) {
        rng_pool[rng_pptr++] = ua[t];
      }
    } else {
      if (navigator.appName == "Netscape" && navigator.appVersion < "5") {
        var z = window.crypto.random(32);

        for (t = 0; t < z.length; ++t) {
          rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;
        }
      }
    }
  }

  while (rng_pptr < rng_psize) {
    t = Math.floor(65536 * Math.random());
    rng_pool[rng_pptr++] = t >>> 8;
    rng_pool[rng_pptr++] = t & 255;
  }

  rng_pptr = 0;
  rng_seed_time();
}

function rng_get_byte() {
  if (rng_state == null) {
    rng_seed_time();
    rng_state = prng_newstate();
    rng_state.init(rng_pool);

    for (rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr) {
      rng_pool[rng_pptr] = 0;
    }

    rng_pptr = 0;
  }

  return rng_state.next();
}

function rng_get_bytes(b) {
  var a;

  for (a = 0; a < b.length; ++a) {
    b[a] = rng_get_byte();
  }
}

function SecureRandom() {}

SecureRandom.prototype.nextBytes = rng_get_bytes;
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */

function parseBigInt(b, a) {
  return new BigInteger(b, a);
}

function linebrk(c, d) {
  var a = "";
  var b = 0;

  while (b + d < c.length) {
    a += c.substring(b, b + d) + "\n";
    b += d;
  }

  return a + c.substring(b, c.length);
}

function byte2Hex(a) {
  if (a < 16) {
    return "0" + a.toString(16);
  } else {
    return a.toString(16);
  }
}

function pkcs1pad2(e, h) {
  if (h < e.length + 11) {
    throw "Message too long for RSA";
    return null;
  }

  var g = new Array();
  var d = e.length - 1;

  while (d >= 0 && h > 0) {
    var f = e.charCodeAt(d--);

    if (f < 128) {
      g[--h] = f;
    } else {
      if (f > 127 && f < 2048) {
        g[--h] = f & 63 | 128;
        g[--h] = f >> 6 | 192;
      } else {
        g[--h] = f & 63 | 128;
        g[--h] = f >> 6 & 63 | 128;
        g[--h] = f >> 12 | 224;
      }
    }
  }

  g[--h] = 0;
  var b = new SecureRandom();
  var a = new Array();

  while (h > 2) {
    a[0] = 0;

    while (a[0] == 0) {
      b.nextBytes(a);
    }

    g[--h] = a[0];
  }

  g[--h] = 2;
  g[--h] = 0;
  return new BigInteger(g);
}

function oaep_mgf1_arr(c, a, e) {
  var b = "",
      d = 0;

  while (b.length < a) {
    b += e(String.fromCharCode.apply(String, c.concat([(d & 4278190080) >> 24, (d & 16711680) >> 16, (d & 65280) >> 8, d & 255])));
    d += 1;
  }

  return b;
}

function oaep_pad(q, a, f, l) {
  var c = KJUR.crypto.MessageDigest;
  var o = KJUR.crypto.Util;
  var b = null;

  if (!f) {
    f = "sha1";
  }

  if (typeof f === "string") {
    b = c.getCanonicalAlgName(f);
    l = c.getHashLength(b);

    f = function f(i) {
      return hextorstr(o.hashHex(rstrtohex(i), b));
    };
  }

  if (q.length + 2 * l + 2 > a) {
    throw "Message too long for RSA";
  }

  var k = "",
      e;

  for (e = 0; e < a - q.length - 2 * l - 2; e += 1) {
    k += "\x00";
  }

  var h = f("") + k + "\x01" + q;
  var g = new Array(l);
  new SecureRandom().nextBytes(g);
  var j = oaep_mgf1_arr(g, h.length, f);
  var p = [];

  for (e = 0; e < h.length; e += 1) {
    p[e] = h.charCodeAt(e) ^ j.charCodeAt(e);
  }

  var m = oaep_mgf1_arr(p, g.length, f);
  var d = [0];

  for (e = 0; e < g.length; e += 1) {
    d[e + 1] = g[e] ^ m.charCodeAt(e);
  }

  return new BigInteger(d.concat(p));
}

function RSAKey() {
  this.n = null;
  this.e = 0;
  this.d = null;
  this.p = null;
  this.q = null;
  this.dmp1 = null;
  this.dmq1 = null;
  this.coeff = null;
}

function RSASetPublic(b, a) {
  this.isPublic = true;
  this.isPrivate = false;

  if (typeof b !== "string") {
    this.n = b;
    this.e = a;
  } else {
    if (b != null && a != null && b.length > 0 && a.length > 0) {
      this.n = parseBigInt(b, 16);
      this.e = parseInt(a, 16);
    } else {
      throw "Invalid RSA public key";
    }
  }
}

function RSADoPublic(a) {
  return a.modPowInt(this.e, this.n);
}

function RSAEncrypt(d) {
  var a = pkcs1pad2(d, this.n.bitLength() + 7 >> 3);

  if (a == null) {
    return null;
  }

  var e = this.doPublic(a);

  if (e == null) {
    return null;
  }

  var b = e.toString(16);

  if ((b.length & 1) == 0) {
    return b;
  } else {
    return "0" + b;
  }
}

function RSAEncryptOAEP(f, e, b) {
  var a = oaep_pad(f, this.n.bitLength() + 7 >> 3, e, b);

  if (a == null) {
    return null;
  }

  var g = this.doPublic(a);

  if (g == null) {
    return null;
  }

  var d = g.toString(16);

  if ((d.length & 1) == 0) {
    return d;
  } else {
    return "0" + d;
  }
}

RSAKey.prototype.doPublic = RSADoPublic;
RSAKey.prototype.setPublic = RSASetPublic;
RSAKey.prototype.encrypt = RSAEncrypt;
RSAKey.prototype.encryptOAEP = RSAEncryptOAEP;
RSAKey.prototype.type = "RSA";
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */

function ECFieldElementFp(b, a) {
  this.x = a;
  this.q = b;
}

function feFpEquals(a) {
  if (a == this) {
    return true;
  }

  return this.q.equals(a.q) && this.x.equals(a.x);
}

function feFpToBigInteger() {
  return this.x;
}

function feFpNegate() {
  return new ECFieldElementFp(this.q, this.x.negate().mod(this.q));
}

function feFpAdd(a) {
  return new ECFieldElementFp(this.q, this.x.add(a.toBigInteger()).mod(this.q));
}

function feFpSubtract(a) {
  return new ECFieldElementFp(this.q, this.x.subtract(a.toBigInteger()).mod(this.q));
}

function feFpMultiply(a) {
  return new ECFieldElementFp(this.q, this.x.multiply(a.toBigInteger()).mod(this.q));
}

function feFpSquare() {
  return new ECFieldElementFp(this.q, this.x.square().mod(this.q));
}

function feFpDivide(a) {
  return new ECFieldElementFp(this.q, this.x.multiply(a.toBigInteger().modInverse(this.q)).mod(this.q));
}

ECFieldElementFp.prototype.equals = feFpEquals;
ECFieldElementFp.prototype.toBigInteger = feFpToBigInteger;
ECFieldElementFp.prototype.negate = feFpNegate;
ECFieldElementFp.prototype.add = feFpAdd;
ECFieldElementFp.prototype.subtract = feFpSubtract;
ECFieldElementFp.prototype.multiply = feFpMultiply;
ECFieldElementFp.prototype.square = feFpSquare;
ECFieldElementFp.prototype.divide = feFpDivide;

function ECPointFp(c, a, d, b) {
  this.curve = c;
  this.x = a;
  this.y = d;

  if (b == null) {
    this.z = BigInteger.ONE;
  } else {
    this.z = b;
  }

  this.zinv = null;
}

function pointFpGetX() {
  if (this.zinv == null) {
    this.zinv = this.z.modInverse(this.curve.q);
  }

  return this.curve.fromBigInteger(this.x.toBigInteger().multiply(this.zinv).mod(this.curve.q));
}

function pointFpGetY() {
  if (this.zinv == null) {
    this.zinv = this.z.modInverse(this.curve.q);
  }

  return this.curve.fromBigInteger(this.y.toBigInteger().multiply(this.zinv).mod(this.curve.q));
}

function pointFpEquals(a) {
  if (a == this) {
    return true;
  }

  if (this.isInfinity()) {
    return a.isInfinity();
  }

  if (a.isInfinity()) {
    return this.isInfinity();
  }

  var c, b;
  c = a.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(a.z)).mod(this.curve.q);

  if (!c.equals(BigInteger.ZERO)) {
    return false;
  }

  b = a.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(a.z)).mod(this.curve.q);
  return b.equals(BigInteger.ZERO);
}

function pointFpIsInfinity() {
  if (this.x == null && this.y == null) {
    return true;
  }

  return this.z.equals(BigInteger.ZERO) && !this.y.toBigInteger().equals(BigInteger.ZERO);
}

function pointFpNegate() {
  return new ECPointFp(this.curve, this.x, this.y.negate(), this.z);
}

function pointFpAdd(l) {
  if (this.isInfinity()) {
    return l;
  }

  if (l.isInfinity()) {
    return this;
  }

  var p = l.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(l.z)).mod(this.curve.q);
  var o = l.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(l.z)).mod(this.curve.q);

  if (BigInteger.ZERO.equals(o)) {
    if (BigInteger.ZERO.equals(p)) {
      return this.twice();
    }

    return this.curve.getInfinity();
  }

  var j = new BigInteger("3");
  var e = this.x.toBigInteger();
  var n = this.y.toBigInteger();
  var c = l.x.toBigInteger();
  var k = l.y.toBigInteger();
  var m = o.square();
  var i = m.multiply(o);
  var d = e.multiply(m);
  var g = p.square().multiply(this.z);
  var a = g.subtract(d.shiftLeft(1)).multiply(l.z).subtract(i).multiply(o).mod(this.curve.q);
  var h = d.multiply(j).multiply(p).subtract(n.multiply(i)).subtract(g.multiply(p)).multiply(l.z).add(p.multiply(i)).mod(this.curve.q);
  var f = i.multiply(this.z).multiply(l.z).mod(this.curve.q);
  return new ECPointFp(this.curve, this.curve.fromBigInteger(a), this.curve.fromBigInteger(h), f);
}

function pointFpTwice() {
  if (this.isInfinity()) {
    return this;
  }

  if (this.y.toBigInteger().signum() == 0) {
    return this.curve.getInfinity();
  }

  var g = new BigInteger("3");
  var c = this.x.toBigInteger();
  var h = this.y.toBigInteger();
  var e = h.multiply(this.z);
  var j = e.multiply(h).mod(this.curve.q);
  var i = this.curve.a.toBigInteger();
  var k = c.square().multiply(g);

  if (!BigInteger.ZERO.equals(i)) {
    k = k.add(this.z.square().multiply(i));
  }

  k = k.mod(this.curve.q);
  var b = k.square().subtract(c.shiftLeft(3).multiply(j)).shiftLeft(1).multiply(e).mod(this.curve.q);
  var f = k.multiply(g).multiply(c).subtract(j.shiftLeft(1)).shiftLeft(2).multiply(j).subtract(k.square().multiply(k)).mod(this.curve.q);
  var d = e.square().multiply(e).shiftLeft(3).mod(this.curve.q);
  return new ECPointFp(this.curve, this.curve.fromBigInteger(b), this.curve.fromBigInteger(f), d);
}

function pointFpMultiply(d) {
  if (this.isInfinity()) {
    return this;
  }

  if (d.signum() == 0) {
    return this.curve.getInfinity();
  }

  var m = d;
  var l = m.multiply(new BigInteger("3"));
  var b = this.negate();
  var j = this;
  var q = this.curve.q.subtract(d);
  var o = q.multiply(new BigInteger("3"));
  var c = new ECPointFp(this.curve, this.x, this.y);
  var a = c.negate();
  var g;

  for (g = l.bitLength() - 2; g > 0; --g) {
    j = j.twice();
    var n = l.testBit(g);
    var f = m.testBit(g);

    if (n != f) {
      j = j.add(n ? this : b);
    }
  }

  for (g = o.bitLength() - 2; g > 0; --g) {
    c = c.twice();
    var p = o.testBit(g);
    var r = q.testBit(g);

    if (p != r) {
      c = c.add(p ? c : a);
    }
  }

  return j;
}

function pointFpMultiplyTwo(c, a, b) {
  var d;

  if (c.bitLength() > b.bitLength()) {
    d = c.bitLength() - 1;
  } else {
    d = b.bitLength() - 1;
  }

  var f = this.curve.getInfinity();
  var e = this.add(a);

  while (d >= 0) {
    f = f.twice();

    if (c.testBit(d)) {
      if (b.testBit(d)) {
        f = f.add(e);
      } else {
        f = f.add(this);
      }
    } else {
      if (b.testBit(d)) {
        f = f.add(a);
      }
    }

    --d;
  }

  return f;
}

ECPointFp.prototype.getX = pointFpGetX;
ECPointFp.prototype.getY = pointFpGetY;
ECPointFp.prototype.equals = pointFpEquals;
ECPointFp.prototype.isInfinity = pointFpIsInfinity;
ECPointFp.prototype.negate = pointFpNegate;
ECPointFp.prototype.add = pointFpAdd;
ECPointFp.prototype.twice = pointFpTwice;
ECPointFp.prototype.multiply = pointFpMultiply;
ECPointFp.prototype.multiplyTwo = pointFpMultiplyTwo;

function ECCurveFp(e, d, c) {
  this.q = e;
  this.a = this.fromBigInteger(d);
  this.b = this.fromBigInteger(c);
  this.infinity = new ECPointFp(this, null, null);
}

function curveFpGetQ() {
  return this.q;
}

function curveFpGetA() {
  return this.a;
}

function curveFpGetB() {
  return this.b;
}

function curveFpEquals(a) {
  if (a == this) {
    return true;
  }

  return this.q.equals(a.q) && this.a.equals(a.a) && this.b.equals(a.b);
}

function curveFpGetInfinity() {
  return this.infinity;
}

function curveFpFromBigInteger(a) {
  return new ECFieldElementFp(this.q, a);
}

function curveFpDecodePointHex(d) {
  switch (parseInt(d.substr(0, 2), 16)) {
    case 0:
      return this.infinity;

    case 2:
    case 3:
      return null;

    case 4:
    case 6:
    case 7:
      var a = (d.length - 2) / 2;
      var c = d.substr(2, a);
      var b = d.substr(a + 2, a);
      return new ECPointFp(this, this.fromBigInteger(new BigInteger(c, 16)), this.fromBigInteger(new BigInteger(b, 16)));

    default:
      return null;
  }
}

ECCurveFp.prototype.getQ = curveFpGetQ;
ECCurveFp.prototype.getA = curveFpGetA;
ECCurveFp.prototype.getB = curveFpGetB;
ECCurveFp.prototype.equals = curveFpEquals;
ECCurveFp.prototype.getInfinity = curveFpGetInfinity;
ECCurveFp.prototype.fromBigInteger = curveFpFromBigInteger;
ECCurveFp.prototype.decodePointHex = curveFpDecodePointHex;
/*! (c) Stefan Thomas | https://github.com/bitcoinjs/bitcoinjs-lib
 */

ECFieldElementFp.prototype.getByteLength = function () {
  return Math.floor((this.toBigInteger().bitLength() + 7) / 8);
};

ECPointFp.prototype.getEncoded = function (c) {
  var d = function d(h, f) {
    var g = h.toByteArrayUnsigned();

    if (f < g.length) {
      g = g.slice(g.length - f);
    } else {
      while (f > g.length) {
        g.unshift(0);
      }
    }

    return g;
  };

  var a = this.getX().toBigInteger();
  var e = this.getY().toBigInteger();
  var b = d(a, 32);

  if (c) {
    if (e.isEven()) {
      b.unshift(2);
    } else {
      b.unshift(3);
    }
  } else {
    b.unshift(4);
    b = b.concat(d(e, 32));
  }

  return b;
};

ECPointFp.decodeFrom = function (g, c) {
  var f = c[0];
  var e = c.length - 1;
  var d = c.slice(1, 1 + e / 2);
  var b = c.slice(1 + e / 2, 1 + e);
  d.unshift(0);
  b.unshift(0);
  var a = new BigInteger(d);
  var h = new BigInteger(b);
  return new ECPointFp(g, g.fromBigInteger(a), g.fromBigInteger(h));
};

ECPointFp.decodeFromHex = function (g, c) {
  var f = c.substr(0, 2);
  var e = c.length - 2;
  var d = c.substr(2, e / 2);
  var b = c.substr(2 + e / 2, e / 2);
  var a = new BigInteger(d, 16);
  var h = new BigInteger(b, 16);
  return new ECPointFp(g, g.fromBigInteger(a), g.fromBigInteger(h));
};

ECPointFp.prototype.add2D = function (c) {
  if (this.isInfinity()) {
    return c;
  }

  if (c.isInfinity()) {
    return this;
  }

  if (this.x.equals(c.x)) {
    if (this.y.equals(c.y)) {
      return this.twice();
    }

    return this.curve.getInfinity();
  }

  var g = c.x.subtract(this.x);
  var e = c.y.subtract(this.y);
  var a = e.divide(g);
  var d = a.square().subtract(this.x).subtract(c.x);
  var f = a.multiply(this.x.subtract(d)).subtract(this.y);
  return new ECPointFp(this.curve, d, f);
};

ECPointFp.prototype.twice2D = function () {
  if (this.isInfinity()) {
    return this;
  }

  if (this.y.toBigInteger().signum() == 0) {
    return this.curve.getInfinity();
  }

  var b = this.curve.fromBigInteger(BigInteger.valueOf(2));
  var e = this.curve.fromBigInteger(BigInteger.valueOf(3));
  var a = this.x.square().multiply(e).add(this.curve.a).divide(this.y.multiply(b));
  var c = a.square().subtract(this.x.multiply(b));
  var d = a.multiply(this.x.subtract(c)).subtract(this.y);
  return new ECPointFp(this.curve, c, d);
};

ECPointFp.prototype.multiply2D = function (b) {
  if (this.isInfinity()) {
    return this;
  }

  if (b.signum() == 0) {
    return this.curve.getInfinity();
  }

  var g = b;
  var f = g.multiply(new BigInteger("3"));
  var l = this.negate();
  var d = this;
  var c;

  for (c = f.bitLength() - 2; c > 0; --c) {
    d = d.twice();
    var a = f.testBit(c);
    var j = g.testBit(c);

    if (a != j) {
      d = d.add2D(a ? this : l);
    }
  }

  return d;
};

ECPointFp.prototype.isOnCurve = function () {
  var d = this.getX().toBigInteger();
  var i = this.getY().toBigInteger();
  var f = this.curve.getA().toBigInteger();
  var c = this.curve.getB().toBigInteger();
  var h = this.curve.getQ();
  var e = i.multiply(i).mod(h);
  var g = d.multiply(d).multiply(d).add(f.multiply(d)).add(c).mod(h);
  return e.equals(g);
};

ECPointFp.prototype.toString = function () {
  return "(" + this.getX().toBigInteger().toString() + "," + this.getY().toBigInteger().toString() + ")";
};

ECPointFp.prototype.validate = function () {
  var c = this.curve.getQ();

  if (this.isInfinity()) {
    throw new Error("Point is at infinity.");
  }

  var a = this.getX().toBigInteger();
  var b = this.getY().toBigInteger();

  if (a.compareTo(BigInteger.ONE) < 0 || a.compareTo(c.subtract(BigInteger.ONE)) > 0) {
    throw new Error("x coordinate out of bounds");
  }

  if (b.compareTo(BigInteger.ONE) < 0 || b.compareTo(c.subtract(BigInteger.ONE)) > 0) {
    throw new Error("y coordinate out of bounds");
  }

  if (!this.isOnCurve()) {
    throw new Error("Point is not on the curve.");
  }

  if (this.multiply(c).isInfinity()) {
    throw new Error("Point is not a scalar multiple of G.");
  }

  return true;
};
/*! Mike Samuel (c) 2009 | code.google.com/p/json-sans-eval
 */


var jsonParse = function () {
  var e = "(?:-?\\b(?:0|[1-9][0-9]*)(?:\\.[0-9]+)?(?:[eE][+-]?[0-9]+)?\\b)";
  var j = '(?:[^\\0-\\x08\\x0a-\\x1f"\\\\]|\\\\(?:["/\\\\bfnrt]|u[0-9A-Fa-f]{4}))';
  var i = '(?:"' + j + '*")';
  var d = new RegExp("(?:false|true|null|[\\{\\}\\[\\]]|" + e + "|" + i + ")", "g");
  var k = new RegExp("\\\\(?:([^u])|u(.{4}))", "g");
  var g = {
    '"': '"',
    "/": "/",
    "\\": "\\",
    b: "\b",
    f: "\f",
    n: "\n",
    r: "\r",
    t: "\t"
  };

  function h(l, m, n) {
    return m ? g[m] : String.fromCharCode(parseInt(n, 16));
  }

  var c = new String("");
  var a = "\\";
  var f = {
    "{": Object,
    "[": Array
  };
  var b = Object.hasOwnProperty;
  return function (u, q) {
    var p = u.match(d);
    var x;
    var v = p[0];
    var l = false;

    if ("{" === v) {
      x = {};
    } else {
      if ("[" === v) {
        x = [];
      } else {
        x = [];
        l = true;
      }
    }

    var t;
    var r = [x];

    for (var o = 1 - l, m = p.length; o < m; ++o) {
      v = p[o];
      var w;

      switch (v.charCodeAt(0)) {
        default:
          w = r[0];
          w[t || w.length] = +v;
          t = void 0;
          break;

        case 34:
          v = v.substring(1, v.length - 1);

          if (v.indexOf(a) !== -1) {
            v = v.replace(k, h);
          }

          w = r[0];

          if (!t) {
            if (w instanceof Array) {
              t = w.length;
            } else {
              t = v || c;
              break;
            }
          }

          w[t] = v;
          t = void 0;
          break;

        case 91:
          w = r[0];
          r.unshift(w[t || w.length] = []);
          t = void 0;
          break;

        case 93:
          r.shift();
          break;

        case 102:
          w = r[0];
          w[t || w.length] = false;
          t = void 0;
          break;

        case 110:
          w = r[0];
          w[t || w.length] = null;
          t = void 0;
          break;

        case 116:
          w = r[0];
          w[t || w.length] = true;
          t = void 0;
          break;

        case 123:
          w = r[0];
          r.unshift(w[t || w.length] = {});
          t = void 0;
          break;

        case 125:
          r.shift();
          break;
      }
    }

    if (l) {
      if (r.length !== 1) {
        throw new Error();
      }

      x = x[0];
    } else {
      if (r.length) {
        throw new Error();
      }
    }

    if (q) {
      var s = function s(C, B) {
        var D = C[B];

        if (D && _typeof(D) === "object") {
          var n = null;

          for (var z in D) {
            if (b.call(D, z) && D !== C) {
              var y = s(D, z);

              if (y !== void 0) {
                D[z] = y;
              } else {
                if (!n) {
                  n = [];
                }

                n.push(z);
              }
            }
          }

          if (n) {
            for (var A = n.length; --A >= 0;) {
              delete D[n[A]];
            }
          }
        }

        return q.call(C, B, D);
      };

      x = s({
        "": x
      }, "");
    }

    return x;
  };
}();

if (typeof KJUR == "undefined" || !KJUR) {
  KJUR = {};
}

if (typeof KJUR.asn1 == "undefined" || !KJUR.asn1) {
  KJUR.asn1 = {};
}

KJUR.asn1.ASN1Util = new function () {
  this.integerToByteHex = function (a) {
    var b = a.toString(16);

    if (b.length % 2 == 1) {
      b = "0" + b;
    }

    return b;
  };

  this.bigIntToMinTwosComplementsHex = function (j) {
    var f = j.toString(16);

    if (f.substr(0, 1) != "-") {
      if (f.length % 2 == 1) {
        f = "0" + f;
      } else {
        if (!f.match(/^[0-7]/)) {
          f = "00" + f;
        }
      }
    } else {
      var a = f.substr(1);
      var e = a.length;

      if (e % 2 == 1) {
        e += 1;
      } else {
        if (!f.match(/^[0-7]/)) {
          e += 2;
        }
      }

      var g = "";

      for (var d = 0; d < e; d++) {
        g += "f";
      }

      var c = new BigInteger(g, 16);
      var b = c.xor(j).add(BigInteger.ONE);
      f = b.toString(16).replace(/^-/, "");
    }

    return f;
  };

  this.getPEMStringFromHex = function (a, b) {
    return hextopem(a, b);
  };

  this.newObject = function (k) {
    var F = KJUR,
        o = F.asn1,
        v = o.ASN1Object,
        B = o.DERBoolean,
        e = o.DERInteger,
        t = o.DERBitString,
        h = o.DEROctetString,
        x = o.DERNull,
        y = o.DERObjectIdentifier,
        m = o.DEREnumerated,
        g = o.DERUTF8String,
        f = o.DERNumericString,
        A = o.DERPrintableString,
        w = o.DERTeletexString,
        q = o.DERIA5String,
        E = o.DERUTCTime,
        j = o.DERGeneralizedTime,
        b = o.DERVisibleString,
        l = o.DERBMPString,
        n = o.DERSequence,
        c = o.DERSet,
        s = o.DERTaggedObject,
        p = o.ASN1Util.newObject;

    if (k instanceof o.ASN1Object) {
      return k;
    }

    var u = Object.keys(k);

    if (u.length != 1) {
      throw new Error("key of param shall be only one.");
    }

    var H = u[0];

    if (":asn1:bool:int:bitstr:octstr:null:oid:enum:utf8str:numstr:prnstr:telstr:ia5str:utctime:gentime:visstr:bmpstr:seq:set:tag:".indexOf(":" + H + ":") == -1) {
      throw new Error("undefined key: " + H);
    }

    if (H == "bool") {
      return new B(k[H]);
    }

    if (H == "int") {
      return new e(k[H]);
    }

    if (H == "bitstr") {
      return new t(k[H]);
    }

    if (H == "octstr") {
      return new h(k[H]);
    }

    if (H == "null") {
      return new x(k[H]);
    }

    if (H == "oid") {
      return new y(k[H]);
    }

    if (H == "enum") {
      return new m(k[H]);
    }

    if (H == "utf8str") {
      return new g(k[H]);
    }

    if (H == "numstr") {
      return new f(k[H]);
    }

    if (H == "prnstr") {
      return new A(k[H]);
    }

    if (H == "telstr") {
      return new w(k[H]);
    }

    if (H == "ia5str") {
      return new q(k[H]);
    }

    if (H == "utctime") {
      return new E(k[H]);
    }

    if (H == "gentime") {
      return new j(k[H]);
    }

    if (H == "visstr") {
      return new b(k[H]);
    }

    if (H == "bmpstr") {
      return new l(k[H]);
    }

    if (H == "asn1") {
      return new v(k[H]);
    }

    if (H == "seq") {
      var d = k[H];
      var G = [];

      for (var z = 0; z < d.length; z++) {
        var D = p(d[z]);
        G.push(D);
      }

      return new n({
        array: G
      });
    }

    if (H == "set") {
      var d = k[H];
      var G = [];

      for (var z = 0; z < d.length; z++) {
        var D = p(d[z]);
        G.push(D);
      }

      return new c({
        array: G
      });
    }

    if (H == "tag") {
      var C = k[H];

      if (Object.prototype.toString.call(C) === "[object Array]" && C.length == 3) {
        var r = p(C[2]);
        return new s({
          tag: C[0],
          explicit: C[1],
          obj: r
        });
      } else {
        return new s(C);
      }
    }
  };

  this.jsonToASN1HEX = function (b) {
    var a = this.newObject(b);
    return a.getEncodedHex();
  };
}();

KJUR.asn1.ASN1Util.oidHexToInt = function (a) {
  var j = "";
  var k = parseInt(a.substr(0, 2), 16);
  var d = Math.floor(k / 40);
  var c = k % 40;
  var j = d + "." + c;
  var e = "";

  for (var f = 2; f < a.length; f += 2) {
    var g = parseInt(a.substr(f, 2), 16);
    var h = ("00000000" + g.toString(2)).slice(-8);
    e = e + h.substr(1, 7);

    if (h.substr(0, 1) == "0") {
      var b = new BigInteger(e, 2);
      j = j + "." + b.toString(10);
      e = "";
    }
  }

  return j;
};

KJUR.asn1.ASN1Util.oidIntToHex = function (f) {
  var e = function e(a) {
    var k = a.toString(16);

    if (k.length == 1) {
      k = "0" + k;
    }

    return k;
  };

  var d = function d(o) {
    var n = "";
    var k = new BigInteger(o, 10);
    var a = k.toString(2);
    var l = 7 - a.length % 7;

    if (l == 7) {
      l = 0;
    }

    var q = "";

    for (var m = 0; m < l; m++) {
      q += "0";
    }

    a = q + a;

    for (var m = 0; m < a.length - 1; m += 7) {
      var p = a.substr(m, 7);

      if (m != a.length - 7) {
        p = "1" + p;
      }

      n += e(parseInt(p, 2));
    }

    return n;
  };

  if (!f.match(/^[0-9.]+$/)) {
    throw "malformed oid string: " + f;
  }

  var g = "";
  var b = f.split(".");
  var j = parseInt(b[0]) * 40 + parseInt(b[1]);
  g += e(j);
  b.splice(0, 2);

  for (var c = 0; c < b.length; c++) {
    g += d(b[c]);
  }

  return g;
};

KJUR.asn1.ASN1Object = function (e) {
  var c = true;
  var b = null;
  var d = "00";
  var f = "00";
  var a = "";
  this.params = null;

  this.getLengthHexFromValue = function () {
    if (typeof this.hV == "undefined" || this.hV == null) {
      throw new Error("this.hV is null or undefined");
    }

    if (this.hV.length % 2 == 1) {
      throw new Error("value hex must be even length: n=" + a.length + ",v=" + this.hV);
    }

    var j = this.hV.length / 2;
    var i = j.toString(16);

    if (i.length % 2 == 1) {
      i = "0" + i;
    }

    if (j < 128) {
      return i;
    } else {
      var h = i.length / 2;

      if (h > 15) {
        throw "ASN.1 length too long to represent by 8x: n = " + j.toString(16);
      }

      var g = 128 + h;
      return g.toString(16) + i;
    }
  };

  this.getEncodedHex = function () {
    if (this.hTLV == null || this.isModified) {
      this.hV = this.getFreshValueHex();
      this.hL = this.getLengthHexFromValue();
      this.hTLV = this.hT + this.hL + this.hV;
      this.isModified = false;
    }

    return this.hTLV;
  };

  this.getValueHex = function () {
    this.getEncodedHex();
    return this.hV;
  };

  this.getFreshValueHex = function () {
    return "";
  };

  this.setByParam = function (g) {
    this.params = g;
  };

  if (e != undefined) {
    if (e.tlv != undefined) {
      this.hTLV = e.tlv;
      this.isModified = false;
    }
  }
};

KJUR.asn1.DERAbstractString = function (c) {
  KJUR.asn1.DERAbstractString.superclass.constructor.call(this);
  var b = null;
  var a = null;

  this.getString = function () {
    return this.s;
  };

  this.setString = function (d) {
    this.hTLV = null;
    this.isModified = true;
    this.s = d;
    this.hV = utf8tohex(this.s).toLowerCase();
  };

  this.setStringHex = function (d) {
    this.hTLV = null;
    this.isModified = true;
    this.s = null;
    this.hV = d;
  };

  this.getFreshValueHex = function () {
    return this.hV;
  };

  if (typeof c != "undefined") {
    if (typeof c == "string") {
      this.setString(c);
    } else {
      if (typeof c.str != "undefined") {
        this.setString(c.str);
      } else {
        if (typeof c.hex != "undefined") {
          this.setStringHex(c.hex);
        }
      }
    }
  }
};

YAHOO.lang.extend(KJUR.asn1.DERAbstractString, KJUR.asn1.ASN1Object);

KJUR.asn1.DERAbstractTime = function (c) {
  KJUR.asn1.DERAbstractTime.superclass.constructor.call(this);
  var b = null;
  var a = null;

  this.localDateToUTC = function (g) {
    var e = g.getTime() + g.getTimezoneOffset() * 60000;
    var f = new Date(e);
    return f;
  };

  this.formatDate = function (m, o, e) {
    var g = this.zeroPadding;
    var n = this.localDateToUTC(m);
    var p = String(n.getFullYear());

    if (o == "utc") {
      p = p.substr(2, 2);
    }

    var l = g(String(n.getMonth() + 1), 2);
    var q = g(String(n.getDate()), 2);
    var h = g(String(n.getHours()), 2);
    var i = g(String(n.getMinutes()), 2);
    var j = g(String(n.getSeconds()), 2);
    var r = p + l + q + h + i + j;

    if (e === true) {
      var f = n.getMilliseconds();

      if (f != 0) {
        var k = g(String(f), 3);
        k = k.replace(/[0]+$/, "");
        r = r + "." + k;
      }
    }

    return r + "Z";
  };

  this.zeroPadding = function (e, d) {
    if (e.length >= d) {
      return e;
    }

    return new Array(d - e.length + 1).join("0") + e;
  };

  this.getString = function () {
    return this.s;
  };

  this.setString = function (d) {
    this.hTLV = null;
    this.isModified = true;
    this.s = d;
    this.hV = stohex(d);
  };

  this.setByDateValue = function (h, j, e, d, f, g) {
    var i = new Date(Date.UTC(h, j - 1, e, d, f, g, 0));
    this.setByDate(i);
  };

  this.getFreshValueHex = function () {
    return this.hV;
  };
};

YAHOO.lang.extend(KJUR.asn1.DERAbstractTime, KJUR.asn1.ASN1Object);

KJUR.asn1.DERAbstractStructured = function (b) {
  KJUR.asn1.DERAbstractString.superclass.constructor.call(this);
  var a = null;

  this.setByASN1ObjectArray = function (c) {
    this.hTLV = null;
    this.isModified = true;
    this.asn1Array = c;
  };

  this.appendASN1Object = function (c) {
    this.hTLV = null;
    this.isModified = true;
    this.asn1Array.push(c);
  };

  this.asn1Array = new Array();

  if (typeof b != "undefined") {
    if (typeof b.array != "undefined") {
      this.asn1Array = b.array;
    }
  }
};

YAHOO.lang.extend(KJUR.asn1.DERAbstractStructured, KJUR.asn1.ASN1Object);

KJUR.asn1.DERBoolean = function (a) {
  KJUR.asn1.DERBoolean.superclass.constructor.call(this);
  this.hT = "01";

  if (a == false) {
    this.hTLV = "010100";
  } else {
    this.hTLV = "0101ff";
  }
};

YAHOO.lang.extend(KJUR.asn1.DERBoolean, KJUR.asn1.ASN1Object);

KJUR.asn1.DERInteger = function (a) {
  KJUR.asn1.DERInteger.superclass.constructor.call(this);
  this.hT = "02";

  this.setByBigInteger = function (b) {
    this.hTLV = null;
    this.isModified = true;
    this.hV = KJUR.asn1.ASN1Util.bigIntToMinTwosComplementsHex(b);
  };

  this.setByInteger = function (c) {
    var b = new BigInteger(String(c), 10);
    this.setByBigInteger(b);
  };

  this.setValueHex = function (b) {
    this.hV = b;
  };

  this.getFreshValueHex = function () {
    return this.hV;
  };

  if (typeof a != "undefined") {
    if (typeof a.bigint != "undefined") {
      this.setByBigInteger(a.bigint);
    } else {
      if (typeof a["int"] != "undefined") {
        this.setByInteger(a["int"]);
      } else {
        if (typeof a == "number") {
          this.setByInteger(a);
        } else {
          if (typeof a.hex != "undefined") {
            this.setValueHex(a.hex);
          }
        }
      }
    }
  }
};

YAHOO.lang.extend(KJUR.asn1.DERInteger, KJUR.asn1.ASN1Object);

KJUR.asn1.DERBitString = function (b) {
  if (b !== undefined && typeof b.obj !== "undefined") {
    var a = KJUR.asn1.ASN1Util.newObject(b.obj);
    b.hex = "00" + a.getEncodedHex();
  }

  KJUR.asn1.DERBitString.superclass.constructor.call(this);
  this.hT = "03";

  this.setHexValueIncludingUnusedBits = function (c) {
    this.hTLV = null;
    this.isModified = true;
    this.hV = c;
  };

  this.setUnusedBitsAndHexValue = function (c, e) {
    if (c < 0 || 7 < c) {
      throw "unused bits shall be from 0 to 7: u = " + c;
    }

    var d = "0" + c;
    this.hTLV = null;
    this.isModified = true;
    this.hV = d + e;
  };

  this.setByBinaryString = function (e) {
    e = e.replace(/0+$/, "");
    var f = 8 - e.length % 8;

    if (f == 8) {
      f = 0;
    }

    for (var g = 0; g <= f; g++) {
      e += "0";
    }

    var j = "";

    for (var g = 0; g < e.length - 1; g += 8) {
      var d = e.substr(g, 8);
      var c = parseInt(d, 2).toString(16);

      if (c.length == 1) {
        c = "0" + c;
      }

      j += c;
    }

    this.hTLV = null;
    this.isModified = true;
    this.hV = "0" + f + j;
  };

  this.setByBooleanArray = function (e) {
    var d = "";

    for (var c = 0; c < e.length; c++) {
      if (e[c] == true) {
        d += "1";
      } else {
        d += "0";
      }
    }

    this.setByBinaryString(d);
  };

  this.newFalseArray = function (e) {
    var c = new Array(e);

    for (var d = 0; d < e; d++) {
      c[d] = false;
    }

    return c;
  };

  this.getFreshValueHex = function () {
    return this.hV;
  };

  if (typeof b != "undefined") {
    if (typeof b == "string" && b.toLowerCase().match(/^[0-9a-f]+$/)) {
      this.setHexValueIncludingUnusedBits(b);
    } else {
      if (typeof b.hex != "undefined") {
        this.setHexValueIncludingUnusedBits(b.hex);
      } else {
        if (typeof b.bin != "undefined") {
          this.setByBinaryString(b.bin);
        } else {
          if (typeof b.array != "undefined") {
            this.setByBooleanArray(b.array);
          }
        }
      }
    }
  }
};

YAHOO.lang.extend(KJUR.asn1.DERBitString, KJUR.asn1.ASN1Object);

KJUR.asn1.DEROctetString = function (b) {
  if (b !== undefined && typeof b.obj !== "undefined") {
    var a = KJUR.asn1.ASN1Util.newObject(b.obj);
    b.hex = a.getEncodedHex();
  }

  KJUR.asn1.DEROctetString.superclass.constructor.call(this, b);
  this.hT = "04";
};

YAHOO.lang.extend(KJUR.asn1.DEROctetString, KJUR.asn1.DERAbstractString);

KJUR.asn1.DERNull = function () {
  KJUR.asn1.DERNull.superclass.constructor.call(this);
  this.hT = "05";
  this.hTLV = "0500";
};

YAHOO.lang.extend(KJUR.asn1.DERNull, KJUR.asn1.ASN1Object);

KJUR.asn1.DERObjectIdentifier = function (a) {
  KJUR.asn1.DERObjectIdentifier.superclass.constructor.call(this);
  this.hT = "06";

  this.setValueHex = function (b) {
    this.hTLV = null;
    this.isModified = true;
    this.s = null;
    this.hV = b;
  };

  this.setValueOidString = function (b) {
    var c = oidtohex(b);

    if (c == null) {
      throw new Error("malformed oid string: " + b);
    }

    this.hTLV = null;
    this.isModified = true;
    this.s = null;
    this.hV = c;
  };

  this.setValueName = function (c) {
    var b = KJUR.asn1.x509.OID.name2oid(c);

    if (b !== "") {
      this.setValueOidString(b);
    } else {
      throw new Error("DERObjectIdentifier oidName undefined: " + c);
    }
  };

  this.setValueNameOrOid = function (b) {
    if (b.match(/^[0-2].[0-9.]+$/)) {
      this.setValueOidString(b);
    } else {
      this.setValueName(b);
    }
  };

  this.getFreshValueHex = function () {
    return this.hV;
  };

  this.setByParam = function (b) {
    if (typeof b === "string") {
      this.setValueNameOrOid(b);
    } else {
      if (b.oid !== undefined) {
        this.setValueNameOrOid(b.oid);
      } else {
        if (b.name !== undefined) {
          this.setValueNameOrOid(b.name);
        } else {
          if (b.hex !== undefined) {
            this.setValueHex(b.hex);
          }
        }
      }
    }
  };

  if (a !== undefined) {
    this.setByParam(a);
  }
};

YAHOO.lang.extend(KJUR.asn1.DERObjectIdentifier, KJUR.asn1.ASN1Object);

KJUR.asn1.DEREnumerated = function (a) {
  KJUR.asn1.DEREnumerated.superclass.constructor.call(this);
  this.hT = "0a";

  this.setByBigInteger = function (b) {
    this.hTLV = null;
    this.isModified = true;
    this.hV = KJUR.asn1.ASN1Util.bigIntToMinTwosComplementsHex(b);
  };

  this.setByInteger = function (c) {
    var b = new BigInteger(String(c), 10);
    this.setByBigInteger(b);
  };

  this.setValueHex = function (b) {
    this.hV = b;
  };

  this.getFreshValueHex = function () {
    return this.hV;
  };

  if (typeof a != "undefined") {
    if (typeof a["int"] != "undefined") {
      this.setByInteger(a["int"]);
    } else {
      if (typeof a == "number") {
        this.setByInteger(a);
      } else {
        if (typeof a.hex != "undefined") {
          this.setValueHex(a.hex);
        }
      }
    }
  }
};

YAHOO.lang.extend(KJUR.asn1.DEREnumerated, KJUR.asn1.ASN1Object);

KJUR.asn1.DERUTF8String = function (a) {
  KJUR.asn1.DERUTF8String.superclass.constructor.call(this, a);
  this.hT = "0c";
};

YAHOO.lang.extend(KJUR.asn1.DERUTF8String, KJUR.asn1.DERAbstractString);

KJUR.asn1.DERNumericString = function (a) {
  KJUR.asn1.DERNumericString.superclass.constructor.call(this, a);
  this.hT = "12";
};

YAHOO.lang.extend(KJUR.asn1.DERNumericString, KJUR.asn1.DERAbstractString);

KJUR.asn1.DERPrintableString = function (a) {
  KJUR.asn1.DERPrintableString.superclass.constructor.call(this, a);
  this.hT = "13";
};

YAHOO.lang.extend(KJUR.asn1.DERPrintableString, KJUR.asn1.DERAbstractString);

KJUR.asn1.DERTeletexString = function (a) {
  KJUR.asn1.DERTeletexString.superclass.constructor.call(this, a);
  this.hT = "14";
};

YAHOO.lang.extend(KJUR.asn1.DERTeletexString, KJUR.asn1.DERAbstractString);

KJUR.asn1.DERIA5String = function (a) {
  KJUR.asn1.DERIA5String.superclass.constructor.call(this, a);
  this.hT = "16";
};

YAHOO.lang.extend(KJUR.asn1.DERIA5String, KJUR.asn1.DERAbstractString);

KJUR.asn1.DERVisibleString = function (a) {
  KJUR.asn1.DERIA5String.superclass.constructor.call(this, a);
  this.hT = "1a";
};

YAHOO.lang.extend(KJUR.asn1.DERVisibleString, KJUR.asn1.DERAbstractString);

KJUR.asn1.DERBMPString = function (a) {
  KJUR.asn1.DERBMPString.superclass.constructor.call(this, a);
  this.hT = "1e";
};

YAHOO.lang.extend(KJUR.asn1.DERBMPString, KJUR.asn1.DERAbstractString);

KJUR.asn1.DERUTCTime = function (a) {
  KJUR.asn1.DERUTCTime.superclass.constructor.call(this, a);
  this.hT = "17";

  this.setByDate = function (b) {
    this.hTLV = null;
    this.isModified = true;
    this.date = b;
    this.s = this.formatDate(this.date, "utc");
    this.hV = stohex(this.s);
  };

  this.getFreshValueHex = function () {
    if (typeof this.date == "undefined" && typeof this.s == "undefined") {
      this.date = new Date();
      this.s = this.formatDate(this.date, "utc");
      this.hV = stohex(this.s);
    }

    return this.hV;
  };

  if (a !== undefined) {
    if (a.str !== undefined) {
      this.setString(a.str);
    } else {
      if (typeof a == "string" && a.match(/^[0-9]{12}Z$/)) {
        this.setString(a);
      } else {
        if (a.hex !== undefined) {
          this.setStringHex(a.hex);
        } else {
          if (a.date !== undefined) {
            this.setByDate(a.date);
          }
        }
      }
    }
  }
};

YAHOO.lang.extend(KJUR.asn1.DERUTCTime, KJUR.asn1.DERAbstractTime);

KJUR.asn1.DERGeneralizedTime = function (a) {
  KJUR.asn1.DERGeneralizedTime.superclass.constructor.call(this, a);
  this.hT = "18";
  this.withMillis = false;

  this.setByDate = function (b) {
    this.hTLV = null;
    this.isModified = true;
    this.date = b;
    this.s = this.formatDate(this.date, "gen", this.withMillis);
    this.hV = stohex(this.s);
  };

  this.getFreshValueHex = function () {
    if (this.date === undefined && this.s === undefined) {
      this.date = new Date();
      this.s = this.formatDate(this.date, "gen", this.withMillis);
      this.hV = stohex(this.s);
    }

    return this.hV;
  };

  if (a !== undefined) {
    if (a.str !== undefined) {
      this.setString(a.str);
    } else {
      if (typeof a == "string" && a.match(/^[0-9]{14}Z$/)) {
        this.setString(a);
      } else {
        if (a.hex !== undefined) {
          this.setStringHex(a.hex);
        } else {
          if (a.date !== undefined) {
            this.setByDate(a.date);
          }
        }
      }
    }

    if (a.millis === true) {
      this.withMillis = true;
    }
  }
};

YAHOO.lang.extend(KJUR.asn1.DERGeneralizedTime, KJUR.asn1.DERAbstractTime);

KJUR.asn1.DERSequence = function (a) {
  KJUR.asn1.DERSequence.superclass.constructor.call(this, a);
  this.hT = "30";

  this.getFreshValueHex = function () {
    var c = "";

    for (var b = 0; b < this.asn1Array.length; b++) {
      var d = this.asn1Array[b];
      c += d.getEncodedHex();
    }

    this.hV = c;
    return this.hV;
  };
};

YAHOO.lang.extend(KJUR.asn1.DERSequence, KJUR.asn1.DERAbstractStructured);

KJUR.asn1.DERSet = function (a) {
  KJUR.asn1.DERSet.superclass.constructor.call(this, a);
  this.hT = "31";
  this.sortFlag = true;

  this.getFreshValueHex = function () {
    var b = new Array();

    for (var c = 0; c < this.asn1Array.length; c++) {
      var d = this.asn1Array[c];
      b.push(d.getEncodedHex());
    }

    if (this.sortFlag == true) {
      b.sort();
    }

    this.hV = b.join("");
    return this.hV;
  };

  if (typeof a != "undefined") {
    if (typeof a.sortflag != "undefined" && a.sortflag == false) {
      this.sortFlag = false;
    }
  }
};

YAHOO.lang.extend(KJUR.asn1.DERSet, KJUR.asn1.DERAbstractStructured);

KJUR.asn1.DERTaggedObject = function (b) {
  KJUR.asn1.DERTaggedObject.superclass.constructor.call(this);
  var a = KJUR.asn1;
  this.hT = "a0";
  this.hV = "";
  this.isExplicit = true;
  this.asn1Object = null;

  this.setASN1Object = function (c, d, e) {
    this.hT = d;
    this.isExplicit = c;
    this.asn1Object = e;

    if (this.isExplicit) {
      this.hV = this.asn1Object.getEncodedHex();
      this.hTLV = null;
      this.isModified = true;
    } else {
      this.hV = null;
      this.hTLV = e.getEncodedHex();
      this.hTLV = this.hTLV.replace(/^../, d);
      this.isModified = false;
    }
  };

  this.getFreshValueHex = function () {
    return this.hV;
  };

  this.setByParam = function (c) {
    if (c.tag != undefined) {
      this.hT = c.tag;
    }

    if (c.explicit != undefined) {
      this.isExplicit = c.explicit;
    }

    if (c.tage != undefined) {
      this.hT = c.tage;
      this.isExplicit = true;
    }

    if (c.tagi != undefined) {
      this.hT = c.tagi;
      this.isExplicit = false;
    }

    if (c.obj != undefined) {
      if (c.obj instanceof a.ASN1Object) {
        this.asn1Object = c.obj;
        this.setASN1Object(this.isExplicit, this.hT, this.asn1Object);
      } else {
        if (_typeof(c.obj) == "object") {
          this.asn1Object = a.ASN1Util.newObject(c.obj);
          this.setASN1Object(this.isExplicit, this.hT, this.asn1Object);
        }
      }
    }
  };

  if (b != undefined) {
    this.setByParam(b);
  }
};

YAHOO.lang.extend(KJUR.asn1.DERTaggedObject, KJUR.asn1.ASN1Object);
var ASN1HEX = new function () {}();

ASN1HEX.getLblen = function (c, a) {
  if (c.substr(a + 2, 1) != "8") {
    return 1;
  }

  var b = parseInt(c.substr(a + 3, 1));

  if (b == 0) {
    return -1;
  }

  if (0 < b && b < 10) {
    return b + 1;
  }

  return -2;
};

ASN1HEX.getL = function (c, b) {
  var a = ASN1HEX.getLblen(c, b);

  if (a < 1) {
    return "";
  }

  return c.substr(b + 2, a * 2);
};

ASN1HEX.getVblen = function (d, a) {
  var c, b;
  c = ASN1HEX.getL(d, a);

  if (c == "") {
    return -1;
  }

  if (c.substr(0, 1) === "8") {
    b = new BigInteger(c.substr(2), 16);
  } else {
    b = new BigInteger(c, 16);
  }

  return b.intValue();
};

ASN1HEX.getVidx = function (c, b) {
  var a = ASN1HEX.getLblen(c, b);

  if (a < 0) {
    return a;
  }

  return b + (a + 1) * 2;
};

ASN1HEX.getV = function (d, a) {
  var c = ASN1HEX.getVidx(d, a);
  var b = ASN1HEX.getVblen(d, a);
  return d.substr(c, b * 2);
};

ASN1HEX.getTLV = function (b, a) {
  return b.substr(a, 2) + ASN1HEX.getL(b, a) + ASN1HEX.getV(b, a);
};

ASN1HEX.getTLVblen = function (b, a) {
  return 2 + ASN1HEX.getLblen(b, a) * 2 + ASN1HEX.getVblen(b, a) * 2;
};

ASN1HEX.getNextSiblingIdx = function (d, a) {
  var c = ASN1HEX.getVidx(d, a);
  var b = ASN1HEX.getVblen(d, a);
  return c + b * 2;
};

ASN1HEX.getChildIdx = function (e, k) {
  var l = ASN1HEX;
  var j = [];
  var c, f, g;
  c = l.getVidx(e, k);
  f = l.getVblen(e, k) * 2;

  if (e.substr(k, 2) == "03") {
    c += 2;
    f -= 2;
  }

  g = 0;
  var d = c;

  while (g <= f) {
    var b = l.getTLVblen(e, d);
    g += b;

    if (g <= f) {
      j.push(d);
    }

    d += b;

    if (g >= f) {
      break;
    }
  }

  return j;
};

ASN1HEX.getNthChildIdx = function (d, b, e) {
  var c = ASN1HEX.getChildIdx(d, b);
  return c[e];
};

ASN1HEX.getIdxbyList = function (e, d, c, i) {
  var g = ASN1HEX;
  var f, b;

  if (c.length == 0) {
    if (i !== undefined) {
      if (e.substr(d, 2) !== i) {
        return -1;
      }
    }

    return d;
  }

  f = c.shift();
  b = g.getChildIdx(e, d);

  if (f >= b.length) {
    return -1;
  }

  return g.getIdxbyList(e, b[f], c, i);
};

ASN1HEX.getIdxbyListEx = function (f, k, b, g) {
  var m = ASN1HEX;
  var d, l;

  if (b.length == 0) {
    if (g !== undefined) {
      if (f.substr(k, 2) !== g) {
        return -1;
      }
    }

    return k;
  }

  d = b.shift();
  l = m.getChildIdx(f, k);
  var j = 0;

  for (var e = 0; e < l.length; e++) {
    var c = f.substr(l[e], 2);

    if (typeof d == "number" && !m.isContextTag(c) && j == d || typeof d == "string" && m.isContextTag(c, d)) {
      return m.getIdxbyListEx(f, l[e], b, g);
    }

    if (!m.isContextTag(c)) {
      j++;
    }
  }

  return -1;
};

ASN1HEX.getTLVbyList = function (d, c, b, f) {
  var e = ASN1HEX;
  var a = e.getIdxbyList(d, c, b, f);

  if (a == -1) {
    return null;
  }

  if (a >= d.length) {
    return null;
  }

  return e.getTLV(d, a);
};

ASN1HEX.getTLVbyListEx = function (d, c, b, f) {
  var e = ASN1HEX;
  var a = e.getIdxbyListEx(d, c, b, f);

  if (a == -1) {
    return null;
  }

  return e.getTLV(d, a);
};

ASN1HEX.getVbyList = function (e, c, b, g, i) {
  var f = ASN1HEX;
  var a, d;
  a = f.getIdxbyList(e, c, b, g);

  if (a == -1) {
    return null;
  }

  if (a >= e.length) {
    return null;
  }

  d = f.getV(e, a);

  if (i === true) {
    d = d.substr(2);
  }

  return d;
};

ASN1HEX.getVbyListEx = function (b, e, a, d, f) {
  var j = ASN1HEX;
  var g, c, i;
  g = j.getIdxbyListEx(b, e, a, d);

  if (g == -1) {
    return null;
  }

  i = j.getV(b, g);

  if (b.substr(g, 2) == "03" && f !== false) {
    i = i.substr(2);
  }

  return i;
};

ASN1HEX.getInt = function (e, b, f) {
  if (f == undefined) {
    f = -1;
  }

  try {
    var c = e.substr(b, 2);

    if (c != "02" && c != "03") {
      return f;
    }

    var a = ASN1HEX.getV(e, b);

    if (c == "02") {
      return parseInt(a, 16);
    } else {
      return bitstrtoint(a);
    }
  } catch (d) {
    return f;
  }
};

ASN1HEX.getOID = function (c, a, d) {
  if (d == undefined) {
    d = null;
  }

  try {
    if (c.substr(a, 2) != "06") {
      return d;
    }

    var e = ASN1HEX.getV(c, a);
    return hextooid(e);
  } catch (b) {
    return d;
  }
};

ASN1HEX.getOIDName = function (d, a, f) {
  if (f == undefined) {
    f = null;
  }

  try {
    var e = ASN1HEX.getOID(d, a, f);

    if (e == f) {
      return f;
    }

    var b = KJUR.asn1.x509.OID.oid2name(e);

    if (b == "") {
      return e;
    }

    return b;
  } catch (c) {
    return f;
  }
};

ASN1HEX.getString = function (d, b, e) {
  if (e == undefined) {
    e = null;
  }

  try {
    var a = ASN1HEX.getV(d, b);
    return hextorstr(a);
  } catch (c) {
    return e;
  }
};

ASN1HEX.hextooidstr = function (e) {
  var h = function h(b, a) {
    if (b.length >= a) {
      return b;
    }

    return new Array(a - b.length + 1).join("0") + b;
  };

  var l = [];
  var o = e.substr(0, 2);
  var f = parseInt(o, 16);
  l[0] = new String(Math.floor(f / 40));
  l[1] = new String(f % 40);
  var m = e.substr(2);
  var k = [];

  for (var g = 0; g < m.length / 2; g++) {
    k.push(parseInt(m.substr(g * 2, 2), 16));
  }

  var j = [];
  var d = "";

  for (var g = 0; g < k.length; g++) {
    if (k[g] & 128) {
      d = d + h((k[g] & 127).toString(2), 7);
    } else {
      d = d + h((k[g] & 127).toString(2), 7);
      j.push(new String(parseInt(d, 2)));
      d = "";
    }
  }

  var n = l.join(".");

  if (j.length > 0) {
    n = n + "." + j.join(".");
  }

  return n;
};

ASN1HEX.dump = function (t, c, l, g) {
  var p = ASN1HEX;
  var j = p.getV;
  var y = p.dump;
  var w = p.getChildIdx;
  var e = t;

  if (t instanceof KJUR.asn1.ASN1Object) {
    e = t.getEncodedHex();
  }

  var q = function q(A, i) {
    if (A.length <= i * 2) {
      return A;
    } else {
      var v = A.substr(0, i) + "..(total " + A.length / 2 + "bytes).." + A.substr(A.length - i, i);
      return v;
    }
  };

  if (c === undefined) {
    c = {
      ommit_long_octet: 32
    };
  }

  if (l === undefined) {
    l = 0;
  }

  if (g === undefined) {
    g = "";
  }

  var x = c.ommit_long_octet;
  var z = e.substr(l, 2);

  if (z == "01") {
    var h = j(e, l);

    if (h == "00") {
      return g + "BOOLEAN FALSE\n";
    } else {
      return g + "BOOLEAN TRUE\n";
    }
  }

  if (z == "02") {
    var h = j(e, l);
    return g + "INTEGER " + q(h, x) + "\n";
  }

  if (z == "03") {
    var h = j(e, l);

    if (p.isASN1HEX(h.substr(2))) {
      var k = g + "BITSTRING, encapsulates\n";
      k = k + y(h.substr(2), c, 0, g + "  ");
      return k;
    } else {
      return g + "BITSTRING " + q(h, x) + "\n";
    }
  }

  if (z == "04") {
    var h = j(e, l);

    if (p.isASN1HEX(h)) {
      var k = g + "OCTETSTRING, encapsulates\n";
      k = k + y(h, c, 0, g + "  ");
      return k;
    } else {
      return g + "OCTETSTRING " + q(h, x) + "\n";
    }
  }

  if (z == "05") {
    return g + "NULL\n";
  }

  if (z == "06") {
    var m = j(e, l);
    var b = KJUR.asn1.ASN1Util.oidHexToInt(m);
    var o = KJUR.asn1.x509.OID.oid2name(b);
    var a = b.replace(/\./g, " ");

    if (o != "") {
      return g + "ObjectIdentifier " + o + " (" + a + ")\n";
    } else {
      return g + "ObjectIdentifier (" + a + ")\n";
    }
  }

  if (z == "0a") {
    return g + "ENUMERATED " + parseInt(j(e, l)) + "\n";
  }

  if (z == "0c") {
    return g + "UTF8String '" + hextoutf8(j(e, l)) + "'\n";
  }

  if (z == "13") {
    return g + "PrintableString '" + hextoutf8(j(e, l)) + "'\n";
  }

  if (z == "14") {
    return g + "TeletexString '" + hextoutf8(j(e, l)) + "'\n";
  }

  if (z == "16") {
    return g + "IA5String '" + hextoutf8(j(e, l)) + "'\n";
  }

  if (z == "17") {
    return g + "UTCTime " + hextoutf8(j(e, l)) + "\n";
  }

  if (z == "18") {
    return g + "GeneralizedTime " + hextoutf8(j(e, l)) + "\n";
  }

  if (z == "1a") {
    return g + "VisualString '" + hextoutf8(j(e, l)) + "'\n";
  }

  if (z == "1e") {
    return g + "BMPString '" + hextoutf8(j(e, l)) + "'\n";
  }

  if (z == "30") {
    if (e.substr(l, 4) == "3000") {
      return g + "SEQUENCE {}\n";
    }

    var k = g + "SEQUENCE\n";
    var d = w(e, l);
    var f = c;

    if ((d.length == 2 || d.length == 3) && e.substr(d[0], 2) == "06" && e.substr(d[d.length - 1], 2) == "04") {
      var o = p.oidname(j(e, d[0]));
      var r = JSON.parse(JSON.stringify(c));
      r.x509ExtName = o;
      f = r;
    }

    for (var u = 0; u < d.length; u++) {
      k = k + y(e, f, d[u], g + "  ");
    }

    return k;
  }

  if (z == "31") {
    var k = g + "SET\n";
    var d = w(e, l);

    for (var u = 0; u < d.length; u++) {
      k = k + y(e, c, d[u], g + "  ");
    }

    return k;
  }

  var z = parseInt(z, 16);

  if ((z & 128) != 0) {
    var n = z & 31;

    if ((z & 32) != 0) {
      var k = g + "[" + n + "]\n";
      var d = w(e, l);

      for (var u = 0; u < d.length; u++) {
        k = k + y(e, c, d[u], g + "  ");
      }

      return k;
    } else {
      var h = j(e, l);

      if (ASN1HEX.isASN1HEX(h)) {
        var k = g + "[" + n + "]\n";
        k = k + y(h, c, 0, g + "  ");
        return k;
      } else {
        if (h.substr(0, 8) == "68747470") {
          h = hextoutf8(h);
        } else {
          if (c.x509ExtName === "subjectAltName" && n == 2) {
            h = hextoutf8(h);
          }
        }
      }

      var k = g + "[" + n + "] " + h + "\n";
      return k;
    }
  }

  return g + "UNKNOWN(" + z + ") " + j(e, l) + "\n";
};

ASN1HEX.isContextTag = function (c, b) {
  c = c.toLowerCase();
  var f, e;

  try {
    f = parseInt(c, 16);
  } catch (d) {
    return -1;
  }

  if (b === undefined) {
    if ((f & 192) == 128) {
      return true;
    } else {
      return false;
    }
  }

  try {
    var a = b.match(/^\[[0-9]+\]$/);

    if (a == null) {
      return false;
    }

    e = parseInt(b.substr(1, b.length - 1), 10);

    if (e > 31) {
      return false;
    }

    if ((f & 192) == 128 && (f & 31) == e) {
      return true;
    }

    return false;
  } catch (d) {
    return false;
  }
};

ASN1HEX.isASN1HEX = function (e) {
  var d = ASN1HEX;

  if (e.length % 2 == 1) {
    return false;
  }

  var c = d.getVblen(e, 0);
  var b = e.substr(0, 2);
  var f = d.getL(e, 0);
  var a = e.length - b.length - f.length;

  if (a == c * 2) {
    return true;
  }

  return false;
};

ASN1HEX.checkStrictDER = function (g, o, d, c, r) {
  var s = ASN1HEX;

  if (d === undefined) {
    if (typeof g != "string") {
      throw new Error("not hex string");
    }

    g = g.toLowerCase();

    if (!KJUR.lang.String.isHex(g)) {
      throw new Error("not hex string");
    }

    d = g.length;
    c = g.length / 2;

    if (c < 128) {
      r = 1;
    } else {
      r = Math.ceil(c.toString(16)) + 1;
    }
  }

  var k = s.getL(g, o);

  if (k.length > r * 2) {
    throw new Error("L of TLV too long: idx=" + o);
  }

  var n = s.getVblen(g, o);

  if (n > c) {
    throw new Error("value of L too long than hex: idx=" + o);
  }

  var q = s.getTLV(g, o);
  var f = q.length - 2 - s.getL(g, o).length;

  if (f !== n * 2) {
    throw new Error("V string length and L's value not the same:" + f + "/" + n * 2);
  }

  if (o === 0) {
    if (g.length != q.length) {
      throw new Error("total length and TLV length unmatch:" + g.length + "!=" + q.length);
    }
  }

  var b = g.substr(o, 2);

  if (b === "02") {
    var a = s.getVidx(g, o);

    if (g.substr(a, 2) == "00" && g.charCodeAt(a + 2) < 56) {
      throw new Error("not least zeros for DER INTEGER");
    }
  }

  if (parseInt(b, 16) & 32) {
    var p = s.getVblen(g, o);
    var m = 0;
    var l = s.getChildIdx(g, o);

    for (var e = 0; e < l.length; e++) {
      var j = s.getTLV(g, l[e]);
      m += j.length;
      s.checkStrictDER(g, l[e], d, c, r);
    }

    if (p * 2 != m) {
      throw new Error("sum of children's TLV length and L unmatch: " + p * 2 + "!=" + m);
    }
  }
};

ASN1HEX.oidname = function (a) {
  var c = KJUR.asn1;

  if (KJUR.lang.String.isHex(a)) {
    a = c.ASN1Util.oidHexToInt(a);
  }

  var b = c.x509.OID.oid2name(a);

  if (b === "") {
    b = a;
  }

  return b;
};

var KJUR;

if (typeof KJUR == "undefined" || !KJUR) {
  KJUR = {};
}

if (typeof KJUR.lang == "undefined" || !KJUR.lang) {
  KJUR.lang = {};
}

KJUR.lang.String = function () {};

function Base64x() {}

function stoBA(d) {
  var b = new Array();

  for (var c = 0; c < d.length; c++) {
    b[c] = d.charCodeAt(c);
  }

  return b;
}

function BAtos(b) {
  var d = "";

  for (var c = 0; c < b.length; c++) {
    d = d + String.fromCharCode(b[c]);
  }

  return d;
}

function BAtohex(b) {
  var e = "";

  for (var d = 0; d < b.length; d++) {
    var c = b[d].toString(16);

    if (c.length == 1) {
      c = "0" + c;
    }

    e = e + c;
  }

  return e;
}

function stohex(a) {
  return BAtohex(stoBA(a));
}

function stob64(a) {
  return hex2b64(stohex(a));
}

function stob64u(a) {
  return b64tob64u(hex2b64(stohex(a)));
}

function b64utos(a) {
  return BAtos(b64toBA(b64utob64(a)));
}

function b64tob64u(a) {
  a = a.replace(/\=/g, "");
  a = a.replace(/\+/g, "-");
  a = a.replace(/\//g, "_");
  return a;
}

function b64utob64(a) {
  if (a.length % 4 == 2) {
    a = a + "==";
  } else {
    if (a.length % 4 == 3) {
      a = a + "=";
    }
  }

  a = a.replace(/-/g, "+");
  a = a.replace(/_/g, "/");
  return a;
}

function hextob64u(a) {
  if (a.length % 2 == 1) {
    a = "0" + a;
  }

  return b64tob64u(hex2b64(a));
}

function b64utohex(a) {
  return b64tohex(b64utob64(a));
}

var utf8tob64u, b64utoutf8;

if (typeof Buffer === "function") {
  utf8tob64u = function utf8tob64u(a) {
    return b64tob64u(Buffer.from(a, "utf8").toString("base64"));
  };

  b64utoutf8 = function b64utoutf8(a) {
    return Buffer.from(b64utob64(a), "base64").toString("utf8");
  };
} else {
  utf8tob64u = function utf8tob64u(a) {
    return hextob64u(uricmptohex(encodeURIComponentAll(a)));
  };

  b64utoutf8 = function b64utoutf8(a) {
    return decodeURIComponent(hextouricmp(b64utohex(a)));
  };
}

function utf8tob64(a) {
  return hex2b64(uricmptohex(encodeURIComponentAll(a)));
}

function b64toutf8(a) {
  return decodeURIComponent(hextouricmp(b64tohex(a)));
}

function utf8tohex(a) {
  return uricmptohex(encodeURIComponentAll(a));
}

function hextoutf8(a) {
  return decodeURIComponent(hextouricmp(a));
}

function hextorstr(c) {
  var b = "";

  for (var a = 0; a < c.length - 1; a += 2) {
    b += String.fromCharCode(parseInt(c.substr(a, 2), 16));
  }

  return b;
}

function rstrtohex(c) {
  var a = "";

  for (var b = 0; b < c.length; b++) {
    a += ("0" + c.charCodeAt(b).toString(16)).slice(-2);
  }

  return a;
}

function hextob64(a) {
  return hex2b64(a);
}

function hextob64nl(b) {
  var a = hextob64(b);
  var c = a.replace(/(.{64})/g, "$1\r\n");
  c = c.replace(/\r\n$/, "");
  return c;
}

function b64nltohex(b) {
  var a = b.replace(/[^0-9A-Za-z\/+=]*/g, "");
  var c = b64tohex(a);
  return c;
}

function hextopem(a, b) {
  var c = hextob64nl(a);
  return "-----BEGIN " + b + "-----\r\n" + c + "\r\n-----END " + b + "-----\r\n";
}

function pemtohex(a, b) {
  if (a.indexOf("-----BEGIN ") == -1) {
    throw "can't find PEM header: " + b;
  }

  if (b !== undefined) {
    a = a.replace(new RegExp("^[^]*-----BEGIN " + b + "-----"), "");
    a = a.replace(new RegExp("-----END " + b + "-----[^]*$"), "");
  } else {
    a = a.replace(/^[^]*-----BEGIN [^-]+-----/, "");
    a = a.replace(/-----END [^-]+-----[^]*$/, "");
  }

  return b64nltohex(a);
}

function hextoArrayBuffer(d) {
  if (d.length % 2 != 0) {
    throw "input is not even length";
  }

  if (d.match(/^[0-9A-Fa-f]+$/) == null) {
    throw "input is not hexadecimal";
  }

  var b = new ArrayBuffer(d.length / 2);
  var a = new DataView(b);

  for (var c = 0; c < d.length / 2; c++) {
    a.setUint8(c, parseInt(d.substr(c * 2, 2), 16));
  }

  return b;
}

function ArrayBuffertohex(b) {
  var d = "";
  var a = new DataView(b);

  for (var c = 0; c < b.byteLength; c++) {
    d += ("00" + a.getUint8(c).toString(16)).slice(-2);
  }

  return d;
}

function zulutomsec(n) {
  var l, j, m, e, f, i, b, k;
  var a, h, g, c;
  c = n.match(/^(\d{2}|\d{4})(\d\d)(\d\d)(\d\d)(\d\d)(\d\d)(|\.\d+)Z$/);

  if (c) {
    a = c[1];
    l = parseInt(a);

    if (a.length === 2) {
      if (50 <= l && l < 100) {
        l = 1900 + l;
      } else {
        if (0 <= l && l < 50) {
          l = 2000 + l;
        }
      }
    }

    j = parseInt(c[2]) - 1;
    m = parseInt(c[3]);
    e = parseInt(c[4]);
    f = parseInt(c[5]);
    i = parseInt(c[6]);
    b = 0;
    h = c[7];

    if (h !== "") {
      g = (h.substr(1) + "00").substr(0, 3);
      b = parseInt(g);
    }

    return Date.UTC(l, j, m, e, f, i, b);
  }

  throw "unsupported zulu format: " + n;
}

function zulutosec(a) {
  var b = zulutomsec(a);
  return ~~(b / 1000);
}

function zulutodate(a) {
  return new Date(zulutomsec(a));
}

function datetozulu(g, e, f) {
  var b;
  var a = g.getUTCFullYear();

  if (e) {
    if (a < 1950 || 2049 < a) {
      throw "not proper year for UTCTime: " + a;
    }

    b = ("" + a).slice(-2);
  } else {
    b = ("000" + a).slice(-4);
  }

  b += ("0" + (g.getUTCMonth() + 1)).slice(-2);
  b += ("0" + g.getUTCDate()).slice(-2);
  b += ("0" + g.getUTCHours()).slice(-2);
  b += ("0" + g.getUTCMinutes()).slice(-2);
  b += ("0" + g.getUTCSeconds()).slice(-2);

  if (f) {
    var c = g.getUTCMilliseconds();

    if (c !== 0) {
      c = ("00" + c).slice(-3);
      c = c.replace(/0+$/g, "");
      b += "." + c;
    }
  }

  b += "Z";
  return b;
}

function uricmptohex(a) {
  return a.replace(/%/g, "");
}

function hextouricmp(a) {
  return a.replace(/(..)/g, "%$1");
}

function ipv6tohex(g) {
  var b = "malformed IPv6 address";

  if (!g.match(/^[0-9A-Fa-f:]+$/)) {
    throw b;
  }

  g = g.toLowerCase();
  var d = g.split(":").length - 1;

  if (d < 2) {
    throw b;
  }

  var e = ":".repeat(7 - d + 2);
  g = g.replace("::", e);
  var c = g.split(":");

  if (c.length != 8) {
    throw b;
  }

  for (var f = 0; f < 8; f++) {
    c[f] = ("0000" + c[f]).slice(-4);
  }

  return c.join("");
}

function hextoipv6(e) {
  if (!e.match(/^[0-9A-Fa-f]{32}$/)) {
    throw "malformed IPv6 address octet";
  }

  e = e.toLowerCase();
  var b = e.match(/.{1,4}/g);

  for (var d = 0; d < 8; d++) {
    b[d] = b[d].replace(/^0+/, "");

    if (b[d] == "") {
      b[d] = "0";
    }
  }

  e = ":" + b.join(":") + ":";
  var c = e.match(/:(0:){2,}/g);

  if (c === null) {
    return e.slice(1, -1);
  }

  var f = "";

  for (var d = 0; d < c.length; d++) {
    if (c[d].length > f.length) {
      f = c[d];
    }
  }

  e = e.replace(f, "::");
  return e.slice(1, -1);
}

function hextoip(b) {
  var d = "malformed hex value";

  if (!b.match(/^([0-9A-Fa-f][0-9A-Fa-f]){1,}$/)) {
    throw d;
  }

  if (b.length == 8) {
    var c;

    try {
      c = parseInt(b.substr(0, 2), 16) + "." + parseInt(b.substr(2, 2), 16) + "." + parseInt(b.substr(4, 2), 16) + "." + parseInt(b.substr(6, 2), 16);
      return c;
    } catch (a) {
      throw d;
    }
  } else {
    if (b.length == 32) {
      return hextoipv6(b);
    } else {
      return b;
    }
  }
}

function iptohex(f) {
  var j = "malformed IP address";
  f = f.toLowerCase(f);

  if (f.match(/^[0-9.]+$/)) {
    var b = f.split(".");

    if (b.length !== 4) {
      throw j;
    }

    var g = "";

    try {
      for (var e = 0; e < 4; e++) {
        var h = parseInt(b[e]);
        g += ("0" + h.toString(16)).slice(-2);
      }

      return g;
    } catch (c) {
      throw j;
    }
  } else {
    if (f.match(/^[0-9a-f:]+$/) && f.indexOf(":") !== -1) {
      return ipv6tohex(f);
    } else {
      throw j;
    }
  }
}

function encodeURIComponentAll(a) {
  var d = encodeURIComponent(a);
  var b = "";

  for (var c = 0; c < d.length; c++) {
    if (d[c] == "%") {
      b = b + d.substr(c, 3);
      c = c + 2;
    } else {
      b = b + "%" + stohex(d[c]);
    }
  }

  return b;
}

function newline_toUnix(a) {
  a = a.replace(/\r\n/mg, "\n");
  return a;
}

function newline_toDos(a) {
  a = a.replace(/\r\n/mg, "\n");
  a = a.replace(/\n/mg, "\r\n");
  return a;
}

KJUR.lang.String.isInteger = function (a) {
  if (a.match(/^[0-9]+$/)) {
    return true;
  } else {
    if (a.match(/^-[0-9]+$/)) {
      return true;
    } else {
      return false;
    }
  }
};

KJUR.lang.String.isHex = function (a) {
  return ishex(a);
};

function ishex(a) {
  if (a.length % 2 == 0 && (a.match(/^[0-9a-f]+$/) || a.match(/^[0-9A-F]+$/))) {
    return true;
  } else {
    return false;
  }
}

KJUR.lang.String.isBase64 = function (a) {
  a = a.replace(/\s+/g, "");

  if (a.match(/^[0-9A-Za-z+\/]+={0,3}$/) && a.length % 4 == 0) {
    return true;
  } else {
    return false;
  }
};

KJUR.lang.String.isBase64URL = function (a) {
  if (a.match(/[+/=]/)) {
    return false;
  }

  a = b64utob64(a);
  return KJUR.lang.String.isBase64(a);
};

KJUR.lang.String.isIntegerArray = function (a) {
  a = a.replace(/\s+/g, "");

  if (a.match(/^\[[0-9,]+\]$/)) {
    return true;
  } else {
    return false;
  }
};

KJUR.lang.String.isPrintable = function (a) {
  if (a.match(/^[0-9A-Za-z '()+,-./:=?]*$/) !== null) {
    return true;
  }

  return false;
};

KJUR.lang.String.isIA5 = function (a) {
  if (a.match(/^[\x20-\x21\x23-\x7f]*$/) !== null) {
    return true;
  }

  return false;
};

KJUR.lang.String.isMail = function (a) {
  if (a.match(/^[A-Za-z0-9]{1}[A-Za-z0-9_.-]*@{1}[A-Za-z0-9_.-]{1,}\.[A-Za-z0-9]{1,}$/) !== null) {
    return true;
  }

  return false;
};

function hextoposhex(a) {
  if (a.length % 2 == 1) {
    return "0" + a;
  }

  if (a.substr(0, 1) > "7") {
    return "00" + a;
  }

  return a;
}

function intarystrtohex(b) {
  b = b.replace(/^\s*\[\s*/, "");
  b = b.replace(/\s*\]\s*$/, "");
  b = b.replace(/\s*/g, "");

  try {
    var c = b.split(/,/).map(function (g, e, h) {
      var f = parseInt(g);

      if (f < 0 || 255 < f) {
        throw "integer not in range 0-255";
      }

      var d = ("00" + f.toString(16)).slice(-2);
      return d;
    }).join("");
    return c;
  } catch (a) {
    throw "malformed integer array string: " + a;
  }
}

var strdiffidx = function strdiffidx(c, a) {
  var d = c.length;

  if (c.length > a.length) {
    d = a.length;
  }

  for (var b = 0; b < d; b++) {
    if (c.charCodeAt(b) != a.charCodeAt(b)) {
      return b;
    }
  }

  if (c.length != a.length) {
    return d;
  }

  return -1;
};

function oidtohex(g) {
  var f = function f(a) {
    var l = a.toString(16);

    if (l.length == 1) {
      l = "0" + l;
    }

    return l;
  };

  var e = function e(p) {
    var o = "";
    var l = parseInt(p, 10);
    var a = l.toString(2);
    var m = 7 - a.length % 7;

    if (m == 7) {
      m = 0;
    }

    var r = "";

    for (var n = 0; n < m; n++) {
      r += "0";
    }

    a = r + a;

    for (var n = 0; n < a.length - 1; n += 7) {
      var q = a.substr(n, 7);

      if (n != a.length - 7) {
        q = "1" + q;
      }

      o += f(parseInt(q, 2));
    }

    return o;
  };

  try {
    if (!g.match(/^[0-9.]+$/)) {
      return null;
    }

    var j = "";
    var b = g.split(".");
    var k = parseInt(b[0], 10) * 40 + parseInt(b[1], 10);
    j += f(k);
    b.splice(0, 2);

    for (var d = 0; d < b.length; d++) {
      j += e(b[d]);
    }

    return j;
  } catch (c) {
    return null;
  }
}

function hextooid(g) {
  if (!ishex(g)) {
    return null;
  }

  try {
    var m = [];
    var p = g.substr(0, 2);
    var e = parseInt(p, 16);
    m[0] = new String(Math.floor(e / 40));
    m[1] = new String(e % 40);
    var n = g.substr(2);
    var l = [];

    for (var f = 0; f < n.length / 2; f++) {
      l.push(parseInt(n.substr(f * 2, 2), 16));
    }

    var k = [];
    var d = "";

    for (var f = 0; f < l.length; f++) {
      if (l[f] & 128) {
        d = d + strpad((l[f] & 127).toString(2), 7);
      } else {
        d = d + strpad((l[f] & 127).toString(2), 7);
        k.push(new String(parseInt(d, 2)));
        d = "";
      }
    }

    var o = m.join(".");

    if (k.length > 0) {
      o = o + "." + k.join(".");
    }

    return o;
  } catch (j) {
    return null;
  }
}

var strpad = function strpad(c, b, a) {
  if (a == undefined) {
    a = "0";
  }

  if (c.length >= b) {
    return c;
  }

  return new Array(b - c.length + 1).join(a) + c;
};

function bitstrtoint(e) {
  try {
    var a = e.substr(0, 2);

    if (a == "00") {
      return parseInt(e.substr(2), 16);
    }

    var b = parseInt(a, 16);
    var f = e.substr(2);
    var d = parseInt(f, 16).toString(2);

    if (d == "0") {
      d = "00000000";
    }

    d = d.slice(0, 0 - b);
    return parseInt(d, 2);
  } catch (c) {
    return -1;
  }
}

function inttobitstr(e) {
  var c = Number(e).toString(2);
  var b = 8 - c.length % 8;

  if (b == 8) {
    b = 0;
  }

  c = c + strpad("", b, "0");
  var d = parseInt(c, 2).toString(16);

  if (d.length % 2 == 1) {
    d = "0" + d;
  }

  var a = "0" + b;
  return a + d;
}

;

if (typeof KJUR == "undefined" || !KJUR) {
  KJUR = {};
}

if (typeof KJUR.crypto == "undefined" || !KJUR.crypto) {
  KJUR.crypto = {};
}

KJUR.crypto.Util = new function () {
  this.DIGESTINFOHEAD = {
    sha1: "3021300906052b0e03021a05000414",
    sha224: "302d300d06096086480165030402040500041c",
    sha256: "3031300d060960864801650304020105000420",
    sha384: "3041300d060960864801650304020205000430",
    sha512: "3051300d060960864801650304020305000440",
    md2: "3020300c06082a864886f70d020205000410",
    md5: "3020300c06082a864886f70d020505000410",
    ripemd160: "3021300906052b2403020105000414"
  };
  this.DEFAULTPROVIDER = {
    md5: "cryptojs",
    sha1: "cryptojs",
    sha224: "cryptojs",
    sha256: "cryptojs",
    sha384: "cryptojs",
    sha512: "cryptojs",
    ripemd160: "cryptojs",
    hmacmd5: "cryptojs",
    hmacsha1: "cryptojs",
    hmacsha224: "cryptojs",
    hmacsha256: "cryptojs",
    hmacsha384: "cryptojs",
    hmacsha512: "cryptojs",
    hmacripemd160: "cryptojs",
    MD5withRSA: "cryptojs/jsrsa",
    SHA1withRSA: "cryptojs/jsrsa",
    SHA224withRSA: "cryptojs/jsrsa",
    SHA256withRSA: "cryptojs/jsrsa",
    SHA384withRSA: "cryptojs/jsrsa",
    SHA512withRSA: "cryptojs/jsrsa",
    RIPEMD160withRSA: "cryptojs/jsrsa",
    MD5withECDSA: "cryptojs/jsrsa",
    SHA1withECDSA: "cryptojs/jsrsa",
    SHA224withECDSA: "cryptojs/jsrsa",
    SHA256withECDSA: "cryptojs/jsrsa",
    SHA384withECDSA: "cryptojs/jsrsa",
    SHA512withECDSA: "cryptojs/jsrsa",
    RIPEMD160withECDSA: "cryptojs/jsrsa",
    SHA1withDSA: "cryptojs/jsrsa",
    SHA224withDSA: "cryptojs/jsrsa",
    SHA256withDSA: "cryptojs/jsrsa",
    MD5withRSAandMGF1: "cryptojs/jsrsa",
    SHAwithRSAandMGF1: "cryptojs/jsrsa",
    SHA1withRSAandMGF1: "cryptojs/jsrsa",
    SHA224withRSAandMGF1: "cryptojs/jsrsa",
    SHA256withRSAandMGF1: "cryptojs/jsrsa",
    SHA384withRSAandMGF1: "cryptojs/jsrsa",
    SHA512withRSAandMGF1: "cryptojs/jsrsa",
    RIPEMD160withRSAandMGF1: "cryptojs/jsrsa"
  };
  this.CRYPTOJSMESSAGEDIGESTNAME = {
    md5: CryptoJS.algo.MD5,
    sha1: CryptoJS.algo.SHA1,
    sha224: CryptoJS.algo.SHA224,
    sha256: CryptoJS.algo.SHA256,
    sha384: CryptoJS.algo.SHA384,
    sha512: CryptoJS.algo.SHA512,
    ripemd160: CryptoJS.algo.RIPEMD160
  };

  this.getDigestInfoHex = function (a, b) {
    if (typeof this.DIGESTINFOHEAD[b] == "undefined") {
      throw "alg not supported in Util.DIGESTINFOHEAD: " + b;
    }

    return this.DIGESTINFOHEAD[b] + a;
  };

  this.getPaddedDigestInfoHex = function (h, a, j) {
    var c = this.getDigestInfoHex(h, a);
    var d = j / 4;

    if (c.length + 22 > d) {
      throw "key is too short for SigAlg: keylen=" + j + "," + a;
    }

    var b = "0001";
    var k = "00" + c;
    var g = "";
    var l = d - b.length - k.length;

    for (var f = 0; f < l; f += 2) {
      g += "ff";
    }

    var e = b + g + k;
    return e;
  };

  this.hashString = function (a, c) {
    var b = new KJUR.crypto.MessageDigest({
      alg: c
    });
    return b.digestString(a);
  };

  this.hashHex = function (b, c) {
    var a = new KJUR.crypto.MessageDigest({
      alg: c
    });
    return a.digestHex(b);
  };

  this.sha1 = function (a) {
    return this.hashString(a, "sha1");
  };

  this.sha256 = function (a) {
    return this.hashString(a, "sha256");
  };

  this.sha256Hex = function (a) {
    return this.hashHex(a, "sha256");
  };

  this.sha512 = function (a) {
    return this.hashString(a, "sha512");
  };

  this.sha512Hex = function (a) {
    return this.hashHex(a, "sha512");
  };

  this.isKey = function (a) {
    if (a instanceof RSAKey || a instanceof KJUR.crypto.DSA || a instanceof KJUR.crypto.ECDSA) {
      return true;
    } else {
      return false;
    }
  };
}();

KJUR.crypto.Util.md5 = function (a) {
  var b = new KJUR.crypto.MessageDigest({
    alg: "md5",
    prov: "cryptojs"
  });
  return b.digestString(a);
};

KJUR.crypto.Util.ripemd160 = function (a) {
  var b = new KJUR.crypto.MessageDigest({
    alg: "ripemd160",
    prov: "cryptojs"
  });
  return b.digestString(a);
};

KJUR.crypto.Util.SECURERANDOMGEN = new SecureRandom();

KJUR.crypto.Util.getRandomHexOfNbytes = function (b) {
  var a = new Array(b);
  KJUR.crypto.Util.SECURERANDOMGEN.nextBytes(a);
  return BAtohex(a);
};

KJUR.crypto.Util.getRandomBigIntegerOfNbytes = function (a) {
  return new BigInteger(KJUR.crypto.Util.getRandomHexOfNbytes(a), 16);
};

KJUR.crypto.Util.getRandomHexOfNbits = function (d) {
  var c = d % 8;
  var a = (d - c) / 8;
  var b = new Array(a + 1);
  KJUR.crypto.Util.SECURERANDOMGEN.nextBytes(b);
  b[0] = (255 << c & 255 ^ 255) & b[0];
  return BAtohex(b);
};

KJUR.crypto.Util.getRandomBigIntegerOfNbits = function (a) {
  return new BigInteger(KJUR.crypto.Util.getRandomHexOfNbits(a), 16);
};

KJUR.crypto.Util.getRandomBigIntegerZeroToMax = function (b) {
  var a = b.bitLength();

  while (1) {
    var c = KJUR.crypto.Util.getRandomBigIntegerOfNbits(a);

    if (b.compareTo(c) != -1) {
      return c;
    }
  }
};

KJUR.crypto.Util.getRandomBigIntegerMinToMax = function (e, b) {
  var c = e.compareTo(b);

  if (c == 1) {
    throw "biMin is greater than biMax";
  }

  if (c == 0) {
    return e;
  }

  var a = b.subtract(e);
  var d = KJUR.crypto.Util.getRandomBigIntegerZeroToMax(a);
  return d.add(e);
};

KJUR.crypto.MessageDigest = function (c) {
  var b = null;
  var a = null;
  var d = null;

  this.setAlgAndProvider = function (g, f) {
    g = KJUR.crypto.MessageDigest.getCanonicalAlgName(g);

    if (g !== null && f === undefined) {
      f = KJUR.crypto.Util.DEFAULTPROVIDER[g];
    }

    if (":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(g) != -1 && f == "cryptojs") {
      try {
        this.md = KJUR.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[g].create();
      } catch (e) {
        throw "setAlgAndProvider hash alg set fail alg=" + g + "/" + e;
      }

      this.updateString = function (h) {
        this.md.update(h);
      };

      this.updateHex = function (h) {
        var i = CryptoJS.enc.Hex.parse(h);
        this.md.update(i);
      };

      this.digest = function () {
        var h = this.md.finalize();
        return h.toString(CryptoJS.enc.Hex);
      };

      this.digestString = function (h) {
        this.updateString(h);
        return this.digest();
      };

      this.digestHex = function (h) {
        this.updateHex(h);
        return this.digest();
      };
    }

    if (":sha256:".indexOf(g) != -1 && f == "sjcl") {
      try {
        this.md = new sjcl.hash.sha256();
      } catch (e) {
        throw "setAlgAndProvider hash alg set fail alg=" + g + "/" + e;
      }

      this.updateString = function (h) {
        this.md.update(h);
      };

      this.updateHex = function (i) {
        var h = sjcl.codec.hex.toBits(i);
        this.md.update(h);
      };

      this.digest = function () {
        var h = this.md.finalize();
        return sjcl.codec.hex.fromBits(h);
      };

      this.digestString = function (h) {
        this.updateString(h);
        return this.digest();
      };

      this.digestHex = function (h) {
        this.updateHex(h);
        return this.digest();
      };
    }
  };

  this.updateString = function (e) {
    throw "updateString(str) not supported for this alg/prov: " + this.algName + "/" + this.provName;
  };

  this.updateHex = function (e) {
    throw "updateHex(hex) not supported for this alg/prov: " + this.algName + "/" + this.provName;
  };

  this.digest = function () {
    throw "digest() not supported for this alg/prov: " + this.algName + "/" + this.provName;
  };

  this.digestString = function (e) {
    throw "digestString(str) not supported for this alg/prov: " + this.algName + "/" + this.provName;
  };

  this.digestHex = function (e) {
    throw "digestHex(hex) not supported for this alg/prov: " + this.algName + "/" + this.provName;
  };

  if (c !== undefined) {
    if (c.alg !== undefined) {
      this.algName = c.alg;

      if (c.prov === undefined) {
        this.provName = KJUR.crypto.Util.DEFAULTPROVIDER[this.algName];
      }

      this.setAlgAndProvider(this.algName, this.provName);
    }
  }
};

KJUR.crypto.MessageDigest.getCanonicalAlgName = function (a) {
  if (typeof a === "string") {
    a = a.toLowerCase();
    a = a.replace(/-/, "");
  }

  return a;
};

KJUR.crypto.MessageDigest.getHashLength = function (c) {
  var b = KJUR.crypto.MessageDigest;
  var a = b.getCanonicalAlgName(c);

  if (b.HASHLENGTH[a] === undefined) {
    throw "not supported algorithm: " + c;
  }

  return b.HASHLENGTH[a];
};

KJUR.crypto.MessageDigest.HASHLENGTH = {
  md5: 16,
  sha1: 20,
  sha224: 28,
  sha256: 32,
  sha384: 48,
  sha512: 64,
  ripemd160: 20
};

KJUR.crypto.Mac = function (d) {
  var f = null;
  var c = null;
  var a = null;
  var e = null;
  var b = null;

  this.setAlgAndProvider = function (k, i) {
    k = k.toLowerCase();

    if (k == null) {
      k = "hmacsha1";
    }

    k = k.toLowerCase();

    if (k.substr(0, 4) != "hmac") {
      throw "setAlgAndProvider unsupported HMAC alg: " + k;
    }

    if (i === undefined) {
      i = KJUR.crypto.Util.DEFAULTPROVIDER[k];
    }

    this.algProv = k + "/" + i;
    var g = k.substr(4);

    if (":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(g) != -1 && i == "cryptojs") {
      try {
        var j = KJUR.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[g];
        this.mac = CryptoJS.algo.HMAC.create(j, this.pass);
      } catch (h) {
        throw "setAlgAndProvider hash alg set fail hashAlg=" + g + "/" + h;
      }

      this.updateString = function (l) {
        this.mac.update(l);
      };

      this.updateHex = function (l) {
        var m = CryptoJS.enc.Hex.parse(l);
        this.mac.update(m);
      };

      this.doFinal = function () {
        var l = this.mac.finalize();
        return l.toString(CryptoJS.enc.Hex);
      };

      this.doFinalString = function (l) {
        this.updateString(l);
        return this.doFinal();
      };

      this.doFinalHex = function (l) {
        this.updateHex(l);
        return this.doFinal();
      };
    }
  };

  this.updateString = function (g) {
    throw "updateString(str) not supported for this alg/prov: " + this.algProv;
  };

  this.updateHex = function (g) {
    throw "updateHex(hex) not supported for this alg/prov: " + this.algProv;
  };

  this.doFinal = function () {
    throw "digest() not supported for this alg/prov: " + this.algProv;
  };

  this.doFinalString = function (g) {
    throw "digestString(str) not supported for this alg/prov: " + this.algProv;
  };

  this.doFinalHex = function (g) {
    throw "digestHex(hex) not supported for this alg/prov: " + this.algProv;
  };

  this.setPassword = function (h) {
    if (typeof h == "string") {
      var g = h;

      if (h.length % 2 == 1 || !h.match(/^[0-9A-Fa-f]+$/)) {
        g = rstrtohex(h);
      }

      this.pass = CryptoJS.enc.Hex.parse(g);
      return;
    }

    if (_typeof(h) != "object") {
      throw "KJUR.crypto.Mac unsupported password type: " + h;
    }

    var g = null;

    if (h.hex !== undefined) {
      if (h.hex.length % 2 != 0 || !h.hex.match(/^[0-9A-Fa-f]+$/)) {
        throw "Mac: wrong hex password: " + h.hex;
      }

      g = h.hex;
    }

    if (h.utf8 !== undefined) {
      g = utf8tohex(h.utf8);
    }

    if (h.rstr !== undefined) {
      g = rstrtohex(h.rstr);
    }

    if (h.b64 !== undefined) {
      g = b64tohex(h.b64);
    }

    if (h.b64u !== undefined) {
      g = b64utohex(h.b64u);
    }

    if (g == null) {
      throw "KJUR.crypto.Mac unsupported password type: " + h;
    }

    this.pass = CryptoJS.enc.Hex.parse(g);
  };

  if (d !== undefined) {
    if (d.pass !== undefined) {
      this.setPassword(d.pass);
    }

    if (d.alg !== undefined) {
      this.algName = d.alg;

      if (d.prov === undefined) {
        this.provName = KJUR.crypto.Util.DEFAULTPROVIDER[this.algName];
      }

      this.setAlgAndProvider(this.algName, this.provName);
    }
  }
};

KJUR.crypto.Signature = function (o) {
  var q = null;
  var n = null;
  var r = null;
  var c = null;
  var l = null;
  var d = null;
  var k = null;
  var h = null;
  var p = null;
  var e = null;
  var b = -1;
  var g = null;
  var j = null;
  var a = null;
  var i = null;
  var f = null;

  this._setAlgNames = function () {
    var s = this.algName.match(/^(.+)with(.+)$/);

    if (s) {
      this.mdAlgName = s[1].toLowerCase();
      this.pubkeyAlgName = s[2].toLowerCase();

      if (this.pubkeyAlgName == "rsaandmgf1" && this.mdAlgName == "sha") {
        this.mdAlgName = "sha1";
      }
    }
  };

  this._zeroPaddingOfSignature = function (x, w) {
    var v = "";
    var t = w / 4 - x.length;

    for (var u = 0; u < t; u++) {
      v = v + "0";
    }

    return v + x;
  };

  this.setAlgAndProvider = function (u, t) {
    this._setAlgNames();

    if (t != "cryptojs/jsrsa") {
      throw new Error("provider not supported: " + t);
    }

    if (":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(this.mdAlgName) != -1) {
      try {
        this.md = new KJUR.crypto.MessageDigest({
          alg: this.mdAlgName
        });
      } catch (s) {
        throw new Error("setAlgAndProvider hash alg set fail alg=" + this.mdAlgName + "/" + s);
      }

      this.init = function (w, x) {
        var y = null;

        try {
          if (x === undefined) {
            y = KEYUTIL.getKey(w);
          } else {
            y = KEYUTIL.getKey(w, x);
          }
        } catch (v) {
          throw "init failed:" + v;
        }

        if (y.isPrivate === true) {
          this.prvKey = y;
          this.state = "SIGN";
        } else {
          if (y.isPublic === true) {
            this.pubKey = y;
            this.state = "VERIFY";
          } else {
            throw "init failed.:" + y;
          }
        }
      };

      this.updateString = function (v) {
        this.md.updateString(v);
      };

      this.updateHex = function (v) {
        this.md.updateHex(v);
      };

      this.sign = function () {
        this.sHashHex = this.md.digest();

        if (this.prvKey === undefined && this.ecprvhex !== undefined && this.eccurvename !== undefined && KJUR.crypto.ECDSA !== undefined) {
          this.prvKey = new KJUR.crypto.ECDSA({
            curve: this.eccurvename,
            prv: this.ecprvhex
          });
        }

        if (this.prvKey instanceof RSAKey && this.pubkeyAlgName === "rsaandmgf1") {
          this.hSign = this.prvKey.signWithMessageHashPSS(this.sHashHex, this.mdAlgName, this.pssSaltLen);
        } else {
          if (this.prvKey instanceof RSAKey && this.pubkeyAlgName === "rsa") {
            this.hSign = this.prvKey.signWithMessageHash(this.sHashHex, this.mdAlgName);
          } else {
            if (this.prvKey instanceof KJUR.crypto.ECDSA) {
              this.hSign = this.prvKey.signWithMessageHash(this.sHashHex);
            } else {
              if (this.prvKey instanceof KJUR.crypto.DSA) {
                this.hSign = this.prvKey.signWithMessageHash(this.sHashHex);
              } else {
                throw "Signature: unsupported private key alg: " + this.pubkeyAlgName;
              }
            }
          }
        }

        return this.hSign;
      };

      this.signString = function (v) {
        this.updateString(v);
        return this.sign();
      };

      this.signHex = function (v) {
        this.updateHex(v);
        return this.sign();
      };

      this.verify = function (v) {
        this.sHashHex = this.md.digest();

        if (this.pubKey === undefined && this.ecpubhex !== undefined && this.eccurvename !== undefined && KJUR.crypto.ECDSA !== undefined) {
          this.pubKey = new KJUR.crypto.ECDSA({
            curve: this.eccurvename,
            pub: this.ecpubhex
          });
        }

        if (this.pubKey instanceof RSAKey && this.pubkeyAlgName === "rsaandmgf1") {
          return this.pubKey.verifyWithMessageHashPSS(this.sHashHex, v, this.mdAlgName, this.pssSaltLen);
        } else {
          if (this.pubKey instanceof RSAKey && this.pubkeyAlgName === "rsa") {
            return this.pubKey.verifyWithMessageHash(this.sHashHex, v);
          } else {
            if (KJUR.crypto.ECDSA !== undefined && this.pubKey instanceof KJUR.crypto.ECDSA) {
              return this.pubKey.verifyWithMessageHash(this.sHashHex, v);
            } else {
              if (KJUR.crypto.DSA !== undefined && this.pubKey instanceof KJUR.crypto.DSA) {
                return this.pubKey.verifyWithMessageHash(this.sHashHex, v);
              } else {
                throw "Signature: unsupported public key alg: " + this.pubkeyAlgName;
              }
            }
          }
        }
      };
    }
  };

  this.init = function (s, t) {
    throw "init(key, pass) not supported for this alg:prov=" + this.algProvName;
  };

  this.updateString = function (s) {
    throw "updateString(str) not supported for this alg:prov=" + this.algProvName;
  };

  this.updateHex = function (s) {
    throw "updateHex(hex) not supported for this alg:prov=" + this.algProvName;
  };

  this.sign = function () {
    throw "sign() not supported for this alg:prov=" + this.algProvName;
  };

  this.signString = function (s) {
    throw "digestString(str) not supported for this alg:prov=" + this.algProvName;
  };

  this.signHex = function (s) {
    throw "digestHex(hex) not supported for this alg:prov=" + this.algProvName;
  };

  this.verify = function (s) {
    throw "verify(hSigVal) not supported for this alg:prov=" + this.algProvName;
  };

  this.initParams = o;

  if (o !== undefined) {
    if (o.alg !== undefined) {
      this.algName = o.alg;

      if (o.prov === undefined) {
        this.provName = KJUR.crypto.Util.DEFAULTPROVIDER[this.algName];
      } else {
        this.provName = o.prov;
      }

      this.algProvName = this.algName + ":" + this.provName;
      this.setAlgAndProvider(this.algName, this.provName);

      this._setAlgNames();
    }

    if (o.psssaltlen !== undefined) {
      this.pssSaltLen = o.psssaltlen;
    }

    if (o.prvkeypem !== undefined) {
      if (o.prvkeypas !== undefined) {
        throw "both prvkeypem and prvkeypas parameters not supported";
      } else {
        try {
          var q = KEYUTIL.getKey(o.prvkeypem);
          this.init(q);
        } catch (m) {
          throw "fatal error to load pem private key: " + m;
        }
      }
    }
  }
};

KJUR.crypto.Cipher = function (a) {};

KJUR.crypto.Cipher.encrypt = function (e, f, d) {
  if (f instanceof RSAKey && f.isPublic) {
    var c = KJUR.crypto.Cipher.getAlgByKeyAndName(f, d);

    if (c === "RSA") {
      return f.encrypt(e);
    }

    if (c === "RSAOAEP") {
      return f.encryptOAEP(e, "sha1");
    }

    var b = c.match(/^RSAOAEP(\d+)$/);

    if (b !== null) {
      return f.encryptOAEP(e, "sha" + b[1]);
    }

    throw "Cipher.encrypt: unsupported algorithm for RSAKey: " + d;
  } else {
    throw "Cipher.encrypt: unsupported key or algorithm";
  }
};

KJUR.crypto.Cipher.decrypt = function (e, f, d) {
  if (f instanceof RSAKey && f.isPrivate) {
    var c = KJUR.crypto.Cipher.getAlgByKeyAndName(f, d);

    if (c === "RSA") {
      return f.decrypt(e);
    }

    if (c === "RSAOAEP") {
      return f.decryptOAEP(e, "sha1");
    }

    var b = c.match(/^RSAOAEP(\d+)$/);

    if (b !== null) {
      return f.decryptOAEP(e, "sha" + b[1]);
    }

    throw "Cipher.decrypt: unsupported algorithm for RSAKey: " + d;
  } else {
    throw "Cipher.decrypt: unsupported key or algorithm";
  }
};

KJUR.crypto.Cipher.getAlgByKeyAndName = function (b, a) {
  if (b instanceof RSAKey) {
    if (":RSA:RSAOAEP:RSAOAEP224:RSAOAEP256:RSAOAEP384:RSAOAEP512:".indexOf(a) != -1) {
      return a;
    }

    if (a === null || a === undefined) {
      return "RSA";
    }

    throw "getAlgByKeyAndName: not supported algorithm name for RSAKey: " + a;
  }

  throw "getAlgByKeyAndName: not supported algorithm name: " + a;
};

KJUR.crypto.OID = new function () {
  this.oidhex2name = {
    "2a864886f70d010101": "rsaEncryption",
    "2a8648ce3d0201": "ecPublicKey",
    "2a8648ce380401": "dsa",
    "2a8648ce3d030107": "secp256r1",
    "2b8104001f": "secp192k1",
    "2b81040021": "secp224r1",
    "2b8104000a": "secp256k1",
    "2b81040023": "secp521r1",
    "2b81040022": "secp384r1",
    "2a8648ce380403": "SHA1withDSA",
    "608648016503040301": "SHA224withDSA",
    "608648016503040302": "SHA256withDSA"
  };
}();

if (typeof KJUR == "undefined" || !KJUR) {
  KJUR = {};
}

if (typeof KJUR.crypto == "undefined" || !KJUR.crypto) {
  KJUR.crypto = {};
}

KJUR.crypto.ECDSA = function (e) {
  var g = "secp256r1";
  var p = null;
  var b = null;
  var i = null;
  var j = Error,
      f = BigInteger,
      h = ECPointFp,
      m = KJUR.crypto.ECDSA,
      c = KJUR.crypto.ECParameterDB,
      d = m.getName,
      q = ASN1HEX,
      n = q.getVbyListEx,
      k = q.isASN1HEX;
  var a = new SecureRandom();
  var o = null;
  this.type = "EC";
  this.isPrivate = false;
  this.isPublic = false;

  function l(x, t, w, s) {
    var r = Math.max(t.bitLength(), s.bitLength());
    var y = x.add2D(w);
    var v = x.curve.getInfinity();

    for (var u = r - 1; u >= 0; --u) {
      v = v.twice2D();
      v.z = f.ONE;

      if (t.testBit(u)) {
        if (s.testBit(u)) {
          v = v.add2D(y);
        } else {
          v = v.add2D(x);
        }
      } else {
        if (s.testBit(u)) {
          v = v.add2D(w);
        }
      }
    }

    return v;
  }

  this.getBigRandom = function (r) {
    return new f(r.bitLength(), a).mod(r.subtract(f.ONE)).add(f.ONE);
  };

  this.setNamedCurve = function (r) {
    this.ecparams = c.getByName(r);
    this.prvKeyHex = null;
    this.pubKeyHex = null;
    this.curveName = r;
  };

  this.setPrivateKeyHex = function (r) {
    this.isPrivate = true;
    this.prvKeyHex = r;
  };

  this.setPublicKeyHex = function (r) {
    this.isPublic = true;
    this.pubKeyHex = r;
  };

  this.getPublicKeyXYHex = function () {
    var t = this.pubKeyHex;

    if (t.substr(0, 2) !== "04") {
      throw "this method supports uncompressed format(04) only";
    }

    var s = this.ecparams.keylen / 4;

    if (t.length !== 2 + s * 2) {
      throw "malformed public key hex length";
    }

    var r = {};
    r.x = t.substr(2, s);
    r.y = t.substr(2 + s);
    return r;
  };

  this.getShortNISTPCurveName = function () {
    var r = this.curveName;

    if (r === "secp256r1" || r === "NIST P-256" || r === "P-256" || r === "prime256v1") {
      return "P-256";
    }

    if (r === "secp384r1" || r === "NIST P-384" || r === "P-384") {
      return "P-384";
    }

    return null;
  };

  this.generateKeyPairHex = function () {
    var t = this.ecparams.n;
    var w = this.getBigRandom(t);
    var u = this.ecparams.G.multiply(w);
    var z = u.getX().toBigInteger();
    var x = u.getY().toBigInteger();
    var r = this.ecparams.keylen / 4;
    var v = ("0000000000" + w.toString(16)).slice(-r);
    var A = ("0000000000" + z.toString(16)).slice(-r);
    var y = ("0000000000" + x.toString(16)).slice(-r);
    var s = "04" + A + y;
    this.setPrivateKeyHex(v);
    this.setPublicKeyHex(s);
    return {
      ecprvhex: v,
      ecpubhex: s
    };
  };

  this.signWithMessageHash = function (r) {
    return this.signHex(r, this.prvKeyHex);
  };

  this.signHex = function (x, u) {
    var A = new f(u, 16);
    var v = this.ecparams.n;
    var z = new f(x.substring(0, this.ecparams.keylen / 4), 16);

    do {
      var w = this.getBigRandom(v);
      var B = this.ecparams.G;
      var y = B.multiply(w);
      var t = y.getX().toBigInteger().mod(v);
    } while (t.compareTo(f.ZERO) <= 0);

    var C = w.modInverse(v).multiply(z.add(A.multiply(t))).mod(v);
    return m.biRSSigToASN1Sig(t, C);
  };

  this.sign = function (w, B) {
    var z = B;
    var u = this.ecparams.n;
    var y = f.fromByteArrayUnsigned(w);

    do {
      var v = this.getBigRandom(u);
      var A = this.ecparams.G;
      var x = A.multiply(v);
      var t = x.getX().toBigInteger().mod(u);
    } while (t.compareTo(BigInteger.ZERO) <= 0);

    var C = v.modInverse(u).multiply(y.add(z.multiply(t))).mod(u);
    return this.serializeSig(t, C);
  };

  this.verifyWithMessageHash = function (s, r) {
    return this.verifyHex(s, r, this.pubKeyHex);
  };

  this.verifyHex = function (v, y, u) {
    try {
      var t, B;
      var w = m.parseSigHex(y);
      t = w.r;
      B = w.s;
      var x = h.decodeFromHex(this.ecparams.curve, u);
      var z = new f(v.substring(0, this.ecparams.keylen / 4), 16);
      return this.verifyRaw(z, t, B, x);
    } catch (A) {
      return false;
    }
  };

  this.verify = function (z, A, u) {
    var w, t;

    if (Bitcoin.Util.isArray(A)) {
      var y = this.parseSig(A);
      w = y.r;
      t = y.s;
    } else {
      if ("object" === _typeof(A) && A.r && A.s) {
        w = A.r;
        t = A.s;
      } else {
        throw "Invalid value for signature";
      }
    }

    var v;

    if (u instanceof ECPointFp) {
      v = u;
    } else {
      if (Bitcoin.Util.isArray(u)) {
        v = h.decodeFrom(this.ecparams.curve, u);
      } else {
        throw "Invalid format for pubkey value, must be byte array or ECPointFp";
      }
    }

    var x = f.fromByteArrayUnsigned(z);
    return this.verifyRaw(x, w, t, v);
  };

  this.verifyRaw = function (z, t, E, y) {
    var x = this.ecparams.n;
    var D = this.ecparams.G;

    if (t.compareTo(f.ONE) < 0 || t.compareTo(x) >= 0) {
      return false;
    }

    if (E.compareTo(f.ONE) < 0 || E.compareTo(x) >= 0) {
      return false;
    }

    var A = E.modInverse(x);
    var w = z.multiply(A).mod(x);
    var u = t.multiply(A).mod(x);
    var B = D.multiply(w).add(y.multiply(u));
    var C = B.getX().toBigInteger().mod(x);
    return C.equals(t);
  };

  this.serializeSig = function (v, u) {
    var w = v.toByteArraySigned();
    var t = u.toByteArraySigned();
    var x = [];
    x.push(2);
    x.push(w.length);
    x = x.concat(w);
    x.push(2);
    x.push(t.length);
    x = x.concat(t);
    x.unshift(x.length);
    x.unshift(48);
    return x;
  };

  this.parseSig = function (y) {
    var x;

    if (y[0] != 48) {
      throw new Error("Signature not a valid DERSequence");
    }

    x = 2;

    if (y[x] != 2) {
      throw new Error("First element in signature must be a DERInteger");
    }

    var w = y.slice(x + 2, x + 2 + y[x + 1]);
    x += 2 + y[x + 1];

    if (y[x] != 2) {
      throw new Error("Second element in signature must be a DERInteger");
    }

    var t = y.slice(x + 2, x + 2 + y[x + 1]);
    x += 2 + y[x + 1];
    var v = f.fromByteArrayUnsigned(w);
    var u = f.fromByteArrayUnsigned(t);
    return {
      r: v,
      s: u
    };
  };

  this.parseSigCompact = function (w) {
    if (w.length !== 65) {
      throw "Signature has the wrong length";
    }

    var t = w[0] - 27;

    if (t < 0 || t > 7) {
      throw "Invalid signature type";
    }

    var x = this.ecparams.n;
    var v = f.fromByteArrayUnsigned(w.slice(1, 33)).mod(x);
    var u = f.fromByteArrayUnsigned(w.slice(33, 65)).mod(x);
    return {
      r: v,
      s: u,
      i: t
    };
  };

  this.readPKCS5PrvKeyHex = function (u) {
    if (k(u) === false) {
      throw new Error("not ASN.1 hex string");
    }

    var r, t, v;

    try {
      r = n(u, 0, ["[0]", 0], "06");
      t = n(u, 0, [1], "04");

      try {
        v = n(u, 0, ["[1]", 0], "03");
      } catch (s) {}
    } catch (s) {
      throw new Error("malformed PKCS#1/5 plain ECC private key");
    }

    this.curveName = d(r);

    if (this.curveName === undefined) {
      throw "unsupported curve name";
    }

    this.setNamedCurve(this.curveName);
    this.setPublicKeyHex(v);
    this.setPrivateKeyHex(t);
    this.isPublic = false;
  };

  this.readPKCS8PrvKeyHex = function (v) {
    if (k(v) === false) {
      throw new j("not ASN.1 hex string");
    }

    var t, r, u, w;

    try {
      t = n(v, 0, [1, 0], "06");
      r = n(v, 0, [1, 1], "06");
      u = n(v, 0, [2, 0, 1], "04");

      try {
        w = n(v, 0, [2, 0, "[1]", 0], "03");
      } catch (s) {}
    } catch (s) {
      throw new j("malformed PKCS#8 plain ECC private key");
    }

    this.curveName = d(r);

    if (this.curveName === undefined) {
      throw new j("unsupported curve name");
    }

    this.setNamedCurve(this.curveName);
    this.setPublicKeyHex(w);
    this.setPrivateKeyHex(u);
    this.isPublic = false;
  };

  this.readPKCS8PubKeyHex = function (u) {
    if (k(u) === false) {
      throw new j("not ASN.1 hex string");
    }

    var t, r, v;

    try {
      t = n(u, 0, [0, 0], "06");
      r = n(u, 0, [0, 1], "06");
      v = n(u, 0, [1], "03");
    } catch (s) {
      throw new j("malformed PKCS#8 ECC public key");
    }

    this.curveName = d(r);

    if (this.curveName === null) {
      throw new j("unsupported curve name");
    }

    this.setNamedCurve(this.curveName);
    this.setPublicKeyHex(v);
  };

  this.readCertPubKeyHex = function (t, v) {
    if (k(t) === false) {
      throw new j("not ASN.1 hex string");
    }

    var r, u;

    try {
      r = n(t, 0, [0, 5, 0, 1], "06");
      u = n(t, 0, [0, 5, 1], "03");
    } catch (s) {
      throw new j("malformed X.509 certificate ECC public key");
    }

    this.curveName = d(r);

    if (this.curveName === null) {
      throw new j("unsupported curve name");
    }

    this.setNamedCurve(this.curveName);
    this.setPublicKeyHex(u);
  };

  if (e !== undefined) {
    if (e.curve !== undefined) {
      this.curveName = e.curve;
    }
  }

  if (this.curveName === undefined) {
    this.curveName = g;
  }

  this.setNamedCurve(this.curveName);

  if (e !== undefined) {
    if (e.prv !== undefined) {
      this.setPrivateKeyHex(e.prv);
    }

    if (e.pub !== undefined) {
      this.setPublicKeyHex(e.pub);
    }
  }
};

KJUR.crypto.ECDSA.parseSigHex = function (a) {
  var b = KJUR.crypto.ECDSA.parseSigHexInHexRS(a);
  var d = new BigInteger(b.r, 16);
  var c = new BigInteger(b.s, 16);
  return {
    r: d,
    s: c
  };
};

KJUR.crypto.ECDSA.parseSigHexInHexRS = function (f) {
  var j = ASN1HEX,
      i = j.getChildIdx,
      g = j.getV;
  j.checkStrictDER(f, 0);

  if (f.substr(0, 2) != "30") {
    throw new Error("signature is not a ASN.1 sequence");
  }

  var h = i(f, 0);

  if (h.length != 2) {
    throw new Error("signature shall have two elements");
  }

  var e = h[0];
  var d = h[1];

  if (f.substr(e, 2) != "02") {
    throw new Error("1st item not ASN.1 integer");
  }

  if (f.substr(d, 2) != "02") {
    throw new Error("2nd item not ASN.1 integer");
  }

  var c = g(f, e);
  var b = g(f, d);
  return {
    r: c,
    s: b
  };
};

KJUR.crypto.ECDSA.asn1SigToConcatSig = function (c) {
  var d = KJUR.crypto.ECDSA.parseSigHexInHexRS(c);
  var b = d.r;
  var a = d.s;

  if (b.substr(0, 2) == "00" && b.length % 32 == 2) {
    b = b.substr(2);
  }

  if (a.substr(0, 2) == "00" && a.length % 32 == 2) {
    a = a.substr(2);
  }

  if (b.length % 32 == 30) {
    b = "00" + b;
  }

  if (a.length % 32 == 30) {
    a = "00" + a;
  }

  if (b.length % 32 != 0) {
    throw "unknown ECDSA sig r length error";
  }

  if (a.length % 32 != 0) {
    throw "unknown ECDSA sig s length error";
  }

  return b + a;
};

KJUR.crypto.ECDSA.concatSigToASN1Sig = function (a) {
  if (a.length / 2 * 8 % (16 * 8) != 0) {
    throw "unknown ECDSA concatinated r-s sig  length error";
  }

  var c = a.substr(0, a.length / 2);
  var b = a.substr(a.length / 2);
  return KJUR.crypto.ECDSA.hexRSSigToASN1Sig(c, b);
};

KJUR.crypto.ECDSA.hexRSSigToASN1Sig = function (b, a) {
  var d = new BigInteger(b, 16);
  var c = new BigInteger(a, 16);
  return KJUR.crypto.ECDSA.biRSSigToASN1Sig(d, c);
};

KJUR.crypto.ECDSA.biRSSigToASN1Sig = function (f, d) {
  var c = KJUR.asn1;
  var b = new c.DERInteger({
    bigint: f
  });
  var a = new c.DERInteger({
    bigint: d
  });
  var e = new c.DERSequence({
    array: [b, a]
  });
  return e.getEncodedHex();
};

KJUR.crypto.ECDSA.getName = function (a) {
  if (a === "2b8104001f") {
    return "secp192k1";
  }

  if (a === "2a8648ce3d030107") {
    return "secp256r1";
  }

  if (a === "2b8104000a") {
    return "secp256k1";
  }

  if (a === "2b81040021") {
    return "secp224r1";
  }

  if (a === "2b81040022") {
    return "secp384r1";
  }

  if ("|secp256r1|NIST P-256|P-256|prime256v1|".indexOf(a) !== -1) {
    return "secp256r1";
  }

  if ("|secp256k1|".indexOf(a) !== -1) {
    return "secp256k1";
  }

  if ("|secp224r1|NIST P-224|P-224|".indexOf(a) !== -1) {
    return "secp224r1";
  }

  if ("|secp384r1|NIST P-384|P-384|".indexOf(a) !== -1) {
    return "secp384r1";
  }

  return null;
};

if (typeof KJUR == "undefined" || !KJUR) {
  KJUR = {};
}

if (typeof KJUR.crypto == "undefined" || !KJUR.crypto) {
  KJUR.crypto = {};
}

KJUR.crypto.ECParameterDB = new function () {
  var b = {};
  var c = {};

  function a(d) {
    return new BigInteger(d, 16);
  }

  this.getByName = function (e) {
    var d = e;

    if (typeof c[d] != "undefined") {
      d = c[e];
    }

    if (typeof b[d] != "undefined") {
      return b[d];
    }

    throw "unregistered EC curve name: " + d;
  };

  this.regist = function (A, l, o, g, m, e, j, f, k, u, d, x) {
    b[A] = {};
    var s = a(o);
    var z = a(g);
    var y = a(m);
    var t = a(e);
    var w = a(j);
    var r = new ECCurveFp(s, z, y);
    var q = r.decodePointHex("04" + f + k);
    b[A]["name"] = A;
    b[A]["keylen"] = l;
    b[A]["curve"] = r;
    b[A]["G"] = q;
    b[A]["n"] = t;
    b[A]["h"] = w;
    b[A]["oid"] = d;
    b[A]["info"] = x;

    for (var v = 0; v < u.length; v++) {
      c[u[v]] = A;
    }
  };
}();
KJUR.crypto.ECParameterDB.regist("secp128r1", 128, "FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFF", "FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFC", "E87579C11079F43DD824993C2CEE5ED3", "FFFFFFFE0000000075A30D1B9038A115", "1", "161FF7528B899B2D0C28607CA52C5B86", "CF5AC8395BAFEB13C02DA292DDED7A83", [], "", "secp128r1 : SECG curve over a 128 bit prime field");
KJUR.crypto.ECParameterDB.regist("secp160k1", 160, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFAC73", "0", "7", "0100000000000000000001B8FA16DFAB9ACA16B6B3", "1", "3B4C382CE37AA192A4019E763036F4F5DD4D7EBB", "938CF935318FDCED6BC28286531733C3F03C4FEE", [], "", "secp160k1 : SECG curve over a 160 bit prime field");
KJUR.crypto.ECParameterDB.regist("secp160r1", 160, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFF", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFC", "1C97BEFC54BD7A8B65ACF89F81D4D4ADC565FA45", "0100000000000000000001F4C8F927AED3CA752257", "1", "4A96B5688EF573284664698968C38BB913CBFC82", "23A628553168947D59DCC912042351377AC5FB32", [], "", "secp160r1 : SECG curve over a 160 bit prime field");
KJUR.crypto.ECParameterDB.regist("secp192k1", 192, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFEE37", "0", "3", "FFFFFFFFFFFFFFFFFFFFFFFE26F2FC170F69466A74DEFD8D", "1", "DB4FF10EC057E9AE26B07D0280B7F4341DA5D1B1EAE06C7D", "9B2F2F6D9C5628A7844163D015BE86344082AA88D95E2F9D", []);
KJUR.crypto.ECParameterDB.regist("secp192r1", 192, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFF", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFC", "64210519E59C80E70FA7E9AB72243049FEB8DEECC146B9B1", "FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22831", "1", "188DA80EB03090F67CBF20EB43A18800F4FF0AFD82FF1012", "07192B95FFC8DA78631011ED6B24CDD573F977A11E794811", []);
KJUR.crypto.ECParameterDB.regist("secp224r1", 224, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFE", "B4050A850C04B3ABF54132565044B0B7D7BFD8BA270B39432355FFB4", "FFFFFFFFFFFFFFFFFFFFFFFFFFFF16A2E0B8F03E13DD29455C5C2A3D", "1", "B70E0CBD6BB4BF7F321390B94A03C1D356C21122343280D6115C1D21", "BD376388B5F723FB4C22DFE6CD4375A05A07476444D5819985007E34", []);
KJUR.crypto.ECParameterDB.regist("secp256k1", 256, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F", "0", "7", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141", "1", "79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798", "483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8", []);
KJUR.crypto.ECParameterDB.regist("secp256r1", 256, "FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF", "FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC", "5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B", "FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551", "1", "6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296", "4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5", ["NIST P-256", "P-256", "prime256v1"]);
KJUR.crypto.ECParameterDB.regist("secp384r1", 384, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFF", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFC", "B3312FA7E23EE7E4988E056BE3F82D19181D9C6EFE8141120314088F5013875AC656398D8A2ED19D2A85C8EDD3EC2AEF", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC7634D81F4372DDF581A0DB248B0A77AECEC196ACCC52973", "1", "AA87CA22BE8B05378EB1C71EF320AD746E1D3B628BA79B9859F741E082542A385502F25DBF55296C3A545E3872760AB7", "3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f", ["NIST P-384", "P-384"]);
KJUR.crypto.ECParameterDB.regist("secp521r1", 521, "1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", "1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC", "051953EB9618E1C9A1F929A21A0B68540EEA2DA725B99B315F3B8B489918EF109E156193951EC7E937B1652C0BD3BB1BF073573DF883D2C34F1EF451FD46B503F00", "1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA51868783BF2F966B7FCC0148F709A5D03BB5C9B8899C47AEBB6FB71E91386409", "1", "C6858E06B70404E9CD9E3ECB662395B4429C648139053FB521F828AF606B4D3DBAA14B5E77EFE75928FE1DC127A2FFA8DE3348B3C1856A429BF97E7E31C2E5BD66", "011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650", ["NIST P-521", "P-521"]);

var KEYUTIL = function () {
  var d = function d(p, r, q) {
    return k(CryptoJS.AES, p, r, q);
  };

  var e = function e(p, r, q) {
    return k(CryptoJS.TripleDES, p, r, q);
  };

  var a = function a(p, r, q) {
    return k(CryptoJS.DES, p, r, q);
  };

  var k = function k(s, x, u, q) {
    var r = CryptoJS.enc.Hex.parse(x);
    var w = CryptoJS.enc.Hex.parse(u);
    var p = CryptoJS.enc.Hex.parse(q);
    var t = {};
    t.key = w;
    t.iv = p;
    t.ciphertext = r;
    var v = s.decrypt(t, w, {
      iv: p
    });
    return CryptoJS.enc.Hex.stringify(v);
  };

  var l = function l(p, r, q) {
    return g(CryptoJS.AES, p, r, q);
  };

  var o = function o(p, r, q) {
    return g(CryptoJS.TripleDES, p, r, q);
  };

  var f = function f(p, r, q) {
    return g(CryptoJS.DES, p, r, q);
  };

  var g = function g(t, y, v, q) {
    var s = CryptoJS.enc.Hex.parse(y);
    var x = CryptoJS.enc.Hex.parse(v);
    var p = CryptoJS.enc.Hex.parse(q);
    var w = t.encrypt(s, x, {
      iv: p
    });
    var r = CryptoJS.enc.Hex.parse(w.toString());
    var u = CryptoJS.enc.Base64.stringify(r);
    return u;
  };

  var i = {
    "AES-256-CBC": {
      proc: d,
      eproc: l,
      keylen: 32,
      ivlen: 16
    },
    "AES-192-CBC": {
      proc: d,
      eproc: l,
      keylen: 24,
      ivlen: 16
    },
    "AES-128-CBC": {
      proc: d,
      eproc: l,
      keylen: 16,
      ivlen: 16
    },
    "DES-EDE3-CBC": {
      proc: e,
      eproc: o,
      keylen: 24,
      ivlen: 8
    },
    "DES-CBC": {
      proc: a,
      eproc: f,
      keylen: 8,
      ivlen: 8
    }
  };

  var c = function c(p) {
    return i[p]["proc"];
  };

  var m = function m(p) {
    var r = CryptoJS.lib.WordArray.random(p);
    var q = CryptoJS.enc.Hex.stringify(r);
    return q;
  };

  var n = function n(v) {
    var w = {};
    var q = v.match(new RegExp("DEK-Info: ([^,]+),([0-9A-Fa-f]+)", "m"));

    if (q) {
      w.cipher = q[1];
      w.ivsalt = q[2];
    }

    var p = v.match(new RegExp("-----BEGIN ([A-Z]+) PRIVATE KEY-----"));

    if (p) {
      w.type = p[1];
    }

    var u = -1;
    var x = 0;

    if (v.indexOf("\r\n\r\n") != -1) {
      u = v.indexOf("\r\n\r\n");
      x = 2;
    }

    if (v.indexOf("\n\n") != -1) {
      u = v.indexOf("\n\n");
      x = 1;
    }

    var t = v.indexOf("-----END");

    if (u != -1 && t != -1) {
      var r = v.substring(u + x * 2, t - x);
      r = r.replace(/\s+/g, "");
      w.data = r;
    }

    return w;
  };

  var j = function j(q, y, p) {
    var v = p.substring(0, 16);
    var t = CryptoJS.enc.Hex.parse(v);
    var r = CryptoJS.enc.Utf8.parse(y);
    var u = i[q]["keylen"] + i[q]["ivlen"];
    var x = "";
    var w = null;

    for (;;) {
      var s = CryptoJS.algo.MD5.create();

      if (w != null) {
        s.update(w);
      }

      s.update(r);
      s.update(t);
      w = s.finalize();
      x = x + CryptoJS.enc.Hex.stringify(w);

      if (x.length >= u * 2) {
        break;
      }
    }

    var z = {};
    z.keyhex = x.substr(0, i[q]["keylen"] * 2);
    z.ivhex = x.substr(i[q]["keylen"] * 2, i[q]["ivlen"] * 2);
    return z;
  };

  var b = function b(p, v, r, w) {
    var s = CryptoJS.enc.Base64.parse(p);
    var q = CryptoJS.enc.Hex.stringify(s);
    var u = i[v]["proc"];
    var t = u(q, r, w);
    return t;
  };

  var h = function h(p, s, q, u) {
    var r = i[s]["eproc"];
    var t = r(p, q, u);
    return t;
  };

  return {
    version: "1.0.0",
    parsePKCS5PEM: function parsePKCS5PEM(p) {
      return n(p);
    },
    getKeyAndUnusedIvByPasscodeAndIvsalt: function getKeyAndUnusedIvByPasscodeAndIvsalt(q, p, r) {
      return j(q, p, r);
    },
    decryptKeyB64: function decryptKeyB64(p, r, q, s) {
      return b(p, r, q, s);
    },
    getDecryptedKeyHex: function getDecryptedKeyHex(y, x) {
      var q = n(y);
      var t = q.type;
      var r = q.cipher;
      var p = q.ivsalt;
      var s = q.data;
      var w = j(r, x, p);
      var v = w.keyhex;
      var u = b(s, r, v, p);
      return u;
    },
    getEncryptedPKCS5PEMFromPrvKeyHex: function getEncryptedPKCS5PEMFromPrvKeyHex(x, s, A, t, r) {
      var p = "";

      if (typeof t == "undefined" || t == null) {
        t = "AES-256-CBC";
      }

      if (typeof i[t] == "undefined") {
        throw "KEYUTIL unsupported algorithm: " + t;
      }

      if (typeof r == "undefined" || r == null) {
        var v = i[t]["ivlen"];
        var u = m(v);
        r = u.toUpperCase();
      }

      var z = j(t, A, r);
      var y = z.keyhex;
      var w = h(s, t, y, r);
      var q = w.replace(/(.{64})/g, "$1\r\n");
      var p = "-----BEGIN " + x + " PRIVATE KEY-----\r\n";
      p += "Proc-Type: 4,ENCRYPTED\r\n";
      p += "DEK-Info: " + t + "," + r + "\r\n";
      p += "\r\n";
      p += q;
      p += "\r\n-----END " + x + " PRIVATE KEY-----\r\n";
      return p;
    },
    parseHexOfEncryptedPKCS8: function parseHexOfEncryptedPKCS8(y) {
      var B = ASN1HEX;
      var z = B.getChildIdx;
      var w = B.getV;
      var t = {};
      var r = z(y, 0);

      if (r.length != 2) {
        throw "malformed format: SEQUENCE(0).items != 2: " + r.length;
      }

      t.ciphertext = w(y, r[1]);
      var A = z(y, r[0]);

      if (A.length != 2) {
        throw "malformed format: SEQUENCE(0.0).items != 2: " + A.length;
      }

      if (w(y, A[0]) != "2a864886f70d01050d") {
        throw "this only supports pkcs5PBES2";
      }

      var p = z(y, A[1]);

      if (A.length != 2) {
        throw "malformed format: SEQUENCE(0.0.1).items != 2: " + p.length;
      }

      var q = z(y, p[1]);

      if (q.length != 2) {
        throw "malformed format: SEQUENCE(0.0.1.1).items != 2: " + q.length;
      }

      if (w(y, q[0]) != "2a864886f70d0307") {
        throw "this only supports TripleDES";
      }

      t.encryptionSchemeAlg = "TripleDES";
      t.encryptionSchemeIV = w(y, q[1]);
      var s = z(y, p[0]);

      if (s.length != 2) {
        throw "malformed format: SEQUENCE(0.0.1.0).items != 2: " + s.length;
      }

      if (w(y, s[0]) != "2a864886f70d01050c") {
        throw "this only supports pkcs5PBKDF2";
      }

      var x = z(y, s[1]);

      if (x.length < 2) {
        throw "malformed format: SEQUENCE(0.0.1.0.1).items < 2: " + x.length;
      }

      t.pbkdf2Salt = w(y, x[0]);
      var u = w(y, x[1]);

      try {
        t.pbkdf2Iter = parseInt(u, 16);
      } catch (v) {
        throw "malformed format pbkdf2Iter: " + u;
      }

      return t;
    },
    getPBKDF2KeyHexFromParam: function getPBKDF2KeyHexFromParam(u, p) {
      var t = CryptoJS.enc.Hex.parse(u.pbkdf2Salt);
      var q = u.pbkdf2Iter;
      var s = CryptoJS.PBKDF2(p, t, {
        keySize: 192 / 32,
        iterations: q
      });
      var r = CryptoJS.enc.Hex.stringify(s);
      return r;
    },
    _getPlainPKCS8HexFromEncryptedPKCS8PEM: function _getPlainPKCS8HexFromEncryptedPKCS8PEM(x, y) {
      var r = pemtohex(x, "ENCRYPTED PRIVATE KEY");
      var p = this.parseHexOfEncryptedPKCS8(r);
      var u = KEYUTIL.getPBKDF2KeyHexFromParam(p, y);
      var v = {};
      v.ciphertext = CryptoJS.enc.Hex.parse(p.ciphertext);
      var t = CryptoJS.enc.Hex.parse(u);
      var s = CryptoJS.enc.Hex.parse(p.encryptionSchemeIV);
      var w = CryptoJS.TripleDES.decrypt(v, t, {
        iv: s
      });
      var q = CryptoJS.enc.Hex.stringify(w);
      return q;
    },
    getKeyFromEncryptedPKCS8PEM: function getKeyFromEncryptedPKCS8PEM(s, q) {
      var p = this._getPlainPKCS8HexFromEncryptedPKCS8PEM(s, q);

      var r = this.getKeyFromPlainPrivatePKCS8Hex(p);
      return r;
    },
    parsePlainPrivatePKCS8Hex: function parsePlainPrivatePKCS8Hex(s) {
      var v = ASN1HEX;
      var u = v.getChildIdx;
      var t = v.getV;
      var q = {};
      q.algparam = null;

      if (s.substr(0, 2) != "30") {
        throw "malformed plain PKCS8 private key(code:001)";
      }

      var r = u(s, 0);

      if (r.length != 3) {
        throw "malformed plain PKCS8 private key(code:002)";
      }

      if (s.substr(r[1], 2) != "30") {
        throw "malformed PKCS8 private key(code:003)";
      }

      var p = u(s, r[1]);

      if (p.length != 2) {
        throw "malformed PKCS8 private key(code:004)";
      }

      if (s.substr(p[0], 2) != "06") {
        throw "malformed PKCS8 private key(code:005)";
      }

      q.algoid = t(s, p[0]);

      if (s.substr(p[1], 2) == "06") {
        q.algparam = t(s, p[1]);
      }

      if (s.substr(r[2], 2) != "04") {
        throw "malformed PKCS8 private key(code:006)";
      }

      q.keyidx = v.getVidx(s, r[2]);
      return q;
    },
    getKeyFromPlainPrivatePKCS8PEM: function getKeyFromPlainPrivatePKCS8PEM(q) {
      var p = pemtohex(q, "PRIVATE KEY");
      var r = this.getKeyFromPlainPrivatePKCS8Hex(p);
      return r;
    },
    getKeyFromPlainPrivatePKCS8Hex: function getKeyFromPlainPrivatePKCS8Hex(p) {
      var q = this.parsePlainPrivatePKCS8Hex(p);
      var r;

      if (q.algoid == "2a864886f70d010101") {
        r = new RSAKey();
      } else {
        if (q.algoid == "2a8648ce380401") {
          r = new KJUR.crypto.DSA();
        } else {
          if (q.algoid == "2a8648ce3d0201") {
            r = new KJUR.crypto.ECDSA();
          } else {
            throw "unsupported private key algorithm";
          }
        }
      }

      r.readPKCS8PrvKeyHex(p);
      return r;
    },
    _getKeyFromPublicPKCS8Hex: function _getKeyFromPublicPKCS8Hex(q) {
      var p;
      var r = ASN1HEX.getVbyList(q, 0, [0, 0], "06");

      if (r === "2a864886f70d010101") {
        p = new RSAKey();
      } else {
        if (r === "2a8648ce380401") {
          p = new KJUR.crypto.DSA();
        } else {
          if (r === "2a8648ce3d0201") {
            p = new KJUR.crypto.ECDSA();
          } else {
            throw "unsupported PKCS#8 public key hex";
          }
        }
      }

      p.readPKCS8PubKeyHex(q);
      return p;
    },
    parsePublicRawRSAKeyHex: function parsePublicRawRSAKeyHex(r) {
      var u = ASN1HEX;
      var t = u.getChildIdx;
      var s = u.getV;
      var p = {};

      if (r.substr(0, 2) != "30") {
        throw "malformed RSA key(code:001)";
      }

      var q = t(r, 0);

      if (q.length != 2) {
        throw "malformed RSA key(code:002)";
      }

      if (r.substr(q[0], 2) != "02") {
        throw "malformed RSA key(code:003)";
      }

      p.n = s(r, q[0]);

      if (r.substr(q[1], 2) != "02") {
        throw "malformed RSA key(code:004)";
      }

      p.e = s(r, q[1]);
      return p;
    },
    parsePublicPKCS8Hex: function parsePublicPKCS8Hex(t) {
      var v = ASN1HEX;
      var u = v.getChildIdx;
      var s = v.getV;
      var q = {};
      q.algparam = null;
      var r = u(t, 0);

      if (r.length != 2) {
        throw "outer DERSequence shall have 2 elements: " + r.length;
      }

      var w = r[0];

      if (t.substr(w, 2) != "30") {
        throw "malformed PKCS8 public key(code:001)";
      }

      var p = u(t, w);

      if (p.length != 2) {
        throw "malformed PKCS8 public key(code:002)";
      }

      if (t.substr(p[0], 2) != "06") {
        throw "malformed PKCS8 public key(code:003)";
      }

      q.algoid = s(t, p[0]);

      if (t.substr(p[1], 2) == "06") {
        q.algparam = s(t, p[1]);
      } else {
        if (t.substr(p[1], 2) == "30") {
          q.algparam = {};
          q.algparam.p = v.getVbyList(t, p[1], [0], "02");
          q.algparam.q = v.getVbyList(t, p[1], [1], "02");
          q.algparam.g = v.getVbyList(t, p[1], [2], "02");
        }
      }

      if (t.substr(r[1], 2) != "03") {
        throw "malformed PKCS8 public key(code:004)";
      }

      q.key = s(t, r[1]).substr(2);
      return q;
    }
  };
}();

KEYUTIL.getKey = function (l, k, n) {
  var G = ASN1HEX,
      L = G.getChildIdx,
      v = G.getV,
      d = G.getVbyList,
      c = KJUR.crypto,
      i = c.ECDSA,
      C = c.DSA,
      w = RSAKey,
      M = pemtohex,
      F = KEYUTIL;

  if (typeof w != "undefined" && l instanceof w) {
    return l;
  }

  if (typeof i != "undefined" && l instanceof i) {
    return l;
  }

  if (typeof C != "undefined" && l instanceof C) {
    return l;
  }

  if (l.curve !== undefined && l.xy !== undefined && l.d === undefined) {
    return new i({
      pub: l.xy,
      curve: l.curve
    });
  }

  if (l.curve !== undefined && l.d !== undefined) {
    return new i({
      prv: l.d,
      curve: l.curve
    });
  }

  if (l.kty === undefined && l.n !== undefined && l.e !== undefined && l.d === undefined) {
    var P = new w();
    P.setPublic(l.n, l.e);
    return P;
  }

  if (l.kty === undefined && l.n !== undefined && l.e !== undefined && l.d !== undefined && l.p !== undefined && l.q !== undefined && l.dp !== undefined && l.dq !== undefined && l.co !== undefined && l.qi === undefined) {
    var P = new w();
    P.setPrivateEx(l.n, l.e, l.d, l.p, l.q, l.dp, l.dq, l.co);
    return P;
  }

  if (l.kty === undefined && l.n !== undefined && l.e !== undefined && l.d !== undefined && l.p === undefined) {
    var P = new w();
    P.setPrivate(l.n, l.e, l.d);
    return P;
  }

  if (l.p !== undefined && l.q !== undefined && l.g !== undefined && l.y !== undefined && l.x === undefined) {
    var P = new C();
    P.setPublic(l.p, l.q, l.g, l.y);
    return P;
  }

  if (l.p !== undefined && l.q !== undefined && l.g !== undefined && l.y !== undefined && l.x !== undefined) {
    var P = new C();
    P.setPrivate(l.p, l.q, l.g, l.y, l.x);
    return P;
  }

  if (l.kty === "RSA" && l.n !== undefined && l.e !== undefined && l.d === undefined) {
    var P = new w();
    P.setPublic(b64utohex(l.n), b64utohex(l.e));
    return P;
  }

  if (l.kty === "RSA" && l.n !== undefined && l.e !== undefined && l.d !== undefined && l.p !== undefined && l.q !== undefined && l.dp !== undefined && l.dq !== undefined && l.qi !== undefined) {
    var P = new w();
    P.setPrivateEx(b64utohex(l.n), b64utohex(l.e), b64utohex(l.d), b64utohex(l.p), b64utohex(l.q), b64utohex(l.dp), b64utohex(l.dq), b64utohex(l.qi));
    return P;
  }

  if (l.kty === "RSA" && l.n !== undefined && l.e !== undefined && l.d !== undefined) {
    var P = new w();
    P.setPrivate(b64utohex(l.n), b64utohex(l.e), b64utohex(l.d));
    return P;
  }

  if (l.kty === "EC" && l.crv !== undefined && l.x !== undefined && l.y !== undefined && l.d === undefined) {
    var j = new i({
      curve: l.crv
    });
    var t = j.ecparams.keylen / 4;
    var B = ("0000000000" + b64utohex(l.x)).slice(-t);
    var z = ("0000000000" + b64utohex(l.y)).slice(-t);
    var u = "04" + B + z;
    j.setPublicKeyHex(u);
    return j;
  }

  if (l.kty === "EC" && l.crv !== undefined && l.x !== undefined && l.y !== undefined && l.d !== undefined) {
    var j = new i({
      curve: l.crv
    });
    var t = j.ecparams.keylen / 4;
    var B = ("0000000000" + b64utohex(l.x)).slice(-t);
    var z = ("0000000000" + b64utohex(l.y)).slice(-t);
    var u = "04" + B + z;
    var b = ("0000000000" + b64utohex(l.d)).slice(-t);
    j.setPublicKeyHex(u);
    j.setPrivateKeyHex(b);
    return j;
  }

  if (n === "pkcs5prv") {
    var J = l,
        G = ASN1HEX,
        N,
        P;
    N = L(J, 0);

    if (N.length === 9) {
      P = new w();
      P.readPKCS5PrvKeyHex(J);
    } else {
      if (N.length === 6) {
        P = new C();
        P.readPKCS5PrvKeyHex(J);
      } else {
        if (N.length > 2 && J.substr(N[1], 2) === "04") {
          P = new i();
          P.readPKCS5PrvKeyHex(J);
        } else {
          throw "unsupported PKCS#1/5 hexadecimal key";
        }
      }
    }

    return P;
  }

  if (n === "pkcs8prv") {
    var P = F.getKeyFromPlainPrivatePKCS8Hex(l);
    return P;
  }

  if (n === "pkcs8pub") {
    return F._getKeyFromPublicPKCS8Hex(l);
  }

  if (n === "x509pub") {
    return X509.getPublicKeyFromCertHex(l);
  }

  if (l.indexOf("-END CERTIFICATE-", 0) != -1 || l.indexOf("-END X509 CERTIFICATE-", 0) != -1 || l.indexOf("-END TRUSTED CERTIFICATE-", 0) != -1) {
    return X509.getPublicKeyFromCertPEM(l);
  }

  if (l.indexOf("-END PUBLIC KEY-") != -1) {
    var O = pemtohex(l, "PUBLIC KEY");
    return F._getKeyFromPublicPKCS8Hex(O);
  }

  if (l.indexOf("-END RSA PRIVATE KEY-") != -1 && l.indexOf("4,ENCRYPTED") == -1) {
    var m = M(l, "RSA PRIVATE KEY");
    return F.getKey(m, null, "pkcs5prv");
  }

  if (l.indexOf("-END DSA PRIVATE KEY-") != -1 && l.indexOf("4,ENCRYPTED") == -1) {
    var I = M(l, "DSA PRIVATE KEY");
    var E = d(I, 0, [1], "02");
    var D = d(I, 0, [2], "02");
    var K = d(I, 0, [3], "02");
    var r = d(I, 0, [4], "02");
    var s = d(I, 0, [5], "02");
    var P = new C();
    P.setPrivate(new BigInteger(E, 16), new BigInteger(D, 16), new BigInteger(K, 16), new BigInteger(r, 16), new BigInteger(s, 16));
    return P;
  }

  if (l.indexOf("-END EC PRIVATE KEY-") != -1 && l.indexOf("4,ENCRYPTED") == -1) {
    var m = M(l, "EC PRIVATE KEY");
    return F.getKey(m, null, "pkcs5prv");
  }

  if (l.indexOf("-END PRIVATE KEY-") != -1) {
    return F.getKeyFromPlainPrivatePKCS8PEM(l);
  }

  if (l.indexOf("-END RSA PRIVATE KEY-") != -1 && l.indexOf("4,ENCRYPTED") != -1) {
    var o = F.getDecryptedKeyHex(l, k);
    var H = new RSAKey();
    H.readPKCS5PrvKeyHex(o);
    return H;
  }

  if (l.indexOf("-END EC PRIVATE KEY-") != -1 && l.indexOf("4,ENCRYPTED") != -1) {
    var I = F.getDecryptedKeyHex(l, k);
    var P = d(I, 0, [1], "04");
    var f = d(I, 0, [2, 0], "06");
    var A = d(I, 0, [3, 0], "03").substr(2);
    var e = "";

    if (KJUR.crypto.OID.oidhex2name[f] !== undefined) {
      e = KJUR.crypto.OID.oidhex2name[f];
    } else {
      throw "undefined OID(hex) in KJUR.crypto.OID: " + f;
    }

    var j = new i({
      curve: e
    });
    j.setPublicKeyHex(A);
    j.setPrivateKeyHex(P);
    j.isPublic = false;
    return j;
  }

  if (l.indexOf("-END DSA PRIVATE KEY-") != -1 && l.indexOf("4,ENCRYPTED") != -1) {
    var I = F.getDecryptedKeyHex(l, k);
    var E = d(I, 0, [1], "02");
    var D = d(I, 0, [2], "02");
    var K = d(I, 0, [3], "02");
    var r = d(I, 0, [4], "02");
    var s = d(I, 0, [5], "02");
    var P = new C();
    P.setPrivate(new BigInteger(E, 16), new BigInteger(D, 16), new BigInteger(K, 16), new BigInteger(r, 16), new BigInteger(s, 16));
    return P;
  }

  if (l.indexOf("-END ENCRYPTED PRIVATE KEY-") != -1) {
    return F.getKeyFromEncryptedPKCS8PEM(l, k);
  }

  throw new Error("not supported argument");
};

KEYUTIL.generateKeypair = function (a, c) {
  if (a == "RSA") {
    var b = c;
    var h = new RSAKey();
    h.generate(b, "10001");
    h.isPrivate = true;
    h.isPublic = true;
    var f = new RSAKey();
    var e = h.n.toString(16);
    var i = h.e.toString(16);
    f.setPublic(e, i);
    f.isPrivate = false;
    f.isPublic = true;
    var k = {};
    k.prvKeyObj = h;
    k.pubKeyObj = f;
    return k;
  } else {
    if (a == "EC") {
      var d = c;
      var g = new KJUR.crypto.ECDSA({
        curve: d
      });
      var j = g.generateKeyPairHex();
      var h = new KJUR.crypto.ECDSA({
        curve: d
      });
      h.setPublicKeyHex(j.ecpubhex);
      h.setPrivateKeyHex(j.ecprvhex);
      h.isPrivate = true;
      h.isPublic = false;
      var f = new KJUR.crypto.ECDSA({
        curve: d
      });
      f.setPublicKeyHex(j.ecpubhex);
      f.isPrivate = false;
      f.isPublic = true;
      var k = {};
      k.prvKeyObj = h;
      k.pubKeyObj = f;
      return k;
    } else {
      throw "unknown algorithm: " + a;
    }
  }
};

KEYUTIL.getPEM = function (b, D, y, m, q, j) {
  var F = KJUR,
      k = F.asn1,
      z = k.DERObjectIdentifier,
      f = k.DERInteger,
      l = k.ASN1Util.newObject,
      a = k.x509,
      C = a.SubjectPublicKeyInfo,
      e = F.crypto,
      u = e.DSA,
      r = e.ECDSA,
      n = RSAKey;

  function A(s) {
    var G = l({
      seq: [{
        "int": 0
      }, {
        "int": {
          bigint: s.n
        }
      }, {
        "int": s.e
      }, {
        "int": {
          bigint: s.d
        }
      }, {
        "int": {
          bigint: s.p
        }
      }, {
        "int": {
          bigint: s.q
        }
      }, {
        "int": {
          bigint: s.dmp1
        }
      }, {
        "int": {
          bigint: s.dmq1
        }
      }, {
        "int": {
          bigint: s.coeff
        }
      }]
    });
    return G;
  }

  function B(G) {
    var s = l({
      seq: [{
        "int": 1
      }, {
        octstr: {
          hex: G.prvKeyHex
        }
      }, {
        tag: ["a0", true, {
          oid: {
            name: G.curveName
          }
        }]
      }, {
        tag: ["a1", true, {
          bitstr: {
            hex: "00" + G.pubKeyHex
          }
        }]
      }]
    });
    return s;
  }

  function x(s) {
    var G = l({
      seq: [{
        "int": 0
      }, {
        "int": {
          bigint: s.p
        }
      }, {
        "int": {
          bigint: s.q
        }
      }, {
        "int": {
          bigint: s.g
        }
      }, {
        "int": {
          bigint: s.y
        }
      }, {
        "int": {
          bigint: s.x
        }
      }]
    });
    return G;
  }

  if ((n !== undefined && b instanceof n || u !== undefined && b instanceof u || r !== undefined && b instanceof r) && b.isPublic == true && (D === undefined || D == "PKCS8PUB")) {
    var E = new C(b);
    var w = E.getEncodedHex();
    return hextopem(w, "PUBLIC KEY");
  }

  if (D == "PKCS1PRV" && n !== undefined && b instanceof n && (y === undefined || y == null) && b.isPrivate == true) {
    var E = A(b);
    var w = E.getEncodedHex();
    return hextopem(w, "RSA PRIVATE KEY");
  }

  if (D == "PKCS1PRV" && r !== undefined && b instanceof r && (y === undefined || y == null) && b.isPrivate == true) {
    var i = new z({
      name: b.curveName
    });
    var v = i.getEncodedHex();
    var h = B(b);
    var t = h.getEncodedHex();
    var p = "";
    p += hextopem(v, "EC PARAMETERS");
    p += hextopem(t, "EC PRIVATE KEY");
    return p;
  }

  if (D == "PKCS1PRV" && u !== undefined && b instanceof u && (y === undefined || y == null) && b.isPrivate == true) {
    var E = x(b);
    var w = E.getEncodedHex();
    return hextopem(w, "DSA PRIVATE KEY");
  }

  if (D == "PKCS5PRV" && n !== undefined && b instanceof n && y !== undefined && y != null && b.isPrivate == true) {
    var E = A(b);
    var w = E.getEncodedHex();

    if (m === undefined) {
      m = "DES-EDE3-CBC";
    }

    return this.getEncryptedPKCS5PEMFromPrvKeyHex("RSA", w, y, m, j);
  }

  if (D == "PKCS5PRV" && r !== undefined && b instanceof r && y !== undefined && y != null && b.isPrivate == true) {
    var E = B(b);
    var w = E.getEncodedHex();

    if (m === undefined) {
      m = "DES-EDE3-CBC";
    }

    return this.getEncryptedPKCS5PEMFromPrvKeyHex("EC", w, y, m, j);
  }

  if (D == "PKCS5PRV" && u !== undefined && b instanceof u && y !== undefined && y != null && b.isPrivate == true) {
    var E = x(b);
    var w = E.getEncodedHex();

    if (m === undefined) {
      m = "DES-EDE3-CBC";
    }

    return this.getEncryptedPKCS5PEMFromPrvKeyHex("DSA", w, y, m, j);
  }

  var o = function o(G, s) {
    var I = c(G, s);
    var H = new l({
      seq: [{
        seq: [{
          oid: {
            name: "pkcs5PBES2"
          }
        }, {
          seq: [{
            seq: [{
              oid: {
                name: "pkcs5PBKDF2"
              }
            }, {
              seq: [{
                octstr: {
                  hex: I.pbkdf2Salt
                }
              }, {
                "int": I.pbkdf2Iter
              }]
            }]
          }, {
            seq: [{
              oid: {
                name: "des-EDE3-CBC"
              }
            }, {
              octstr: {
                hex: I.encryptionSchemeIV
              }
            }]
          }]
        }]
      }, {
        octstr: {
          hex: I.ciphertext
        }
      }]
    });
    return H.getEncodedHex();
  };

  var c = function c(N, O) {
    var H = 100;
    var M = CryptoJS.lib.WordArray.random(8);
    var L = "DES-EDE3-CBC";
    var s = CryptoJS.lib.WordArray.random(8);
    var I = CryptoJS.PBKDF2(O, M, {
      keySize: 192 / 32,
      iterations: H
    });
    var J = CryptoJS.enc.Hex.parse(N);
    var K = CryptoJS.TripleDES.encrypt(J, I, {
      iv: s
    }) + "";
    var G = {};
    G.ciphertext = K;
    G.pbkdf2Salt = CryptoJS.enc.Hex.stringify(M);
    G.pbkdf2Iter = H;
    G.encryptionSchemeAlg = L;
    G.encryptionSchemeIV = CryptoJS.enc.Hex.stringify(s);
    return G;
  };

  if (D == "PKCS8PRV" && n != undefined && b instanceof n && b.isPrivate == true) {
    var g = A(b);
    var d = g.getEncodedHex();
    var E = l({
      seq: [{
        "int": 0
      }, {
        seq: [{
          oid: {
            name: "rsaEncryption"
          }
        }, {
          "null": true
        }]
      }, {
        octstr: {
          hex: d
        }
      }]
    });
    var w = E.getEncodedHex();

    if (y === undefined || y == null) {
      return hextopem(w, "PRIVATE KEY");
    } else {
      var t = o(w, y);
      return hextopem(t, "ENCRYPTED PRIVATE KEY");
    }
  }

  if (D == "PKCS8PRV" && r !== undefined && b instanceof r && b.isPrivate == true) {
    var g = new l({
      seq: [{
        "int": 1
      }, {
        octstr: {
          hex: b.prvKeyHex
        }
      }, {
        tag: ["a1", true, {
          bitstr: {
            hex: "00" + b.pubKeyHex
          }
        }]
      }]
    });
    var d = g.getEncodedHex();
    var E = l({
      seq: [{
        "int": 0
      }, {
        seq: [{
          oid: {
            name: "ecPublicKey"
          }
        }, {
          oid: {
            name: b.curveName
          }
        }]
      }, {
        octstr: {
          hex: d
        }
      }]
    });
    var w = E.getEncodedHex();

    if (y === undefined || y == null) {
      return hextopem(w, "PRIVATE KEY");
    } else {
      var t = o(w, y);
      return hextopem(t, "ENCRYPTED PRIVATE KEY");
    }
  }

  if (D == "PKCS8PRV" && u !== undefined && b instanceof u && b.isPrivate == true) {
    var g = new f({
      bigint: b.x
    });
    var d = g.getEncodedHex();
    var E = l({
      seq: [{
        "int": 0
      }, {
        seq: [{
          oid: {
            name: "dsa"
          }
        }, {
          seq: [{
            "int": {
              bigint: b.p
            }
          }, {
            "int": {
              bigint: b.q
            }
          }, {
            "int": {
              bigint: b.g
            }
          }]
        }]
      }, {
        octstr: {
          hex: d
        }
      }]
    });
    var w = E.getEncodedHex();

    if (y === undefined || y == null) {
      return hextopem(w, "PRIVATE KEY");
    } else {
      var t = o(w, y);
      return hextopem(t, "ENCRYPTED PRIVATE KEY");
    }
  }

  throw new Error("unsupported object nor format");
};

KEYUTIL.getKeyFromCSRPEM = function (b) {
  var a = pemtohex(b, "CERTIFICATE REQUEST");
  var c = KEYUTIL.getKeyFromCSRHex(a);
  return c;
};

KEYUTIL.getKeyFromCSRHex = function (a) {
  var c = KEYUTIL.parseCSRHex(a);
  var b = KEYUTIL.getKey(c.p8pubkeyhex, null, "pkcs8pub");
  return b;
};

KEYUTIL.parseCSRHex = function (d) {
  var i = ASN1HEX;
  var f = i.getChildIdx;
  var c = i.getTLV;
  var b = {};
  var g = d;

  if (g.substr(0, 2) != "30") {
    throw "malformed CSR(code:001)";
  }

  var e = f(g, 0);

  if (e.length < 1) {
    throw "malformed CSR(code:002)";
  }

  if (g.substr(e[0], 2) != "30") {
    throw "malformed CSR(code:003)";
  }

  var a = f(g, e[0]);

  if (a.length < 3) {
    throw "malformed CSR(code:004)";
  }

  b.p8pubkeyhex = c(g, a[2]);
  return b;
};

KEYUTIL.getKeyID = function (f) {
  var c = KEYUTIL;
  var e = ASN1HEX;

  if (typeof f === "string" && f.indexOf("BEGIN ") != -1) {
    f = c.getKey(f);
  }

  var d = pemtohex(c.getPEM(f));
  var b = e.getIdxbyList(d, 0, [1]);
  var a = e.getV(d, b).substring(2);
  return KJUR.crypto.Util.hashHex(a, "sha1");
};

KEYUTIL.getJWKFromKey = function (d) {
  var b = {};

  if (d instanceof RSAKey && d.isPrivate) {
    b.kty = "RSA";
    b.n = hextob64u(d.n.toString(16));
    b.e = hextob64u(d.e.toString(16));
    b.d = hextob64u(d.d.toString(16));
    b.p = hextob64u(d.p.toString(16));
    b.q = hextob64u(d.q.toString(16));
    b.dp = hextob64u(d.dmp1.toString(16));
    b.dq = hextob64u(d.dmq1.toString(16));
    b.qi = hextob64u(d.coeff.toString(16));
    return b;
  } else {
    if (d instanceof RSAKey && d.isPublic) {
      b.kty = "RSA";
      b.n = hextob64u(d.n.toString(16));
      b.e = hextob64u(d.e.toString(16));
      return b;
    } else {
      if (d instanceof KJUR.crypto.ECDSA && d.isPrivate) {
        var a = d.getShortNISTPCurveName();

        if (a !== "P-256" && a !== "P-384") {
          throw "unsupported curve name for JWT: " + a;
        }

        var c = d.getPublicKeyXYHex();
        b.kty = "EC";
        b.crv = a;
        b.x = hextob64u(c.x);
        b.y = hextob64u(c.y);
        b.d = hextob64u(d.prvKeyHex);
        return b;
      } else {
        if (d instanceof KJUR.crypto.ECDSA && d.isPublic) {
          var a = d.getShortNISTPCurveName();

          if (a !== "P-256" && a !== "P-384") {
            throw "unsupported curve name for JWT: " + a;
          }

          var c = d.getPublicKeyXYHex();
          b.kty = "EC";
          b.crv = a;
          b.x = hextob64u(c.x);
          b.y = hextob64u(c.y);
          return b;
        }
      }
    }
  }

  throw "not supported key object";
};

RSAKey.getPosArrayOfChildrenFromHex = function (a) {
  return ASN1HEX.getChildIdx(a, 0);
};

RSAKey.getHexValueArrayOfChildrenFromHex = function (f) {
  var n = ASN1HEX;
  var i = n.getV;
  var k = RSAKey.getPosArrayOfChildrenFromHex(f);
  var e = i(f, k[0]);
  var j = i(f, k[1]);
  var b = i(f, k[2]);
  var c = i(f, k[3]);
  var h = i(f, k[4]);
  var g = i(f, k[5]);
  var m = i(f, k[6]);
  var l = i(f, k[7]);
  var d = i(f, k[8]);
  var k = new Array();
  k.push(e, j, b, c, h, g, m, l, d);
  return k;
};

RSAKey.prototype.readPrivateKeyFromPEMString = function (d) {
  var c = pemtohex(d);
  var b = RSAKey.getHexValueArrayOfChildrenFromHex(c);
  this.setPrivateEx(b[1], b[2], b[3], b[4], b[5], b[6], b[7], b[8]);
};

RSAKey.prototype.readPKCS5PrvKeyHex = function (c) {
  var b = RSAKey.getHexValueArrayOfChildrenFromHex(c);
  this.setPrivateEx(b[1], b[2], b[3], b[4], b[5], b[6], b[7], b[8]);
};

RSAKey.prototype.readPKCS8PrvKeyHex = function (e) {
  var c, i, k, b, a, f, d, j;
  var m = ASN1HEX;
  var l = m.getVbyListEx;

  if (m.isASN1HEX(e) === false) {
    throw new Error("not ASN.1 hex string");
  }

  try {
    c = l(e, 0, [2, 0, 1], "02");
    i = l(e, 0, [2, 0, 2], "02");
    k = l(e, 0, [2, 0, 3], "02");
    b = l(e, 0, [2, 0, 4], "02");
    a = l(e, 0, [2, 0, 5], "02");
    f = l(e, 0, [2, 0, 6], "02");
    d = l(e, 0, [2, 0, 7], "02");
    j = l(e, 0, [2, 0, 8], "02");
  } catch (g) {
    throw new Error("malformed PKCS#8 plain RSA private key");
  }

  this.setPrivateEx(c, i, k, b, a, f, d, j);
};

RSAKey.prototype.readPKCS5PubKeyHex = function (c) {
  var e = ASN1HEX;
  var b = e.getV;

  if (e.isASN1HEX(c) === false) {
    throw new Error("keyHex is not ASN.1 hex string");
  }

  var a = e.getChildIdx(c, 0);

  if (a.length !== 2 || c.substr(a[0], 2) !== "02" || c.substr(a[1], 2) !== "02") {
    throw new Error("wrong hex for PKCS#5 public key");
  }

  var f = b(c, a[0]);
  var d = b(c, a[1]);
  this.setPublic(f, d);
};

RSAKey.prototype.readPKCS8PubKeyHex = function (b) {
  var c = ASN1HEX;

  if (c.isASN1HEX(b) === false) {
    throw new Error("not ASN.1 hex string");
  }

  if (c.getTLVbyListEx(b, 0, [0, 0]) !== "06092a864886f70d010101") {
    throw new Error("not PKCS8 RSA public key");
  }

  var a = c.getTLVbyListEx(b, 0, [1, 0]);
  this.readPKCS5PubKeyHex(a);
};

RSAKey.prototype.readCertPubKeyHex = function (b, d) {
  var a, c;
  a = new X509();
  a.readCertHex(b);
  c = a.getPublicKeyHex();
  this.readPKCS8PubKeyHex(c);
};

var _RE_HEXDECONLY = new RegExp("[^0-9a-f]", "gi");

function _rsasign_getHexPaddedDigestInfoForString(d, e, a) {
  var b = function b(f) {
    return KJUR.crypto.Util.hashString(f, a);
  };

  var c = b(d);
  return KJUR.crypto.Util.getPaddedDigestInfoHex(c, a, e);
}

function _zeroPaddingOfSignature(e, d) {
  var c = "";
  var a = d / 4 - e.length;

  for (var b = 0; b < a; b++) {
    c = c + "0";
  }

  return c + e;
}

RSAKey.prototype.sign = function (d, a) {
  var b = function b(e) {
    return KJUR.crypto.Util.hashString(e, a);
  };

  var c = b(d);
  return this.signWithMessageHash(c, a);
};

RSAKey.prototype.signWithMessageHash = function (e, c) {
  var f = KJUR.crypto.Util.getPaddedDigestInfoHex(e, c, this.n.bitLength());
  var b = parseBigInt(f, 16);
  var d = this.doPrivate(b);
  var a = d.toString(16);
  return _zeroPaddingOfSignature(a, this.n.bitLength());
};

function pss_mgf1_str(c, a, e) {
  var b = "",
      d = 0;

  while (b.length < a) {
    b += hextorstr(e(rstrtohex(c + String.fromCharCode.apply(String, [(d & 4278190080) >> 24, (d & 16711680) >> 16, (d & 65280) >> 8, d & 255]))));
    d += 1;
  }

  return b;
}

RSAKey.prototype.signPSS = function (e, a, d) {
  var c = function c(f) {
    return KJUR.crypto.Util.hashHex(f, a);
  };

  var b = c(rstrtohex(e));

  if (d === undefined) {
    d = -1;
  }

  return this.signWithMessageHashPSS(b, a, d);
};

RSAKey.prototype.signWithMessageHashPSS = function (l, a, k) {
  var b = hextorstr(l);
  var g = b.length;
  var m = this.n.bitLength() - 1;
  var c = Math.ceil(m / 8);
  var d;

  var o = function o(i) {
    return KJUR.crypto.Util.hashHex(i, a);
  };

  if (k === -1 || k === undefined) {
    k = g;
  } else {
    if (k === -2) {
      k = c - g - 2;
    } else {
      if (k < -2) {
        throw new Error("invalid salt length");
      }
    }
  }

  if (c < g + k + 2) {
    throw new Error("data too long");
  }

  var f = "";

  if (k > 0) {
    f = new Array(k);
    new SecureRandom().nextBytes(f);
    f = String.fromCharCode.apply(String, f);
  }

  var n = hextorstr(o(rstrtohex("\x00\x00\x00\x00\x00\x00\x00\x00" + b + f)));
  var j = [];

  for (d = 0; d < c - k - g - 2; d += 1) {
    j[d] = 0;
  }

  var e = String.fromCharCode.apply(String, j) + "\x01" + f;
  var h = pss_mgf1_str(n, e.length, o);
  var q = [];

  for (d = 0; d < e.length; d += 1) {
    q[d] = e.charCodeAt(d) ^ h.charCodeAt(d);
  }

  var p = 65280 >> 8 * c - m & 255;
  q[0] &= ~p;

  for (d = 0; d < g; d++) {
    q.push(n.charCodeAt(d));
  }

  q.push(188);
  return _zeroPaddingOfSignature(this.doPrivate(new BigInteger(q)).toString(16), this.n.bitLength());
};

function _rsasign_getDecryptSignatureBI(a, d, c) {
  var b = new RSAKey();
  b.setPublic(d, c);
  var e = b.doPublic(a);
  return e;
}

function _rsasign_getHexDigestInfoFromSig(a, c, b) {
  var e = _rsasign_getDecryptSignatureBI(a, c, b);

  var d = e.toString(16).replace(/^1f+00/, "");
  return d;
}

function _rsasign_getAlgNameAndHashFromHexDisgestInfo(f) {
  for (var e in KJUR.crypto.Util.DIGESTINFOHEAD) {
    var d = KJUR.crypto.Util.DIGESTINFOHEAD[e];
    var b = d.length;

    if (f.substring(0, b) == d) {
      var c = [e, f.substring(b)];
      return c;
    }
  }

  return [];
}

RSAKey.prototype.verify = function (f, j) {
  j = j.replace(_RE_HEXDECONLY, "");
  j = j.replace(/[ \n]+/g, "");
  var b = parseBigInt(j, 16);

  if (b.bitLength() > this.n.bitLength()) {
    return 0;
  }

  var i = this.doPublic(b);
  var e = i.toString(16).replace(/^1f+00/, "");

  var g = _rsasign_getAlgNameAndHashFromHexDisgestInfo(e);

  if (g.length == 0) {
    return false;
  }

  var d = g[0];
  var h = g[1];

  var a = function a(k) {
    return KJUR.crypto.Util.hashString(k, d);
  };

  var c = a(f);
  return h == c;
};

RSAKey.prototype.verifyWithMessageHash = function (e, a) {
  if (a.length != Math.ceil(this.n.bitLength() / 4)) {
    return false;
  }

  var b = parseBigInt(a, 16);

  if (b.bitLength() > this.n.bitLength()) {
    return 0;
  }

  var h = this.doPublic(b);
  var g = h.toString(16).replace(/^1f+00/, "");

  var c = _rsasign_getAlgNameAndHashFromHexDisgestInfo(g);

  if (c.length == 0) {
    return false;
  }

  var d = c[0];
  var f = c[1];
  return f == e;
};

RSAKey.prototype.verifyPSS = function (c, b, a, f) {
  var e = function e(g) {
    return KJUR.crypto.Util.hashHex(g, a);
  };

  var d = e(rstrtohex(c));

  if (f === undefined) {
    f = -1;
  }

  return this.verifyWithMessageHashPSS(d, b, a, f);
};

RSAKey.prototype.verifyWithMessageHashPSS = function (f, s, l, c) {
  if (s.length != Math.ceil(this.n.bitLength() / 4)) {
    return false;
  }

  var k = new BigInteger(s, 16);

  var r = function r(i) {
    return KJUR.crypto.Util.hashHex(i, l);
  };

  var j = hextorstr(f);
  var h = j.length;
  var g = this.n.bitLength() - 1;
  var m = Math.ceil(g / 8);
  var q;

  if (c === -1 || c === undefined) {
    c = h;
  } else {
    if (c === -2) {
      c = m - h - 2;
    } else {
      if (c < -2) {
        throw new Error("invalid salt length");
      }
    }
  }

  if (m < h + c + 2) {
    throw new Error("data too long");
  }

  var a = this.doPublic(k).toByteArray();

  for (q = 0; q < a.length; q += 1) {
    a[q] &= 255;
  }

  while (a.length < m) {
    a.unshift(0);
  }

  if (a[m - 1] !== 188) {
    throw new Error("encoded message does not end in 0xbc");
  }

  a = String.fromCharCode.apply(String, a);
  var d = a.substr(0, m - h - 1);
  var e = a.substr(d.length, h);
  var p = 65280 >> 8 * m - g & 255;

  if ((d.charCodeAt(0) & p) !== 0) {
    throw new Error("bits beyond keysize not zero");
  }

  var n = pss_mgf1_str(e, d.length, r);
  var o = [];

  for (q = 0; q < d.length; q += 1) {
    o[q] = d.charCodeAt(q) ^ n.charCodeAt(q);
  }

  o[0] &= ~p;
  var b = m - h - c - 2;

  for (q = 0; q < b; q += 1) {
    if (o[q] !== 0) {
      throw new Error("leftmost octets not zero");
    }
  }

  if (o[b] !== 1) {
    throw new Error("0x01 marker not found");
  }

  return e === hextorstr(r(rstrtohex("\x00\x00\x00\x00\x00\x00\x00\x00" + j + String.fromCharCode.apply(String, o.slice(-c)))));
};

RSAKey.SALT_LEN_HLEN = -1;
RSAKey.SALT_LEN_MAX = -2;
RSAKey.SALT_LEN_RECOVER = -2;

function X509(q) {
  var j = ASN1HEX,
      n = j.getChildIdx,
      g = j.getV,
      b = j.getTLV,
      c = j.getVbyList,
      k = j.getVbyListEx,
      a = j.getTLVbyList,
      l = j.getTLVbyListEx,
      h = j.getIdxbyList,
      e = j.getIdxbyListEx,
      i = j.getVidx,
      p = j.oidname,
      m = j.hextooidstr,
      d = X509,
      r = pemtohex,
      f;

  try {
    f = KJUR.asn1.x509.AlgorithmIdentifier.PSSNAME2ASN1TLV;
  } catch (o) {}

  this.HEX2STAG = {
    "0c": "utf8",
    "13": "prn",
    "16": "ia5",
    "1a": "vis",
    "1e": "bmp"
  };
  this.hex = null;
  this.version = 0;
  this.foffset = 0;
  this.aExtInfo = null;

  this.getVersion = function () {
    if (this.hex === null || this.version !== 0) {
      return this.version;
    }

    if (a(this.hex, 0, [0, 0]) !== "a003020102") {
      this.version = 1;
      this.foffset = -1;
      return 1;
    }

    this.version = 3;
    return 3;
  };

  this.getSerialNumberHex = function () {
    return k(this.hex, 0, [0, 0], "02");
  };

  this.getSignatureAlgorithmField = function () {
    var s = l(this.hex, 0, [0, 1]);
    return this.getAlgorithmIdentifierName(s);
  };

  this.getAlgorithmIdentifierName = function (s) {
    for (var t in f) {
      if (s === f[t]) {
        return t;
      }
    }

    return p(k(s, 0, [0], "06"));
  };

  this.getIssuer = function () {
    return this.getX500Name(this.getIssuerHex());
  };

  this.getIssuerHex = function () {
    return a(this.hex, 0, [0, 3 + this.foffset], "30");
  };

  this.getIssuerString = function () {
    return d.hex2dn(this.getIssuerHex());
  };

  this.getSubject = function () {
    return this.getX500Name(this.getSubjectHex());
  };

  this.getSubjectHex = function () {
    return a(this.hex, 0, [0, 5 + this.foffset], "30");
  };

  this.getSubjectString = function () {
    return d.hex2dn(this.getSubjectHex());
  };

  this.getNotBefore = function () {
    var t = c(this.hex, 0, [0, 4 + this.foffset, 0]);
    t = t.replace(/(..)/g, "%$1");
    t = decodeURIComponent(t);
    return t;
  };

  this.getNotAfter = function () {
    var t = c(this.hex, 0, [0, 4 + this.foffset, 1]);
    t = t.replace(/(..)/g, "%$1");
    t = decodeURIComponent(t);
    return t;
  };

  this.getPublicKeyHex = function () {
    return j.getTLVbyList(this.hex, 0, [0, 6 + this.foffset], "30");
  };

  this.getPublicKeyIdx = function () {
    return h(this.hex, 0, [0, 6 + this.foffset], "30");
  };

  this.getPublicKeyContentIdx = function () {
    var s = this.getPublicKeyIdx();
    return h(this.hex, s, [1, 0], "30");
  };

  this.getPublicKey = function () {
    return KEYUTIL.getKey(this.getPublicKeyHex(), null, "pkcs8pub");
  };

  this.getSignatureAlgorithmName = function () {
    var s = a(this.hex, 0, [1], "30");
    return this.getAlgorithmIdentifierName(s);
  };

  this.getSignatureValueHex = function () {
    return c(this.hex, 0, [2], "03", true);
  };

  this.verifySignature = function (u) {
    var v = this.getSignatureAlgorithmField();
    var s = this.getSignatureValueHex();
    var t = a(this.hex, 0, [0], "30");
    var w = new KJUR.crypto.Signature({
      alg: v
    });
    w.init(u);
    w.updateHex(t);
    return w.verify(s);
  };

  this.parseExt = function (B) {
    var u, s, w;

    if (B === undefined) {
      w = this.hex;

      if (this.version !== 3) {
        return -1;
      }

      u = h(w, 0, [0, 7, 0], "30");
      s = n(w, u);
    } else {
      w = pemtohex(B);
      var x = h(w, 0, [0, 3, 0, 0], "06");

      if (g(w, x) != "2a864886f70d01090e") {
        this.aExtInfo = new Array();
        return;
      }

      u = h(w, 0, [0, 3, 0, 1, 0], "30");
      s = n(w, u);
      this.hex = w;
    }

    this.aExtInfo = new Array();

    for (var v = 0; v < s.length; v++) {
      var z = {};
      z.critical = false;
      var y = n(w, s[v]);
      var t = 0;

      if (y.length === 3) {
        z.critical = true;
        t = 1;
      }

      z.oid = j.hextooidstr(c(w, s[v], [0], "06"));
      var A = h(w, s[v], [1 + t]);
      z.vidx = i(w, A);
      this.aExtInfo.push(z);
    }
  };

  this.getExtInfo = function (u) {
    var s = this.aExtInfo;
    var v = u;

    if (!u.match(/^[0-9.]+$/)) {
      v = KJUR.asn1.x509.OID.name2oid(u);
    }

    if (v === "") {
      return undefined;
    }

    for (var t = 0; t < s.length; t++) {
      if (s[t].oid === v) {
        return s[t];
      }
    }

    return undefined;
  };

  this.getExtBasicConstraints = function (t, x) {
    if (t === undefined && x === undefined) {
      var v = this.getExtInfo("basicConstraints");

      if (v === undefined) {
        return undefined;
      }

      t = b(this.hex, v.vidx);
      x = v.critical;
    }

    var s = {
      extname: "basicConstraints"
    };

    if (x) {
      s.critical = true;
    }

    if (t === "3000") {
      return s;
    }

    if (t === "30030101ff") {
      s.cA = true;
      return s;
    }

    if (t.substr(0, 12) === "30060101ff02") {
      var w = g(t, 10);
      var u = parseInt(w, 16);
      s.cA = true;
      s.pathLen = u;
      return s;
    }

    throw new Error("hExtV parse error: " + t);
  };

  this.getExtKeyUsage = function (t, v) {
    if (t === undefined && v === undefined) {
      var u = this.getExtInfo("keyUsage");

      if (u === undefined) {
        return undefined;
      }

      t = b(this.hex, u.vidx);
      v = u.critical;
    }

    var s = {
      extname: "keyUsage"
    };

    if (v) {
      s.critical = true;
    }

    s.names = this.getExtKeyUsageString(t).split(",");
    return s;
  };

  this.getExtKeyUsageBin = function (u) {
    if (u === undefined) {
      var v = this.getExtInfo("keyUsage");

      if (v === undefined) {
        return "";
      }

      u = b(this.hex, v.vidx);
    }

    if (u.length != 8 && u.length != 10) {
      throw new Error("malformed key usage value: " + u);
    }

    var t = "000000000000000" + parseInt(u.substr(6), 16).toString(2);

    if (u.length == 8) {
      t = t.slice(-8);
    }

    if (u.length == 10) {
      t = t.slice(-16);
    }

    t = t.replace(/0+$/, "");

    if (t == "") {
      t = "0";
    }

    return t;
  };

  this.getExtKeyUsageString = function (u) {
    var v = this.getExtKeyUsageBin(u);
    var s = new Array();

    for (var t = 0; t < v.length; t++) {
      if (v.substr(t, 1) == "1") {
        s.push(X509.KEYUSAGE_NAME[t]);
      }
    }

    return s.join(",");
  };

  this.getExtSubjectKeyIdentifier = function (u, w) {
    if (u === undefined && w === undefined) {
      var v = this.getExtInfo("subjectKeyIdentifier");

      if (v === undefined) {
        return undefined;
      }

      u = b(this.hex, v.vidx);
      w = v.critical;
    }

    var s = {
      extname: "subjectKeyIdentifier"
    };

    if (w) {
      s.critical = true;
    }

    var t = g(u, 0);
    s.kid = {
      hex: t
    };
    return s;
  };

  this.getExtAuthorityKeyIdentifier = function (y, w) {
    if (y === undefined && w === undefined) {
      var s = this.getExtInfo("authorityKeyIdentifier");

      if (s === undefined) {
        return undefined;
      }

      y = b(this.hex, s.vidx);
      w = s.critical;
    }

    var z = {
      extname: "authorityKeyIdentifier"
    };

    if (w) {
      z.critical = true;
    }

    var x = n(y, 0);

    for (var t = 0; t < x.length; t++) {
      var A = y.substr(x[t], 2);

      if (A === "80") {
        z.kid = {
          hex: g(y, x[t])
        };
      }

      if (A === "a1") {
        var v = b(y, x[t]);
        var u = this.getGeneralNames(v);
        z.issuer = u[0]["dn"];
      }

      if (A === "82") {
        z.sn = {
          hex: g(y, x[t])
        };
      }
    }

    return z;
  };

  this.getExtExtKeyUsage = function (v, x) {
    if (v === undefined && x === undefined) {
      var w = this.getExtInfo("extKeyUsage");

      if (w === undefined) {
        return undefined;
      }

      v = b(this.hex, w.vidx);
      x = w.critical;
    }

    var s = {
      extname: "extKeyUsage",
      array: []
    };

    if (x) {
      s.critical = true;
    }

    var t = n(v, 0);

    for (var u = 0; u < t.length; u++) {
      s.array.push(p(g(v, t[u])));
    }

    return s;
  };

  this.getExtExtKeyUsageName = function () {
    var w = this.getExtInfo("extKeyUsage");

    if (w === undefined) {
      return w;
    }

    var s = new Array();
    var v = b(this.hex, w.vidx);

    if (v === "") {
      return s;
    }

    var t = n(v, 0);

    for (var u = 0; u < t.length; u++) {
      s.push(p(g(v, t[u])));
    }

    return s;
  };

  this.getExtSubjectAltName = function (t, v) {
    if (t === undefined && v === undefined) {
      var u = this.getExtInfo("subjectAltName");

      if (u === undefined) {
        return undefined;
      }

      t = b(this.hex, u.vidx);
      v = u.critical;
    }

    var s = {
      extname: "subjectAltName",
      array: []
    };

    if (v) {
      s.critical = true;
    }

    s.array = this.getGeneralNames(t);
    return s;
  };

  this.getExtIssuerAltName = function (t, v) {
    if (t === undefined && v === undefined) {
      var u = this.getExtInfo("issuerAltName");

      if (u === undefined) {
        return undefined;
      }

      t = b(this.hex, u.vidx);
      v = u.critical;
    }

    var s = {
      extname: "issuerAltName",
      array: []
    };

    if (v) {
      s.critical = true;
    }

    s.array = this.getGeneralNames(t);
    return s;
  };

  this.getGeneralNames = function (w) {
    var u = n(w, 0);
    var s = [];

    for (var v = 0; v < u.length; v++) {
      var t = this.getGeneralName(b(w, u[v]));

      if (t !== undefined) {
        s.push(t);
      }
    }

    return s;
  };

  this.getGeneralName = function (t) {
    var s = t.substr(0, 2);
    var v = g(t, 0);
    var u = hextorstr(v);

    if (s == "81") {
      return {
        rfc822: u
      };
    }

    if (s == "82") {
      return {
        dns: u
      };
    }

    if (s == "86") {
      return {
        uri: u
      };
    }

    if (s == "87") {
      return {
        ip: hextoip(v)
      };
    }

    if (s == "a4") {
      return {
        dn: this.getX500Name(v)
      };
    }

    return undefined;
  };

  this.getExtSubjectAltName2 = function () {
    var w, z, y;
    var x = this.getExtInfo("subjectAltName");

    if (x === undefined) {
      return x;
    }

    var s = new Array();
    var v = b(this.hex, x.vidx);
    var t = n(v, 0);

    for (var u = 0; u < t.length; u++) {
      y = v.substr(t[u], 2);
      w = g(v, t[u]);

      if (y === "81") {
        z = hextoutf8(w);
        s.push(["MAIL", z]);
      }

      if (y === "82") {
        z = hextoutf8(w);
        s.push(["DNS", z]);
      }

      if (y === "84") {
        z = X509.hex2dn(w, 0);
        s.push(["DN", z]);
      }

      if (y === "86") {
        z = hextoutf8(w);
        s.push(["URI", z]);
      }

      if (y === "87") {
        z = hextoip(w);
        s.push(["IP", z]);
      }
    }

    return s;
  };

  this.getExtCRLDistributionPoints = function (w, y) {
    if (w === undefined && y === undefined) {
      var x = this.getExtInfo("cRLDistributionPoints");

      if (x === undefined) {
        return undefined;
      }

      w = b(this.hex, x.vidx);
      y = x.critical;
    }

    var t = {
      extname: "cRLDistributionPoints",
      array: []
    };

    if (y) {
      t.critical = true;
    }

    var u = n(w, 0);

    for (var v = 0; v < u.length; v++) {
      var s = b(w, u[v]);
      t.array.push(this.getDistributionPoint(s));
    }

    return t;
  };

  this.getDistributionPoint = function (x) {
    var u = {};
    var v = n(x, 0);

    for (var w = 0; w < v.length; w++) {
      var t = x.substr(v[w], 2);
      var s = b(x, v[w]);

      if (t == "a0") {
        u.dpname = this.getDistributionPointName(s);
      }
    }

    return u;
  };

  this.getDistributionPointName = function (x) {
    var u = {};
    var v = n(x, 0);

    for (var w = 0; w < v.length; w++) {
      var t = x.substr(v[w], 2);
      var s = b(x, v[w]);

      if (t == "a0") {
        u.full = this.getGeneralNames(s);
      }
    }

    return u;
  };

  this.getExtCRLDistributionPointsURI = function () {
    var x = this.getExtInfo("cRLDistributionPoints");

    if (x === undefined) {
      return x;
    }

    var s = new Array();
    var t = n(this.hex, x.vidx);

    for (var v = 0; v < t.length; v++) {
      try {
        var y = c(this.hex, t[v], [0, 0, 0], "86");
        var w = hextoutf8(y);
        s.push(w);
      } catch (u) {}
    }

    return s;
  };

  this.getExtAIAInfo = function () {
    var w = this.getExtInfo("authorityInfoAccess");

    if (w === undefined) {
      return w;
    }

    var s = {
      ocsp: [],
      caissuer: []
    };
    var t = n(this.hex, w.vidx);

    for (var u = 0; u < t.length; u++) {
      var x = c(this.hex, t[u], [0], "06");
      var v = c(this.hex, t[u], [1], "86");

      if (x === "2b06010505073001") {
        s.ocsp.push(hextoutf8(v));
      }

      if (x === "2b06010505073002") {
        s.caissuer.push(hextoutf8(v));
      }
    }

    return s;
  };

  this.getExtAuthorityInfoAccess = function (z, x) {
    if (z === undefined && x === undefined) {
      var s = this.getExtInfo("authorityInfoAccess");

      if (s === undefined) {
        return undefined;
      }

      z = b(this.hex, s.vidx);
      x = s.critical;
    }

    var A = {
      extname: "authorityInfoAccess",
      array: []
    };

    if (x) {
      A.critical = true;
    }

    var y = n(z, 0);

    for (var t = 0; t < y.length; t++) {
      var w = k(z, y[t], [0], "06");
      var u = c(z, y[t], [1], "86");
      var v = hextoutf8(u);

      if (w == "2b06010505073001") {
        A.array.push({
          ocsp: v
        });
      } else {
        if (w == "2b06010505073002") {
          A.array.push({
            caissuer: v
          });
        } else {
          throw new Error("unknown method: " + w);
        }
      }
    }

    return A;
  };

  this.getExtCertificatePolicies = function (w, z) {
    if (w === undefined && z === undefined) {
      var y = this.getExtInfo("certificatePolicies");

      if (y === undefined) {
        return undefined;
      }

      w = b(this.hex, y.vidx);
      z = y.critical;
    }

    var s = {
      extname: "certificatePolicies",
      array: []
    };

    if (z) {
      s.critical = true;
    }

    var t = n(w, 0);

    for (var u = 0; u < t.length; u++) {
      var x = b(w, t[u]);
      var v = this.getPolicyInformation(x);
      s.array.push(v);
    }

    return s;
  };

  this.getPolicyInformation = function (w) {
    var s = {};
    var y = c(w, 0, [0], "06");
    s.policyoid = p(y);
    var z = e(w, 0, [1], "30");

    if (z != -1) {
      s.array = [];
      var t = n(w, z);

      for (var u = 0; u < t.length; u++) {
        var x = b(w, t[u]);
        var v = this.getPolicyQualifierInfo(x);
        s.array.push(v);
      }
    }

    return s;
  };

  this.getPolicyQualifierInfo = function (t) {
    var s = {};
    var u = c(t, 0, [0], "06");

    if (u === "2b06010505070201") {
      var w = k(t, 0, [1], "16");
      s.cps = hextorstr(w);
    } else {
      if (u === "2b06010505070202") {
        var v = a(t, 0, [1], "30");
        s.unotice = this.getUserNotice(v);
      }
    }

    return s;
  };

  this.getUserNotice = function (w) {
    var t = {};
    var u = n(w, 0);

    for (var v = 0; v < u.length; v++) {
      var s = b(w, u[v]);

      if (s.substr(0, 2) != "30") {
        t.exptext = this.getDisplayText(s);
      }
    }

    return t;
  };

  this.getDisplayText = function (t) {
    var u = {
      "0c": "utf8",
      "16": "ia5",
      "1a": "vis",
      "1e": "bmp"
    };
    var s = {};
    s.type = u[t.substr(0, 2)];
    s.str = hextorstr(g(t, 0));
    return s;
  };

  this.getExtCRLNumber = function (t, u) {
    var s = {
      extname: "cRLNumber"
    };

    if (u) {
      s.critical = true;
    }

    if (t.substr(0, 2) == "02") {
      s.num = {
        hex: g(t, 0)
      };
      return s;
    }

    throw new Error("hExtV parse error: " + t);
  };

  this.getExtCRLReason = function (t, u) {
    var s = {
      extname: "cRLReason"
    };

    if (u) {
      s.critical = true;
    }

    if (t.substr(0, 2) == "0a") {
      s.code = parseInt(g(t, 0), 16);
      return s;
    }

    throw new Error("hExtV parse error: " + t);
  };

  this.getExtOcspNonce = function (t, v) {
    var s = {
      extname: "ocspNonce"
    };

    if (v) {
      s.critical = true;
    }

    var u = g(t, 0);
    s.hex = u;
    return s;
  };

  this.getExtOcspNoCheck = function (t, u) {
    var s = {
      extname: "ocspNoCheck"
    };

    if (u) {
      s.critical = true;
    }

    return s;
  };

  this.getExtAdobeTimeStamp = function (v, y) {
    if (v === undefined && y === undefined) {
      var x = this.getExtInfo("adobeTimeStamp");

      if (x === undefined) {
        return undefined;
      }

      v = b(this.hex, x.vidx);
      y = x.critical;
    }

    var s = {
      extname: "adobeTimeStamp"
    };

    if (y) {
      s.critical = true;
    }

    var u = n(v, 0);

    if (u.length > 1) {
      var z = b(v, u[1]);
      var t = this.getGeneralName(z);

      if (t.uri != undefined) {
        s.uri = t.uri;
      }
    }

    if (u.length > 2) {
      var w = b(v, u[2]);

      if (w == "0101ff") {
        s.reqauth = true;
      }

      if (w == "010100") {
        s.reqauth = false;
      }
    }

    return s;
  };

  this.getX500NameRule = function (s) {
    var z = true;
    var D = true;
    var C = false;
    var t = "";
    var w = "";
    var F = null;
    var A = [];

    for (var v = 0; v < s.length; v++) {
      var x = s[v];

      for (var u = 0; u < x.length; u++) {
        A.push(x[u]);
      }
    }

    for (var v = 0; v < A.length; v++) {
      var E = A[v];
      var G = E.ds;
      var B = E.value;
      var y = E.type;
      t += ":" + G;

      if (G != "prn" && G != "utf8" && G != "ia5") {
        return "mixed";
      }

      if (G == "ia5") {
        if (y != "CN") {
          return "mixed";
        } else {
          if (!KJUR.lang.String.isMail(B)) {
            return "mixed";
          } else {
            continue;
          }
        }
      }

      if (y == "C") {
        if (G == "prn") {
          continue;
        } else {
          return "mixed";
        }
      }

      w += ":" + G;

      if (F == null) {
        F = G;
      } else {
        if (F !== G) {
          return "mixed";
        }
      }
    }

    if (F == null) {
      return "prn";
    } else {
      return F;
    }
  };

  this.getX500Name = function (v) {
    var t = this.getX500NameArray(v);
    var u = this.dnarraytostr(t);
    return {
      array: t,
      str: u
    };
  };

  this.getX500NameArray = function (v) {
    var s = [];
    var t = n(v, 0);

    for (var u = 0; u < t.length; u++) {
      s.push(this.getRDN(b(v, t[u])));
    }

    return s;
  };

  this.getRDN = function (v) {
    var s = [];
    var t = n(v, 0);

    for (var u = 0; u < t.length; u++) {
      s.push(this.getAttrTypeAndValue(b(v, t[u])));
    }

    return s;
  };

  this.getAttrTypeAndValue = function (u) {
    var s = {
      type: null,
      value: null,
      ds: null
    };
    var t = n(u, 0);
    var x = c(u, t[0], [], "06");
    var w = c(u, t[1], []);
    var v = KJUR.asn1.ASN1Util.oidHexToInt(x);
    s.type = KJUR.asn1.x509.OID.oid2atype(v);
    s.value = hextorstr(w);
    s.ds = this.HEX2STAG[u.substr(t[1], 2)];
    return s;
  };

  this.readCertPEM = function (s) {
    this.readCertHex(r(s));
  };

  this.readCertHex = function (s) {
    this.hex = s;
    this.getVersion();

    try {
      h(this.hex, 0, [0, 7], "a3");
      this.parseExt();
    } catch (t) {}
  };

  this.getParam = function () {
    var s = {};
    s.version = this.getVersion();
    s.serial = {
      hex: this.getSerialNumberHex()
    };
    s.sigalg = this.getSignatureAlgorithmField();
    s.issuer = this.getIssuer();
    s.notbefore = this.getNotBefore();
    s.notafter = this.getNotAfter();
    s.subject = this.getSubject();
    s.sbjpubkey = hextopem(this.getPublicKeyHex(), "PUBLIC KEY");

    if (this.aExtInfo.length > 0) {
      s.ext = this.getExtParamArray();
    }

    s.sighex = this.getSignatureValueHex();
    return s;
  };

  this.getExtParamArray = function (t) {
    if (t == undefined) {
      var v = e(this.hex, 0, [0, "[3]"]);

      if (v != -1) {
        t = l(this.hex, 0, [0, "[3]", 0], "30");
      }
    }

    var s = [];
    var u = n(t, 0);

    for (var w = 0; w < u.length; w++) {
      var y = b(t, u[w]);
      var x = this.getExtParam(y);

      if (x != null) {
        s.push(x);
      }
    }

    return s;
  };

  this.getExtParam = function (t) {
    var A = {};
    var v = n(t, 0);
    var w = v.length;

    if (w != 2 && w != 3) {
      throw new Error("wrong number elements in Extension: " + w + " " + t);
    }

    var u = m(c(t, 0, [0], "06"));
    var y = false;

    if (w == 3 && a(t, 0, [1]) == "0101ff") {
      y = true;
    }

    var z = a(t, 0, [w - 1, 0]);
    var x = undefined;

    if (u == "2.5.29.14") {
      x = this.getExtSubjectKeyIdentifier(z, y);
    } else {
      if (u == "2.5.29.15") {
        x = this.getExtKeyUsage(z, y);
      } else {
        if (u == "2.5.29.17") {
          x = this.getExtSubjectAltName(z, y);
        } else {
          if (u == "2.5.29.18") {
            x = this.getExtIssuerAltName(z, y);
          } else {
            if (u == "2.5.29.19") {
              x = this.getExtBasicConstraints(z, y);
            } else {
              if (u == "2.5.29.31") {
                x = this.getExtCRLDistributionPoints(z, y);
              } else {
                if (u == "2.5.29.32") {
                  x = this.getExtCertificatePolicies(z, y);
                } else {
                  if (u == "2.5.29.35") {
                    x = this.getExtAuthorityKeyIdentifier(z, y);
                  } else {
                    if (u == "2.5.29.37") {
                      x = this.getExtExtKeyUsage(z, y);
                    } else {
                      if (u == "1.3.6.1.5.5.7.1.1") {
                        x = this.getExtAuthorityInfoAccess(z, y);
                      } else {
                        if (u == "2.5.29.20") {
                          x = this.getExtCRLNumber(z, y);
                        } else {
                          if (u == "2.5.29.21") {
                            x = this.getExtCRLReason(z, y);
                          } else {
                            if (u == "1.3.6.1.5.5.7.48.1.2") {
                              x = this.getExtOcspNonce(z, y);
                            } else {
                              if (u == "1.3.6.1.5.5.7.48.1.5") {
                                x = this.getExtOcspNoCheck(z, y);
                              } else {
                                if (u == "1.2.840.113583.1.1.9.1") {
                                  x = this.getExtAdobeTimeStamp(z, y);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    if (x != undefined) {
      return x;
    }

    var s = {
      extname: u,
      extn: z
    };

    if (y) {
      s.critical = true;
    }

    return s;
  };

  this.findExt = function (t, u) {
    for (var s = 0; s < t.length; s++) {
      if (t[s].extname == u) {
        return t[s];
      }
    }

    return null;
  };

  this.updateExtCDPFullURI = function (w, s) {
    var v = this.findExt(w, "cRLDistributionPoints");

    if (v == null) {
      return;
    }

    if (v.array == undefined) {
      return;
    }

    var y = v.array;

    for (var u = 0; u < y.length; u++) {
      if (y[u].dpname == undefined) {
        continue;
      }

      if (y[u].dpname.full == undefined) {
        continue;
      }

      var z = y[u].dpname.full;

      for (var t = 0; t < z.length; t++) {
        var x = z[u];

        if (x.uri == undefined) {
          continue;
        }

        x.uri = s;
      }
    }
  };

  this.updateExtAIAOCSP = function (w, t) {
    var v = this.findExt(w, "authorityInfoAccess");

    if (v == null) {
      return;
    }

    if (v.array == undefined) {
      return;
    }

    var s = v.array;

    for (var u = 0; u < s.length; u++) {
      if (s[u].ocsp != undefined) {
        s[u].ocsp = t;
      }
    }
  };

  this.updateExtAIACAIssuer = function (w, t) {
    var v = this.findExt(w, "authorityInfoAccess");

    if (v == null) {
      return;
    }

    if (v.array == undefined) {
      return;
    }

    var s = v.array;

    for (var u = 0; u < s.length; u++) {
      if (s[u].caissuer != undefined) {
        s[u].caissuer = t;
      }
    }
  };

  this.dnarraytostr = function (u) {
    function s(v) {
      return v.map(function (w) {
        return t(w);
      }).join("+");
    }

    function t(v) {
      return v.type + "=" + v.value;
    }

    return "/" + u.map(function (v) {
      return s(v);
    }).join("/");
  };

  this.getInfo = function () {
    var u = function u(M) {
      var L = JSON.stringify(M.array).replace(/[\[\]\{\}\"]/g, "");
      return L;
    };

    var A = function A(R) {
      var P = "";
      var L = R.array;

      for (var O = 0; O < L.length; O++) {
        var Q = L[O];
        P += "    policy oid: " + Q.policyoid + "\n";

        if (Q.array === undefined) {
          continue;
        }

        for (var N = 0; N < Q.array.length; N++) {
          var M = Q.array[N];

          if (M.cps !== undefined) {
            P += "    cps: " + M.cps + "\n";
          }
        }
      }

      return P;
    };

    var D = function D(P) {
      var O = "";
      var L = P.array;

      for (var N = 0; N < L.length; N++) {
        var Q = L[N];

        try {
          if (Q.dpname.full[0].uri !== undefined) {
            O += "    " + Q.dpname.full[0].uri + "\n";
          }
        } catch (M) {}

        try {
          if (Q.dname.full[0].dn.hex !== undefined) {
            O += "    " + X509.hex2dn(Q.dpname.full[0].dn.hex) + "\n";
          }
        } catch (M) {}
      }

      return O;
    };

    var B = function B(P) {
      var O = "";
      var L = P.array;

      for (var M = 0; M < L.length; M++) {
        var N = L[M];

        if (N.caissuer !== undefined) {
          O += "    caissuer: " + N.caissuer + "\n";
        }

        if (N.ocsp !== undefined) {
          O += "    ocsp: " + N.ocsp + "\n";
        }
      }

      return O;
    };

    var v = X509;
    var F, E, K;
    F = "Basic Fields\n";
    F += "  serial number: " + this.getSerialNumberHex() + "\n";
    F += "  signature algorithm: " + this.getSignatureAlgorithmField() + "\n";
    F += "  issuer: " + this.getIssuerString() + "\n";
    F += "  notBefore: " + this.getNotBefore() + "\n";
    F += "  notAfter: " + this.getNotAfter() + "\n";
    F += "  subject: " + this.getSubjectString() + "\n";
    F += "  subject public key info: \n";
    E = this.getPublicKey();
    F += "    key algorithm: " + E.type + "\n";

    if (E.type === "RSA") {
      F += "    n=" + hextoposhex(E.n.toString(16)).substr(0, 16) + "...\n";
      F += "    e=" + hextoposhex(E.e.toString(16)) + "\n";
    }

    K = this.aExtInfo;

    if (K !== undefined && K !== null) {
      F += "X509v3 Extensions:\n";

      for (var H = 0; H < K.length; H++) {
        var J = K[H];
        var t = KJUR.asn1.x509.OID.oid2name(J.oid);

        if (t === "") {
          t = J.oid;
        }

        var G = "";

        if (J.critical === true) {
          G = "CRITICAL";
        }

        F += "  " + t + " " + G + ":\n";

        if (t === "basicConstraints") {
          var w = this.getExtBasicConstraints();

          if (w.cA === undefined) {
            F += "    {}\n";
          } else {
            F += "    cA=true";

            if (w.pathLen !== undefined) {
              F += ", pathLen=" + w.pathLen;
            }

            F += "\n";
          }
        } else {
          if (t === "keyUsage") {
            F += "    " + this.getExtKeyUsageString() + "\n";
          } else {
            if (t === "subjectKeyIdentifier") {
              F += "    " + this.getExtSubjectKeyIdentifier().kid.hex + "\n";
            } else {
              if (t === "authorityKeyIdentifier") {
                var x = this.getExtAuthorityKeyIdentifier();

                if (x.kid !== undefined) {
                  F += "    kid=" + x.kid.hex + "\n";
                }
              } else {
                if (t === "extKeyUsage") {
                  var I = this.getExtExtKeyUsage().array;
                  F += "    " + I.join(", ") + "\n";
                } else {
                  if (t === "subjectAltName") {
                    var y = u(this.getExtSubjectAltName());
                    F += "    " + y + "\n";
                  } else {
                    if (t === "cRLDistributionPoints") {
                      var C = this.getExtCRLDistributionPoints();
                      F += D(C);
                    } else {
                      if (t === "authorityInfoAccess") {
                        var z = this.getExtAuthorityInfoAccess();
                        F += B(z);
                      } else {
                        if (t === "certificatePolicies") {
                          F += A(this.getExtCertificatePolicies());
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    F += "signature algorithm: " + this.getSignatureAlgorithmName() + "\n";
    F += "signature: " + this.getSignatureValueHex().substr(0, 16) + "...\n";
    return F;
  };

  if (typeof q == "string") {
    if (q.indexOf("-----BEGIN") != -1) {
      this.readCertPEM(q);
    } else {
      if (KJUR.lang.String.isHex(q)) {
        this.readCertHex(q);
      }
    }
  }
}

X509.hex2dn = function (f, b) {
  if (b === undefined) {
    b = 0;
  }

  if (f.substr(b, 2) !== "30") {
    throw new Error("malformed DN");
  }

  var c = new Array();
  var d = ASN1HEX.getChildIdx(f, b);

  for (var e = 0; e < d.length; e++) {
    c.push(X509.hex2rdn(f, d[e]));
  }

  c = c.map(function (a) {
    return a.replace("/", "\\/");
  });
  return "/" + c.join("/");
};

X509.hex2rdn = function (f, b) {
  if (b === undefined) {
    b = 0;
  }

  if (f.substr(b, 2) !== "31") {
    throw new Error("malformed RDN");
  }

  var c = new Array();
  var d = ASN1HEX.getChildIdx(f, b);

  for (var e = 0; e < d.length; e++) {
    c.push(X509.hex2attrTypeValue(f, d[e]));
  }

  c = c.map(function (a) {
    return a.replace("+", "\\+");
  });
  return c.join("+");
};

X509.hex2attrTypeValue = function (d, i) {
  var j = ASN1HEX;
  var h = j.getV;

  if (i === undefined) {
    i = 0;
  }

  if (d.substr(i, 2) !== "30") {
    throw new Error("malformed attribute type and value");
  }

  var g = j.getChildIdx(d, i);

  if (g.length !== 2 || d.substr(g[0], 2) !== "06") {
    "malformed attribute type and value";
  }

  var b = h(d, g[0]);
  var f = KJUR.asn1.ASN1Util.oidHexToInt(b);
  var e = KJUR.asn1.x509.OID.oid2atype(f);
  var a = h(d, g[1]);
  var c = hextorstr(a);
  return e + "=" + c;
};

X509.getPublicKeyFromCertHex = function (b) {
  var a = new X509();
  a.readCertHex(b);
  return a.getPublicKey();
};

X509.getPublicKeyFromCertPEM = function (b) {
  var a = new X509();
  a.readCertPEM(b);
  return a.getPublicKey();
};

X509.getPublicKeyInfoPropOfCertPEM = function (c) {
  var e = ASN1HEX;
  var g = e.getVbyList;
  var b = {};
  var a, f, d;
  b.algparam = null;
  a = new X509();
  a.readCertPEM(c);
  f = a.getPublicKeyHex();
  b.keyhex = g(f, 0, [1], "03").substr(2);
  b.algoid = g(f, 0, [0, 0], "06");

  if (b.algoid === "2a8648ce3d0201") {
    b.algparam = g(f, 0, [0, 1], "06");
  }

  return b;
};

X509.KEYUSAGE_NAME = ["digitalSignature", "nonRepudiation", "keyEncipherment", "dataEncipherment", "keyAgreement", "keyCertSign", "cRLSign", "encipherOnly", "decipherOnly"];

if (typeof KJUR == "undefined" || !KJUR) {
  KJUR = {};
}

if (typeof KJUR.jws == "undefined" || !KJUR.jws) {
  KJUR.jws = {};
}

KJUR.jws.JWS = function () {
  var b = KJUR,
      a = b.jws.JWS,
      c = a.isSafeJSONString;

  this.parseJWS = function (g, j) {
    if (this.parsedJWS !== undefined && (j || this.parsedJWS.sigvalH !== undefined)) {
      return;
    }

    var i = g.match(/^([^.]+)\.([^.]+)\.([^.]+)$/);

    if (i == null) {
      throw "JWS signature is not a form of 'Head.Payload.SigValue'.";
    }

    var k = i[1];
    var e = i[2];
    var l = i[3];
    var n = k + "." + e;
    this.parsedJWS = {};
    this.parsedJWS.headB64U = k;
    this.parsedJWS.payloadB64U = e;
    this.parsedJWS.sigvalB64U = l;
    this.parsedJWS.si = n;

    if (!j) {
      var h = b64utohex(l);
      var f = parseBigInt(h, 16);
      this.parsedJWS.sigvalH = h;
      this.parsedJWS.sigvalBI = f;
    }

    var d = b64utoutf8(k);
    var m = b64utoutf8(e);
    this.parsedJWS.headS = d;
    this.parsedJWS.payloadS = m;

    if (!c(d, this.parsedJWS, "headP")) {
      throw "malformed JSON string for JWS Head: " + d;
    }
  };
};

KJUR.jws.JWS.sign = function (j, w, z, A, a) {
  var x = KJUR,
      n = x.jws,
      r = n.JWS,
      h = r.readSafeJSONString,
      q = r.isSafeJSONString,
      d = x.crypto,
      l = d.ECDSA,
      p = d.Mac,
      c = d.Signature,
      u = JSON;
  var t, k, o;

  if (typeof w != "string" && _typeof(w) != "object") {
    throw "spHeader must be JSON string or object: " + w;
  }

  if (_typeof(w) == "object") {
    k = w;
    t = u.stringify(k);
  }

  if (typeof w == "string") {
    t = w;

    if (!q(t)) {
      throw "JWS Head is not safe JSON string: " + t;
    }

    k = h(t);
  }

  o = z;

  if (_typeof(z) == "object") {
    o = u.stringify(z);
  }

  if ((j == "" || j == null) && k.alg !== undefined) {
    j = k.alg;
  }

  if (j != "" && j != null && k.alg === undefined) {
    k.alg = j;
    t = u.stringify(k);
  }

  if (j !== k.alg) {
    throw "alg and sHeader.alg doesn't match: " + j + "!=" + k.alg;
  }

  var s = null;

  if (r.jwsalg2sigalg[j] === undefined) {
    throw "unsupported alg name: " + j;
  } else {
    s = r.jwsalg2sigalg[j];
  }

  var e = utf8tob64u(t);
  var m = utf8tob64u(o);
  var b = e + "." + m;
  var y = "";

  if (s.substr(0, 4) == "Hmac") {
    if (A === undefined) {
      throw "mac key shall be specified for HS* alg";
    }

    var i = new p({
      alg: s,
      prov: "cryptojs",
      pass: A
    });
    i.updateString(b);
    y = i.doFinal();
  } else {
    if (s.indexOf("withECDSA") != -1) {
      var f = new c({
        alg: s
      });
      f.init(A, a);
      f.updateString(b);
      var g = f.sign();
      y = KJUR.crypto.ECDSA.asn1SigToConcatSig(g);
    } else {
      if (s != "none") {
        var f = new c({
          alg: s
        });
        f.init(A, a);
        f.updateString(b);
        y = f.sign();
      }
    }
  }

  var v = hextob64u(y);
  return b + "." + v;
};

KJUR.jws.JWS.verify = function (w, B, n) {
  var x = KJUR,
      q = x.jws,
      t = q.JWS,
      i = t.readSafeJSONString,
      e = x.crypto,
      p = e.ECDSA,
      s = e.Mac,
      d = e.Signature,
      m;

  if (_typeof(RSAKey) !== undefined) {
    m = RSAKey;
  }

  var y = w.split(".");

  if (y.length !== 3) {
    return false;
  }

  var f = y[0];
  var r = y[1];
  var c = f + "." + r;
  var A = b64utohex(y[2]);
  var l = i(b64utoutf8(y[0]));
  var k = null;
  var z = null;

  if (l.alg === undefined) {
    throw "algorithm not specified in header";
  } else {
    k = l.alg;
    z = k.substr(0, 2);
  }

  if (n != null && Object.prototype.toString.call(n) === "[object Array]" && n.length > 0) {
    var b = ":" + n.join(":") + ":";

    if (b.indexOf(":" + k + ":") == -1) {
      throw "algorithm '" + k + "' not accepted in the list";
    }
  }

  if (k != "none" && B === null) {
    throw "key shall be specified to verify.";
  }

  if (typeof B == "string" && B.indexOf("-----BEGIN ") != -1) {
    B = KEYUTIL.getKey(B);
  }

  if (z == "RS" || z == "PS") {
    if (!(B instanceof m)) {
      throw "key shall be a RSAKey obj for RS* and PS* algs";
    }
  }

  if (z == "ES") {
    if (!(B instanceof p)) {
      throw "key shall be a ECDSA obj for ES* algs";
    }
  }

  if (k == "none") {}

  var u = null;

  if (t.jwsalg2sigalg[l.alg] === undefined) {
    throw "unsupported alg name: " + k;
  } else {
    u = t.jwsalg2sigalg[k];
  }

  if (u == "none") {
    throw "not supported";
  } else {
    if (u.substr(0, 4) == "Hmac") {
      var o = null;

      if (B === undefined) {
        throw "hexadecimal key shall be specified for HMAC";
      }

      var j = new s({
        alg: u,
        pass: B
      });
      j.updateString(c);
      o = j.doFinal();
      return A == o;
    } else {
      if (u.indexOf("withECDSA") != -1) {
        var h = null;

        try {
          h = p.concatSigToASN1Sig(A);
        } catch (v) {
          return false;
        }

        var g = new d({
          alg: u
        });
        g.init(B);
        g.updateString(c);
        return g.verify(h);
      } else {
        var g = new d({
          alg: u
        });
        g.init(B);
        g.updateString(c);
        return g.verify(A);
      }
    }
  }
};

KJUR.jws.JWS.parse = function (g) {
  var c = g.split(".");
  var b = {};
  var f, e, d;

  if (c.length != 2 && c.length != 3) {
    throw "malformed sJWS: wrong number of '.' splitted elements";
  }

  f = c[0];
  e = c[1];

  if (c.length == 3) {
    d = c[2];
  }

  b.headerObj = KJUR.jws.JWS.readSafeJSONString(b64utoutf8(f));
  b.payloadObj = KJUR.jws.JWS.readSafeJSONString(b64utoutf8(e));
  b.headerPP = JSON.stringify(b.headerObj, null, "  ");

  if (b.payloadObj == null) {
    b.payloadPP = b64utoutf8(e);
  } else {
    b.payloadPP = JSON.stringify(b.payloadObj, null, "  ");
  }

  if (d !== undefined) {
    b.sigHex = b64utohex(d);
  }

  return b;
};

KJUR.jws.JWS.verifyJWT = function (e, l, r) {
  var d = KJUR,
      j = d.jws,
      o = j.JWS,
      n = o.readSafeJSONString,
      p = o.inArray,
      f = o.includedArray;
  var k = e.split(".");
  var c = k[0];
  var i = k[1];
  var q = c + "." + i;
  var m = b64utohex(k[2]);
  var h = n(b64utoutf8(c));
  var g = n(b64utoutf8(i));

  if (h.alg === undefined) {
    return false;
  }

  if (r.alg === undefined) {
    throw "acceptField.alg shall be specified";
  }

  if (!p(h.alg, r.alg)) {
    return false;
  }

  if (g.iss !== undefined && _typeof(r.iss) === "object") {
    if (!p(g.iss, r.iss)) {
      return false;
    }
  }

  if (g.sub !== undefined && _typeof(r.sub) === "object") {
    if (!p(g.sub, r.sub)) {
      return false;
    }
  }

  if (g.aud !== undefined && _typeof(r.aud) === "object") {
    if (typeof g.aud == "string") {
      if (!p(g.aud, r.aud)) {
        return false;
      }
    } else {
      if (_typeof(g.aud) == "object") {
        if (!f(g.aud, r.aud)) {
          return false;
        }
      }
    }
  }

  var b = j.IntDate.getNow();

  if (r.verifyAt !== undefined && typeof r.verifyAt === "number") {
    b = r.verifyAt;
  }

  if (r.gracePeriod === undefined || typeof r.gracePeriod !== "number") {
    r.gracePeriod = 0;
  }

  if (g.exp !== undefined && typeof g.exp == "number") {
    if (g.exp + r.gracePeriod < b) {
      return false;
    }
  }

  if (g.nbf !== undefined && typeof g.nbf == "number") {
    if (b < g.nbf - r.gracePeriod) {
      return false;
    }
  }

  if (g.iat !== undefined && typeof g.iat == "number") {
    if (b < g.iat - r.gracePeriod) {
      return false;
    }
  }

  if (g.jti !== undefined && r.jti !== undefined) {
    if (g.jti !== r.jti) {
      return false;
    }
  }

  if (!o.verify(e, l, r.alg)) {
    return false;
  }

  return true;
};

KJUR.jws.JWS.includedArray = function (b, a) {
  var c = KJUR.jws.JWS.inArray;

  if (b === null) {
    return false;
  }

  if (_typeof(b) !== "object") {
    return false;
  }

  if (typeof b.length !== "number") {
    return false;
  }

  for (var d = 0; d < b.length; d++) {
    if (!c(b[d], a)) {
      return false;
    }
  }

  return true;
};

KJUR.jws.JWS.inArray = function (d, b) {
  if (b === null) {
    return false;
  }

  if (_typeof(b) !== "object") {
    return false;
  }

  if (typeof b.length !== "number") {
    return false;
  }

  for (var c = 0; c < b.length; c++) {
    if (b[c] == d) {
      return true;
    }
  }

  return false;
};

KJUR.jws.JWS.jwsalg2sigalg = {
  HS256: "HmacSHA256",
  HS384: "HmacSHA384",
  HS512: "HmacSHA512",
  RS256: "SHA256withRSA",
  RS384: "SHA384withRSA",
  RS512: "SHA512withRSA",
  ES256: "SHA256withECDSA",
  ES384: "SHA384withECDSA",
  PS256: "SHA256withRSAandMGF1",
  PS384: "SHA384withRSAandMGF1",
  PS512: "SHA512withRSAandMGF1",
  none: "none"
};

KJUR.jws.JWS.isSafeJSONString = function (c, b, d) {
  var e = null;

  try {
    e = jsonParse(c);

    if (_typeof(e) != "object") {
      return 0;
    }

    if (e.constructor === Array) {
      return 0;
    }

    if (b) {
      b[d] = e;
    }

    return 1;
  } catch (a) {
    return 0;
  }
};

KJUR.jws.JWS.readSafeJSONString = function (b) {
  var c = null;

  try {
    c = jsonParse(b);

    if (_typeof(c) != "object") {
      return null;
    }

    if (c.constructor === Array) {
      return null;
    }

    return c;
  } catch (a) {
    return null;
  }
};

KJUR.jws.JWS.getEncodedSignatureValueFromJWS = function (b) {
  var a = b.match(/^[^.]+\.[^.]+\.([^.]+)$/);

  if (a == null) {
    throw "JWS signature is not a form of 'Head.Payload.SigValue'.";
  }

  return a[1];
};

KJUR.jws.JWS.getJWKthumbprint = function (d) {
  if (d.kty !== "RSA" && d.kty !== "EC" && d.kty !== "oct") {
    throw "unsupported algorithm for JWK Thumprint";
  }

  var a = "{";

  if (d.kty === "RSA") {
    if (typeof d.n != "string" || typeof d.e != "string") {
      throw "wrong n and e value for RSA key";
    }

    a += '"e":"' + d.e + '",';
    a += '"kty":"' + d.kty + '",';
    a += '"n":"' + d.n + '"}';
  } else {
    if (d.kty === "EC") {
      if (typeof d.crv != "string" || typeof d.x != "string" || typeof d.y != "string") {
        throw "wrong crv, x and y value for EC key";
      }

      a += '"crv":"' + d.crv + '",';
      a += '"kty":"' + d.kty + '",';
      a += '"x":"' + d.x + '",';
      a += '"y":"' + d.y + '"}';
    } else {
      if (d.kty === "oct") {
        if (typeof d.k != "string") {
          throw "wrong k value for oct(symmetric) key";
        }

        a += '"kty":"' + d.kty + '",';
        a += '"k":"' + d.k + '"}';
      }
    }
  }

  var b = rstrtohex(a);
  var c = KJUR.crypto.Util.hashHex(b, "sha256");
  var e = hextob64u(c);
  return e;
};

KJUR.jws.IntDate = {};

KJUR.jws.IntDate.get = function (c) {
  var b = KJUR.jws.IntDate,
      d = b.getNow,
      a = b.getZulu;

  if (c == "now") {
    return d();
  } else {
    if (c == "now + 1hour") {
      return d() + 60 * 60;
    } else {
      if (c == "now + 1day") {
        return d() + 60 * 60 * 24;
      } else {
        if (c == "now + 1month") {
          return d() + 60 * 60 * 24 * 30;
        } else {
          if (c == "now + 1year") {
            return d() + 60 * 60 * 24 * 365;
          } else {
            if (c.match(/Z$/)) {
              return a(c);
            } else {
              if (c.match(/^[0-9]+$/)) {
                return parseInt(c);
              }
            }
          }
        }
      }
    }
  }

  throw "unsupported format: " + c;
};

KJUR.jws.IntDate.getZulu = function (a) {
  return zulutosec(a);
};

KJUR.jws.IntDate.getNow = function () {
  var a = ~~(new Date() / 1000);
  return a;
};

KJUR.jws.IntDate.intDate2UTCString = function (a) {
  var b = new Date(a * 1000);
  return b.toUTCString();
};

KJUR.jws.IntDate.intDate2Zulu = function (e) {
  var i = new Date(e * 1000),
      h = ("0000" + i.getUTCFullYear()).slice(-4),
      g = ("00" + (i.getUTCMonth() + 1)).slice(-2),
      b = ("00" + i.getUTCDate()).slice(-2),
      a = ("00" + i.getUTCHours()).slice(-2),
      c = ("00" + i.getUTCMinutes()).slice(-2),
      f = ("00" + i.getUTCSeconds()).slice(-2);
  return h + g + b + a + c + f + "Z";
};





var EDSA = KJUR.crypto.EDSA;

var DSA = KJUR.crypto.DSA;

var Signature = KJUR.crypto.Signature;

var MessageDigest = KJUR.crypto.MessageDigest;

var Mac = KJUR.crypto.Mac;

var Cipher = KJUR.crypto.Cipher;




 // ext/base64.js


 // base64x.js











































 // name spaces


var _crypto = KJUR.crypto;

var _KJUR = KJUR,
    asn1 = _KJUR.asn1;

var _KJUR2 = KJUR,
    jws = _KJUR2.jws;

var _KJUR3 = KJUR,
    lang = _KJUR3.lang;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(/*! base64-js */ "./node_modules/base64-js/index.js")
var ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/ieee754/index.js")
var isArray = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js")

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./src/AccessTokenEvents.js":
/*!**********************************!*\
  !*** ./src/AccessTokenEvents.js ***!
  \**********************************/
/*! exports provided: AccessTokenEvents */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AccessTokenEvents", function() { return AccessTokenEvents; });
/* harmony import */ var _Log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Log.js */ "./src/Log.js");
/* harmony import */ var _Timer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Timer.js */ "./src/Timer.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.


var DefaultAccessTokenExpiringNotificationTime = 60; // seconds

var AccessTokenEvents = /*#__PURE__*/function () {
  function AccessTokenEvents() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$accessTokenExpir = _ref.accessTokenExpiringNotificationTime,
        accessTokenExpiringNotificationTime = _ref$accessTokenExpir === void 0 ? DefaultAccessTokenExpiringNotificationTime : _ref$accessTokenExpir,
        _ref$accessTokenExpir2 = _ref.accessTokenExpiringTimer,
        accessTokenExpiringTimer = _ref$accessTokenExpir2 === void 0 ? new _Timer_js__WEBPACK_IMPORTED_MODULE_1__["Timer"]("Access token expiring") : _ref$accessTokenExpir2,
        _ref$accessTokenExpir3 = _ref.accessTokenExpiredTimer,
        accessTokenExpiredTimer = _ref$accessTokenExpir3 === void 0 ? new _Timer_js__WEBPACK_IMPORTED_MODULE_1__["Timer"]("Access token expired") : _ref$accessTokenExpir3;

    _classCallCheck(this, AccessTokenEvents);

    this._accessTokenExpiringNotificationTime = accessTokenExpiringNotificationTime;
    this._accessTokenExpiring = accessTokenExpiringTimer;
    this._accessTokenExpired = accessTokenExpiredTimer;
  }

  _createClass(AccessTokenEvents, [{
    key: "load",
    value: function load(container) {
      // only register events if there's an access token and it has an expiration
      if (container.access_token && container.expires_in !== undefined) {
        var duration = container.expires_in;
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("AccessTokenEvents.load: access token present, remaining duration:", duration);

        if (duration > 0) {
          // only register expiring if we still have time
          var expiring = duration - this._accessTokenExpiringNotificationTime;

          if (expiring <= 0) {
            expiring = 1;
          }

          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("AccessTokenEvents.load: registering expiring timer in:", expiring);

          this._accessTokenExpiring.init(expiring);
        } else {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("AccessTokenEvents.load: canceling existing expiring timer becase we're past expiration.");

          this._accessTokenExpiring.cancel();
        } // if it's negative, it will still fire


        var expired = duration + 1;
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("AccessTokenEvents.load: registering expired timer in:", expired);

        this._accessTokenExpired.init(expired);
      } else {
        this._accessTokenExpiring.cancel();

        this._accessTokenExpired.cancel();
      }
    }
  }, {
    key: "unload",
    value: function unload() {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("AccessTokenEvents.unload: canceling existing access token timers");

      this._accessTokenExpiring.cancel();

      this._accessTokenExpired.cancel();
    }
  }, {
    key: "addAccessTokenExpiring",
    value: function addAccessTokenExpiring(cb) {
      this._accessTokenExpiring.addHandler(cb);
    }
  }, {
    key: "removeAccessTokenExpiring",
    value: function removeAccessTokenExpiring(cb) {
      this._accessTokenExpiring.removeHandler(cb);
    }
  }, {
    key: "addAccessTokenExpired",
    value: function addAccessTokenExpired(cb) {
      this._accessTokenExpired.addHandler(cb);
    }
  }, {
    key: "removeAccessTokenExpired",
    value: function removeAccessTokenExpired(cb) {
      this._accessTokenExpired.removeHandler(cb);
    }
  }]);

  return AccessTokenEvents;
}();

/***/ }),

/***/ "./src/CheckSessionIFrame.js":
/*!***********************************!*\
  !*** ./src/CheckSessionIFrame.js ***!
  \***********************************/
/*! exports provided: CheckSessionIFrame */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CheckSessionIFrame", function() { return CheckSessionIFrame; });
/* harmony import */ var _Log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Log.js */ "./src/Log.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var DefaultInterval = 2000;
var CheckSessionIFrame = /*#__PURE__*/function () {
  function CheckSessionIFrame(callback, client_id, url, interval) {
    var stopOnError = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;

    _classCallCheck(this, CheckSessionIFrame);

    this._callback = callback;
    this._client_id = client_id;
    this._url = url;
    this._interval = interval || DefaultInterval;
    this._stopOnError = stopOnError;
    var idx = url.indexOf("/", url.indexOf("//") + 2);
    this._frame_origin = url.substr(0, idx);
    this._frame = window.document.createElement("iframe"); // shotgun approach

    this._frame.style.visibility = "hidden";
    this._frame.style.position = "absolute";
    this._frame.style.display = "none";
    this._frame.width = 0;
    this._frame.height = 0;
    this._frame.src = url;
  }

  _createClass(CheckSessionIFrame, [{
    key: "load",
    value: function load() {
      var _this = this;

      return new Promise(function (resolve) {
        _this._frame.onload = function () {
          resolve();
        };

        window.document.body.appendChild(_this._frame);
        _this._boundMessageEvent = _this._message.bind(_this);
        window.addEventListener("message", _this._boundMessageEvent, false);
      });
    }
  }, {
    key: "_message",
    value: function _message(e) {
      if (e.origin === this._frame_origin && e.source === this._frame.contentWindow) {
        if (e.data === "error") {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("CheckSessionIFrame: error message from check session op iframe");

          if (this._stopOnError) {
            this.stop();
          }
        } else if (e.data === "changed") {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("CheckSessionIFrame: changed message from check session op iframe");
          this.stop();

          this._callback();
        } else {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("CheckSessionIFrame: " + e.data + " message from check session op iframe");
        }
      }
    }
  }, {
    key: "start",
    value: function start(session_state) {
      var _this2 = this;

      if (this._session_state !== session_state) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("CheckSessionIFrame.start");
        this.stop();
        this._session_state = session_state;

        var send = function send() {
          _this2._frame.contentWindow.postMessage(_this2._client_id + " " + _this2._session_state, _this2._frame_origin);
        }; // trigger now


        send(); // and setup timer

        this._timer = window.setInterval(send, this._interval);
      }
    }
  }, {
    key: "stop",
    value: function stop() {
      this._session_state = null;

      if (this._timer) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("CheckSessionIFrame.stop");
        window.clearInterval(this._timer);
        this._timer = null;
      }
    }
  }]);

  return CheckSessionIFrame;
}();

/***/ }),

/***/ "./src/ClockService.js":
/*!*****************************!*\
  !*** ./src/ClockService.js ***!
  \*****************************/
/*! exports provided: ClockService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ClockService", function() { return ClockService; });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var ClockService = /*#__PURE__*/function () {
  function ClockService() {
    _classCallCheck(this, ClockService);
  }

  _createClass(ClockService, [{
    key: "getEpochTime",
    value: function getEpochTime() {
      return Promise.resolve(Date.now() / 1000 | 0);
    }
  }]);

  return ClockService;
}();

/***/ }),

/***/ "./src/CordovaIFrameNavigator.js":
/*!***************************************!*\
  !*** ./src/CordovaIFrameNavigator.js ***!
  \***************************************/
/*! exports provided: CordovaIFrameNavigator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CordovaIFrameNavigator", function() { return CordovaIFrameNavigator; });
/* harmony import */ var _CordovaPopupWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CordovaPopupWindow.js */ "./src/CordovaPopupWindow.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var CordovaIFrameNavigator = /*#__PURE__*/function () {
  function CordovaIFrameNavigator() {
    _classCallCheck(this, CordovaIFrameNavigator);
  }

  _createClass(CordovaIFrameNavigator, [{
    key: "prepare",
    value: function prepare(params) {
      params.popupWindowFeatures = 'hidden=yes';
      var popup = new _CordovaPopupWindow_js__WEBPACK_IMPORTED_MODULE_0__["CordovaPopupWindow"](params);
      return Promise.resolve(popup);
    }
  }]);

  return CordovaIFrameNavigator;
}();

/***/ }),

/***/ "./src/CordovaPopupNavigator.js":
/*!**************************************!*\
  !*** ./src/CordovaPopupNavigator.js ***!
  \**************************************/
/*! exports provided: CordovaPopupNavigator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CordovaPopupNavigator", function() { return CordovaPopupNavigator; });
/* harmony import */ var _CordovaPopupWindow_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CordovaPopupWindow.js */ "./src/CordovaPopupWindow.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var CordovaPopupNavigator = /*#__PURE__*/function () {
  function CordovaPopupNavigator() {
    _classCallCheck(this, CordovaPopupNavigator);
  }

  _createClass(CordovaPopupNavigator, [{
    key: "prepare",
    value: function prepare(params) {
      var popup = new _CordovaPopupWindow_js__WEBPACK_IMPORTED_MODULE_0__["CordovaPopupWindow"](params);
      return Promise.resolve(popup);
    }
  }]);

  return CordovaPopupNavigator;
}();

/***/ }),

/***/ "./src/CordovaPopupWindow.js":
/*!***********************************!*\
  !*** ./src/CordovaPopupWindow.js ***!
  \***********************************/
/*! exports provided: CordovaPopupWindow */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CordovaPopupWindow", function() { return CordovaPopupWindow; });
/* harmony import */ var _Log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Log.js */ "./src/Log.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var DefaultPopupFeatures = 'location=no,toolbar=no,zoom=no';
var DefaultPopupTarget = "_blank";
var CordovaPopupWindow = /*#__PURE__*/function () {
  function CordovaPopupWindow(params) {
    var _this = this;

    _classCallCheck(this, CordovaPopupWindow);

    this._promise = new Promise(function (resolve, reject) {
      _this._resolve = resolve;
      _this._reject = reject;
    });
    this.features = params.popupWindowFeatures || DefaultPopupFeatures;
    this.target = params.popupWindowTarget || DefaultPopupTarget;
    this.redirect_uri = params.startUrl;
    _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("CordovaPopupWindow.ctor: redirect_uri: " + this.redirect_uri);
  }

  _createClass(CordovaPopupWindow, [{
    key: "_isInAppBrowserInstalled",
    value: function _isInAppBrowserInstalled(cordovaMetadata) {
      return ["cordova-plugin-inappbrowser", "cordova-plugin-inappbrowser.inappbrowser", "org.apache.cordova.inappbrowser"].some(function (name) {
        return cordovaMetadata.hasOwnProperty(name);
      });
    }
  }, {
    key: "navigate",
    value: function navigate(params) {
      if (!params || !params.url) {
        this._error("No url provided");
      } else {
        if (!window.cordova) {
          return this._error("cordova is undefined");
        }

        var cordovaMetadata = window.cordova.require("cordova/plugin_list").metadata;

        if (this._isInAppBrowserInstalled(cordovaMetadata) === false) {
          return this._error("InAppBrowser plugin not found");
        }

        this._popup = cordova.InAppBrowser.open(params.url, this.target, this.features);

        if (this._popup) {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("CordovaPopupWindow.navigate: popup successfully created");
          this._exitCallbackEvent = this._exitCallback.bind(this);
          this._loadStartCallbackEvent = this._loadStartCallback.bind(this);

          this._popup.addEventListener("exit", this._exitCallbackEvent, false);

          this._popup.addEventListener("loadstart", this._loadStartCallbackEvent, false);
        } else {
          this._error("Error opening popup window");
        }
      }

      return this.promise;
    }
  }, {
    key: "promise",
    get: function get() {
      return this._promise;
    }
  }, {
    key: "_loadStartCallback",
    value: function _loadStartCallback(event) {
      if (event.url.indexOf(this.redirect_uri) === 0) {
        this._success({
          url: event.url
        });
      }
    }
  }, {
    key: "_exitCallback",
    value: function _exitCallback(message) {
      this._error(message);
    }
  }, {
    key: "_success",
    value: function _success(data) {
      this._cleanup();

      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("CordovaPopupWindow: Successful response from cordova popup window");

      this._resolve(data);
    }
  }, {
    key: "_error",
    value: function _error(message) {
      this._cleanup();

      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error(message);

      this._reject(new Error(message));
    }
  }, {
    key: "close",
    value: function close() {
      this._cleanup();
    }
  }, {
    key: "_cleanup",
    value: function _cleanup() {
      if (this._popup) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("CordovaPopupWindow: cleaning up popup");

        this._popup.removeEventListener("exit", this._exitCallbackEvent, false);

        this._popup.removeEventListener("loadstart", this._loadStartCallbackEvent, false);

        this._popup.close();
      }

      this._popup = null;
    }
  }]);

  return CordovaPopupWindow;
}();

/***/ }),

/***/ "./src/ErrorResponse.js":
/*!******************************!*\
  !*** ./src/ErrorResponse.js ***!
  \******************************/
/*! exports provided: ErrorResponse */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ErrorResponse", function() { return ErrorResponse; });
/* harmony import */ var _Log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Log.js */ "./src/Log.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var ErrorResponse = /*#__PURE__*/function (_Error) {
  _inherits(ErrorResponse, _Error);

  var _super = _createSuper(ErrorResponse);

  function ErrorResponse() {
    var _this;

    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        error = _ref.error,
        error_description = _ref.error_description,
        error_uri = _ref.error_uri,
        state = _ref.state,
        session_state = _ref.session_state;

    _classCallCheck(this, ErrorResponse);

    if (!error) {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("No error passed to ErrorResponse");
      throw new Error("error");
    }

    _this = _super.call(this, error_description || error);
    _this.name = "ErrorResponse";
    _this.error = error;
    _this.error_description = error_description;
    _this.error_uri = error_uri;
    _this.state = state;
    _this.session_state = session_state;
    return _this;
  }

  return ErrorResponse;
}( /*#__PURE__*/_wrapNativeSuper(Error));

/***/ }),

/***/ "./src/Event.js":
/*!**********************!*\
  !*** ./src/Event.js ***!
  \**********************/
/*! exports provided: Event */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Event", function() { return Event; });
/* harmony import */ var _Log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Log.js */ "./src/Log.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var Event = /*#__PURE__*/function () {
  function Event(name) {
    _classCallCheck(this, Event);

    this._name = name;
    this._callbacks = [];
  }

  _createClass(Event, [{
    key: "addHandler",
    value: function addHandler(cb) {
      this._callbacks.push(cb);
    }
  }, {
    key: "removeHandler",
    value: function removeHandler(cb) {
      var idx = this._callbacks.findIndex(function (item) {
        return item === cb;
      });

      if (idx >= 0) {
        this._callbacks.splice(idx, 1);
      }
    }
  }, {
    key: "raise",
    value: function raise() {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("Event: Raising event: " + this._name);

      for (var i = 0; i < this._callbacks.length; i++) {
        var _this$_callbacks;

        (_this$_callbacks = this._callbacks)[i].apply(_this$_callbacks, arguments);
      }
    }
  }]);

  return Event;
}();

/***/ }),

/***/ "./src/Global.js":
/*!***********************!*\
  !*** ./src/Global.js ***!
  \***********************/
/*! exports provided: Global */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Global", function() { return Global; });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
var timer = {
  setInterval: function (_setInterval) {
    function setInterval(_x, _x2) {
      return _setInterval.apply(this, arguments);
    }

    setInterval.toString = function () {
      return _setInterval.toString();
    };

    return setInterval;
  }(function (cb, duration) {
    return setInterval(cb, duration);
  }),
  clearInterval: function (_clearInterval) {
    function clearInterval(_x3) {
      return _clearInterval.apply(this, arguments);
    }

    clearInterval.toString = function () {
      return _clearInterval.toString();
    };

    return clearInterval;
  }(function (handle) {
    return clearInterval(handle);
  })
};
var testing = false;
var request = null;
var Global = /*#__PURE__*/function () {
  function Global() {
    _classCallCheck(this, Global);
  }

  _createClass(Global, null, [{
    key: "_testing",
    value: function _testing() {
      testing = true;
    }
  }, {
    key: "location",
    get: function get() {
      if (!testing) {
        return location;
      }
    }
  }, {
    key: "localStorage",
    get: function get() {
      if (!testing && typeof window !== 'undefined') {
        return localStorage;
      }
    }
  }, {
    key: "sessionStorage",
    get: function get() {
      if (!testing && typeof window !== 'undefined') {
        return sessionStorage;
      }
    }
  }, {
    key: "setXMLHttpRequest",
    value: function setXMLHttpRequest(newRequest) {
      request = newRequest;
    }
  }, {
    key: "XMLHttpRequest",
    get: function get() {
      if (!testing && typeof window !== 'undefined') {
        return request || XMLHttpRequest;
      }
    }
  }, {
    key: "timer",
    get: function get() {
      if (!testing) {
        return timer;
      }
    }
  }]);

  return Global;
}();

/***/ }),

/***/ "./src/IFrameNavigator.js":
/*!********************************!*\
  !*** ./src/IFrameNavigator.js ***!
  \********************************/
/*! exports provided: IFrameNavigator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IFrameNavigator", function() { return IFrameNavigator; });
/* harmony import */ var _Log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Log.js */ "./src/Log.js");
/* harmony import */ var _IFrameWindow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./IFrameWindow.js */ "./src/IFrameWindow.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.


var IFrameNavigator = /*#__PURE__*/function () {
  function IFrameNavigator() {
    _classCallCheck(this, IFrameNavigator);
  }

  _createClass(IFrameNavigator, [{
    key: "prepare",
    value: function prepare(params) {
      var frame = new _IFrameWindow_js__WEBPACK_IMPORTED_MODULE_1__["IFrameWindow"](params);
      return Promise.resolve(frame);
    }
  }, {
    key: "callback",
    value: function callback(url) {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("IFrameNavigator.callback");

      try {
        _IFrameWindow_js__WEBPACK_IMPORTED_MODULE_1__["IFrameWindow"].notifyParent(url);
        return Promise.resolve();
      } catch (e) {
        return Promise.reject(e);
      }
    }
  }]);

  return IFrameNavigator;
}();

/***/ }),

/***/ "./src/IFrameWindow.js":
/*!*****************************!*\
  !*** ./src/IFrameWindow.js ***!
  \*****************************/
/*! exports provided: IFrameWindow */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IFrameWindow", function() { return IFrameWindow; });
/* harmony import */ var _Log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Log.js */ "./src/Log.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var DefaultTimeout = 10000;
var IFrameWindow = /*#__PURE__*/function () {
  function IFrameWindow(params) {
    var _this = this;

    _classCallCheck(this, IFrameWindow);

    this._promise = new Promise(function (resolve, reject) {
      _this._resolve = resolve;
      _this._reject = reject;
    });
    this._boundMessageEvent = this._message.bind(this);
    window.addEventListener("message", this._boundMessageEvent, false);
    this._frame = window.document.createElement("iframe"); // shotgun approach

    this._frame.style.visibility = "hidden";
    this._frame.style.position = "absolute";
    this._frame.width = 0;
    this._frame.height = 0;
    window.document.body.appendChild(this._frame);
  }

  _createClass(IFrameWindow, [{
    key: "navigate",
    value: function navigate(params) {
      if (!params || !params.url) {
        this._error("No url provided");
      } else {
        var timeout = params.silentRequestTimeout || DefaultTimeout;
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("IFrameWindow.navigate: Using timeout of:", timeout);
        this._timer = window.setTimeout(this._timeout.bind(this), timeout);
        this._frame.src = params.url;
      }

      return this.promise;
    }
  }, {
    key: "promise",
    get: function get() {
      return this._promise;
    }
  }, {
    key: "_success",
    value: function _success(data) {
      this._cleanup();

      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("IFrameWindow: Successful response from frame window");

      this._resolve(data);
    }
  }, {
    key: "_error",
    value: function _error(message) {
      this._cleanup();

      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error(message);

      this._reject(new Error(message));
    }
  }, {
    key: "close",
    value: function close() {
      this._cleanup();
    }
  }, {
    key: "_cleanup",
    value: function _cleanup() {
      if (this._frame) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("IFrameWindow: cleanup");
        window.removeEventListener("message", this._boundMessageEvent, false);
        window.clearTimeout(this._timer);
        window.document.body.removeChild(this._frame);
        this._timer = null;
        this._frame = null;
        this._boundMessageEvent = null;
      }
    }
  }, {
    key: "_timeout",
    value: function _timeout() {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("IFrameWindow.timeout");

      this._error("Frame window timed out");
    }
  }, {
    key: "_message",
    value: function _message(e) {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("IFrameWindow.message");

      if (this._timer && e.origin === this._origin && e.source === this._frame.contentWindow && typeof e.data === 'string' && (e.data.startsWith('http://') || e.data.startsWith('https://'))) {
        var url = e.data;

        if (url) {
          this._success({
            url: url
          });
        } else {
          this._error("Invalid response from frame");
        }
      }
    }
  }, {
    key: "_origin",
    get: function get() {
      return location.protocol + "//" + location.host;
    }
  }], [{
    key: "notifyParent",
    value: function notifyParent(url) {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("IFrameWindow.notifyParent");
      url = url || window.location.href;

      if (url) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("IFrameWindow.notifyParent: posting url message to parent");
        window.parent.postMessage(url, location.protocol + "//" + location.host);
      }
    }
  }]);

  return IFrameWindow;
}();

/***/ }),

/***/ "./src/InMemoryWebStorage.js":
/*!***********************************!*\
  !*** ./src/InMemoryWebStorage.js ***!
  \***********************************/
/*! exports provided: InMemoryWebStorage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InMemoryWebStorage", function() { return InMemoryWebStorage; });
/* harmony import */ var _Log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Log.js */ "./src/Log.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var InMemoryWebStorage = /*#__PURE__*/function () {
  function InMemoryWebStorage() {
    _classCallCheck(this, InMemoryWebStorage);

    this._data = {};
  }

  _createClass(InMemoryWebStorage, [{
    key: "getItem",
    value: function getItem(key) {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("InMemoryWebStorage.getItem", key);
      return this._data[key];
    }
  }, {
    key: "setItem",
    value: function setItem(key, value) {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("InMemoryWebStorage.setItem", key);
      this._data[key] = value;
    }
  }, {
    key: "removeItem",
    value: function removeItem(key) {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("InMemoryWebStorage.removeItem", key);
      delete this._data[key];
    }
  }, {
    key: "length",
    get: function get() {
      return Object.getOwnPropertyNames(this._data).length;
    }
  }, {
    key: "key",
    value: function key(index) {
      return Object.getOwnPropertyNames(this._data)[index];
    }
  }]);

  return InMemoryWebStorage;
}();

/***/ }),

/***/ "./src/JoseUtil.js":
/*!*************************!*\
  !*** ./src/JoseUtil.js ***!
  \*************************/
/*! exports provided: JoseUtil */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JoseUtil", function() { return JoseUtil; });
/* harmony import */ var _crypto_jsrsasign__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./crypto/jsrsasign */ "./src/crypto/jsrsasign.js");
/* harmony import */ var _JoseUtilImpl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./JoseUtilImpl */ "./src/JoseUtilImpl.js");


var JoseUtil = Object(_JoseUtilImpl__WEBPACK_IMPORTED_MODULE_1__["default"])({
  jws: _crypto_jsrsasign__WEBPACK_IMPORTED_MODULE_0__["jws"],
  KeyUtil: _crypto_jsrsasign__WEBPACK_IMPORTED_MODULE_0__["KeyUtil"],
  X509: _crypto_jsrsasign__WEBPACK_IMPORTED_MODULE_0__["X509"],
  crypto: _crypto_jsrsasign__WEBPACK_IMPORTED_MODULE_0__["crypto"],
  hextob64u: _crypto_jsrsasign__WEBPACK_IMPORTED_MODULE_0__["hextob64u"],
  b64tohex: _crypto_jsrsasign__WEBPACK_IMPORTED_MODULE_0__["b64tohex"],
  AllowedSigningAlgs: _crypto_jsrsasign__WEBPACK_IMPORTED_MODULE_0__["AllowedSigningAlgs"]
});

/***/ }),

/***/ "./src/JoseUtilImpl.js":
/*!*****************************!*\
  !*** ./src/JoseUtilImpl.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getJoseUtil; });
/* harmony import */ var _Log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Log.js */ "./src/Log.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

function getJoseUtil(_ref) {
  var jws = _ref.jws,
      KeyUtil = _ref.KeyUtil,
      X509 = _ref.X509,
      crypto = _ref.crypto,
      hextob64u = _ref.hextob64u,
      b64tohex = _ref.b64tohex,
      AllowedSigningAlgs = _ref.AllowedSigningAlgs;
  return /*#__PURE__*/function () {
    function JoseUtil() {
      _classCallCheck(this, JoseUtil);
    }

    _createClass(JoseUtil, null, [{
      key: "parseJwt",
      value: function parseJwt(jwt) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("JoseUtil.parseJwt");

        try {
          var token = jws.JWS.parse(jwt);
          return {
            header: token.headerObj,
            payload: token.payloadObj
          };
        } catch (e) {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error(e);
        }
      }
    }, {
      key: "validateJwt",
      value: function validateJwt(jwt, key, issuer, audience, clockSkew, now, timeInsensitive) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("JoseUtil.validateJwt");

        try {
          if (key.kty === "RSA") {
            if (key.e && key.n) {
              key = KeyUtil.getKey(key);
            } else if (key.x5c && key.x5c.length) {
              var hex = b64tohex(key.x5c[0]);
              key = X509.getPublicKeyFromCertHex(hex);
            } else {
              _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("JoseUtil.validateJwt: RSA key missing key material", key);
              return Promise.reject(new Error("RSA key missing key material"));
            }
          } else if (key.kty === "EC") {
            if (key.crv && key.x && key.y) {
              key = KeyUtil.getKey(key);
            } else {
              _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("JoseUtil.validateJwt: EC key missing key material", key);
              return Promise.reject(new Error("EC key missing key material"));
            }
          } else {
            _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("JoseUtil.validateJwt: Unsupported key type", key && key.kty);
            return Promise.reject(new Error( true && key.kty));
          }

          return JoseUtil._validateJwt(jwt, key, issuer, audience, clockSkew, now, timeInsensitive);
        } catch (e) {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error(e && e.message || e);
          return Promise.reject("JWT validation failed");
        }
      }
    }, {
      key: "validateJwtAttributes",
      value: function validateJwtAttributes(jwt, issuer, audience, clockSkew, now, timeInsensitive) {
        if (!clockSkew) {
          clockSkew = 0;
        }

        if (!now) {
          now = parseInt(Date.now() / 1000);
        }

        var payload = JoseUtil.parseJwt(jwt).payload;

        if (!payload.iss) {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("JoseUtil._validateJwt: issuer was not provided");
          return Promise.reject(new Error("issuer was not provided"));
        }

        if (payload.iss !== issuer) {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("JoseUtil._validateJwt: Invalid issuer in token", payload.iss);
          return Promise.reject(new Error("Invalid issuer in token: " + payload.iss));
        }

        if (!payload.aud) {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("JoseUtil._validateJwt: aud was not provided");
          return Promise.reject(new Error("aud was not provided"));
        }

        var validAudience = payload.aud === audience || Array.isArray(payload.aud) && payload.aud.indexOf(audience) >= 0;

        if (!validAudience) {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("JoseUtil._validateJwt: Invalid audience in token", payload.aud);
          return Promise.reject(new Error("Invalid audience in token: " + payload.aud));
        }

        if (payload.azp && payload.azp !== audience) {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("JoseUtil._validateJwt: Invalid azp in token", payload.azp);
          return Promise.reject(new Error("Invalid azp in token: " + payload.azp));
        }

        if (!timeInsensitive) {
          var lowerNow = now + clockSkew;
          var upperNow = now - clockSkew;

          if (!payload.iat) {
            _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("JoseUtil._validateJwt: iat was not provided");
            return Promise.reject(new Error("iat was not provided"));
          }

          if (lowerNow < payload.iat) {
            _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("JoseUtil._validateJwt: iat is in the future", payload.iat);
            return Promise.reject(new Error("iat is in the future: " + payload.iat));
          }

          if (payload.nbf && lowerNow < payload.nbf) {
            _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("JoseUtil._validateJwt: nbf is in the future", payload.nbf);
            return Promise.reject(new Error("nbf is in the future: " + payload.nbf));
          }

          if (!payload.exp) {
            _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("JoseUtil._validateJwt: exp was not provided");
            return Promise.reject(new Error("exp was not provided"));
          }

          if (payload.exp < upperNow) {
            _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("JoseUtil._validateJwt: exp is in the past", payload.exp);
            return Promise.reject(new Error("exp is in the past:" + payload.exp));
          }
        }

        return Promise.resolve(payload);
      }
    }, {
      key: "_validateJwt",
      value: function _validateJwt(jwt, key, issuer, audience, clockSkew, now, timeInsensitive) {
        return JoseUtil.validateJwtAttributes(jwt, issuer, audience, clockSkew, now, timeInsensitive).then(function (payload) {
          try {
            if (!jws.JWS.verify(jwt, key, AllowedSigningAlgs)) {
              _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("JoseUtil._validateJwt: signature validation failed");
              return Promise.reject(new Error("signature validation failed"));
            }

            return payload;
          } catch (e) {
            _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error(e && e.message || e);
            return Promise.reject(new Error("signature validation failed"));
          }
        });
      }
    }, {
      key: "hashString",
      value: function hashString(value, alg) {
        try {
          return crypto.Util.hashString(value, alg);
        } catch (e) {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error(e);
        }
      }
    }, {
      key: "hexToBase64Url",
      value: function hexToBase64Url(value) {
        try {
          return hextob64u(value);
        } catch (e) {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error(e);
        }
      }
    }]);

    return JoseUtil;
  }();
}

/***/ }),

/***/ "./src/JsonService.js":
/*!****************************!*\
  !*** ./src/JsonService.js ***!
  \****************************/
/*! exports provided: JsonService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JsonService", function() { return JsonService; });
/* harmony import */ var _Log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Log.js */ "./src/Log.js");
/* harmony import */ var _Global_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Global.js */ "./src/Global.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.


var JsonService = /*#__PURE__*/function () {
  function JsonService() {
    var additionalContentTypes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var XMLHttpRequestCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _Global_js__WEBPACK_IMPORTED_MODULE_1__["Global"].XMLHttpRequest;
    var jwtHandler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    _classCallCheck(this, JsonService);

    if (additionalContentTypes && Array.isArray(additionalContentTypes)) {
      this._contentTypes = additionalContentTypes.slice();
    } else {
      this._contentTypes = [];
    }

    this._contentTypes.push('application/json');

    if (jwtHandler) {
      this._contentTypes.push('application/jwt');
    }

    this._XMLHttpRequest = XMLHttpRequestCtor;
    this._jwtHandler = jwtHandler;
  }

  _createClass(JsonService, [{
    key: "getJson",
    value: function getJson(url, token) {
      var _this = this;

      if (!url) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("JsonService.getJson: No url passed");
        throw new Error("url");
      }

      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("JsonService.getJson, url: ", url);
      return new Promise(function (resolve, reject) {
        var req = new _this._XMLHttpRequest();
        req.open('GET', url);
        var allowedContentTypes = _this._contentTypes;
        var jwtHandler = _this._jwtHandler;

        req.onload = function () {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("JsonService.getJson: HTTP response received, status", req.status);

          if (req.status === 200) {
            var contentType = req.getResponseHeader("Content-Type");

            if (contentType) {
              var found = allowedContentTypes.find(function (item) {
                if (contentType.startsWith(item)) {
                  return true;
                }
              });

              if (found == "application/jwt") {
                jwtHandler(req).then(resolve, reject);
                return;
              }

              if (found) {
                try {
                  resolve(JSON.parse(req.responseText));
                  return;
                } catch (e) {
                  _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("JsonService.getJson: Error parsing JSON response", e.message);
                  reject(e);
                  return;
                }
              }
            }

            reject(Error("Invalid response Content-Type: " + contentType + ", from URL: " + url));
          } else {
            reject(Error(req.statusText + " (" + req.status + ")"));
          }
        };

        req.onerror = function () {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("JsonService.getJson: network error");
          reject(Error("Network Error"));
        };

        if (token) {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("JsonService.getJson: token passed, setting Authorization header");
          req.setRequestHeader("Authorization", "Bearer " + token);
        }

        req.send();
      });
    }
  }, {
    key: "postForm",
    value: function postForm(url, payload, basicAuth) {
      var _this2 = this;

      if (!url) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("JsonService.postForm: No url passed");
        throw new Error("url");
      }

      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("JsonService.postForm, url: ", url);
      return new Promise(function (resolve, reject) {
        var req = new _this2._XMLHttpRequest();
        req.open('POST', url);
        var allowedContentTypes = _this2._contentTypes;

        req.onload = function () {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("JsonService.postForm: HTTP response received, status", req.status);

          if (req.status === 200) {
            var contentType = req.getResponseHeader("Content-Type");

            if (contentType) {
              var found = allowedContentTypes.find(function (item) {
                if (contentType.startsWith(item)) {
                  return true;
                }
              });

              if (found) {
                try {
                  resolve(JSON.parse(req.responseText));
                  return;
                } catch (e) {
                  _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("JsonService.postForm: Error parsing JSON response", e.message);
                  reject(e);
                  return;
                }
              }
            }

            reject(Error("Invalid response Content-Type: " + contentType + ", from URL: " + url));
            return;
          }

          if (req.status === 400) {
            var contentType = req.getResponseHeader("Content-Type");

            if (contentType) {
              var found = allowedContentTypes.find(function (item) {
                if (contentType.startsWith(item)) {
                  return true;
                }
              });

              if (found) {
                try {
                  var payload = JSON.parse(req.responseText);

                  if (payload && payload.error) {
                    _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("JsonService.postForm: Error from server: ", payload.error);
                    reject(new Error(payload.error));
                    return;
                  }
                } catch (e) {
                  _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("JsonService.postForm: Error parsing JSON response", e.message);
                  reject(e);
                  return;
                }
              }
            }
          }

          reject(Error(req.statusText + " (" + req.status + ")"));
        };

        req.onerror = function () {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("JsonService.postForm: network error");
          reject(Error("Network Error"));
        };

        var body = "";

        for (var key in payload) {
          var value = payload[key];

          if (value) {
            if (body.length > 0) {
              body += "&";
            }

            body += encodeURIComponent(key);
            body += "=";
            body += encodeURIComponent(value);
          }
        }

        req.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");

        if (basicAuth !== undefined) {
          req.setRequestHeader("Authorization", "Basic " + btoa(basicAuth));
        }

        req.send(body);
      });
    }
  }]);

  return JsonService;
}();

/***/ }),

/***/ "./src/Log.js":
/*!********************!*\
  !*** ./src/Log.js ***!
  \********************/
/*! exports provided: Log */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Log", function() { return Log; });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
var nopLogger = {
  debug: function debug() {},
  info: function info() {},
  warn: function warn() {},
  error: function error() {}
};
var NONE = 0;
var ERROR = 1;
var WARN = 2;
var INFO = 3;
var DEBUG = 4;
var logger;
var level;
var Log = /*#__PURE__*/function () {
  function Log() {
    _classCallCheck(this, Log);
  }

  _createClass(Log, null, [{
    key: "NONE",
    get: function get() {
      return NONE;
    }
  }, {
    key: "ERROR",
    get: function get() {
      return ERROR;
    }
  }, {
    key: "WARN",
    get: function get() {
      return WARN;
    }
  }, {
    key: "INFO",
    get: function get() {
      return INFO;
    }
  }, {
    key: "DEBUG",
    get: function get() {
      return DEBUG;
    }
  }, {
    key: "reset",
    value: function reset() {
      level = INFO;
      logger = nopLogger;
    }
  }, {
    key: "level",
    get: function get() {
      return level;
    },
    set: function set(value) {
      if (NONE <= value && value <= DEBUG) {
        level = value;
      } else {
        throw new Error("Invalid log level");
      }
    }
  }, {
    key: "logger",
    get: function get() {
      return logger;
    },
    set: function set(value) {
      if (!value.debug && value.info) {
        // just to stay backwards compat. can remove in 2.0
        value.debug = value.info;
      }

      if (value.debug && value.info && value.warn && value.error) {
        logger = value;
      } else {
        throw new Error("Invalid logger");
      }
    }
  }, {
    key: "debug",
    value: function debug() {
      if (level >= DEBUG) {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        logger.debug.apply(logger, Array.from(args));
      }
    }
  }, {
    key: "info",
    value: function info() {
      if (level >= INFO) {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        logger.info.apply(logger, Array.from(args));
      }
    }
  }, {
    key: "warn",
    value: function warn() {
      if (level >= WARN) {
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        logger.warn.apply(logger, Array.from(args));
      }
    }
  }, {
    key: "error",
    value: function error() {
      if (level >= ERROR) {
        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }

        logger.error.apply(logger, Array.from(args));
      }
    }
  }]);

  return Log;
}();
Log.reset();

/***/ }),

/***/ "./src/MetadataService.js":
/*!********************************!*\
  !*** ./src/MetadataService.js ***!
  \********************************/
/*! exports provided: MetadataService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MetadataService", function() { return MetadataService; });
/* harmony import */ var _Log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Log.js */ "./src/Log.js");
/* harmony import */ var _JsonService_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./JsonService.js */ "./src/JsonService.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.


var OidcMetadataUrlPath = '.well-known/openid-configuration';
var MetadataService = /*#__PURE__*/function () {
  function MetadataService(settings) {
    var JsonServiceCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _JsonService_js__WEBPACK_IMPORTED_MODULE_1__["JsonService"];

    _classCallCheck(this, MetadataService);

    if (!settings) {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("MetadataService: No settings passed to MetadataService");
      throw new Error("settings");
    }

    this._settings = settings;
    this._jsonService = new JsonServiceCtor(['application/jwk-set+json']);
  }

  _createClass(MetadataService, [{
    key: "metadataUrl",
    get: function get() {
      if (!this._metadataUrl) {
        if (this._settings.metadataUrl) {
          this._metadataUrl = this._settings.metadataUrl;
        } else {
          this._metadataUrl = this._settings.authority;

          if (this._metadataUrl && this._metadataUrl.indexOf(OidcMetadataUrlPath) < 0) {
            if (this._metadataUrl[this._metadataUrl.length - 1] !== '/') {
              this._metadataUrl += '/';
            }

            this._metadataUrl += OidcMetadataUrlPath;
          }
        }
      }

      return this._metadataUrl;
    }
  }, {
    key: "resetSigningKeys",
    value: function resetSigningKeys() {
      this._settings = this._settings || {};
      this._settings.signingKeys = undefined;
    }
  }, {
    key: "getMetadata",
    value: function getMetadata() {
      var _this = this;

      if (this._settings.metadata) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("MetadataService.getMetadata: Returning metadata from settings");
        return Promise.resolve(this._settings.metadata);
      }

      if (!this.metadataUrl) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("MetadataService.getMetadata: No authority or metadataUrl configured on settings");
        return Promise.reject(new Error("No authority or metadataUrl configured on settings"));
      }

      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("MetadataService.getMetadata: getting metadata from", this.metadataUrl);
      return this._jsonService.getJson(this.metadataUrl).then(function (metadata) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("MetadataService.getMetadata: json received");
        var seed = _this._settings.metadataSeed || {};
        _this._settings.metadata = Object.assign({}, seed, metadata);
        return _this._settings.metadata;
      });
    }
  }, {
    key: "getIssuer",
    value: function getIssuer() {
      return this._getMetadataProperty("issuer");
    }
  }, {
    key: "getAuthorizationEndpoint",
    value: function getAuthorizationEndpoint() {
      return this._getMetadataProperty("authorization_endpoint");
    }
  }, {
    key: "getUserInfoEndpoint",
    value: function getUserInfoEndpoint() {
      return this._getMetadataProperty("userinfo_endpoint");
    }
  }, {
    key: "getTokenEndpoint",
    value: function getTokenEndpoint() {
      var optional = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      return this._getMetadataProperty("token_endpoint", optional);
    }
  }, {
    key: "getCheckSessionIframe",
    value: function getCheckSessionIframe() {
      return this._getMetadataProperty("check_session_iframe", true);
    }
  }, {
    key: "getEndSessionEndpoint",
    value: function getEndSessionEndpoint() {
      return this._getMetadataProperty("end_session_endpoint", true);
    }
  }, {
    key: "getRevocationEndpoint",
    value: function getRevocationEndpoint() {
      return this._getMetadataProperty("revocation_endpoint", true);
    }
  }, {
    key: "getKeysEndpoint",
    value: function getKeysEndpoint() {
      return this._getMetadataProperty("jwks_uri", true);
    }
  }, {
    key: "_getMetadataProperty",
    value: function _getMetadataProperty(name) {
      var optional = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("MetadataService.getMetadataProperty for: " + name);
      return this.getMetadata().then(function (metadata) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("MetadataService.getMetadataProperty: metadata recieved");

        if (metadata[name] === undefined) {
          if (optional === true) {
            _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].warn("MetadataService.getMetadataProperty: Metadata does not contain optional property " + name);
            return undefined;
          } else {
            _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("MetadataService.getMetadataProperty: Metadata does not contain property " + name);
            throw new Error("Metadata does not contain property " + name);
          }
        }

        return metadata[name];
      });
    }
  }, {
    key: "getSigningKeys",
    value: function getSigningKeys() {
      var _this2 = this;

      if (this._settings.signingKeys) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("MetadataService.getSigningKeys: Returning signingKeys from settings");
        return Promise.resolve(this._settings.signingKeys);
      }

      return this._getMetadataProperty("jwks_uri").then(function (jwks_uri) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("MetadataService.getSigningKeys: jwks_uri received", jwks_uri);
        return _this2._jsonService.getJson(jwks_uri).then(function (keySet) {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("MetadataService.getSigningKeys: key set received", keySet);

          if (!keySet.keys) {
            _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("MetadataService.getSigningKeys: Missing keys on keyset");
            throw new Error("Missing keys on keyset");
          }

          _this2._settings.signingKeys = keySet.keys;
          return _this2._settings.signingKeys;
        });
      });
    }
  }]);

  return MetadataService;
}();

/***/ }),

/***/ "./src/OidcClient.js":
/*!***************************!*\
  !*** ./src/OidcClient.js ***!
  \***************************/
/*! exports provided: OidcClient */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OidcClient", function() { return OidcClient; });
/* harmony import */ var _Log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Log.js */ "./src/Log.js");
/* harmony import */ var _OidcClientSettings_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./OidcClientSettings.js */ "./src/OidcClientSettings.js");
/* harmony import */ var _ErrorResponse_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ErrorResponse.js */ "./src/ErrorResponse.js");
/* harmony import */ var _SigninRequest_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./SigninRequest.js */ "./src/SigninRequest.js");
/* harmony import */ var _SigninResponse_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./SigninResponse.js */ "./src/SigninResponse.js");
/* harmony import */ var _SignoutRequest_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./SignoutRequest.js */ "./src/SignoutRequest.js");
/* harmony import */ var _SignoutResponse_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./SignoutResponse.js */ "./src/SignoutResponse.js");
/* harmony import */ var _SigninState_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./SigninState.js */ "./src/SigninState.js");
/* harmony import */ var _State_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./State.js */ "./src/State.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.









var OidcClient = /*#__PURE__*/function () {
  function OidcClient() {
    var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, OidcClient);

    if (settings instanceof _OidcClientSettings_js__WEBPACK_IMPORTED_MODULE_1__["OidcClientSettings"]) {
      this._settings = settings;
    } else {
      this._settings = new _OidcClientSettings_js__WEBPACK_IMPORTED_MODULE_1__["OidcClientSettings"](settings);
    }
  }

  _createClass(OidcClient, [{
    key: "_stateStore",
    get: function get() {
      return this.settings.stateStore;
    }
  }, {
    key: "_validator",
    get: function get() {
      return this.settings.validator;
    }
  }, {
    key: "_metadataService",
    get: function get() {
      return this.settings.metadataService;
    }
  }, {
    key: "settings",
    get: function get() {
      return this._settings;
    }
  }, {
    key: "metadataService",
    get: function get() {
      return this._metadataService;
    }
  }, {
    key: "createSigninRequest",
    value: function createSigninRequest() {
      var _this = this;

      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          response_type = _ref.response_type,
          scope = _ref.scope,
          redirect_uri = _ref.redirect_uri,
          data = _ref.data,
          state = _ref.state,
          prompt = _ref.prompt,
          display = _ref.display,
          max_age = _ref.max_age,
          ui_locales = _ref.ui_locales,
          id_token_hint = _ref.id_token_hint,
          login_hint = _ref.login_hint,
          acr_values = _ref.acr_values,
          resource = _ref.resource,
          request = _ref.request,
          request_uri = _ref.request_uri,
          response_mode = _ref.response_mode,
          extraQueryParams = _ref.extraQueryParams,
          extraTokenParams = _ref.extraTokenParams,
          request_type = _ref.request_type,
          skipUserInfo = _ref.skipUserInfo;

      var stateStore = arguments.length > 1 ? arguments[1] : undefined;
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("OidcClient.createSigninRequest");
      var client_id = this._settings.client_id;
      response_type = response_type || this._settings.response_type;
      scope = scope || this._settings.scope;
      redirect_uri = redirect_uri || this._settings.redirect_uri; // id_token_hint, login_hint aren't allowed on _settings

      prompt = prompt || this._settings.prompt;
      display = display || this._settings.display;
      max_age = max_age || this._settings.max_age;
      ui_locales = ui_locales || this._settings.ui_locales;
      acr_values = acr_values || this._settings.acr_values;
      resource = resource || this._settings.resource;
      response_mode = response_mode || this._settings.response_mode;
      extraQueryParams = extraQueryParams || this._settings.extraQueryParams;
      extraTokenParams = extraTokenParams || this._settings.extraTokenParams;
      var authority = this._settings.authority;

      if (_SigninRequest_js__WEBPACK_IMPORTED_MODULE_3__["SigninRequest"].isCode(response_type) && response_type !== "code") {
        return Promise.reject(new Error("OpenID Connect hybrid flow is not supported"));
      }

      return this._metadataService.getAuthorizationEndpoint().then(function (url) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("OidcClient.createSigninRequest: Received authorization endpoint", url);
        var signinRequest = new _SigninRequest_js__WEBPACK_IMPORTED_MODULE_3__["SigninRequest"]({
          url: url,
          client_id: client_id,
          redirect_uri: redirect_uri,
          response_type: response_type,
          scope: scope,
          data: data || state,
          authority: authority,
          prompt: prompt,
          display: display,
          max_age: max_age,
          ui_locales: ui_locales,
          id_token_hint: id_token_hint,
          login_hint: login_hint,
          acr_values: acr_values,
          resource: resource,
          request: request,
          request_uri: request_uri,
          extraQueryParams: extraQueryParams,
          extraTokenParams: extraTokenParams,
          request_type: request_type,
          response_mode: response_mode,
          client_secret: _this._settings.client_secret,
          skipUserInfo: skipUserInfo
        });
        var signinState = signinRequest.state;
        stateStore = stateStore || _this._stateStore;
        return stateStore.set(signinState.id, signinState.toStorageString()).then(function () {
          return signinRequest;
        });
      });
    }
  }, {
    key: "readSigninResponseState",
    value: function readSigninResponseState(url, stateStore) {
      var removeState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("OidcClient.readSigninResponseState");
      var useQuery = this._settings.response_mode === "query" || !this._settings.response_mode && _SigninRequest_js__WEBPACK_IMPORTED_MODULE_3__["SigninRequest"].isCode(this._settings.response_type);
      var delimiter = useQuery ? "?" : "#";
      var response = new _SigninResponse_js__WEBPACK_IMPORTED_MODULE_4__["SigninResponse"](url, delimiter);

      if (!response.state) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("OidcClient.readSigninResponseState: No state in response");
        return Promise.reject(new Error("No state in response"));
      }

      stateStore = stateStore || this._stateStore;
      var stateApi = removeState ? stateStore.remove.bind(stateStore) : stateStore.get.bind(stateStore);
      return stateApi(response.state).then(function (storedStateString) {
        if (!storedStateString) {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("OidcClient.readSigninResponseState: No matching state found in storage");
          throw new Error("No matching state found in storage");
        }

        var state = _SigninState_js__WEBPACK_IMPORTED_MODULE_7__["SigninState"].fromStorageString(storedStateString);
        return {
          state: state,
          response: response
        };
      });
    }
  }, {
    key: "processSigninResponse",
    value: function processSigninResponse(url, stateStore) {
      var _this2 = this;

      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("OidcClient.processSigninResponse");
      return this.readSigninResponseState(url, stateStore, true).then(function (_ref2) {
        var state = _ref2.state,
            response = _ref2.response;
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("OidcClient.processSigninResponse: Received state from storage; validating response");
        return _this2._validator.validateSigninResponse(state, response);
      });
    }
  }, {
    key: "createSignoutRequest",
    value: function createSignoutRequest() {
      var _this3 = this;

      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          id_token_hint = _ref3.id_token_hint,
          data = _ref3.data,
          state = _ref3.state,
          post_logout_redirect_uri = _ref3.post_logout_redirect_uri,
          extraQueryParams = _ref3.extraQueryParams,
          request_type = _ref3.request_type;

      var stateStore = arguments.length > 1 ? arguments[1] : undefined;
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("OidcClient.createSignoutRequest");
      post_logout_redirect_uri = post_logout_redirect_uri || this._settings.post_logout_redirect_uri;
      extraQueryParams = extraQueryParams || this._settings.extraQueryParams;
      return this._metadataService.getEndSessionEndpoint().then(function (url) {
        if (!url) {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("OidcClient.createSignoutRequest: No end session endpoint url returned");
          throw new Error("no end session endpoint");
        }

        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("OidcClient.createSignoutRequest: Received end session endpoint", url);
        var request = new _SignoutRequest_js__WEBPACK_IMPORTED_MODULE_5__["SignoutRequest"]({
          url: url,
          id_token_hint: id_token_hint,
          post_logout_redirect_uri: post_logout_redirect_uri,
          data: data || state,
          extraQueryParams: extraQueryParams,
          request_type: request_type
        });
        var signoutState = request.state;

        if (signoutState) {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("OidcClient.createSignoutRequest: Signout request has state to persist");
          stateStore = stateStore || _this3._stateStore;
          stateStore.set(signoutState.id, signoutState.toStorageString());
        }

        return request;
      });
    }
  }, {
    key: "readSignoutResponseState",
    value: function readSignoutResponseState(url, stateStore) {
      var removeState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("OidcClient.readSignoutResponseState");
      var response = new _SignoutResponse_js__WEBPACK_IMPORTED_MODULE_6__["SignoutResponse"](url);

      if (!response.state) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("OidcClient.readSignoutResponseState: No state in response");

        if (response.error) {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].warn("OidcClient.readSignoutResponseState: Response was error: ", response.error);
          return Promise.reject(new _ErrorResponse_js__WEBPACK_IMPORTED_MODULE_2__["ErrorResponse"](response));
        }

        return Promise.resolve({
          state: undefined,
          response: response
        });
      }

      var stateKey = response.state;
      stateStore = stateStore || this._stateStore;
      var stateApi = removeState ? stateStore.remove.bind(stateStore) : stateStore.get.bind(stateStore);
      return stateApi(stateKey).then(function (storedStateString) {
        if (!storedStateString) {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("OidcClient.readSignoutResponseState: No matching state found in storage");
          throw new Error("No matching state found in storage");
        }

        var state = _State_js__WEBPACK_IMPORTED_MODULE_8__["State"].fromStorageString(storedStateString);
        return {
          state: state,
          response: response
        };
      });
    }
  }, {
    key: "processSignoutResponse",
    value: function processSignoutResponse(url, stateStore) {
      var _this4 = this;

      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("OidcClient.processSignoutResponse");
      return this.readSignoutResponseState(url, stateStore, true).then(function (_ref4) {
        var state = _ref4.state,
            response = _ref4.response;

        if (state) {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("OidcClient.processSignoutResponse: Received state from storage; validating response");
          return _this4._validator.validateSignoutResponse(state, response);
        } else {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("OidcClient.processSignoutResponse: No state from storage; skipping validating response");
          return response;
        }
      });
    }
  }, {
    key: "clearStaleState",
    value: function clearStaleState(stateStore) {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("OidcClient.clearStaleState");
      stateStore = stateStore || this._stateStore;
      return _State_js__WEBPACK_IMPORTED_MODULE_8__["State"].clearStaleState(stateStore, this.settings.staleStateAge);
    }
  }]);

  return OidcClient;
}();

/***/ }),

/***/ "./src/OidcClientSettings.js":
/*!***********************************!*\
  !*** ./src/OidcClientSettings.js ***!
  \***********************************/
/*! exports provided: OidcClientSettings */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OidcClientSettings", function() { return OidcClientSettings; });
/* harmony import */ var _Log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Log.js */ "./src/Log.js");
/* harmony import */ var _ClockService_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ClockService.js */ "./src/ClockService.js");
/* harmony import */ var _WebStorageStateStore_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./WebStorageStateStore.js */ "./src/WebStorageStateStore.js");
/* harmony import */ var _ResponseValidator_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ResponseValidator.js */ "./src/ResponseValidator.js");
/* harmony import */ var _MetadataService_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./MetadataService.js */ "./src/MetadataService.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.





var OidcMetadataUrlPath = '.well-known/openid-configuration';
var DefaultResponseType = "id_token";
var DefaultScope = "openid";
var DefaultClientAuthentication = "client_secret_post"; // The default value must be client_secret_basic, as explained in https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication

var DefaultStaleStateAge = 60 * 15; // seconds

var DefaultClockSkewInSeconds = 60 * 5;
var OidcClientSettings = /*#__PURE__*/function () {
  function OidcClientSettings() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        authority = _ref.authority,
        metadataUrl = _ref.metadataUrl,
        metadata = _ref.metadata,
        signingKeys = _ref.signingKeys,
        metadataSeed = _ref.metadataSeed,
        client_id = _ref.client_id,
        client_secret = _ref.client_secret,
        _ref$response_type = _ref.response_type,
        response_type = _ref$response_type === void 0 ? DefaultResponseType : _ref$response_type,
        _ref$scope = _ref.scope,
        scope = _ref$scope === void 0 ? DefaultScope : _ref$scope,
        redirect_uri = _ref.redirect_uri,
        post_logout_redirect_uri = _ref.post_logout_redirect_uri,
        _ref$client_authentic = _ref.client_authentication,
        client_authentication = _ref$client_authentic === void 0 ? DefaultClientAuthentication : _ref$client_authentic,
        prompt = _ref.prompt,
        display = _ref.display,
        max_age = _ref.max_age,
        ui_locales = _ref.ui_locales,
        acr_values = _ref.acr_values,
        resource = _ref.resource,
        response_mode = _ref.response_mode,
        _ref$filterProtocolCl = _ref.filterProtocolClaims,
        filterProtocolClaims = _ref$filterProtocolCl === void 0 ? true : _ref$filterProtocolCl,
        _ref$loadUserInfo = _ref.loadUserInfo,
        loadUserInfo = _ref$loadUserInfo === void 0 ? true : _ref$loadUserInfo,
        _ref$staleStateAge = _ref.staleStateAge,
        staleStateAge = _ref$staleStateAge === void 0 ? DefaultStaleStateAge : _ref$staleStateAge,
        _ref$clockSkew = _ref.clockSkew,
        clockSkew = _ref$clockSkew === void 0 ? DefaultClockSkewInSeconds : _ref$clockSkew,
        _ref$clockService = _ref.clockService,
        clockService = _ref$clockService === void 0 ? new _ClockService_js__WEBPACK_IMPORTED_MODULE_1__["ClockService"]() : _ref$clockService,
        _ref$userInfoJwtIssue = _ref.userInfoJwtIssuer,
        userInfoJwtIssuer = _ref$userInfoJwtIssue === void 0 ? 'OP' : _ref$userInfoJwtIssue,
        _ref$mergeClaims = _ref.mergeClaims,
        mergeClaims = _ref$mergeClaims === void 0 ? false : _ref$mergeClaims,
        _ref$stateStore = _ref.stateStore,
        stateStore = _ref$stateStore === void 0 ? new _WebStorageStateStore_js__WEBPACK_IMPORTED_MODULE_2__["WebStorageStateStore"]() : _ref$stateStore,
        _ref$ResponseValidato = _ref.ResponseValidatorCtor,
        ResponseValidatorCtor = _ref$ResponseValidato === void 0 ? _ResponseValidator_js__WEBPACK_IMPORTED_MODULE_3__["ResponseValidator"] : _ref$ResponseValidato,
        _ref$MetadataServiceC = _ref.MetadataServiceCtor,
        MetadataServiceCtor = _ref$MetadataServiceC === void 0 ? _MetadataService_js__WEBPACK_IMPORTED_MODULE_4__["MetadataService"] : _ref$MetadataServiceC,
        _ref$extraQueryParams = _ref.extraQueryParams,
        extraQueryParams = _ref$extraQueryParams === void 0 ? {} : _ref$extraQueryParams,
        _ref$extraTokenParams = _ref.extraTokenParams,
        extraTokenParams = _ref$extraTokenParams === void 0 ? {} : _ref$extraTokenParams;

    _classCallCheck(this, OidcClientSettings);

    this._authority = authority;
    this._metadataUrl = metadataUrl;
    this._metadata = metadata;
    this._metadataSeed = metadataSeed;
    this._signingKeys = signingKeys;
    this._client_id = client_id;
    this._client_secret = client_secret;
    this._response_type = response_type;
    this._scope = scope;
    this._redirect_uri = redirect_uri;
    this._post_logout_redirect_uri = post_logout_redirect_uri;
    this._client_authentication = client_authentication;
    this._prompt = prompt;
    this._display = display;
    this._max_age = max_age;
    this._ui_locales = ui_locales;
    this._acr_values = acr_values;
    this._resource = resource;
    this._response_mode = response_mode;
    this._filterProtocolClaims = !!filterProtocolClaims;
    this._loadUserInfo = !!loadUserInfo;
    this._staleStateAge = staleStateAge;
    this._clockSkew = clockSkew;
    this._clockService = clockService;
    this._userInfoJwtIssuer = userInfoJwtIssuer;
    this._mergeClaims = !!mergeClaims;
    this._stateStore = stateStore;
    this._validator = new ResponseValidatorCtor(this);
    this._metadataService = new MetadataServiceCtor(this);
    this._extraQueryParams = _typeof(extraQueryParams) === 'object' ? extraQueryParams : {};
    this._extraTokenParams = _typeof(extraTokenParams) === 'object' ? extraTokenParams : {};
  } // client config


  _createClass(OidcClientSettings, [{
    key: "client_id",
    get: function get() {
      return this._client_id;
    },
    set: function set(value) {
      if (!this._client_id) {
        // one-time set only
        this._client_id = value;
      } else {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("OidcClientSettings.set_client_id: client_id has already been assigned.");
        throw new Error("client_id has already been assigned.");
      }
    }
  }, {
    key: "client_secret",
    get: function get() {
      return this._client_secret;
    }
  }, {
    key: "response_type",
    get: function get() {
      return this._response_type;
    }
  }, {
    key: "scope",
    get: function get() {
      return this._scope;
    }
  }, {
    key: "redirect_uri",
    get: function get() {
      return this._redirect_uri;
    }
  }, {
    key: "post_logout_redirect_uri",
    get: function get() {
      return this._post_logout_redirect_uri;
    }
  }, {
    key: "client_authentication",
    get: function get() {
      return this._client_authentication;
    } // optional protocol params

  }, {
    key: "prompt",
    get: function get() {
      return this._prompt;
    }
  }, {
    key: "display",
    get: function get() {
      return this._display;
    }
  }, {
    key: "max_age",
    get: function get() {
      return this._max_age;
    }
  }, {
    key: "ui_locales",
    get: function get() {
      return this._ui_locales;
    }
  }, {
    key: "acr_values",
    get: function get() {
      return this._acr_values;
    }
  }, {
    key: "resource",
    get: function get() {
      return this._resource;
    }
  }, {
    key: "response_mode",
    get: function get() {
      return this._response_mode;
    } // metadata

  }, {
    key: "authority",
    get: function get() {
      return this._authority;
    },
    set: function set(value) {
      if (!this._authority) {
        // one-time set only
        this._authority = value;
      } else {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("OidcClientSettings.set_authority: authority has already been assigned.");
        throw new Error("authority has already been assigned.");
      }
    }
  }, {
    key: "metadataUrl",
    get: function get() {
      if (!this._metadataUrl) {
        this._metadataUrl = this.authority;

        if (this._metadataUrl && this._metadataUrl.indexOf(OidcMetadataUrlPath) < 0) {
          if (this._metadataUrl[this._metadataUrl.length - 1] !== '/') {
            this._metadataUrl += '/';
          }

          this._metadataUrl += OidcMetadataUrlPath;
        }
      }

      return this._metadataUrl;
    } // settable/cachable metadata values

  }, {
    key: "metadata",
    get: function get() {
      return this._metadata;
    },
    set: function set(value) {
      this._metadata = value;
    }
  }, {
    key: "metadataSeed",
    get: function get() {
      return this._metadataSeed;
    },
    set: function set(value) {
      this._metadataSeed = value;
    }
  }, {
    key: "signingKeys",
    get: function get() {
      return this._signingKeys;
    },
    set: function set(value) {
      this._signingKeys = value;
    } // behavior flags

  }, {
    key: "filterProtocolClaims",
    get: function get() {
      return this._filterProtocolClaims;
    }
  }, {
    key: "loadUserInfo",
    get: function get() {
      return this._loadUserInfo;
    }
  }, {
    key: "staleStateAge",
    get: function get() {
      return this._staleStateAge;
    }
  }, {
    key: "clockSkew",
    get: function get() {
      return this._clockSkew;
    }
  }, {
    key: "userInfoJwtIssuer",
    get: function get() {
      return this._userInfoJwtIssuer;
    }
  }, {
    key: "mergeClaims",
    get: function get() {
      return this._mergeClaims;
    }
  }, {
    key: "stateStore",
    get: function get() {
      return this._stateStore;
    }
  }, {
    key: "validator",
    get: function get() {
      return this._validator;
    }
  }, {
    key: "metadataService",
    get: function get() {
      return this._metadataService;
    } // extra query params

  }, {
    key: "extraQueryParams",
    get: function get() {
      return this._extraQueryParams;
    },
    set: function set(value) {
      if (_typeof(value) === 'object') {
        this._extraQueryParams = value;
      } else {
        this._extraQueryParams = {};
      }
    } // extra token params

  }, {
    key: "extraTokenParams",
    get: function get() {
      return this._extraTokenParams;
    },
    set: function set(value) {
      if (_typeof(value) === 'object') {
        this._extraTokenParams = value;
      } else {
        this._extraTokenParams = {};
      }
    } // get the time

  }, {
    key: "getEpochTime",
    value: function getEpochTime() {
      return this._clockService.getEpochTime();
    }
  }]);

  return OidcClientSettings;
}();

/***/ }),

/***/ "./src/PopupNavigator.js":
/*!*******************************!*\
  !*** ./src/PopupNavigator.js ***!
  \*******************************/
/*! exports provided: PopupNavigator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PopupNavigator", function() { return PopupNavigator; });
/* harmony import */ var _Log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Log.js */ "./src/Log.js");
/* harmony import */ var _PopupWindow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PopupWindow.js */ "./src/PopupWindow.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.


var PopupNavigator = /*#__PURE__*/function () {
  function PopupNavigator() {
    _classCallCheck(this, PopupNavigator);
  }

  _createClass(PopupNavigator, [{
    key: "prepare",
    value: function prepare(params) {
      var popup = new _PopupWindow_js__WEBPACK_IMPORTED_MODULE_1__["PopupWindow"](params);
      return Promise.resolve(popup);
    }
  }, {
    key: "callback",
    value: function callback(url, keepOpen, delimiter) {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("PopupNavigator.callback");

      try {
        _PopupWindow_js__WEBPACK_IMPORTED_MODULE_1__["PopupWindow"].notifyOpener(url, keepOpen, delimiter);
        return Promise.resolve();
      } catch (e) {
        return Promise.reject(e);
      }
    }
  }]);

  return PopupNavigator;
}();

/***/ }),

/***/ "./src/PopupWindow.js":
/*!****************************!*\
  !*** ./src/PopupWindow.js ***!
  \****************************/
/*! exports provided: PopupWindow */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PopupWindow", function() { return PopupWindow; });
/* harmony import */ var _Log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Log.js */ "./src/Log.js");
/* harmony import */ var _UrlUtility_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UrlUtility.js */ "./src/UrlUtility.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.


var CheckForPopupClosedInterval = 500;
var DefaultPopupFeatures = 'location=no,toolbar=no,width=500,height=500,left=100,top=100;'; //const DefaultPopupFeatures = 'location=no,toolbar=no,width=500,height=500,left=100,top=100;resizable=yes';

var DefaultPopupTarget = "_blank";
var PopupWindow = /*#__PURE__*/function () {
  function PopupWindow(params) {
    var _this = this;

    _classCallCheck(this, PopupWindow);

    this._promise = new Promise(function (resolve, reject) {
      _this._resolve = resolve;
      _this._reject = reject;
    });
    var target = params.popupWindowTarget || DefaultPopupTarget;
    var features = params.popupWindowFeatures || DefaultPopupFeatures;
    this._popup = window.open('', target, features);

    if (this._popup) {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("PopupWindow.ctor: popup successfully created");
      this._checkForPopupClosedTimer = window.setInterval(this._checkForPopupClosed.bind(this), CheckForPopupClosedInterval);
    }
  }

  _createClass(PopupWindow, [{
    key: "promise",
    get: function get() {
      return this._promise;
    }
  }, {
    key: "navigate",
    value: function navigate(params) {
      if (!this._popup) {
        this._error("PopupWindow.navigate: Error opening popup window");
      } else if (!params || !params.url) {
        this._error("PopupWindow.navigate: no url provided");

        this._error("No url provided");
      } else {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("PopupWindow.navigate: Setting URL in popup");
        this._id = params.id;

        if (this._id) {
          window["popupCallback_" + params.id] = this._callback.bind(this);
        }

        this._popup.focus();

        this._popup.window.location = params.url;
      }

      return this.promise;
    }
  }, {
    key: "_success",
    value: function _success(data) {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("PopupWindow.callback: Successful response from popup window");

      this._cleanup();

      this._resolve(data);
    }
  }, {
    key: "_error",
    value: function _error(message) {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("PopupWindow.error: ", message);

      this._cleanup();

      this._reject(new Error(message));
    }
  }, {
    key: "close",
    value: function close() {
      this._cleanup(false);
    }
  }, {
    key: "_cleanup",
    value: function _cleanup(keepOpen) {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("PopupWindow.cleanup");
      window.clearInterval(this._checkForPopupClosedTimer);
      this._checkForPopupClosedTimer = null;
      delete window["popupCallback_" + this._id];

      if (this._popup && !keepOpen) {
        this._popup.close();
      }

      this._popup = null;
    }
  }, {
    key: "_checkForPopupClosed",
    value: function _checkForPopupClosed() {
      if (!this._popup || this._popup.closed) {
        this._error("Popup window closed");
      }
    }
  }, {
    key: "_callback",
    value: function _callback(url, keepOpen) {
      this._cleanup(keepOpen);

      if (url) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("PopupWindow.callback success");

        this._success({
          url: url
        });
      } else {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("PopupWindow.callback: Invalid response from popup");

        this._error("Invalid response from popup");
      }
    }
  }], [{
    key: "notifyOpener",
    value: function notifyOpener(url, keepOpen, delimiter) {
      if (window.opener) {
        url = url || window.location.href;

        if (url) {
          var data = _UrlUtility_js__WEBPACK_IMPORTED_MODULE_1__["UrlUtility"].parseUrlFragment(url, delimiter);

          if (data.state) {
            var name = "popupCallback_" + data.state;
            var callback = window.opener[name];

            if (callback) {
              _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("PopupWindow.notifyOpener: passing url message to opener");
              callback(url, keepOpen);
            } else {
              _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].warn("PopupWindow.notifyOpener: no matching callback found on opener");
            }
          } else {
            _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].warn("PopupWindow.notifyOpener: no state found in response url");
          }
        }
      } else {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].warn("PopupWindow.notifyOpener: no window.opener. Can't complete notification.");
      }
    }
  }]);

  return PopupWindow;
}();

/***/ }),

/***/ "./src/RedirectNavigator.js":
/*!**********************************!*\
  !*** ./src/RedirectNavigator.js ***!
  \**********************************/
/*! exports provided: RedirectNavigator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RedirectNavigator", function() { return RedirectNavigator; });
/* harmony import */ var _Log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Log.js */ "./src/Log.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var RedirectNavigator = /*#__PURE__*/function () {
  function RedirectNavigator() {
    _classCallCheck(this, RedirectNavigator);
  }

  _createClass(RedirectNavigator, [{
    key: "prepare",
    value: function prepare() {
      return Promise.resolve(this);
    }
  }, {
    key: "navigate",
    value: function navigate(params) {
      if (!params || !params.url) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("RedirectNavigator.navigate: No url provided");
        return Promise.reject(new Error("No url provided"));
      }

      if (params.useReplaceToNavigate) {
        window.location.replace(params.url);
      } else {
        window.location = params.url;
      }

      return Promise.resolve();
    }
  }, {
    key: "url",
    get: function get() {
      return window.location.href;
    }
  }]);

  return RedirectNavigator;
}();

/***/ }),

/***/ "./src/ResponseValidator.js":
/*!**********************************!*\
  !*** ./src/ResponseValidator.js ***!
  \**********************************/
/*! exports provided: ResponseValidator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResponseValidator", function() { return ResponseValidator; });
/* harmony import */ var _Log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Log.js */ "./src/Log.js");
/* harmony import */ var _MetadataService_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MetadataService.js */ "./src/MetadataService.js");
/* harmony import */ var _UserInfoService_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./UserInfoService.js */ "./src/UserInfoService.js");
/* harmony import */ var _TokenClient_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./TokenClient.js */ "./src/TokenClient.js");
/* harmony import */ var _ErrorResponse_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ErrorResponse.js */ "./src/ErrorResponse.js");
/* harmony import */ var _JoseUtil_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./JoseUtil.js */ "./src/JoseUtil.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.






var ProtocolClaims = ["nonce", "at_hash", "iat", "nbf", "exp", "aud", "iss", "c_hash"];
var ResponseValidator = /*#__PURE__*/function () {
  function ResponseValidator(settings) {
    var MetadataServiceCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _MetadataService_js__WEBPACK_IMPORTED_MODULE_1__["MetadataService"];
    var UserInfoServiceCtor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _UserInfoService_js__WEBPACK_IMPORTED_MODULE_2__["UserInfoService"];
    var joseUtil = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _JoseUtil_js__WEBPACK_IMPORTED_MODULE_5__["JoseUtil"];
    var TokenClientCtor = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : _TokenClient_js__WEBPACK_IMPORTED_MODULE_3__["TokenClient"];

    _classCallCheck(this, ResponseValidator);

    if (!settings) {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("ResponseValidator.ctor: No settings passed to ResponseValidator");
      throw new Error("settings");
    }

    this._settings = settings;
    this._metadataService = new MetadataServiceCtor(this._settings);
    this._userInfoService = new UserInfoServiceCtor(this._settings);
    this._joseUtil = joseUtil;
    this._tokenClient = new TokenClientCtor(this._settings);
  }

  _createClass(ResponseValidator, [{
    key: "validateSigninResponse",
    value: function validateSigninResponse(state, response) {
      var _this = this;

      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("ResponseValidator.validateSigninResponse");
      return this._processSigninParams(state, response).then(function (response) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("ResponseValidator.validateSigninResponse: state processed");
        return _this._validateTokens(state, response).then(function (response) {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("ResponseValidator.validateSigninResponse: tokens validated");
          return _this._processClaims(state, response).then(function (response) {
            _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("ResponseValidator.validateSigninResponse: claims processed");
            return response;
          });
        });
      });
    }
  }, {
    key: "validateSignoutResponse",
    value: function validateSignoutResponse(state, response) {
      if (state.id !== response.state) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("ResponseValidator.validateSignoutResponse: State does not match");
        return Promise.reject(new Error("State does not match"));
      } // now that we know the state matches, take the stored data
      // and set it into the response so callers can get their state
      // this is important for both success & error outcomes


      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("ResponseValidator.validateSignoutResponse: state validated");
      response.state = state.data;

      if (response.error) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].warn("ResponseValidator.validateSignoutResponse: Response was error", response.error);
        return Promise.reject(new _ErrorResponse_js__WEBPACK_IMPORTED_MODULE_4__["ErrorResponse"](response));
      }

      return Promise.resolve(response);
    }
  }, {
    key: "_processSigninParams",
    value: function _processSigninParams(state, response) {
      if (state.id !== response.state) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("ResponseValidator._processSigninParams: State does not match");
        return Promise.reject(new Error("State does not match"));
      }

      if (!state.client_id) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("ResponseValidator._processSigninParams: No client_id on state");
        return Promise.reject(new Error("No client_id on state"));
      }

      if (!state.authority) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("ResponseValidator._processSigninParams: No authority on state");
        return Promise.reject(new Error("No authority on state"));
      } // this allows the authority to be loaded from the signin state


      if (!this._settings.authority) {
        this._settings.authority = state.authority;
      } // ensure we're using the correct authority if the authority is not loaded from signin state
      else if (this._settings.authority && this._settings.authority !== state.authority) {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("ResponseValidator._processSigninParams: authority mismatch on settings vs. signin state");
          return Promise.reject(new Error("authority mismatch on settings vs. signin state"));
        } // this allows the client_id to be loaded from the signin state


      if (!this._settings.client_id) {
        this._settings.client_id = state.client_id;
      } // ensure we're using the correct client_id if the client_id is not loaded from signin state
      else if (this._settings.client_id && this._settings.client_id !== state.client_id) {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("ResponseValidator._processSigninParams: client_id mismatch on settings vs. signin state");
          return Promise.reject(new Error("client_id mismatch on settings vs. signin state"));
        } // now that we know the state matches, take the stored data
      // and set it into the response so callers can get their state
      // this is important for both success & error outcomes


      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("ResponseValidator._processSigninParams: state validated");
      response.state = state.data;

      if (response.error) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].warn("ResponseValidator._processSigninParams: Response was error", response.error);
        return Promise.reject(new _ErrorResponse_js__WEBPACK_IMPORTED_MODULE_4__["ErrorResponse"](response));
      }

      if (state.nonce && !response.id_token) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("ResponseValidator._processSigninParams: Expecting id_token in response");
        return Promise.reject(new Error("No id_token in response"));
      }

      if (!state.nonce && response.id_token) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("ResponseValidator._processSigninParams: Not expecting id_token in response");
        return Promise.reject(new Error("Unexpected id_token in response"));
      }

      if (state.code_verifier && !response.code) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("ResponseValidator._processSigninParams: Expecting code in response");
        return Promise.reject(new Error("No code in response"));
      }

      if (!state.code_verifier && response.code) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("ResponseValidator._processSigninParams: Not expecting code in response");
        return Promise.reject(new Error("Unexpected code in response"));
      }

      if (!response.scope) {
        // if there's no scope on the response, then assume all scopes granted (per-spec) and copy over scopes from original request
        response.scope = state.scope;
      }

      return Promise.resolve(response);
    }
  }, {
    key: "_processClaims",
    value: function _processClaims(state, response) {
      var _this2 = this;

      if (response.isOpenIdConnect) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("ResponseValidator._processClaims: response is OIDC, processing claims");
        response.profile = this._filterProtocolClaims(response.profile);

        if (state.skipUserInfo !== true && this._settings.loadUserInfo && response.access_token) {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("ResponseValidator._processClaims: loading user info");
          return this._userInfoService.getClaims(response.access_token).then(function (claims) {
            _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("ResponseValidator._processClaims: user info claims received from user info endpoint");

            if (claims.sub !== response.profile.sub) {
              _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("ResponseValidator._processClaims: sub from user info endpoint does not match sub in id_token");
              return Promise.reject(new Error("sub from user info endpoint does not match sub in id_token"));
            }

            response.profile = _this2._mergeClaims(response.profile, claims);
            _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("ResponseValidator._processClaims: user info claims received, updated profile:", response.profile);
            return response;
          });
        } else {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("ResponseValidator._processClaims: not loading user info");
        }
      } else {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("ResponseValidator._processClaims: response is not OIDC, not processing claims");
      }

      return Promise.resolve(response);
    }
  }, {
    key: "_mergeClaims",
    value: function _mergeClaims(claims1, claims2) {
      var result = Object.assign({}, claims1);

      for (var name in claims2) {
        var values = claims2[name];

        if (!Array.isArray(values)) {
          values = [values];
        }

        for (var i = 0; i < values.length; i++) {
          var value = values[i];

          if (!result[name]) {
            result[name] = value;
          } else if (Array.isArray(result[name])) {
            if (result[name].indexOf(value) < 0) {
              result[name].push(value);
            }
          } else if (result[name] !== value) {
            if (_typeof(value) === 'object' && this._settings.mergeClaims) {
              result[name] = this._mergeClaims(result[name], value);
            } else {
              result[name] = [result[name], value];
            }
          }
        }
      }

      return result;
    }
  }, {
    key: "_filterProtocolClaims",
    value: function _filterProtocolClaims(claims) {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("ResponseValidator._filterProtocolClaims, incoming claims:", claims);
      var result = Object.assign({}, claims);

      if (this._settings._filterProtocolClaims) {
        ProtocolClaims.forEach(function (type) {
          delete result[type];
        });
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("ResponseValidator._filterProtocolClaims: protocol claims filtered", result);
      } else {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("ResponseValidator._filterProtocolClaims: protocol claims not filtered");
      }

      return result;
    }
  }, {
    key: "_validateTokens",
    value: function _validateTokens(state, response) {
      if (response.code) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("ResponseValidator._validateTokens: Validating code");
        return this._processCode(state, response);
      }

      if (response.id_token) {
        if (response.access_token) {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("ResponseValidator._validateTokens: Validating id_token and access_token");
          return this._validateIdTokenAndAccessToken(state, response);
        }

        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("ResponseValidator._validateTokens: Validating id_token");
        return this._validateIdToken(state, response);
      }

      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("ResponseValidator._validateTokens: No code to process or id_token to validate");
      return Promise.resolve(response);
    }
  }, {
    key: "_processCode",
    value: function _processCode(state, response) {
      var _this3 = this;

      var request = {
        client_id: state.client_id,
        client_secret: state.client_secret,
        code: response.code,
        redirect_uri: state.redirect_uri,
        code_verifier: state.code_verifier
      };

      if (state.extraTokenParams && _typeof(state.extraTokenParams) === 'object') {
        Object.assign(request, state.extraTokenParams);
      }

      return this._tokenClient.exchangeCode(request).then(function (tokenResponse) {
        for (var key in tokenResponse) {
          if (Object.prototype.hasOwnProperty.call(tokenResponse, key)) {
            response[key] = tokenResponse[key];
          }
        }

        if (response.id_token) {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("ResponseValidator._processCode: token response successful, processing id_token");
          return _this3._validateIdTokenAttributes(state, response);
        } else {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("ResponseValidator._processCode: token response successful, returning response");
        }

        return response;
      });
    }
  }, {
    key: "_validateIdTokenAttributes",
    value: function _validateIdTokenAttributes(state, response) {
      var _this4 = this;

      return this._metadataService.getIssuer().then(function (issuer) {
        var audience = state.client_id;
        var clockSkewInSeconds = _this4._settings.clockSkew;
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("ResponseValidator._validateIdTokenAttributes: Validaing JWT attributes; using clock skew (in seconds) of: ", clockSkewInSeconds);
        return _this4._settings.getEpochTime().then(function (now) {
          return _this4._joseUtil.validateJwtAttributes(response.id_token, issuer, audience, clockSkewInSeconds, now).then(function (payload) {
            if (state.nonce && state.nonce !== payload.nonce) {
              _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("ResponseValidator._validateIdTokenAttributes: Invalid nonce in id_token");
              return Promise.reject(new Error("Invalid nonce in id_token"));
            }

            if (!payload.sub) {
              _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("ResponseValidator._validateIdTokenAttributes: No sub present in id_token");
              return Promise.reject(new Error("No sub present in id_token"));
            }

            response.profile = payload;
            return response;
          });
        });
      });
    }
  }, {
    key: "_validateIdTokenAndAccessToken",
    value: function _validateIdTokenAndAccessToken(state, response) {
      var _this5 = this;

      return this._validateIdToken(state, response).then(function (response) {
        return _this5._validateAccessToken(response);
      });
    }
  }, {
    key: "_getSigningKeyForJwt",
    value: function _getSigningKeyForJwt(jwt) {
      var _this6 = this;

      return this._metadataService.getSigningKeys().then(function (keys) {
        var kid = jwt.header.kid;

        if (!keys) {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("ResponseValidator._validateIdToken: No signing keys from metadata");
          return Promise.reject(new Error("No signing keys from metadata"));
        }

        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("ResponseValidator._validateIdToken: Received signing keys");
        var key;

        if (!kid) {
          keys = _this6._filterByAlg(keys, jwt.header.alg);

          if (keys.length > 1) {
            _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("ResponseValidator._validateIdToken: No kid found in id_token and more than one key found in metadata");
            return Promise.reject(new Error("No kid found in id_token and more than one key found in metadata"));
          } else {
            // kid is mandatory only when there are multiple keys in the referenced JWK Set document
            // see http://openid.net/specs/openid-connect-core-1_0.html#Signing
            key = keys[0];
          }
        } else {
          key = keys.filter(function (key) {
            return key.kid === kid;
          })[0];
        }

        return Promise.resolve(key);
      });
    }
  }, {
    key: "_getSigningKeyForJwtWithSingleRetry",
    value: function _getSigningKeyForJwtWithSingleRetry(jwt) {
      var _this7 = this;

      return this._getSigningKeyForJwt(jwt).then(function (key) {
        // Refreshing signingKeys if no suitable verification key is present for given jwt header.
        if (!key) {
          // set to undefined, to trigger network call to jwks_uri.
          _this7._metadataService.resetSigningKeys();

          return _this7._getSigningKeyForJwt(jwt);
        } else {
          return Promise.resolve(key);
        }
      });
    }
  }, {
    key: "_validateIdToken",
    value: function _validateIdToken(state, response) {
      var _this8 = this;

      if (!state.nonce) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("ResponseValidator._validateIdToken: No nonce on state");
        return Promise.reject(new Error("No nonce on state"));
      }

      var jwt = this._joseUtil.parseJwt(response.id_token);

      if (!jwt || !jwt.header || !jwt.payload) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("ResponseValidator._validateIdToken: Failed to parse id_token", jwt);
        return Promise.reject(new Error("Failed to parse id_token"));
      }

      if (state.nonce !== jwt.payload.nonce) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("ResponseValidator._validateIdToken: Invalid nonce in id_token");
        return Promise.reject(new Error("Invalid nonce in id_token"));
      }

      return this._metadataService.getIssuer().then(function (issuer) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("ResponseValidator._validateIdToken: Received issuer");
        return _this8._getSigningKeyForJwtWithSingleRetry(jwt).then(function (key) {
          if (!key) {
            _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("ResponseValidator._validateIdToken: No key matching kid or alg found in signing keys");
            return Promise.reject(new Error("No key matching kid or alg found in signing keys"));
          }

          var audience = state.client_id;
          var clockSkewInSeconds = _this8._settings.clockSkew;
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("ResponseValidator._validateIdToken: Validaing JWT; using clock skew (in seconds) of: ", clockSkewInSeconds);
          return _this8._joseUtil.validateJwt(response.id_token, key, issuer, audience, clockSkewInSeconds).then(function () {
            _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("ResponseValidator._validateIdToken: JWT validation successful");

            if (!jwt.payload.sub) {
              _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("ResponseValidator._validateIdToken: No sub present in id_token");
              return Promise.reject(new Error("No sub present in id_token"));
            }

            response.profile = jwt.payload;
            return response;
          });
        });
      });
    }
  }, {
    key: "_filterByAlg",
    value: function _filterByAlg(keys, alg) {
      var kty = null;

      if (alg.startsWith("RS")) {
        kty = "RSA";
      } else if (alg.startsWith("PS")) {
        kty = "PS";
      } else if (alg.startsWith("ES")) {
        kty = "EC";
      } else {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("ResponseValidator._filterByAlg: alg not supported: ", alg);
        return [];
      }

      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("ResponseValidator._filterByAlg: Looking for keys that match kty: ", kty);
      keys = keys.filter(function (key) {
        return key.kty === kty;
      });
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("ResponseValidator._filterByAlg: Number of keys that match kty: ", kty, keys.length);
      return keys;
    }
  }, {
    key: "_validateAccessToken",
    value: function _validateAccessToken(response) {
      if (!response.profile) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("ResponseValidator._validateAccessToken: No profile loaded from id_token");
        return Promise.reject(new Error("No profile loaded from id_token"));
      }

      if (!response.profile.at_hash) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("ResponseValidator._validateAccessToken: No at_hash in id_token");
        return Promise.reject(new Error("No at_hash in id_token"));
      }

      if (!response.id_token) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("ResponseValidator._validateAccessToken: No id_token");
        return Promise.reject(new Error("No id_token"));
      }

      var jwt = this._joseUtil.parseJwt(response.id_token);

      if (!jwt || !jwt.header) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("ResponseValidator._validateAccessToken: Failed to parse id_token", jwt);
        return Promise.reject(new Error("Failed to parse id_token"));
      }

      var hashAlg = jwt.header.alg;

      if (!hashAlg || hashAlg.length !== 5) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("ResponseValidator._validateAccessToken: Unsupported alg:", hashAlg);
        return Promise.reject(new Error("Unsupported alg: " + hashAlg));
      }

      var hashBits = hashAlg.substr(2, 3);

      if (!hashBits) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("ResponseValidator._validateAccessToken: Unsupported alg:", hashAlg, hashBits);
        return Promise.reject(new Error("Unsupported alg: " + hashAlg));
      }

      hashBits = parseInt(hashBits);

      if (hashBits !== 256 && hashBits !== 384 && hashBits !== 512) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("ResponseValidator._validateAccessToken: Unsupported alg:", hashAlg, hashBits);
        return Promise.reject(new Error("Unsupported alg: " + hashAlg));
      }

      var sha = "sha" + hashBits;

      var hash = this._joseUtil.hashString(response.access_token, sha);

      if (!hash) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("ResponseValidator._validateAccessToken: access_token hash failed:", sha);
        return Promise.reject(new Error("Failed to validate at_hash"));
      }

      var left = hash.substr(0, hash.length / 2);

      var left_b64u = this._joseUtil.hexToBase64Url(left);

      if (left_b64u !== response.profile.at_hash) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("ResponseValidator._validateAccessToken: Failed to validate at_hash", left_b64u, response.profile.at_hash);
        return Promise.reject(new Error("Failed to validate at_hash"));
      }

      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("ResponseValidator._validateAccessToken: success");
      return Promise.resolve(response);
    }
  }]);

  return ResponseValidator;
}();

/***/ }),

/***/ "./src/SessionMonitor.js":
/*!*******************************!*\
  !*** ./src/SessionMonitor.js ***!
  \*******************************/
/*! exports provided: SessionMonitor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SessionMonitor", function() { return SessionMonitor; });
/* harmony import */ var _Log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Log.js */ "./src/Log.js");
/* harmony import */ var _CheckSessionIFrame_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CheckSessionIFrame.js */ "./src/CheckSessionIFrame.js");
/* harmony import */ var _Global_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Global.js */ "./src/Global.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.



var SessionMonitor = /*#__PURE__*/function () {
  function SessionMonitor(userManager) {
    var _this = this;

    var CheckSessionIFrameCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _CheckSessionIFrame_js__WEBPACK_IMPORTED_MODULE_1__["CheckSessionIFrame"];
    var timer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _Global_js__WEBPACK_IMPORTED_MODULE_2__["Global"].timer;

    _classCallCheck(this, SessionMonitor);

    if (!userManager) {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("SessionMonitor.ctor: No user manager passed to SessionMonitor");
      throw new Error("userManager");
    }

    this._userManager = userManager;
    this._CheckSessionIFrameCtor = CheckSessionIFrameCtor;
    this._timer = timer;

    this._userManager.events.addUserLoaded(this._start.bind(this));

    this._userManager.events.addUserUnloaded(this._stop.bind(this));

    Promise.resolve(this._userManager.getUser().then(function (user) {
      // doing this manually here since calling getUser 
      // doesn't trigger load event.
      if (user) {
        _this._start(user);
      } else if (_this._settings.monitorAnonymousSession) {
        _this._userManager.querySessionStatus().then(function (session) {
          var tmpUser = {
            session_state: session.session_state
          };

          if (session.sub && session.sid) {
            tmpUser.profile = {
              sub: session.sub,
              sid: session.sid
            };
          }

          _this._start(tmpUser);
        })["catch"](function (err) {
          // catch to suppress errors since we're in a ctor
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("SessionMonitor ctor: error from querySessionStatus:", err.message);
        });
      }
    })["catch"](function (err) {
      // catch to suppress errors since we're in a ctor
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("SessionMonitor ctor: error from getUser:", err.message);
    }));
  }

  _createClass(SessionMonitor, [{
    key: "_settings",
    get: function get() {
      return this._userManager.settings;
    }
  }, {
    key: "_metadataService",
    get: function get() {
      return this._userManager.metadataService;
    }
  }, {
    key: "_client_id",
    get: function get() {
      return this._settings.client_id;
    }
  }, {
    key: "_checkSessionInterval",
    get: function get() {
      return this._settings.checkSessionInterval;
    }
  }, {
    key: "_stopCheckSessionOnError",
    get: function get() {
      return this._settings.stopCheckSessionOnError;
    }
  }, {
    key: "_start",
    value: function _start(user) {
      var _this2 = this;

      var session_state = user.session_state;

      if (session_state) {
        if (user.profile) {
          this._sub = user.profile.sub;
          this._sid = user.profile.sid;
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("SessionMonitor._start: session_state:", session_state, ", sub:", this._sub);
        } else {
          this._sub = undefined;
          this._sid = undefined;
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("SessionMonitor._start: session_state:", session_state, ", anonymous user");
        }

        if (!this._checkSessionIFrame) {
          this._metadataService.getCheckSessionIframe().then(function (url) {
            if (url) {
              _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("SessionMonitor._start: Initializing check session iframe");
              var client_id = _this2._client_id;
              var interval = _this2._checkSessionInterval;
              var stopOnError = _this2._stopCheckSessionOnError;
              _this2._checkSessionIFrame = new _this2._CheckSessionIFrameCtor(_this2._callback.bind(_this2), client_id, url, interval, stopOnError);

              _this2._checkSessionIFrame.load().then(function () {
                _this2._checkSessionIFrame.start(session_state);
              });
            } else {
              _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].warn("SessionMonitor._start: No check session iframe found in the metadata");
            }
          })["catch"](function (err) {
            // catch to suppress errors since we're in non-promise callback
            _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("SessionMonitor._start: Error from getCheckSessionIframe:", err.message);
          });
        } else {
          this._checkSessionIFrame.start(session_state);
        }
      }
    }
  }, {
    key: "_stop",
    value: function _stop() {
      var _this3 = this;

      this._sub = undefined;
      this._sid = undefined;

      if (this._checkSessionIFrame) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("SessionMonitor._stop");

        this._checkSessionIFrame.stop();
      }

      if (this._settings.monitorAnonymousSession) {
        // using a timer to delay re-initialization to avoid race conditions during signout
        var timerHandle = this._timer.setInterval(function () {
          _this3._timer.clearInterval(timerHandle);

          _this3._userManager.querySessionStatus().then(function (session) {
            var tmpUser = {
              session_state: session.session_state
            };

            if (session.sub && session.sid) {
              tmpUser.profile = {
                sub: session.sub,
                sid: session.sid
              };
            }

            _this3._start(tmpUser);
          })["catch"](function (err) {
            // catch to suppress errors since we're in a callback
            _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("SessionMonitor: error from querySessionStatus:", err.message);
          });
        }, 1000);
      }
    }
  }, {
    key: "_callback",
    value: function _callback() {
      var _this4 = this;

      this._userManager.querySessionStatus().then(function (session) {
        var raiseEvent = true;

        if (session) {
          if (session.sub === _this4._sub) {
            raiseEvent = false;

            _this4._checkSessionIFrame.start(session.session_state);

            if (session.sid === _this4._sid) {
              _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("SessionMonitor._callback: Same sub still logged in at OP, restarting check session iframe; session_state:", session.session_state);
            } else {
              _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("SessionMonitor._callback: Same sub still logged in at OP, session state has changed, restarting check session iframe; session_state:", session.session_state);

              _this4._userManager.events._raiseUserSessionChanged();
            }
          } else {
            _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("SessionMonitor._callback: Different subject signed into OP:", session.sub);
          }
        } else {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("SessionMonitor._callback: Subject no longer signed into OP");
        }

        if (raiseEvent) {
          if (_this4._sub) {
            _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("SessionMonitor._callback: SessionMonitor._callback; raising signed out event");

            _this4._userManager.events._raiseUserSignedOut();
          } else {
            _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("SessionMonitor._callback: SessionMonitor._callback; raising signed in event");

            _this4._userManager.events._raiseUserSignedIn();
          }
        }
      })["catch"](function (err) {
        if (_this4._sub) {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("SessionMonitor._callback: Error calling queryCurrentSigninSession; raising signed out event", err.message);

          _this4._userManager.events._raiseUserSignedOut();
        }
      });
    }
  }]);

  return SessionMonitor;
}();

/***/ }),

/***/ "./src/SigninRequest.js":
/*!******************************!*\
  !*** ./src/SigninRequest.js ***!
  \******************************/
/*! exports provided: SigninRequest */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SigninRequest", function() { return SigninRequest; });
/* harmony import */ var _Log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Log.js */ "./src/Log.js");
/* harmony import */ var _UrlUtility_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UrlUtility.js */ "./src/UrlUtility.js");
/* harmony import */ var _SigninState_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SigninState.js */ "./src/SigninState.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.



var SigninRequest = /*#__PURE__*/function () {
  function SigninRequest(_ref) {
    var url = _ref.url,
        client_id = _ref.client_id,
        redirect_uri = _ref.redirect_uri,
        response_type = _ref.response_type,
        scope = _ref.scope,
        authority = _ref.authority,
        data = _ref.data,
        prompt = _ref.prompt,
        display = _ref.display,
        max_age = _ref.max_age,
        ui_locales = _ref.ui_locales,
        id_token_hint = _ref.id_token_hint,
        login_hint = _ref.login_hint,
        acr_values = _ref.acr_values,
        resource = _ref.resource,
        response_mode = _ref.response_mode,
        request = _ref.request,
        request_uri = _ref.request_uri,
        extraQueryParams = _ref.extraQueryParams,
        request_type = _ref.request_type,
        client_secret = _ref.client_secret,
        extraTokenParams = _ref.extraTokenParams,
        skipUserInfo = _ref.skipUserInfo;

    _classCallCheck(this, SigninRequest);

    if (!url) {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("SigninRequest.ctor: No url passed");
      throw new Error("url");
    }

    if (!client_id) {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("SigninRequest.ctor: No client_id passed");
      throw new Error("client_id");
    }

    if (!redirect_uri) {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("SigninRequest.ctor: No redirect_uri passed");
      throw new Error("redirect_uri");
    }

    if (!response_type) {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("SigninRequest.ctor: No response_type passed");
      throw new Error("response_type");
    }

    if (!scope) {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("SigninRequest.ctor: No scope passed");
      throw new Error("scope");
    }

    if (!authority) {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("SigninRequest.ctor: No authority passed");
      throw new Error("authority");
    }

    var oidc = SigninRequest.isOidc(response_type);
    var code = SigninRequest.isCode(response_type);

    if (!response_mode) {
      response_mode = SigninRequest.isCode(response_type) ? "query" : null;
    }

    this.state = new _SigninState_js__WEBPACK_IMPORTED_MODULE_2__["SigninState"]({
      nonce: oidc,
      data: data,
      client_id: client_id,
      authority: authority,
      redirect_uri: redirect_uri,
      code_verifier: code,
      request_type: request_type,
      response_mode: response_mode,
      client_secret: client_secret,
      scope: scope,
      extraTokenParams: extraTokenParams,
      skipUserInfo: skipUserInfo
    });
    url = _UrlUtility_js__WEBPACK_IMPORTED_MODULE_1__["UrlUtility"].addQueryParam(url, "client_id", client_id);
    url = _UrlUtility_js__WEBPACK_IMPORTED_MODULE_1__["UrlUtility"].addQueryParam(url, "redirect_uri", redirect_uri);
    url = _UrlUtility_js__WEBPACK_IMPORTED_MODULE_1__["UrlUtility"].addQueryParam(url, "response_type", response_type);
    url = _UrlUtility_js__WEBPACK_IMPORTED_MODULE_1__["UrlUtility"].addQueryParam(url, "scope", scope);
    url = _UrlUtility_js__WEBPACK_IMPORTED_MODULE_1__["UrlUtility"].addQueryParam(url, "state", this.state.id);

    if (oidc) {
      url = _UrlUtility_js__WEBPACK_IMPORTED_MODULE_1__["UrlUtility"].addQueryParam(url, "nonce", this.state.nonce);
    }

    if (code) {
      url = _UrlUtility_js__WEBPACK_IMPORTED_MODULE_1__["UrlUtility"].addQueryParam(url, "code_challenge", this.state.code_challenge);
      url = _UrlUtility_js__WEBPACK_IMPORTED_MODULE_1__["UrlUtility"].addQueryParam(url, "code_challenge_method", "S256");
    }

    var optional = {
      prompt: prompt,
      display: display,
      max_age: max_age,
      ui_locales: ui_locales,
      id_token_hint: id_token_hint,
      login_hint: login_hint,
      acr_values: acr_values,
      resource: resource,
      request: request,
      request_uri: request_uri,
      response_mode: response_mode
    };

    for (var key in optional) {
      if (optional[key]) {
        url = _UrlUtility_js__WEBPACK_IMPORTED_MODULE_1__["UrlUtility"].addQueryParam(url, key, optional[key]);
      }
    }

    for (var _key in extraQueryParams) {
      url = _UrlUtility_js__WEBPACK_IMPORTED_MODULE_1__["UrlUtility"].addQueryParam(url, _key, extraQueryParams[_key]);
    }

    this.url = url;
  }

  _createClass(SigninRequest, null, [{
    key: "isOidc",
    value: function isOidc(response_type) {
      var result = response_type.split(/\s+/g).filter(function (item) {
        return item === "id_token";
      });
      return !!result[0];
    }
  }, {
    key: "isOAuth",
    value: function isOAuth(response_type) {
      var result = response_type.split(/\s+/g).filter(function (item) {
        return item === "token";
      });
      return !!result[0];
    }
  }, {
    key: "isCode",
    value: function isCode(response_type) {
      var result = response_type.split(/\s+/g).filter(function (item) {
        return item === "code";
      });
      return !!result[0];
    }
  }]);

  return SigninRequest;
}();

/***/ }),

/***/ "./src/SigninResponse.js":
/*!*******************************!*\
  !*** ./src/SigninResponse.js ***!
  \*******************************/
/*! exports provided: SigninResponse */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SigninResponse", function() { return SigninResponse; });
/* harmony import */ var _UrlUtility_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UrlUtility.js */ "./src/UrlUtility.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var OidcScope = "openid";
var SigninResponse = /*#__PURE__*/function () {
  function SigninResponse(url) {
    var delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "#";

    _classCallCheck(this, SigninResponse);

    var values = _UrlUtility_js__WEBPACK_IMPORTED_MODULE_0__["UrlUtility"].parseUrlFragment(url, delimiter);

    for (var key in values) {
      if (Object.prototype.hasOwnProperty.call(values, key)) {
        this[key] = values[key];
      }
    }

    this.profile = undefined; // will be set from ResponseValidator
  }

  _createClass(SigninResponse, [{
    key: "expires_in",
    get: function get() {
      if (this.expires_at) {
        var now = parseInt(Date.now() / 1000);
        return this.expires_at - now;
      }

      return undefined;
    },
    set: function set(value) {
      var expires_in = parseInt(value);

      if (typeof expires_in === 'number' && expires_in > 0) {
        var now = parseInt(Date.now() / 1000);
        this.expires_at = now + expires_in;
      }
    }
  }, {
    key: "expired",
    get: function get() {
      var expires_in = this.expires_in;

      if (expires_in !== undefined) {
        return expires_in <= 0;
      }

      return undefined;
    }
  }, {
    key: "scopes",
    get: function get() {
      return (this.scope || "").split(" ");
    }
  }, {
    key: "isOpenIdConnect",
    get: function get() {
      return this.scopes.indexOf(OidcScope) >= 0 || !!this.id_token;
    }
  }]);

  return SigninResponse;
}();

/***/ }),

/***/ "./src/SigninState.js":
/*!****************************!*\
  !*** ./src/SigninState.js ***!
  \****************************/
/*! exports provided: SigninState */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SigninState", function() { return SigninState; });
/* harmony import */ var _Log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Log.js */ "./src/Log.js");
/* harmony import */ var _State_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./State.js */ "./src/State.js");
/* harmony import */ var _JoseUtil_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./JoseUtil.js */ "./src/JoseUtil.js");
/* harmony import */ var _random_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./random.js */ "./src/random.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.




var SigninState = /*#__PURE__*/function (_State) {
  _inherits(SigninState, _State);

  var _super = _createSuper(SigninState);

  function SigninState() {
    var _this;

    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        nonce = _ref.nonce,
        authority = _ref.authority,
        client_id = _ref.client_id,
        redirect_uri = _ref.redirect_uri,
        code_verifier = _ref.code_verifier,
        response_mode = _ref.response_mode,
        client_secret = _ref.client_secret,
        scope = _ref.scope,
        extraTokenParams = _ref.extraTokenParams,
        skipUserInfo = _ref.skipUserInfo;

    _classCallCheck(this, SigninState);

    _this = _super.call(this, arguments[0]);

    if (nonce === true) {
      _this._nonce = Object(_random_js__WEBPACK_IMPORTED_MODULE_3__["default"])();
    } else if (nonce) {
      _this._nonce = nonce;
    }

    if (code_verifier === true) {
      // random() produces 32 length
      _this._code_verifier = Object(_random_js__WEBPACK_IMPORTED_MODULE_3__["default"])() + Object(_random_js__WEBPACK_IMPORTED_MODULE_3__["default"])() + Object(_random_js__WEBPACK_IMPORTED_MODULE_3__["default"])();
    } else if (code_verifier) {
      _this._code_verifier = code_verifier;
    }

    if (_this.code_verifier) {
      var hash = _JoseUtil_js__WEBPACK_IMPORTED_MODULE_2__["JoseUtil"].hashString(_this.code_verifier, "SHA256");
      _this._code_challenge = _JoseUtil_js__WEBPACK_IMPORTED_MODULE_2__["JoseUtil"].hexToBase64Url(hash);
    }

    _this._redirect_uri = redirect_uri;
    _this._authority = authority;
    _this._client_id = client_id;
    _this._response_mode = response_mode;
    _this._client_secret = client_secret;
    _this._scope = scope;
    _this._extraTokenParams = extraTokenParams;
    _this._skipUserInfo = skipUserInfo;
    return _this;
  }

  _createClass(SigninState, [{
    key: "nonce",
    get: function get() {
      return this._nonce;
    }
  }, {
    key: "authority",
    get: function get() {
      return this._authority;
    }
  }, {
    key: "client_id",
    get: function get() {
      return this._client_id;
    }
  }, {
    key: "redirect_uri",
    get: function get() {
      return this._redirect_uri;
    }
  }, {
    key: "code_verifier",
    get: function get() {
      return this._code_verifier;
    }
  }, {
    key: "code_challenge",
    get: function get() {
      return this._code_challenge;
    }
  }, {
    key: "response_mode",
    get: function get() {
      return this._response_mode;
    }
  }, {
    key: "client_secret",
    get: function get() {
      return this._client_secret;
    }
  }, {
    key: "scope",
    get: function get() {
      return this._scope;
    }
  }, {
    key: "extraTokenParams",
    get: function get() {
      return this._extraTokenParams;
    }
  }, {
    key: "skipUserInfo",
    get: function get() {
      return this._skipUserInfo;
    }
  }, {
    key: "toStorageString",
    value: function toStorageString() {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("SigninState.toStorageString");
      return JSON.stringify({
        id: this.id,
        data: this.data,
        created: this.created,
        request_type: this.request_type,
        nonce: this.nonce,
        code_verifier: this.code_verifier,
        redirect_uri: this.redirect_uri,
        authority: this.authority,
        client_id: this.client_id,
        response_mode: this.response_mode,
        client_secret: this.client_secret,
        scope: this.scope,
        extraTokenParams: this.extraTokenParams,
        skipUserInfo: this.skipUserInfo
      });
    }
  }], [{
    key: "fromStorageString",
    value: function fromStorageString(storageString) {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("SigninState.fromStorageString");
      var data = JSON.parse(storageString);
      return new SigninState(data);
    }
  }]);

  return SigninState;
}(_State_js__WEBPACK_IMPORTED_MODULE_1__["State"]);

/***/ }),

/***/ "./src/SignoutRequest.js":
/*!*******************************!*\
  !*** ./src/SignoutRequest.js ***!
  \*******************************/
/*! exports provided: SignoutRequest */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SignoutRequest", function() { return SignoutRequest; });
/* harmony import */ var _Log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Log.js */ "./src/Log.js");
/* harmony import */ var _UrlUtility_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UrlUtility.js */ "./src/UrlUtility.js");
/* harmony import */ var _State_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./State.js */ "./src/State.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.



var SignoutRequest = function SignoutRequest(_ref) {
  var url = _ref.url,
      id_token_hint = _ref.id_token_hint,
      post_logout_redirect_uri = _ref.post_logout_redirect_uri,
      data = _ref.data,
      extraQueryParams = _ref.extraQueryParams,
      request_type = _ref.request_type;

  _classCallCheck(this, SignoutRequest);

  if (!url) {
    _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("SignoutRequest.ctor: No url passed");
    throw new Error("url");
  }

  if (id_token_hint) {
    url = _UrlUtility_js__WEBPACK_IMPORTED_MODULE_1__["UrlUtility"].addQueryParam(url, "id_token_hint", id_token_hint);
  }

  if (post_logout_redirect_uri) {
    url = _UrlUtility_js__WEBPACK_IMPORTED_MODULE_1__["UrlUtility"].addQueryParam(url, "post_logout_redirect_uri", post_logout_redirect_uri);

    if (data) {
      this.state = new _State_js__WEBPACK_IMPORTED_MODULE_2__["State"]({
        data: data,
        request_type: request_type
      });
      url = _UrlUtility_js__WEBPACK_IMPORTED_MODULE_1__["UrlUtility"].addQueryParam(url, "state", this.state.id);
    }
  }

  for (var key in extraQueryParams) {
    url = _UrlUtility_js__WEBPACK_IMPORTED_MODULE_1__["UrlUtility"].addQueryParam(url, key, extraQueryParams[key]);
  }

  this.url = url;
};

/***/ }),

/***/ "./src/SignoutResponse.js":
/*!********************************!*\
  !*** ./src/SignoutResponse.js ***!
  \********************************/
/*! exports provided: SignoutResponse */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SignoutResponse", function() { return SignoutResponse; });
/* harmony import */ var _UrlUtility_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UrlUtility.js */ "./src/UrlUtility.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var SignoutResponse = function SignoutResponse(url) {
  _classCallCheck(this, SignoutResponse);

  var values = _UrlUtility_js__WEBPACK_IMPORTED_MODULE_0__["UrlUtility"].parseUrlFragment(url, "?");
  this.error = values.error;
  this.error_description = values.error_description;
  this.error_uri = values.error_uri;
  this.state = values.state;
};

/***/ }),

/***/ "./src/SilentRenewService.js":
/*!***********************************!*\
  !*** ./src/SilentRenewService.js ***!
  \***********************************/
/*! exports provided: SilentRenewService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SilentRenewService", function() { return SilentRenewService; });
/* harmony import */ var _Log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Log.js */ "./src/Log.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var SilentRenewService = /*#__PURE__*/function () {
  function SilentRenewService(userManager) {
    _classCallCheck(this, SilentRenewService);

    this._userManager = userManager;
  }

  _createClass(SilentRenewService, [{
    key: "start",
    value: function start() {
      if (!this._callback) {
        this._callback = this._tokenExpiring.bind(this);

        this._userManager.events.addAccessTokenExpiring(this._callback); // this will trigger loading of the user so the expiring events can be initialized


        this._userManager.getUser().then(function (user) {// deliberate nop
        })["catch"](function (err) {
          // catch to suppress errors since we're in a ctor
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("SilentRenewService.start: Error from getUser:", err.message);
        });
      }
    }
  }, {
    key: "stop",
    value: function stop() {
      if (this._callback) {
        this._userManager.events.removeAccessTokenExpiring(this._callback);

        delete this._callback;
      }
    }
  }, {
    key: "_tokenExpiring",
    value: function _tokenExpiring() {
      var _this = this;

      this._userManager.signinSilent().then(function (user) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("SilentRenewService._tokenExpiring: Silent token renewal successful");
      }, function (err) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("SilentRenewService._tokenExpiring: Error from signinSilent:", err.message);

        _this._userManager.events._raiseSilentRenewError(err);
      });
    }
  }]);

  return SilentRenewService;
}();

/***/ }),

/***/ "./src/State.js":
/*!**********************!*\
  !*** ./src/State.js ***!
  \**********************/
/*! exports provided: State */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "State", function() { return State; });
/* harmony import */ var _Log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Log.js */ "./src/Log.js");
/* harmony import */ var _random_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./random.js */ "./src/random.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.


var State = /*#__PURE__*/function () {
  function State() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        id = _ref.id,
        data = _ref.data,
        created = _ref.created,
        request_type = _ref.request_type;

    _classCallCheck(this, State);

    this._id = id || Object(_random_js__WEBPACK_IMPORTED_MODULE_1__["default"])();
    this._data = data;

    if (typeof created === 'number' && created > 0) {
      this._created = created;
    } else {
      this._created = parseInt(Date.now() / 1000);
    }

    this._request_type = request_type;
  }

  _createClass(State, [{
    key: "id",
    get: function get() {
      return this._id;
    }
  }, {
    key: "data",
    get: function get() {
      return this._data;
    }
  }, {
    key: "created",
    get: function get() {
      return this._created;
    }
  }, {
    key: "request_type",
    get: function get() {
      return this._request_type;
    }
  }, {
    key: "toStorageString",
    value: function toStorageString() {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("State.toStorageString");
      return JSON.stringify({
        id: this.id,
        data: this.data,
        created: this.created,
        request_type: this.request_type
      });
    }
  }], [{
    key: "fromStorageString",
    value: function fromStorageString(storageString) {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("State.fromStorageString");
      return new State(JSON.parse(storageString));
    }
  }, {
    key: "clearStaleState",
    value: function clearStaleState(storage, age) {
      var cutoff = Date.now() / 1000 - age;
      return storage.getAllKeys().then(function (keys) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("State.clearStaleState: got keys", keys);
        var promises = [];

        var _loop = function _loop(i) {
          var key = keys[i];
          p = storage.get(key).then(function (item) {
            var remove = false;

            if (item) {
              try {
                var state = State.fromStorageString(item);
                _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("State.clearStaleState: got item from key: ", key, state.created);

                if (state.created <= cutoff) {
                  remove = true;
                }
              } catch (e) {
                _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("State.clearStaleState: Error parsing state for key", key, e.message);
                remove = true;
              }
            } else {
              _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("State.clearStaleState: no item in storage for key: ", key);
              remove = true;
            }

            if (remove) {
              _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("State.clearStaleState: removed item for key: ", key);
              return storage.remove(key);
            }
          });
          promises.push(p);
        };

        for (var i = 0; i < keys.length; i++) {
          var p;

          _loop(i);
        }

        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("State.clearStaleState: waiting on promise count:", promises.length);
        return Promise.all(promises);
      });
    }
  }]);

  return State;
}();

/***/ }),

/***/ "./src/Timer.js":
/*!**********************!*\
  !*** ./src/Timer.js ***!
  \**********************/
/*! exports provided: Timer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Timer", function() { return Timer; });
/* harmony import */ var _Log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Log.js */ "./src/Log.js");
/* harmony import */ var _Global_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Global.js */ "./src/Global.js");
/* harmony import */ var _Event_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Event.js */ "./src/Event.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.



var TimerDuration = 5; // seconds

var Timer = /*#__PURE__*/function (_Event) {
  _inherits(Timer, _Event);

  var _super = _createSuper(Timer);

  function Timer(name) {
    var _this;

    var timer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _Global_js__WEBPACK_IMPORTED_MODULE_1__["Global"].timer;
    var nowFunc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

    _classCallCheck(this, Timer);

    _this = _super.call(this, name);
    _this._timer = timer;

    if (nowFunc) {
      _this._nowFunc = nowFunc;
    } else {
      _this._nowFunc = function () {
        return Date.now() / 1000;
      };
    }

    return _this;
  }

  _createClass(Timer, [{
    key: "now",
    get: function get() {
      return parseInt(this._nowFunc());
    }
  }, {
    key: "init",
    value: function init(duration) {
      if (duration <= 0) {
        duration = 1;
      }

      duration = parseInt(duration);
      var expiration = this.now + duration;

      if (this.expiration === expiration && this._timerHandle) {
        // no need to reinitialize to same expiration, so bail out
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("Timer.init timer " + this._name + " skipping initialization since already initialized for expiration:", this.expiration);
        return;
      }

      this.cancel();
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("Timer.init timer " + this._name + " for duration:", duration);
      this._expiration = expiration; // we're using a fairly short timer and then checking the expiration in the
      // callback to handle scenarios where the browser device sleeps, and then
      // the timers end up getting delayed.

      var timerDuration = TimerDuration;

      if (duration < timerDuration) {
        timerDuration = duration;
      }

      this._timerHandle = this._timer.setInterval(this._callback.bind(this), timerDuration * 1000);
    }
  }, {
    key: "expiration",
    get: function get() {
      return this._expiration;
    }
  }, {
    key: "cancel",
    value: function cancel() {
      if (this._timerHandle) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("Timer.cancel: ", this._name);

        this._timer.clearInterval(this._timerHandle);

        this._timerHandle = null;
      }
    }
  }, {
    key: "_callback",
    value: function _callback() {
      var diff = this._expiration - this.now;
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("Timer.callback; " + this._name + " timer expires in:", diff);

      if (this._expiration <= this.now) {
        this.cancel();

        _get(_getPrototypeOf(Timer.prototype), "raise", this).call(this);
      }
    }
  }]);

  return Timer;
}(_Event_js__WEBPACK_IMPORTED_MODULE_2__["Event"]);

/***/ }),

/***/ "./src/TokenClient.js":
/*!****************************!*\
  !*** ./src/TokenClient.js ***!
  \****************************/
/*! exports provided: TokenClient */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TokenClient", function() { return TokenClient; });
/* harmony import */ var _JsonService_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./JsonService.js */ "./src/JsonService.js");
/* harmony import */ var _MetadataService_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MetadataService.js */ "./src/MetadataService.js");
/* harmony import */ var _Log_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Log.js */ "./src/Log.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.



var TokenClient = /*#__PURE__*/function () {
  function TokenClient(settings) {
    var JsonServiceCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _JsonService_js__WEBPACK_IMPORTED_MODULE_0__["JsonService"];
    var MetadataServiceCtor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _MetadataService_js__WEBPACK_IMPORTED_MODULE_1__["MetadataService"];

    _classCallCheck(this, TokenClient);

    if (!settings) {
      _Log_js__WEBPACK_IMPORTED_MODULE_2__["Log"].error("TokenClient.ctor: No settings passed");
      throw new Error("settings");
    }

    this._settings = settings;
    this._jsonService = new JsonServiceCtor();
    this._metadataService = new MetadataServiceCtor(this._settings);
  }

  _createClass(TokenClient, [{
    key: "exchangeCode",
    value: function exchangeCode() {
      var _this = this;

      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      args = Object.assign({}, args);
      args.grant_type = args.grant_type || "authorization_code";
      args.client_id = args.client_id || this._settings.client_id;
      args.client_secret = args.client_secret || this._settings.client_secret;
      args.redirect_uri = args.redirect_uri || this._settings.redirect_uri;
      var basicAuth = undefined;
      var client_authentication = args._client_authentication || this._settings._client_authentication;
      delete args._client_authentication;

      if (!args.code) {
        _Log_js__WEBPACK_IMPORTED_MODULE_2__["Log"].error("TokenClient.exchangeCode: No code passed");
        return Promise.reject(new Error("A code is required"));
      }

      if (!args.redirect_uri) {
        _Log_js__WEBPACK_IMPORTED_MODULE_2__["Log"].error("TokenClient.exchangeCode: No redirect_uri passed");
        return Promise.reject(new Error("A redirect_uri is required"));
      }

      if (!args.code_verifier) {
        _Log_js__WEBPACK_IMPORTED_MODULE_2__["Log"].error("TokenClient.exchangeCode: No code_verifier passed");
        return Promise.reject(new Error("A code_verifier is required"));
      }

      if (!args.client_id) {
        _Log_js__WEBPACK_IMPORTED_MODULE_2__["Log"].error("TokenClient.exchangeCode: No client_id passed");
        return Promise.reject(new Error("A client_id is required"));
      }

      if (!args.client_secret && client_authentication == "client_secret_basic") {
        _Log_js__WEBPACK_IMPORTED_MODULE_2__["Log"].error("TokenClient.exchangeCode: No client_secret passed");
        return Promise.reject(new Error("A client_secret is required"));
      } // Sending the client credentials using the Basic Auth method


      if (client_authentication == "client_secret_basic") {
        basicAuth = args.client_id + ':' + args.client_secret;
        delete args.client_id;
        delete args.client_secret;
      }

      return this._metadataService.getTokenEndpoint(false).then(function (url) {
        _Log_js__WEBPACK_IMPORTED_MODULE_2__["Log"].debug("TokenClient.exchangeCode: Received token endpoint");
        return _this._jsonService.postForm(url, args, basicAuth).then(function (response) {
          _Log_js__WEBPACK_IMPORTED_MODULE_2__["Log"].debug("TokenClient.exchangeCode: response received");
          return response;
        });
      });
    }
  }, {
    key: "exchangeRefreshToken",
    value: function exchangeRefreshToken() {
      var _this2 = this;

      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      args = Object.assign({}, args);
      args.grant_type = args.grant_type || "refresh_token";
      args.client_id = args.client_id || this._settings.client_id;
      args.client_secret = args.client_secret || this._settings.client_secret;
      var basicAuth = undefined;
      var client_authentication = args._client_authentication || this._settings._client_authentication;
      delete args._client_authentication;

      if (!args.refresh_token) {
        _Log_js__WEBPACK_IMPORTED_MODULE_2__["Log"].error("TokenClient.exchangeRefreshToken: No refresh_token passed");
        return Promise.reject(new Error("A refresh_token is required"));
      }

      if (!args.client_id) {
        _Log_js__WEBPACK_IMPORTED_MODULE_2__["Log"].error("TokenClient.exchangeRefreshToken: No client_id passed");
        return Promise.reject(new Error("A client_id is required"));
      } // Sending the client credentials using the Basic Auth method


      if (client_authentication == "client_secret_basic") {
        basicAuth = args.client_id + ':' + args.client_secret;
        delete args.client_id;
        delete args.client_secret;
      }

      return this._metadataService.getTokenEndpoint(false).then(function (url) {
        _Log_js__WEBPACK_IMPORTED_MODULE_2__["Log"].debug("TokenClient.exchangeRefreshToken: Received token endpoint");
        return _this2._jsonService.postForm(url, args, basicAuth).then(function (response) {
          _Log_js__WEBPACK_IMPORTED_MODULE_2__["Log"].debug("TokenClient.exchangeRefreshToken: response received");
          return response;
        });
      });
    }
  }]);

  return TokenClient;
}();

/***/ }),

/***/ "./src/TokenRevocationClient.js":
/*!**************************************!*\
  !*** ./src/TokenRevocationClient.js ***!
  \**************************************/
/*! exports provided: TokenRevocationClient */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TokenRevocationClient", function() { return TokenRevocationClient; });
/* harmony import */ var _Log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Log.js */ "./src/Log.js");
/* harmony import */ var _MetadataService_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MetadataService.js */ "./src/MetadataService.js");
/* harmony import */ var _Global_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Global.js */ "./src/Global.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.



var AccessTokenTypeHint = "access_token";
var RefreshTokenTypeHint = "refresh_token";
var TokenRevocationClient = /*#__PURE__*/function () {
  function TokenRevocationClient(settings) {
    var XMLHttpRequestCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _Global_js__WEBPACK_IMPORTED_MODULE_2__["Global"].XMLHttpRequest;
    var MetadataServiceCtor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _MetadataService_js__WEBPACK_IMPORTED_MODULE_1__["MetadataService"];

    _classCallCheck(this, TokenRevocationClient);

    if (!settings) {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("TokenRevocationClient.ctor: No settings provided");
      throw new Error("No settings provided.");
    }

    this._settings = settings;
    this._XMLHttpRequestCtor = XMLHttpRequestCtor;
    this._metadataService = new MetadataServiceCtor(this._settings);
  }

  _createClass(TokenRevocationClient, [{
    key: "revoke",
    value: function revoke(token, required) {
      var _this = this;

      var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "access_token";

      if (!token) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("TokenRevocationClient.revoke: No token provided");
        throw new Error("No token provided.");
      }

      if (type !== AccessTokenTypeHint && type != RefreshTokenTypeHint) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("TokenRevocationClient.revoke: Invalid token type");
        throw new Error("Invalid token type.");
      }

      return this._metadataService.getRevocationEndpoint().then(function (url) {
        if (!url) {
          if (required) {
            _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("TokenRevocationClient.revoke: Revocation not supported");
            throw new Error("Revocation not supported");
          } // not required, so don't error and just return


          return;
        }

        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("TokenRevocationClient.revoke: Revoking " + type);
        var client_id = _this._settings.client_id;
        var client_secret = _this._settings.client_secret;
        return _this._revoke(url, client_id, client_secret, token, type);
      });
    }
  }, {
    key: "_revoke",
    value: function _revoke(url, client_id, client_secret, token, type) {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        var xhr = new _this2._XMLHttpRequestCtor();
        xhr.open("POST", url);

        xhr.onload = function () {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("TokenRevocationClient.revoke: HTTP response received, status", xhr.status);

          if (xhr.status === 200) {
            resolve();
          } else {
            reject(Error(xhr.statusText + " (" + xhr.status + ")"));
          }
        };

        xhr.onerror = function () {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("TokenRevocationClient.revoke: Network Error.");
          reject("Network Error");
        };

        var body = "client_id=" + encodeURIComponent(client_id);

        if (client_secret) {
          body += "&client_secret=" + encodeURIComponent(client_secret);
        }

        body += "&token_type_hint=" + encodeURIComponent(type);
        body += "&token=" + encodeURIComponent(token);
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        xhr.send(body);
      });
    }
  }]);

  return TokenRevocationClient;
}();

/***/ }),

/***/ "./src/UrlUtility.js":
/*!***************************!*\
  !*** ./src/UrlUtility.js ***!
  \***************************/
/*! exports provided: UrlUtility */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UrlUtility", function() { return UrlUtility; });
/* harmony import */ var _Log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Log.js */ "./src/Log.js");
/* harmony import */ var _Global_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Global.js */ "./src/Global.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.


var UrlUtility = /*#__PURE__*/function () {
  function UrlUtility() {
    _classCallCheck(this, UrlUtility);
  }

  _createClass(UrlUtility, null, [{
    key: "addQueryParam",
    value: function addQueryParam(url, name, value) {
      if (url.indexOf('?') < 0) {
        url += "?";
      }

      if (url[url.length - 1] !== "?") {
        url += "&";
      }

      url += encodeURIComponent(name);
      url += "=";
      url += encodeURIComponent(value);
      return url;
    }
  }, {
    key: "parseUrlFragment",
    value: function parseUrlFragment(value) {
      var delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "#";
      var global = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _Global_js__WEBPACK_IMPORTED_MODULE_1__["Global"];

      if (typeof value !== 'string') {
        value = global.location.href;
      }

      var idx = value.lastIndexOf(delimiter);

      if (idx >= 0) {
        value = value.substr(idx + 1);
      }

      if (delimiter === "?") {
        // if we're doing query, then strip off hash fragment before we parse
        idx = value.indexOf('#');

        if (idx >= 0) {
          value = value.substr(0, idx);
        }
      }

      var params = {},
          regex = /([^&=]+)=([^&]*)/g,
          m;
      var counter = 0;

      while (m = regex.exec(value)) {
        params[decodeURIComponent(m[1])] = decodeURIComponent(m[2].replace(/\+/g, ' '));

        if (counter++ > 50) {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("UrlUtility.parseUrlFragment: response exceeded expected number of parameters", value);
          return {
            error: "Response exceeded expected number of parameters"
          };
        }
      }

      for (var prop in params) {
        return params;
      }

      return {};
    }
  }]);

  return UrlUtility;
}();

/***/ }),

/***/ "./src/User.js":
/*!*********************!*\
  !*** ./src/User.js ***!
  \*********************/
/*! exports provided: User */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "User", function() { return User; });
/* harmony import */ var _Log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Log.js */ "./src/Log.js");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var User = /*#__PURE__*/function () {
  function User(_ref) {
    var id_token = _ref.id_token,
        session_state = _ref.session_state,
        access_token = _ref.access_token,
        refresh_token = _ref.refresh_token,
        token_type = _ref.token_type,
        scope = _ref.scope,
        profile = _ref.profile,
        expires_at = _ref.expires_at,
        state = _ref.state,
        otherValues = _objectWithoutProperties(_ref, ["id_token", "session_state", "access_token", "refresh_token", "token_type", "scope", "profile", "expires_at", "state"]);

    _classCallCheck(this, User);

    this.id_token = id_token;
    this.session_state = session_state;
    this.access_token = access_token;
    this.refresh_token = refresh_token;
    this.token_type = token_type;
    this.scope = scope;
    this.profile = profile;
    this.expires_at = expires_at;
    this.state = state;
    this.otherValues = otherValues;
  }

  _createClass(User, [{
    key: "expires_in",
    get: function get() {
      if (this.expires_at) {
        var now = parseInt(Date.now() / 1000);
        return this.expires_at - now;
      }

      return undefined;
    },
    set: function set(value) {
      var expires_in = parseInt(value);

      if (typeof expires_in === 'number' && expires_in > 0) {
        var now = parseInt(Date.now() / 1000);
        this.expires_at = now + expires_in;
      }
    }
  }, {
    key: "expired",
    get: function get() {
      var expires_in = this.expires_in;

      if (expires_in !== undefined) {
        return expires_in <= 0;
      }

      return undefined;
    }
  }, {
    key: "scopes",
    get: function get() {
      return (this.scope || "").split(" ");
    }
  }, {
    key: "toStorageString",
    value: function toStorageString() {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("User.toStorageString");
      return JSON.stringify(_objectSpread({
        id_token: this.id_token,
        session_state: this.session_state,
        access_token: this.access_token,
        refresh_token: this.refresh_token,
        token_type: this.token_type,
        scope: this.scope,
        profile: this.profile,
        expires_at: this.expires_at
      }, this.otherClaims));
    }
  }], [{
    key: "fromStorageString",
    value: function fromStorageString(storageString) {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("User.fromStorageString");
      return new User(JSON.parse(storageString));
    }
  }]);

  return User;
}();

/***/ }),

/***/ "./src/UserInfoService.js":
/*!********************************!*\
  !*** ./src/UserInfoService.js ***!
  \********************************/
/*! exports provided: UserInfoService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UserInfoService", function() { return UserInfoService; });
/* harmony import */ var _JsonService_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./JsonService.js */ "./src/JsonService.js");
/* harmony import */ var _MetadataService_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MetadataService.js */ "./src/MetadataService.js");
/* harmony import */ var _Log_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Log.js */ "./src/Log.js");
/* harmony import */ var _JoseUtil_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./JoseUtil.js */ "./src/JoseUtil.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.




var UserInfoService = /*#__PURE__*/function () {
  function UserInfoService(settings) {
    var JsonServiceCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _JsonService_js__WEBPACK_IMPORTED_MODULE_0__["JsonService"];
    var MetadataServiceCtor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _MetadataService_js__WEBPACK_IMPORTED_MODULE_1__["MetadataService"];
    var joseUtil = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _JoseUtil_js__WEBPACK_IMPORTED_MODULE_3__["JoseUtil"];

    _classCallCheck(this, UserInfoService);

    if (!settings) {
      _Log_js__WEBPACK_IMPORTED_MODULE_2__["Log"].error("UserInfoService.ctor: No settings passed");
      throw new Error("settings");
    }

    this._settings = settings;
    this._jsonService = new JsonServiceCtor(undefined, undefined, this._getClaimsFromJwt.bind(this));
    this._metadataService = new MetadataServiceCtor(this._settings);
    this._joseUtil = joseUtil;
  }

  _createClass(UserInfoService, [{
    key: "getClaims",
    value: function getClaims(token) {
      var _this = this;

      if (!token) {
        _Log_js__WEBPACK_IMPORTED_MODULE_2__["Log"].error("UserInfoService.getClaims: No token passed");
        return Promise.reject(new Error("A token is required"));
      }

      return this._metadataService.getUserInfoEndpoint().then(function (url) {
        _Log_js__WEBPACK_IMPORTED_MODULE_2__["Log"].debug("UserInfoService.getClaims: received userinfo url", url);
        return _this._jsonService.getJson(url, token).then(function (claims) {
          _Log_js__WEBPACK_IMPORTED_MODULE_2__["Log"].debug("UserInfoService.getClaims: claims received", claims);
          return claims;
        });
      });
    }
  }, {
    key: "_getClaimsFromJwt",
    value: function _getClaimsFromJwt(req) {
      var _this2 = this;

      try {
        var jwt = this._joseUtil.parseJwt(req.responseText);

        if (!jwt || !jwt.header || !jwt.payload) {
          _Log_js__WEBPACK_IMPORTED_MODULE_2__["Log"].error("UserInfoService._getClaimsFromJwt: Failed to parse JWT", jwt);
          return Promise.reject(new Error("Failed to parse id_token"));
        }

        var kid = jwt.header.kid;
        var issuerPromise;

        switch (this._settings.userInfoJwtIssuer) {
          case 'OP':
            issuerPromise = this._metadataService.getIssuer();
            break;

          case 'ANY':
            issuerPromise = Promise.resolve(jwt.payload.iss);
            break;

          default:
            issuerPromise = Promise.resolve(this._settings.userInfoJwtIssuer);
            break;
        }

        return issuerPromise.then(function (issuer) {
          _Log_js__WEBPACK_IMPORTED_MODULE_2__["Log"].debug("UserInfoService._getClaimsFromJwt: Received issuer:" + issuer);
          return _this2._metadataService.getSigningKeys().then(function (keys) {
            if (!keys) {
              _Log_js__WEBPACK_IMPORTED_MODULE_2__["Log"].error("UserInfoService._getClaimsFromJwt: No signing keys from metadata");
              return Promise.reject(new Error("No signing keys from metadata"));
            }

            _Log_js__WEBPACK_IMPORTED_MODULE_2__["Log"].debug("UserInfoService._getClaimsFromJwt: Received signing keys");
            var key;

            if (!kid) {
              keys = _this2._filterByAlg(keys, jwt.header.alg);

              if (keys.length > 1) {
                _Log_js__WEBPACK_IMPORTED_MODULE_2__["Log"].error("UserInfoService._getClaimsFromJwt: No kid found in id_token and more than one key found in metadata");
                return Promise.reject(new Error("No kid found in id_token and more than one key found in metadata"));
              } else {
                // kid is mandatory only when there are multiple keys in the referenced JWK Set document
                // see http://openid.net/specs/openid-connect-core-1_0.html#Signing
                key = keys[0];
              }
            } else {
              key = keys.filter(function (key) {
                return key.kid === kid;
              })[0];
            }

            if (!key) {
              _Log_js__WEBPACK_IMPORTED_MODULE_2__["Log"].error("UserInfoService._getClaimsFromJwt: No key matching kid or alg found in signing keys");
              return Promise.reject(new Error("No key matching kid or alg found in signing keys"));
            }

            var audience = _this2._settings.client_id;
            var clockSkewInSeconds = _this2._settings.clockSkew;
            _Log_js__WEBPACK_IMPORTED_MODULE_2__["Log"].debug("UserInfoService._getClaimsFromJwt: Validaing JWT; using clock skew (in seconds) of: ", clockSkewInSeconds);
            return _this2._joseUtil.validateJwt(req.responseText, key, issuer, audience, clockSkewInSeconds, undefined, true).then(function () {
              _Log_js__WEBPACK_IMPORTED_MODULE_2__["Log"].debug("UserInfoService._getClaimsFromJwt: JWT validation successful");
              return jwt.payload;
            });
          });
        });
        return;
      } catch (e) {
        _Log_js__WEBPACK_IMPORTED_MODULE_2__["Log"].error("UserInfoService._getClaimsFromJwt: Error parsing JWT response", e.message);
        reject(e);
        return;
      }
    }
  }, {
    key: "_filterByAlg",
    value: function _filterByAlg(keys, alg) {
      var kty = null;

      if (alg.startsWith("RS")) {
        kty = "RSA";
      } else if (alg.startsWith("PS")) {
        kty = "PS";
      } else if (alg.startsWith("ES")) {
        kty = "EC";
      } else {
        _Log_js__WEBPACK_IMPORTED_MODULE_2__["Log"].debug("UserInfoService._filterByAlg: alg not supported: ", alg);
        return [];
      }

      _Log_js__WEBPACK_IMPORTED_MODULE_2__["Log"].debug("UserInfoService._filterByAlg: Looking for keys that match kty: ", kty);
      keys = keys.filter(function (key) {
        return key.kty === kty;
      });
      _Log_js__WEBPACK_IMPORTED_MODULE_2__["Log"].debug("UserInfoService._filterByAlg: Number of keys that match kty: ", kty, keys.length);
      return keys;
    }
  }]);

  return UserInfoService;
}();

/***/ }),

/***/ "./src/UserManager.js":
/*!****************************!*\
  !*** ./src/UserManager.js ***!
  \****************************/
/*! exports provided: UserManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UserManager", function() { return UserManager; });
/* harmony import */ var _Log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Log.js */ "./src/Log.js");
/* harmony import */ var _OidcClient_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./OidcClient.js */ "./src/OidcClient.js");
/* harmony import */ var _UserManagerSettings_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./UserManagerSettings.js */ "./src/UserManagerSettings.js");
/* harmony import */ var _User_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./User.js */ "./src/User.js");
/* harmony import */ var _UserManagerEvents_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./UserManagerEvents.js */ "./src/UserManagerEvents.js");
/* harmony import */ var _SilentRenewService_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./SilentRenewService.js */ "./src/SilentRenewService.js");
/* harmony import */ var _SessionMonitor_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./SessionMonitor.js */ "./src/SessionMonitor.js");
/* harmony import */ var _SigninRequest__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./SigninRequest */ "./src/SigninRequest.js");
/* harmony import */ var _TokenRevocationClient_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./TokenRevocationClient.js */ "./src/TokenRevocationClient.js");
/* harmony import */ var _TokenClient_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./TokenClient.js */ "./src/TokenClient.js");
/* harmony import */ var _JoseUtil_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./JoseUtil.js */ "./src/JoseUtil.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.











var UserManager = /*#__PURE__*/function (_OidcClient) {
  _inherits(UserManager, _OidcClient);

  var _super = _createSuper(UserManager);

  function UserManager() {
    var _this;

    var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var SilentRenewServiceCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _SilentRenewService_js__WEBPACK_IMPORTED_MODULE_5__["SilentRenewService"];
    var SessionMonitorCtor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _SessionMonitor_js__WEBPACK_IMPORTED_MODULE_6__["SessionMonitor"];
    var TokenRevocationClientCtor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _TokenRevocationClient_js__WEBPACK_IMPORTED_MODULE_8__["TokenRevocationClient"];
    var TokenClientCtor = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : _TokenClient_js__WEBPACK_IMPORTED_MODULE_9__["TokenClient"];
    var joseUtil = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : _JoseUtil_js__WEBPACK_IMPORTED_MODULE_10__["JoseUtil"];

    _classCallCheck(this, UserManager);

    if (!(settings instanceof _UserManagerSettings_js__WEBPACK_IMPORTED_MODULE_2__["UserManagerSettings"])) {
      settings = new _UserManagerSettings_js__WEBPACK_IMPORTED_MODULE_2__["UserManagerSettings"](settings);
    }

    _this = _super.call(this, settings);
    _this._events = new _UserManagerEvents_js__WEBPACK_IMPORTED_MODULE_4__["UserManagerEvents"](settings);
    _this._silentRenewService = new SilentRenewServiceCtor(_assertThisInitialized(_this)); // order is important for the following properties; these services depend upon the events.

    if (_this.settings.automaticSilentRenew) {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("UserManager.ctor: automaticSilentRenew is configured, setting up silent renew");

      _this.startSilentRenew();
    }

    if (_this.settings.monitorSession) {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("UserManager.ctor: monitorSession is configured, setting up session monitor");
      _this._sessionMonitor = new SessionMonitorCtor(_assertThisInitialized(_this));
    }

    _this._tokenRevocationClient = new TokenRevocationClientCtor(_this._settings);
    _this._tokenClient = new TokenClientCtor(_this._settings);
    _this._joseUtil = joseUtil;
    return _this;
  }

  _createClass(UserManager, [{
    key: "_redirectNavigator",
    get: function get() {
      return this.settings.redirectNavigator;
    }
  }, {
    key: "_popupNavigator",
    get: function get() {
      return this.settings.popupNavigator;
    }
  }, {
    key: "_iframeNavigator",
    get: function get() {
      return this.settings.iframeNavigator;
    }
  }, {
    key: "_userStore",
    get: function get() {
      return this.settings.userStore;
    }
  }, {
    key: "events",
    get: function get() {
      return this._events;
    }
  }, {
    key: "getUser",
    value: function getUser() {
      var _this2 = this;

      return this._loadUser().then(function (user) {
        if (user) {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].info("UserManager.getUser: user loaded");

          _this2._events.load(user, false);

          return user;
        } else {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].info("UserManager.getUser: user not found in storage");
          return null;
        }
      });
    }
  }, {
    key: "removeUser",
    value: function removeUser() {
      var _this3 = this;

      return this.storeUser(null).then(function () {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].info("UserManager.removeUser: user removed from storage");

        _this3._events.unload();
      });
    }
  }, {
    key: "signinRedirect",
    value: function signinRedirect() {
      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      args = Object.assign({}, args);
      args.request_type = "si:r";
      var navParams = {
        useReplaceToNavigate: args.useReplaceToNavigate
      };
      return this._signinStart(args, this._redirectNavigator, navParams).then(function () {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].info("UserManager.signinRedirect: successful");
      });
    }
  }, {
    key: "signinRedirectCallback",
    value: function signinRedirectCallback(url) {
      return this._signinEnd(url || this._redirectNavigator.url).then(function (user) {
        if (user.profile && user.profile.sub) {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].info("UserManager.signinRedirectCallback: successful, signed in sub: ", user.profile.sub);
        } else {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].info("UserManager.signinRedirectCallback: no sub");
        }

        return user;
      });
    }
  }, {
    key: "signinPopup",
    value: function signinPopup() {
      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      args = Object.assign({}, args);
      args.request_type = "si:p";
      var url = args.redirect_uri || this.settings.popup_redirect_uri || this.settings.redirect_uri;

      if (!url) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("UserManager.signinPopup: No popup_redirect_uri or redirect_uri configured");
        return Promise.reject(new Error("No popup_redirect_uri or redirect_uri configured"));
      }

      args.redirect_uri = url;
      args.display = "popup";
      return this._signin(args, this._popupNavigator, {
        startUrl: url,
        popupWindowFeatures: args.popupWindowFeatures || this.settings.popupWindowFeatures,
        popupWindowTarget: args.popupWindowTarget || this.settings.popupWindowTarget
      }).then(function (user) {
        if (user) {
          if (user.profile && user.profile.sub) {
            _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].info("UserManager.signinPopup: signinPopup successful, signed in sub: ", user.profile.sub);
          } else {
            _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].info("UserManager.signinPopup: no sub");
          }
        }

        return user;
      });
    }
  }, {
    key: "signinPopupCallback",
    value: function signinPopupCallback(url) {
      return this._signinCallback(url, this._popupNavigator).then(function (user) {
        if (user) {
          if (user.profile && user.profile.sub) {
            _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].info("UserManager.signinPopupCallback: successful, signed in sub: ", user.profile.sub);
          } else {
            _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].info("UserManager.signinPopupCallback: no sub");
          }
        }

        return user;
      })["catch"](function (err) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error( true && err.message);
      });
    }
  }, {
    key: "signinSilent",
    value: function signinSilent() {
      var _this4 = this;

      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      args = Object.assign({}, args); // first determine if we have a refresh token, or need to use iframe

      return this._loadUser().then(function (user) {
        if (user && user.refresh_token) {
          args.refresh_token = user.refresh_token;
          return _this4._useRefreshToken(args);
        } else {
          args.request_type = "si:s";
          args.id_token_hint = args.id_token_hint || _this4.settings.includeIdTokenInSilentRenew && user && user.id_token;

          if (user && _this4._settings.validateSubOnSilentRenew) {
            _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("UserManager.signinSilent, subject prior to silent renew: ", user.profile.sub);
            args.current_sub = user.profile.sub;
          }

          return _this4._signinSilentIframe(args);
        }
      });
    }
  }, {
    key: "_useRefreshToken",
    value: function _useRefreshToken() {
      var _this5 = this;

      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this._tokenClient.exchangeRefreshToken(args).then(function (result) {
        if (!result) {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("UserManager._useRefreshToken: No response returned from token endpoint");
          return Promise.reject("No response returned from token endpoint");
        }

        if (!result.access_token) {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("UserManager._useRefreshToken: No access token returned from token endpoint");
          return Promise.reject("No access token returned from token endpoint");
        }

        return _this5._loadUser().then(function (user) {
          if (user) {
            var idTokenValidation = Promise.resolve();

            if (result.id_token) {
              idTokenValidation = _this5._validateIdTokenFromTokenRefreshToken(user.profile, result.id_token);
            }

            return idTokenValidation.then(function () {
              _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("UserManager._useRefreshToken: refresh token response success");
              user.id_token = result.id_token || user.id_token;
              user.access_token = result.access_token;
              user.refresh_token = result.refresh_token || user.refresh_token;
              user.expires_in = result.expires_in;
              return _this5.storeUser(user).then(function () {
                _this5._events.load(user);

                return user;
              });
            });
          } else {
            return null;
          }
        });
      });
    }
  }, {
    key: "_validateIdTokenFromTokenRefreshToken",
    value: function _validateIdTokenFromTokenRefreshToken(profile, id_token) {
      var _this6 = this;

      return this._metadataService.getIssuer().then(function (issuer) {
        return _this6.settings.getEpochTime().then(function (now) {
          return _this6._joseUtil.validateJwtAttributes(id_token, issuer, _this6._settings.client_id, _this6._settings.clockSkew, now).then(function (payload) {
            if (!payload) {
              _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("UserManager._validateIdTokenFromTokenRefreshToken: Failed to validate id_token");
              return Promise.reject(new Error("Failed to validate id_token"));
            }

            if (payload.sub !== profile.sub) {
              _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("UserManager._validateIdTokenFromTokenRefreshToken: sub in id_token does not match current sub");
              return Promise.reject(new Error("sub in id_token does not match current sub"));
            }

            if (payload.auth_time && payload.auth_time !== profile.auth_time) {
              _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("UserManager._validateIdTokenFromTokenRefreshToken: auth_time in id_token does not match original auth_time");
              return Promise.reject(new Error("auth_time in id_token does not match original auth_time"));
            }

            if (payload.azp && payload.azp !== profile.azp) {
              _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("UserManager._validateIdTokenFromTokenRefreshToken: azp in id_token does not match original azp");
              return Promise.reject(new Error("azp in id_token does not match original azp"));
            }

            if (!payload.azp && profile.azp) {
              _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("UserManager._validateIdTokenFromTokenRefreshToken: azp not in id_token, but present in original id_token");
              return Promise.reject(new Error("azp not in id_token, but present in original id_token"));
            }
          });
        });
      });
    }
  }, {
    key: "_signinSilentIframe",
    value: function _signinSilentIframe() {
      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var url = args.redirect_uri || this.settings.silent_redirect_uri || this.settings.redirect_uri;

      if (!url) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("UserManager.signinSilent: No silent_redirect_uri configured");
        return Promise.reject(new Error("No silent_redirect_uri configured"));
      }

      args.redirect_uri = url;
      args.prompt = args.prompt || "none";
      return this._signin(args, this._iframeNavigator, {
        startUrl: url,
        silentRequestTimeout: args.silentRequestTimeout || this.settings.silentRequestTimeout
      }).then(function (user) {
        if (user) {
          if (user.profile && user.profile.sub) {
            _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].info("UserManager.signinSilent: successful, signed in sub: ", user.profile.sub);
          } else {
            _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].info("UserManager.signinSilent: no sub");
          }
        }

        return user;
      });
    }
  }, {
    key: "signinSilentCallback",
    value: function signinSilentCallback(url) {
      return this._signinCallback(url, this._iframeNavigator).then(function (user) {
        if (user) {
          if (user.profile && user.profile.sub) {
            _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].info("UserManager.signinSilentCallback: successful, signed in sub: ", user.profile.sub);
          } else {
            _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].info("UserManager.signinSilentCallback: no sub");
          }
        }

        return user;
      });
    }
  }, {
    key: "signinCallback",
    value: function signinCallback(url) {
      var _this7 = this;

      return this.readSigninResponseState(url).then(function (_ref) {
        var state = _ref.state,
            response = _ref.response;

        if (state.request_type === "si:r") {
          return _this7.signinRedirectCallback(url);
        }

        if (state.request_type === "si:p") {
          return _this7.signinPopupCallback(url);
        }

        if (state.request_type === "si:s") {
          return _this7.signinSilentCallback(url);
        }

        return Promise.reject(new Error("invalid response_type in state"));
      });
    }
  }, {
    key: "signoutCallback",
    value: function signoutCallback(url, keepOpen) {
      var _this8 = this;

      return this.readSignoutResponseState(url).then(function (_ref2) {
        var state = _ref2.state,
            response = _ref2.response;

        if (state) {
          if (state.request_type === "so:r") {
            return _this8.signoutRedirectCallback(url);
          }

          if (state.request_type === "so:p") {
            return _this8.signoutPopupCallback(url, keepOpen);
          }

          return Promise.reject(new Error("invalid response_type in state"));
        }

        return response;
      });
    }
  }, {
    key: "querySessionStatus",
    value: function querySessionStatus() {
      var _this9 = this;

      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      args = Object.assign({}, args);
      args.request_type = "si:s"; // this acts like a signin silent

      var url = args.redirect_uri || this.settings.silent_redirect_uri || this.settings.redirect_uri;

      if (!url) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].error("UserManager.querySessionStatus: No silent_redirect_uri configured");
        return Promise.reject(new Error("No silent_redirect_uri configured"));
      }

      args.redirect_uri = url;
      args.prompt = "none";
      args.response_type = args.response_type || this.settings.query_status_response_type;
      args.scope = args.scope || "openid";
      args.skipUserInfo = true;
      return this._signinStart(args, this._iframeNavigator, {
        startUrl: url,
        silentRequestTimeout: args.silentRequestTimeout || this.settings.silentRequestTimeout
      }).then(function (navResponse) {
        return _this9.processSigninResponse(navResponse.url).then(function (signinResponse) {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("UserManager.querySessionStatus: got signin response");

          if (signinResponse.session_state && signinResponse.profile.sub) {
            _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].info("UserManager.querySessionStatus: querySessionStatus success for sub: ", signinResponse.profile.sub);
            return {
              session_state: signinResponse.session_state,
              sub: signinResponse.profile.sub,
              sid: signinResponse.profile.sid
            };
          } else {
            _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].info("querySessionStatus successful, user not authenticated");
          }
        })["catch"](function (err) {
          if (err.session_state && _this9.settings.monitorAnonymousSession) {
            if (err.message == "login_required" || err.message == "consent_required" || err.message == "interaction_required" || err.message == "account_selection_required") {
              _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].info("UserManager.querySessionStatus: querySessionStatus success for anonymous user");
              return {
                session_state: err.session_state
              };
            }
          }

          throw err;
        });
      });
    }
  }, {
    key: "_signin",
    value: function _signin(args, navigator) {
      var _this10 = this;

      var navigatorParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return this._signinStart(args, navigator, navigatorParams).then(function (navResponse) {
        return _this10._signinEnd(navResponse.url, args);
      });
    }
  }, {
    key: "_signinStart",
    value: function _signinStart(args, navigator) {
      var _this11 = this;

      var navigatorParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return navigator.prepare(navigatorParams).then(function (handle) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("UserManager._signinStart: got navigator window handle");
        return _this11.createSigninRequest(args).then(function (signinRequest) {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("UserManager._signinStart: got signin request");
          navigatorParams.url = signinRequest.url;
          navigatorParams.id = signinRequest.state.id;
          return handle.navigate(navigatorParams);
        })["catch"](function (err) {
          if (handle.close) {
            _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("UserManager._signinStart: Error after preparing navigator, closing navigator window");
            handle.close();
          }

          throw err;
        });
      });
    }
  }, {
    key: "_signinEnd",
    value: function _signinEnd(url) {
      var _this12 = this;

      var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return this.processSigninResponse(url).then(function (signinResponse) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("UserManager._signinEnd: got signin response");
        var user = new _User_js__WEBPACK_IMPORTED_MODULE_3__["User"](signinResponse);

        if (args.current_sub) {
          if (args.current_sub !== user.profile.sub) {
            _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("UserManager._signinEnd: current user does not match user returned from signin. sub from signin: ", user.profile.sub);
            return Promise.reject(new Error("login_required"));
          } else {
            _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("UserManager._signinEnd: current user matches user returned from signin");
          }
        }

        return _this12.storeUser(user).then(function () {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("UserManager._signinEnd: user stored");

          _this12._events.load(user);

          return user;
        });
      });
    }
  }, {
    key: "_signinCallback",
    value: function _signinCallback(url, navigator) {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("UserManager._signinCallback");
      var useQuery = this._settings.response_mode === "query" || !this._settings.response_mode && _SigninRequest__WEBPACK_IMPORTED_MODULE_7__["SigninRequest"].isCode(this._settings.response_type);
      var delimiter = useQuery ? "?" : "#";
      return navigator.callback(url, undefined, delimiter);
    }
  }, {
    key: "signoutRedirect",
    value: function signoutRedirect() {
      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      args = Object.assign({}, args);
      args.request_type = "so:r";
      var postLogoutRedirectUri = args.post_logout_redirect_uri || this.settings.post_logout_redirect_uri;

      if (postLogoutRedirectUri) {
        args.post_logout_redirect_uri = postLogoutRedirectUri;
      }

      var navParams = {
        useReplaceToNavigate: args.useReplaceToNavigate
      };
      return this._signoutStart(args, this._redirectNavigator, navParams).then(function () {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].info("UserManager.signoutRedirect: successful");
      });
    }
  }, {
    key: "signoutRedirectCallback",
    value: function signoutRedirectCallback(url) {
      return this._signoutEnd(url || this._redirectNavigator.url).then(function (response) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].info("UserManager.signoutRedirectCallback: successful");
        return response;
      });
    }
  }, {
    key: "signoutPopup",
    value: function signoutPopup() {
      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      args = Object.assign({}, args);
      args.request_type = "so:p";
      var url = args.post_logout_redirect_uri || this.settings.popup_post_logout_redirect_uri || this.settings.post_logout_redirect_uri;
      args.post_logout_redirect_uri = url;
      args.display = "popup";

      if (args.post_logout_redirect_uri) {
        // we're putting a dummy entry in here because we
        // need a unique id from the state for notification
        // to the parent window, which is necessary if we
        // plan to return back to the client after signout
        // and so we can close the popup after signout
        args.state = args.state || {};
      }

      return this._signout(args, this._popupNavigator, {
        startUrl: url,
        popupWindowFeatures: args.popupWindowFeatures || this.settings.popupWindowFeatures,
        popupWindowTarget: args.popupWindowTarget || this.settings.popupWindowTarget
      }).then(function () {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].info("UserManager.signoutPopup: successful");
      });
    }
  }, {
    key: "signoutPopupCallback",
    value: function signoutPopupCallback(url, keepOpen) {
      if (typeof keepOpen === 'undefined' && typeof url === 'boolean') {
        keepOpen = url;
        url = null;
      }

      var delimiter = '?';
      return this._popupNavigator.callback(url, keepOpen, delimiter).then(function () {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].info("UserManager.signoutPopupCallback: successful");
      });
    }
  }, {
    key: "_signout",
    value: function _signout(args, navigator) {
      var _this13 = this;

      var navigatorParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return this._signoutStart(args, navigator, navigatorParams).then(function (navResponse) {
        return _this13._signoutEnd(navResponse.url);
      });
    }
  }, {
    key: "_signoutStart",
    value: function _signoutStart() {
      var _this14 = this;

      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var navigator = arguments.length > 1 ? arguments[1] : undefined;
      var navigatorParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return navigator.prepare(navigatorParams).then(function (handle) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("UserManager._signoutStart: got navigator window handle");
        return _this14._loadUser().then(function (user) {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("UserManager._signoutStart: loaded current user from storage");
          var revokePromise = _this14._settings.revokeAccessTokenOnSignout ? _this14._revokeInternal(user) : Promise.resolve();
          return revokePromise.then(function () {
            var id_token = args.id_token_hint || user && user.id_token;

            if (id_token) {
              _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("UserManager._signoutStart: Setting id_token into signout request");
              args.id_token_hint = id_token;
            }

            return _this14.removeUser().then(function () {
              _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("UserManager._signoutStart: user removed, creating signout request");
              return _this14.createSignoutRequest(args).then(function (signoutRequest) {
                _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("UserManager._signoutStart: got signout request");
                navigatorParams.url = signoutRequest.url;

                if (signoutRequest.state) {
                  navigatorParams.id = signoutRequest.state.id;
                }

                return handle.navigate(navigatorParams);
              });
            });
          });
        })["catch"](function (err) {
          if (handle.close) {
            _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("UserManager._signoutStart: Error after preparing navigator, closing navigator window");
            handle.close();
          }

          throw err;
        });
      });
    }
  }, {
    key: "_signoutEnd",
    value: function _signoutEnd(url) {
      return this.processSignoutResponse(url).then(function (signoutResponse) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("UserManager._signoutEnd: got signout response");
        return signoutResponse;
      });
    }
  }, {
    key: "revokeAccessToken",
    value: function revokeAccessToken() {
      var _this15 = this;

      return this._loadUser().then(function (user) {
        return _this15._revokeInternal(user, true).then(function (success) {
          if (success) {
            _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("UserManager.revokeAccessToken: removing token properties from user and re-storing");
            user.access_token = null;
            user.refresh_token = null;
            user.expires_at = null;
            user.token_type = null;
            return _this15.storeUser(user).then(function () {
              _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("UserManager.revokeAccessToken: user stored");

              _this15._events.load(user);
            });
          }
        });
      }).then(function () {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].info("UserManager.revokeAccessToken: access token revoked successfully");
      });
    }
  }, {
    key: "_revokeInternal",
    value: function _revokeInternal(user, required) {
      var _this16 = this;

      if (user) {
        var access_token = user.access_token;
        var refresh_token = user.refresh_token;
        return this._revokeAccessTokenInternal(access_token, required).then(function (atSuccess) {
          return _this16._revokeRefreshTokenInternal(refresh_token, required).then(function (rtSuccess) {
            if (!atSuccess && !rtSuccess) {
              _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("UserManager.revokeAccessToken: no need to revoke due to no token(s), or JWT format");
            }

            return atSuccess || rtSuccess;
          });
        });
      }

      return Promise.resolve(false);
    }
  }, {
    key: "_revokeAccessTokenInternal",
    value: function _revokeAccessTokenInternal(access_token, required) {
      // check for JWT vs. reference token
      if (!access_token || access_token.indexOf('.') >= 0) {
        return Promise.resolve(false);
      }

      return this._tokenRevocationClient.revoke(access_token, required).then(function () {
        return true;
      });
    }
  }, {
    key: "_revokeRefreshTokenInternal",
    value: function _revokeRefreshTokenInternal(refresh_token, required) {
      if (!refresh_token) {
        return Promise.resolve(false);
      }

      return this._tokenRevocationClient.revoke(refresh_token, required, "refresh_token").then(function () {
        return true;
      });
    }
  }, {
    key: "startSilentRenew",
    value: function startSilentRenew() {
      this._silentRenewService.start();
    }
  }, {
    key: "stopSilentRenew",
    value: function stopSilentRenew() {
      this._silentRenewService.stop();
    }
  }, {
    key: "_userStoreKey",
    get: function get() {
      return "user:".concat(this.settings.authority, ":").concat(this.settings.client_id);
    }
  }, {
    key: "_loadUser",
    value: function _loadUser() {
      return this._userStore.get(this._userStoreKey).then(function (storageString) {
        if (storageString) {
          _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("UserManager._loadUser: user storageString loaded");
          return _User_js__WEBPACK_IMPORTED_MODULE_3__["User"].fromStorageString(storageString);
        }

        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("UserManager._loadUser: no user storageString");
        return null;
      });
    }
  }, {
    key: "storeUser",
    value: function storeUser(user) {
      if (user) {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("UserManager.storeUser: storing user");
        var storageString = user.toStorageString();
        return this._userStore.set(this._userStoreKey, storageString);
      } else {
        _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("storeUser.storeUser: removing user");
        return this._userStore.remove(this._userStoreKey);
      }
    }
  }]);

  return UserManager;
}(_OidcClient_js__WEBPACK_IMPORTED_MODULE_1__["OidcClient"]);

/***/ }),

/***/ "./src/UserManagerEvents.js":
/*!**********************************!*\
  !*** ./src/UserManagerEvents.js ***!
  \**********************************/
/*! exports provided: UserManagerEvents */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UserManagerEvents", function() { return UserManagerEvents; });
/* harmony import */ var _Log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Log.js */ "./src/Log.js");
/* harmony import */ var _AccessTokenEvents_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AccessTokenEvents.js */ "./src/AccessTokenEvents.js");
/* harmony import */ var _Event_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Event.js */ "./src/Event.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.



var UserManagerEvents = /*#__PURE__*/function (_AccessTokenEvents) {
  _inherits(UserManagerEvents, _AccessTokenEvents);

  var _super = _createSuper(UserManagerEvents);

  function UserManagerEvents(settings) {
    var _this;

    _classCallCheck(this, UserManagerEvents);

    _this = _super.call(this, settings);
    _this._userLoaded = new _Event_js__WEBPACK_IMPORTED_MODULE_2__["Event"]("User loaded");
    _this._userUnloaded = new _Event_js__WEBPACK_IMPORTED_MODULE_2__["Event"]("User unloaded");
    _this._silentRenewError = new _Event_js__WEBPACK_IMPORTED_MODULE_2__["Event"]("Silent renew error");
    _this._userSignedIn = new _Event_js__WEBPACK_IMPORTED_MODULE_2__["Event"]("User signed in");
    _this._userSignedOut = new _Event_js__WEBPACK_IMPORTED_MODULE_2__["Event"]("User signed out");
    _this._userSessionChanged = new _Event_js__WEBPACK_IMPORTED_MODULE_2__["Event"]("User session changed");
    return _this;
  }

  _createClass(UserManagerEvents, [{
    key: "load",
    value: function load(user) {
      var raiseEvent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("UserManagerEvents.load");

      _get(_getPrototypeOf(UserManagerEvents.prototype), "load", this).call(this, user);

      if (raiseEvent) {
        this._userLoaded.raise(user);
      }
    }
  }, {
    key: "unload",
    value: function unload() {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("UserManagerEvents.unload");

      _get(_getPrototypeOf(UserManagerEvents.prototype), "unload", this).call(this);

      this._userUnloaded.raise();
    }
  }, {
    key: "addUserLoaded",
    value: function addUserLoaded(cb) {
      this._userLoaded.addHandler(cb);
    }
  }, {
    key: "removeUserLoaded",
    value: function removeUserLoaded(cb) {
      this._userLoaded.removeHandler(cb);
    }
  }, {
    key: "addUserUnloaded",
    value: function addUserUnloaded(cb) {
      this._userUnloaded.addHandler(cb);
    }
  }, {
    key: "removeUserUnloaded",
    value: function removeUserUnloaded(cb) {
      this._userUnloaded.removeHandler(cb);
    }
  }, {
    key: "addSilentRenewError",
    value: function addSilentRenewError(cb) {
      this._silentRenewError.addHandler(cb);
    }
  }, {
    key: "removeSilentRenewError",
    value: function removeSilentRenewError(cb) {
      this._silentRenewError.removeHandler(cb);
    }
  }, {
    key: "_raiseSilentRenewError",
    value: function _raiseSilentRenewError(e) {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("UserManagerEvents._raiseSilentRenewError", e.message);

      this._silentRenewError.raise(e);
    }
  }, {
    key: "addUserSignedIn",
    value: function addUserSignedIn(cb) {
      this._userSignedIn.addHandler(cb);
    }
  }, {
    key: "removeUserSignedIn",
    value: function removeUserSignedIn(cb) {
      this._userSignedIn.removeHandler(cb);
    }
  }, {
    key: "_raiseUserSignedIn",
    value: function _raiseUserSignedIn() {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("UserManagerEvents._raiseUserSignedIn");

      this._userSignedIn.raise();
    }
  }, {
    key: "addUserSignedOut",
    value: function addUserSignedOut(cb) {
      this._userSignedOut.addHandler(cb);
    }
  }, {
    key: "removeUserSignedOut",
    value: function removeUserSignedOut(cb) {
      this._userSignedOut.removeHandler(cb);
    }
  }, {
    key: "_raiseUserSignedOut",
    value: function _raiseUserSignedOut() {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("UserManagerEvents._raiseUserSignedOut");

      this._userSignedOut.raise();
    }
  }, {
    key: "addUserSessionChanged",
    value: function addUserSessionChanged(cb) {
      this._userSessionChanged.addHandler(cb);
    }
  }, {
    key: "removeUserSessionChanged",
    value: function removeUserSessionChanged(cb) {
      this._userSessionChanged.removeHandler(cb);
    }
  }, {
    key: "_raiseUserSessionChanged",
    value: function _raiseUserSessionChanged() {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("UserManagerEvents._raiseUserSessionChanged");

      this._userSessionChanged.raise();
    }
  }]);

  return UserManagerEvents;
}(_AccessTokenEvents_js__WEBPACK_IMPORTED_MODULE_1__["AccessTokenEvents"]);

/***/ }),

/***/ "./src/UserManagerSettings.js":
/*!************************************!*\
  !*** ./src/UserManagerSettings.js ***!
  \************************************/
/*! exports provided: UserManagerSettings */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UserManagerSettings", function() { return UserManagerSettings; });
/* harmony import */ var _Log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Log.js */ "./src/Log.js");
/* harmony import */ var _OidcClientSettings_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./OidcClientSettings.js */ "./src/OidcClientSettings.js");
/* harmony import */ var _RedirectNavigator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./RedirectNavigator.js */ "./src/RedirectNavigator.js");
/* harmony import */ var _PopupNavigator_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./PopupNavigator.js */ "./src/PopupNavigator.js");
/* harmony import */ var _IFrameNavigator_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./IFrameNavigator.js */ "./src/IFrameNavigator.js");
/* harmony import */ var _WebStorageStateStore_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./WebStorageStateStore.js */ "./src/WebStorageStateStore.js");
/* harmony import */ var _Global_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Global.js */ "./src/Global.js");
/* harmony import */ var _SigninRequest_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./SigninRequest.js */ "./src/SigninRequest.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.








var DefaultAccessTokenExpiringNotificationTime = 60;
var DefaultCheckSessionInterval = 2000;
var UserManagerSettings = /*#__PURE__*/function (_OidcClientSettings) {
  _inherits(UserManagerSettings, _OidcClientSettings);

  var _super = _createSuper(UserManagerSettings);

  function UserManagerSettings() {
    var _this;

    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        popup_redirect_uri = _ref.popup_redirect_uri,
        popup_post_logout_redirect_uri = _ref.popup_post_logout_redirect_uri,
        popupWindowFeatures = _ref.popupWindowFeatures,
        popupWindowTarget = _ref.popupWindowTarget,
        silent_redirect_uri = _ref.silent_redirect_uri,
        silentRequestTimeout = _ref.silentRequestTimeout,
        _ref$automaticSilentR = _ref.automaticSilentRenew,
        automaticSilentRenew = _ref$automaticSilentR === void 0 ? false : _ref$automaticSilentR,
        _ref$validateSubOnSil = _ref.validateSubOnSilentRenew,
        validateSubOnSilentRenew = _ref$validateSubOnSil === void 0 ? false : _ref$validateSubOnSil,
        _ref$includeIdTokenIn = _ref.includeIdTokenInSilentRenew,
        includeIdTokenInSilentRenew = _ref$includeIdTokenIn === void 0 ? true : _ref$includeIdTokenIn,
        _ref$monitorSession = _ref.monitorSession,
        monitorSession = _ref$monitorSession === void 0 ? true : _ref$monitorSession,
        _ref$monitorAnonymous = _ref.monitorAnonymousSession,
        monitorAnonymousSession = _ref$monitorAnonymous === void 0 ? false : _ref$monitorAnonymous,
        _ref$checkSessionInte = _ref.checkSessionInterval,
        checkSessionInterval = _ref$checkSessionInte === void 0 ? DefaultCheckSessionInterval : _ref$checkSessionInte,
        _ref$stopCheckSession = _ref.stopCheckSessionOnError,
        stopCheckSessionOnError = _ref$stopCheckSession === void 0 ? true : _ref$stopCheckSession,
        query_status_response_type = _ref.query_status_response_type,
        _ref$revokeAccessToke = _ref.revokeAccessTokenOnSignout,
        revokeAccessTokenOnSignout = _ref$revokeAccessToke === void 0 ? false : _ref$revokeAccessToke,
        _ref$accessTokenExpir = _ref.accessTokenExpiringNotificationTime,
        accessTokenExpiringNotificationTime = _ref$accessTokenExpir === void 0 ? DefaultAccessTokenExpiringNotificationTime : _ref$accessTokenExpir,
        _ref$redirectNavigato = _ref.redirectNavigator,
        redirectNavigator = _ref$redirectNavigato === void 0 ? new _RedirectNavigator_js__WEBPACK_IMPORTED_MODULE_2__["RedirectNavigator"]() : _ref$redirectNavigato,
        _ref$popupNavigator = _ref.popupNavigator,
        popupNavigator = _ref$popupNavigator === void 0 ? new _PopupNavigator_js__WEBPACK_IMPORTED_MODULE_3__["PopupNavigator"]() : _ref$popupNavigator,
        _ref$iframeNavigator = _ref.iframeNavigator,
        iframeNavigator = _ref$iframeNavigator === void 0 ? new _IFrameNavigator_js__WEBPACK_IMPORTED_MODULE_4__["IFrameNavigator"]() : _ref$iframeNavigator,
        _ref$userStore = _ref.userStore,
        userStore = _ref$userStore === void 0 ? new _WebStorageStateStore_js__WEBPACK_IMPORTED_MODULE_5__["WebStorageStateStore"]({
      store: _Global_js__WEBPACK_IMPORTED_MODULE_6__["Global"].sessionStorage
    }) : _ref$userStore;

    _classCallCheck(this, UserManagerSettings);

    _this = _super.call(this, arguments[0]);
    _this._popup_redirect_uri = popup_redirect_uri;
    _this._popup_post_logout_redirect_uri = popup_post_logout_redirect_uri;
    _this._popupWindowFeatures = popupWindowFeatures;
    _this._popupWindowTarget = popupWindowTarget;
    _this._silent_redirect_uri = silent_redirect_uri;
    _this._silentRequestTimeout = silentRequestTimeout;
    _this._automaticSilentRenew = automaticSilentRenew;
    _this._validateSubOnSilentRenew = validateSubOnSilentRenew;
    _this._includeIdTokenInSilentRenew = includeIdTokenInSilentRenew;
    _this._accessTokenExpiringNotificationTime = accessTokenExpiringNotificationTime;
    _this._monitorSession = monitorSession;
    _this._monitorAnonymousSession = monitorAnonymousSession;
    _this._checkSessionInterval = checkSessionInterval;
    _this._stopCheckSessionOnError = stopCheckSessionOnError;

    if (query_status_response_type) {
      _this._query_status_response_type = query_status_response_type;
    } else if (arguments[0] && arguments[0].response_type) {
      _this._query_status_response_type = _SigninRequest_js__WEBPACK_IMPORTED_MODULE_7__["SigninRequest"].isOidc(arguments[0].response_type) ? "id_token" : "code";
    } else {
      _this._query_status_response_type = "id_token";
    }

    _this._revokeAccessTokenOnSignout = revokeAccessTokenOnSignout;
    _this._redirectNavigator = redirectNavigator;
    _this._popupNavigator = popupNavigator;
    _this._iframeNavigator = iframeNavigator;
    _this._userStore = userStore;
    return _this;
  }

  _createClass(UserManagerSettings, [{
    key: "popup_redirect_uri",
    get: function get() {
      return this._popup_redirect_uri;
    }
  }, {
    key: "popup_post_logout_redirect_uri",
    get: function get() {
      return this._popup_post_logout_redirect_uri;
    }
  }, {
    key: "popupWindowFeatures",
    get: function get() {
      return this._popupWindowFeatures;
    }
  }, {
    key: "popupWindowTarget",
    get: function get() {
      return this._popupWindowTarget;
    }
  }, {
    key: "silent_redirect_uri",
    get: function get() {
      return this._silent_redirect_uri;
    }
  }, {
    key: "silentRequestTimeout",
    get: function get() {
      return this._silentRequestTimeout;
    }
  }, {
    key: "automaticSilentRenew",
    get: function get() {
      return this._automaticSilentRenew;
    }
  }, {
    key: "validateSubOnSilentRenew",
    get: function get() {
      return this._validateSubOnSilentRenew;
    }
  }, {
    key: "includeIdTokenInSilentRenew",
    get: function get() {
      return this._includeIdTokenInSilentRenew;
    }
  }, {
    key: "accessTokenExpiringNotificationTime",
    get: function get() {
      return this._accessTokenExpiringNotificationTime;
    }
  }, {
    key: "monitorSession",
    get: function get() {
      return this._monitorSession;
    }
  }, {
    key: "monitorAnonymousSession",
    get: function get() {
      return this._monitorAnonymousSession;
    }
  }, {
    key: "checkSessionInterval",
    get: function get() {
      return this._checkSessionInterval;
    }
  }, {
    key: "stopCheckSessionOnError",
    get: function get() {
      return this._stopCheckSessionOnError;
    }
  }, {
    key: "query_status_response_type",
    get: function get() {
      return this._query_status_response_type;
    }
  }, {
    key: "revokeAccessTokenOnSignout",
    get: function get() {
      return this._revokeAccessTokenOnSignout;
    }
  }, {
    key: "redirectNavigator",
    get: function get() {
      return this._redirectNavigator;
    }
  }, {
    key: "popupNavigator",
    get: function get() {
      return this._popupNavigator;
    }
  }, {
    key: "iframeNavigator",
    get: function get() {
      return this._iframeNavigator;
    }
  }, {
    key: "userStore",
    get: function get() {
      return this._userStore;
    }
  }]);

  return UserManagerSettings;
}(_OidcClientSettings_js__WEBPACK_IMPORTED_MODULE_1__["OidcClientSettings"]);

/***/ }),

/***/ "./src/WebStorageStateStore.js":
/*!*************************************!*\
  !*** ./src/WebStorageStateStore.js ***!
  \*************************************/
/*! exports provided: WebStorageStateStore */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WebStorageStateStore", function() { return WebStorageStateStore; });
/* harmony import */ var _Log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Log.js */ "./src/Log.js");
/* harmony import */ var _Global_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Global.js */ "./src/Global.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.


var WebStorageStateStore = /*#__PURE__*/function () {
  function WebStorageStateStore() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$prefix = _ref.prefix,
        prefix = _ref$prefix === void 0 ? "oidc." : _ref$prefix,
        _ref$store = _ref.store,
        store = _ref$store === void 0 ? _Global_js__WEBPACK_IMPORTED_MODULE_1__["Global"].localStorage : _ref$store;

    _classCallCheck(this, WebStorageStateStore);

    this._store = store;
    this._prefix = prefix;
  }

  _createClass(WebStorageStateStore, [{
    key: "set",
    value: function set(key, value) {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("WebStorageStateStore.set", key);
      key = this._prefix + key;

      this._store.setItem(key, value);

      return Promise.resolve();
    }
  }, {
    key: "get",
    value: function get(key) {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("WebStorageStateStore.get", key);
      key = this._prefix + key;

      var item = this._store.getItem(key);

      return Promise.resolve(item);
    }
  }, {
    key: "remove",
    value: function remove(key) {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("WebStorageStateStore.remove", key);
      key = this._prefix + key;

      var item = this._store.getItem(key);

      this._store.removeItem(key);

      return Promise.resolve(item);
    }
  }, {
    key: "getAllKeys",
    value: function getAllKeys() {
      _Log_js__WEBPACK_IMPORTED_MODULE_0__["Log"].debug("WebStorageStateStore.getAllKeys");
      var keys = [];

      for (var index = 0; index < this._store.length; index++) {
        var key = this._store.key(index);

        if (key.indexOf(this._prefix) === 0) {
          keys.push(key.substr(this._prefix.length));
        }
      }

      return Promise.resolve(keys);
    }
  }]);

  return WebStorageStateStore;
}();

/***/ }),

/***/ "./src/crypto/jsrsasign.js":
/*!*********************************!*\
  !*** ./src/crypto/jsrsasign.js ***!
  \*********************************/
/*! exports provided: jws, KeyUtil, X509, crypto, hextob64u, b64tohex, AllowedSigningAlgs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AllowedSigningAlgs", function() { return AllowedSigningAlgs; });
/* harmony import */ var _jsrsasign_dist_jsrsasign_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../jsrsasign/dist/jsrsasign.js */ "./jsrsasign/dist/jsrsasign.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "jws", function() { return _jsrsasign_dist_jsrsasign_js__WEBPACK_IMPORTED_MODULE_0__["jws"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "KeyUtil", function() { return _jsrsasign_dist_jsrsasign_js__WEBPACK_IMPORTED_MODULE_0__["KEYUTIL"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "X509", function() { return _jsrsasign_dist_jsrsasign_js__WEBPACK_IMPORTED_MODULE_0__["X509"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "crypto", function() { return _jsrsasign_dist_jsrsasign_js__WEBPACK_IMPORTED_MODULE_0__["crypto"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "hextob64u", function() { return _jsrsasign_dist_jsrsasign_js__WEBPACK_IMPORTED_MODULE_0__["hextob64u"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "b64tohex", function() { return _jsrsasign_dist_jsrsasign_js__WEBPACK_IMPORTED_MODULE_0__["b64tohex"]; });


var AllowedSigningAlgs = ['RS256', 'RS384', 'RS512', 'PS256', 'PS384', 'PS512', 'ES256', 'ES384', 'ES512'];


/***/ }),

/***/ "./src/random.js":
/*!***********************!*\
  !*** ./src/random.js ***!
  \***********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return random; });
/**
 * Generates RFC4122 version 4 guid ()
 */
var crypto = typeof window !== 'undefined' ? window.crypto || window.msCrypto : null;

function _cryptoUuidv4() {
  return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, function (c) {
    return (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16);
  });
}

function _uuidv4() {
  return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, function (c) {
    return (c ^ Math.random() * 16 >> c / 4).toString(16);
  });
}

function random() {
  var hasCrypto = crypto != 'undefined' && crypto !== null;
  var hasRandomValues = hasCrypto && typeof crypto.getRandomValues != 'undefined';
  var uuid = hasRandomValues ? _cryptoUuidv4 : _uuidv4;
  return uuid().replace(/-/g, '');
}

/***/ }),

/***/ "./version.js":
/*!********************!*\
  !*** ./version.js ***!
  \********************/
/*! exports provided: Version */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Version", function() { return Version; });
var Version = "1.11.5";


/***/ })

/******/ });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly8vLi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9qc3JzYXNpZ24vZGlzdC9qc3JzYXNpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FjY2Vzc1Rva2VuRXZlbnRzLmpzIiwid2VicGFjazovLy8uL3NyYy9DaGVja1Nlc3Npb25JRnJhbWUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0Nsb2NrU2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29yZG92YUlGcmFtZU5hdmlnYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29yZG92YVBvcHVwTmF2aWdhdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9Db3Jkb3ZhUG9wdXBXaW5kb3cuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0Vycm9yUmVzcG9uc2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0V2ZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9HbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0lGcmFtZU5hdmlnYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvSUZyYW1lV2luZG93LmpzIiwid2VicGFjazovLy8uL3NyYy9Jbk1lbW9yeVdlYlN0b3JhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0pvc2VVdGlsLmpzIiwid2VicGFjazovLy8uL3NyYy9Kb3NlVXRpbEltcGwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0pzb25TZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9Mb2cuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL01ldGFkYXRhU2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvT2lkY0NsaWVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvT2lkY0NsaWVudFNldHRpbmdzLmpzIiwid2VicGFjazovLy8uL3NyYy9Qb3B1cE5hdmlnYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvUG9wdXBXaW5kb3cuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1JlZGlyZWN0TmF2aWdhdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9SZXNwb25zZVZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvU2Vzc2lvbk1vbml0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1NpZ25pblJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1NpZ25pblJlc3BvbnNlLmpzIiwid2VicGFjazovLy8uL3NyYy9TaWduaW5TdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvU2lnbm91dFJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1NpZ25vdXRSZXNwb25zZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvU2lsZW50UmVuZXdTZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9TdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVGltZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1Rva2VuQ2xpZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9Ub2tlblJldm9jYXRpb25DbGllbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VybFV0aWxpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VzZXJJbmZvU2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVXNlck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VzZXJNYW5hZ2VyRXZlbnRzLmpzIiwid2VicGFjazovLy8uL3NyYy9Vc2VyTWFuYWdlclNldHRpbmdzLmpzIiwid2VicGFjazovLy8uL3NyYy9XZWJTdG9yYWdlU3RhdGVTdG9yZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY3J5cHRvL2pzcnNhc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcmFuZG9tLmpzIiwid2VicGFjazovLy8uL3ZlcnNpb24uanMiXSwibmFtZXMiOlsibmF2aWdhdG9yIiwidXNlckFnZW50Iiwid2luZG93IiwiWUFIT08iLCJ1bmRlZmluZWQiLCJsYW5nIiwiZXh0ZW5kIiwiZyIsImgiLCJmIiwiRXJyb3IiLCJkIiwicHJvdG90eXBlIiwiY29uc3RydWN0b3IiLCJzdXBlcmNsYXNzIiwiT2JqZWN0IiwiYiIsImUiLCJjIiwidGVzdCIsImoiLCJpIiwibGVuZ3RoIiwibCIsImsiLCJhIiwiQ3J5cHRvSlMiLCJsaWIiLCJCYXNlIiwibiIsInAiLCJvIiwibWl4SW4iLCJoYXNPd25Qcm9wZXJ0eSIsImluaXQiLCIkc3VwZXIiLCJhcHBseSIsImFyZ3VtZW50cyIsImNyZWF0ZSIsInRvU3RyaW5nIiwiY2xvbmUiLCJXb3JkQXJyYXkiLCJ3b3JkcyIsInNpZ0J5dGVzIiwic3RyaW5naWZ5IiwiY29uY2F0IiwidCIsInEiLCJzIiwiY2xhbXAiLCJyIiwiY2VpbCIsImNhbGwiLCJzbGljZSIsInJhbmRvbSIsInB1c2giLCJtIiwiZW5jIiwiSGV4Iiwiam9pbiIsInBhcnNlIiwicGFyc2VJbnQiLCJzdWJzdHIiLCJMYXRpbjEiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJjaGFyQ29kZUF0IiwiVXRmOCIsImRlY29kZVVSSUNvbXBvbmVudCIsImVzY2FwZSIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiQnVmZmVyZWRCbG9ja0FsZ29yaXRobSIsInJlc2V0IiwiX2RhdGEiLCJfbkRhdGFCeXRlcyIsIl9hcHBlbmQiLCJfcHJvY2VzcyIsInciLCJ4IiwiYmxvY2tTaXplIiwidiIsInUiLCJtYXgiLCJfbWluQnVmZmVyU2l6ZSIsIm1pbiIsIl9kb1Byb2Nlc3NCbG9jayIsInNwbGljZSIsIkhhc2hlciIsImNmZyIsIl9kb1Jlc2V0IiwidXBkYXRlIiwiZmluYWxpemUiLCJfZG9GaW5hbGl6ZSIsIl9jcmVhdGVIZWxwZXIiLCJfY3JlYXRlSG1hY0hlbHBlciIsIkhNQUMiLCJhbGdvIiwiTWF0aCIsIng2NCIsIldvcmQiLCJoaWdoIiwibG93IiwidG9YMzIiLCJCYXNlNjQiLCJfbWFwIiwiY2hhckF0IiwiaW5kZXhPZiIsInNxcnQiLCJwb3ciLCJTSEEyNTYiLCJfaGFzaCIsImZsb29yIiwiSG1hY1NIQTI1NiIsIlQiLCJlYSIsIlNIQTUxMiIsIkYiLCJHIiwiSCIsIkkiLCJKIiwiWCIsIksiLCJZIiwiTCIsIloiLCJNIiwiJCIsIk4iLCJhYSIsIk8iLCJiYSIsIlAiLCJjYSIsIlEiLCJ6IiwiQSIsInkiLCJVIiwiQiIsIlIiLCJDIiwiUyIsIkQiLCJWIiwiRSIsIlciLCJmYSIsImRhIiwiSG1hY1NIQTUxMiIsIlNIQTM4NCIsIkhtYWNTSEEzODQiLCJiNjRtYXAiLCJiNjRwYWQiLCJoZXgyYjY0Iiwic3Vic3RyaW5nIiwiYjY0dG9oZXgiLCJpbnQyY2hhciIsImI2NHRvQkEiLCJBcnJheSIsImRiaXRzIiwiY2FuYXJ5Iiwial9sbSIsIkJpZ0ludGVnZXIiLCJmcm9tTnVtYmVyIiwiZnJvbVN0cmluZyIsIm5iaSIsImFtMSIsImFtMiIsImFtMyIsImFwcE5hbWUiLCJhbSIsIkRCIiwiRE0iLCJEViIsIkJJX0ZQIiwiRlYiLCJGMSIsIkYyIiwiQklfUk0iLCJCSV9SQyIsInJyIiwidnYiLCJpbnRBdCIsImJucENvcHlUbyIsImJucEZyb21JbnQiLCJuYnYiLCJmcm9tSW50IiwiYm5wRnJvbVN0cmluZyIsImZyb21SYWRpeCIsIlpFUk8iLCJzdWJUbyIsImJucENsYW1wIiwiYm5Ub1N0cmluZyIsIm5lZ2F0ZSIsInRvUmFkaXgiLCJibk5lZ2F0ZSIsImJuQWJzIiwiYm5Db21wYXJlVG8iLCJuYml0cyIsImJuQml0TGVuZ3RoIiwiYm5wRExTaGlmdFRvIiwiYm5wRFJTaGlmdFRvIiwiYm5wTFNoaWZ0VG8iLCJibnBSU2hpZnRUbyIsImJucFN1YlRvIiwiYm5wTXVsdGlwbHlUbyIsImFicyIsImJucFNxdWFyZVRvIiwiYm5wRGl2UmVtVG8iLCJjb3B5VG8iLCJsU2hpZnRUbyIsImRsU2hpZnRUbyIsImNvbXBhcmVUbyIsIk9ORSIsImRyU2hpZnRUbyIsInJTaGlmdFRvIiwiYm5Nb2QiLCJkaXZSZW1UbyIsIkNsYXNzaWMiLCJjQ29udmVydCIsIm1vZCIsImNSZXZlcnQiLCJjUmVkdWNlIiwiY011bFRvIiwibXVsdGlwbHlUbyIsInJlZHVjZSIsImNTcXJUbyIsInNxdWFyZVRvIiwiY29udmVydCIsInJldmVydCIsIm11bFRvIiwic3FyVG8iLCJibnBJbnZEaWdpdCIsIk1vbnRnb21lcnkiLCJtcCIsImludkRpZ2l0IiwibXBsIiwibXBoIiwidW0iLCJtdDIiLCJtb250Q29udmVydCIsIm1vbnRSZXZlcnQiLCJtb250UmVkdWNlIiwibW9udFNxclRvIiwibW9udE11bFRvIiwiYm5wSXNFdmVuIiwiYm5wRXhwIiwiYm5Nb2RQb3dJbnQiLCJpc0V2ZW4iLCJleHAiLCJiaXRMZW5ndGgiLCJtb2RQb3dJbnQiLCJibkNsb25lIiwiYm5JbnRWYWx1ZSIsImJuQnl0ZVZhbHVlIiwiYm5TaG9ydFZhbHVlIiwiYm5wQ2h1bmtTaXplIiwiTE4yIiwibG9nIiwiYm5TaWdOdW0iLCJibnBUb1JhZGl4Iiwic2lnbnVtIiwiY2h1bmtTaXplIiwiaW50VmFsdWUiLCJibnBGcm9tUmFkaXgiLCJkTXVsdGlwbHkiLCJkQWRkT2Zmc2V0IiwiYm5wRnJvbU51bWJlciIsInRlc3RCaXQiLCJiaXR3aXNlVG8iLCJzaGlmdExlZnQiLCJvcF9vciIsImlzUHJvYmFibGVQcmltZSIsIm5leHRCeXRlcyIsImJuVG9CeXRlQXJyYXkiLCJibkVxdWFscyIsImJuTWluIiwiYm5NYXgiLCJibnBCaXR3aXNlVG8iLCJvcF9hbmQiLCJibkFuZCIsImJuT3IiLCJvcF94b3IiLCJiblhvciIsIm9wX2FuZG5vdCIsImJuQW5kTm90IiwiYm5Ob3QiLCJiblNoaWZ0TGVmdCIsImJuU2hpZnRSaWdodCIsImxiaXQiLCJibkdldExvd2VzdFNldEJpdCIsImNiaXQiLCJibkJpdENvdW50IiwiYm5UZXN0Qml0IiwiYm5wQ2hhbmdlQml0IiwiYm5TZXRCaXQiLCJjaGFuZ2VCaXQiLCJibkNsZWFyQml0IiwiYm5GbGlwQml0IiwiYm5wQWRkVG8iLCJibkFkZCIsImFkZFRvIiwiYm5TdWJ0cmFjdCIsImJuTXVsdGlwbHkiLCJiblNxdWFyZSIsImJuRGl2aWRlIiwiYm5SZW1haW5kZXIiLCJibkRpdmlkZUFuZFJlbWFpbmRlciIsImJucERNdWx0aXBseSIsImJucERBZGRPZmZzZXQiLCJOdWxsRXhwIiwibk5vcCIsIm5NdWxUbyIsIm5TcXJUbyIsImJuUG93IiwiYm5wTXVsdGlwbHlMb3dlclRvIiwiYm5wTXVsdGlwbHlVcHBlclRvIiwiQmFycmV0dCIsInIyIiwicTMiLCJtdSIsImRpdmlkZSIsImJhcnJldHRDb252ZXJ0IiwiYmFycmV0dFJldmVydCIsImJhcnJldHRSZWR1Y2UiLCJtdWx0aXBseVVwcGVyVG8iLCJtdWx0aXBseUxvd2VyVG8iLCJiYXJyZXR0U3FyVG8iLCJiYXJyZXR0TXVsVG8iLCJibk1vZFBvdyIsImJuR0NEIiwiZ2V0TG93ZXN0U2V0Qml0IiwiYm5wTW9kSW50IiwiYm5Nb2RJbnZlcnNlIiwic3VidHJhY3QiLCJhZGQiLCJsb3dwcmltZXMiLCJscGxpbSIsImJuSXNQcm9iYWJsZVByaW1lIiwibW9kSW50IiwibWlsbGVyUmFiaW4iLCJibnBNaWxsZXJSYWJpbiIsInNoaWZ0UmlnaHQiLCJtb2RQb3ciLCJieXRlVmFsdWUiLCJzaG9ydFZhbHVlIiwidG9CeXRlQXJyYXkiLCJlcXVhbHMiLCJhbmQiLCJvciIsInhvciIsImFuZE5vdCIsIm5vdCIsImJpdENvdW50Iiwic2V0Qml0IiwiY2xlYXJCaXQiLCJmbGlwQml0IiwibXVsdGlwbHkiLCJyZW1haW5kZXIiLCJkaXZpZGVBbmRSZW1haW5kZXIiLCJtb2RJbnZlcnNlIiwiZ2NkIiwic3F1YXJlIiwiQXJjZm91ciIsIkFSQzRpbml0IiwiQVJDNG5leHQiLCJuZXh0IiwicHJuZ19uZXdzdGF0ZSIsInJuZ19wc2l6ZSIsInJuZ19zdGF0ZSIsInJuZ19wb29sIiwicm5nX3BwdHIiLCJybmdfc2VlZF9pbnQiLCJybmdfc2VlZF90aW1lIiwiRGF0ZSIsImdldFRpbWUiLCJjcnlwdG8iLCJtc0NyeXB0byIsImdldFJhbmRvbVZhbHVlcyIsInVhIiwiVWludDhBcnJheSIsImFwcFZlcnNpb24iLCJybmdfZ2V0X2J5dGUiLCJybmdfZ2V0X2J5dGVzIiwiU2VjdXJlUmFuZG9tIiwicGFyc2VCaWdJbnQiLCJsaW5lYnJrIiwiYnl0ZTJIZXgiLCJwa2NzMXBhZDIiLCJvYWVwX21nZjFfYXJyIiwib2FlcF9wYWQiLCJLSlVSIiwiTWVzc2FnZURpZ2VzdCIsIlV0aWwiLCJnZXRDYW5vbmljYWxBbGdOYW1lIiwiZ2V0SGFzaExlbmd0aCIsImhleHRvcnN0ciIsImhhc2hIZXgiLCJyc3RydG9oZXgiLCJSU0FLZXkiLCJkbXAxIiwiZG1xMSIsImNvZWZmIiwiUlNBU2V0UHVibGljIiwiaXNQdWJsaWMiLCJpc1ByaXZhdGUiLCJSU0FEb1B1YmxpYyIsIlJTQUVuY3J5cHQiLCJkb1B1YmxpYyIsIlJTQUVuY3J5cHRPQUVQIiwic2V0UHVibGljIiwiZW5jcnlwdCIsImVuY3J5cHRPQUVQIiwidHlwZSIsIkVDRmllbGRFbGVtZW50RnAiLCJmZUZwRXF1YWxzIiwiZmVGcFRvQmlnSW50ZWdlciIsImZlRnBOZWdhdGUiLCJmZUZwQWRkIiwidG9CaWdJbnRlZ2VyIiwiZmVGcFN1YnRyYWN0IiwiZmVGcE11bHRpcGx5IiwiZmVGcFNxdWFyZSIsImZlRnBEaXZpZGUiLCJFQ1BvaW50RnAiLCJjdXJ2ZSIsInppbnYiLCJwb2ludEZwR2V0WCIsImZyb21CaWdJbnRlZ2VyIiwicG9pbnRGcEdldFkiLCJwb2ludEZwRXF1YWxzIiwiaXNJbmZpbml0eSIsInBvaW50RnBJc0luZmluaXR5IiwicG9pbnRGcE5lZ2F0ZSIsInBvaW50RnBBZGQiLCJ0d2ljZSIsImdldEluZmluaXR5IiwicG9pbnRGcFR3aWNlIiwicG9pbnRGcE11bHRpcGx5IiwicG9pbnRGcE11bHRpcGx5VHdvIiwiZ2V0WCIsImdldFkiLCJtdWx0aXBseVR3byIsIkVDQ3VydmVGcCIsImluZmluaXR5IiwiY3VydmVGcEdldFEiLCJjdXJ2ZUZwR2V0QSIsImN1cnZlRnBHZXRCIiwiY3VydmVGcEVxdWFscyIsImN1cnZlRnBHZXRJbmZpbml0eSIsImN1cnZlRnBGcm9tQmlnSW50ZWdlciIsImN1cnZlRnBEZWNvZGVQb2ludEhleCIsImdldFEiLCJnZXRBIiwiZ2V0QiIsImRlY29kZVBvaW50SGV4IiwiZ2V0Qnl0ZUxlbmd0aCIsImdldEVuY29kZWQiLCJ0b0J5dGVBcnJheVVuc2lnbmVkIiwidW5zaGlmdCIsImRlY29kZUZyb20iLCJkZWNvZGVGcm9tSGV4IiwiYWRkMkQiLCJ0d2ljZTJEIiwidmFsdWVPZiIsIm11bHRpcGx5MkQiLCJpc09uQ3VydmUiLCJ2YWxpZGF0ZSIsImpzb25QYXJzZSIsIlJlZ0V4cCIsIm1hdGNoIiwicmVwbGFjZSIsInNoaWZ0IiwiYXNuMSIsIkFTTjFVdGlsIiwiaW50ZWdlclRvQnl0ZUhleCIsImJpZ0ludFRvTWluVHdvc0NvbXBsZW1lbnRzSGV4IiwiZ2V0UEVNU3RyaW5nRnJvbUhleCIsImhleHRvcGVtIiwibmV3T2JqZWN0IiwiQVNOMU9iamVjdCIsIkRFUkJvb2xlYW4iLCJERVJJbnRlZ2VyIiwiREVSQml0U3RyaW5nIiwiREVST2N0ZXRTdHJpbmciLCJERVJOdWxsIiwiREVST2JqZWN0SWRlbnRpZmllciIsIkRFUkVudW1lcmF0ZWQiLCJERVJVVEY4U3RyaW5nIiwiREVSTnVtZXJpY1N0cmluZyIsIkRFUlByaW50YWJsZVN0cmluZyIsIkRFUlRlbGV0ZXhTdHJpbmciLCJERVJJQTVTdHJpbmciLCJERVJVVENUaW1lIiwiREVSR2VuZXJhbGl6ZWRUaW1lIiwiREVSVmlzaWJsZVN0cmluZyIsIkRFUkJNUFN0cmluZyIsIkRFUlNlcXVlbmNlIiwiREVSU2V0IiwiREVSVGFnZ2VkT2JqZWN0Iiwia2V5cyIsImFycmF5IiwidGFnIiwiZXhwbGljaXQiLCJvYmoiLCJqc29uVG9BU04xSEVYIiwiZ2V0RW5jb2RlZEhleCIsIm9pZEhleFRvSW50Iiwib2lkSW50VG9IZXgiLCJzcGxpdCIsInBhcmFtcyIsImdldExlbmd0aEhleEZyb21WYWx1ZSIsImhWIiwiaFRMViIsImlzTW9kaWZpZWQiLCJnZXRGcmVzaFZhbHVlSGV4IiwiaEwiLCJoVCIsImdldFZhbHVlSGV4Iiwic2V0QnlQYXJhbSIsInRsdiIsIkRFUkFic3RyYWN0U3RyaW5nIiwiZ2V0U3RyaW5nIiwic2V0U3RyaW5nIiwidXRmOHRvaGV4IiwidG9Mb3dlckNhc2UiLCJzZXRTdHJpbmdIZXgiLCJzdHIiLCJoZXgiLCJERVJBYnN0cmFjdFRpbWUiLCJsb2NhbERhdGVUb1VUQyIsImdldFRpbWV6b25lT2Zmc2V0IiwiZm9ybWF0RGF0ZSIsInplcm9QYWRkaW5nIiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiZ2V0TWlsbGlzZWNvbmRzIiwic3RvaGV4Iiwic2V0QnlEYXRlVmFsdWUiLCJVVEMiLCJzZXRCeURhdGUiLCJERVJBYnN0cmFjdFN0cnVjdHVyZWQiLCJzZXRCeUFTTjFPYmplY3RBcnJheSIsImFzbjFBcnJheSIsImFwcGVuZEFTTjFPYmplY3QiLCJzZXRCeUJpZ0ludGVnZXIiLCJzZXRCeUludGVnZXIiLCJzZXRWYWx1ZUhleCIsImJpZ2ludCIsInNldEhleFZhbHVlSW5jbHVkaW5nVW51c2VkQml0cyIsInNldFVudXNlZEJpdHNBbmRIZXhWYWx1ZSIsInNldEJ5QmluYXJ5U3RyaW5nIiwic2V0QnlCb29sZWFuQXJyYXkiLCJuZXdGYWxzZUFycmF5IiwiYmluIiwic2V0VmFsdWVPaWRTdHJpbmciLCJvaWR0b2hleCIsInNldFZhbHVlTmFtZSIsIng1MDkiLCJPSUQiLCJuYW1lMm9pZCIsInNldFZhbHVlTmFtZU9yT2lkIiwib2lkIiwibmFtZSIsImRhdGUiLCJ3aXRoTWlsbGlzIiwibWlsbGlzIiwic29ydEZsYWciLCJzb3J0Iiwic29ydGZsYWciLCJpc0V4cGxpY2l0IiwiYXNuMU9iamVjdCIsInNldEFTTjFPYmplY3QiLCJ0YWdlIiwidGFnaSIsIkFTTjFIRVgiLCJnZXRMYmxlbiIsImdldEwiLCJnZXRWYmxlbiIsImdldFZpZHgiLCJnZXRWIiwiZ2V0VExWIiwiZ2V0VExWYmxlbiIsImdldE5leHRTaWJsaW5nSWR4IiwiZ2V0Q2hpbGRJZHgiLCJnZXROdGhDaGlsZElkeCIsImdldElkeGJ5TGlzdCIsImdldElkeGJ5TGlzdEV4IiwiaXNDb250ZXh0VGFnIiwiZ2V0VExWYnlMaXN0IiwiZ2V0VExWYnlMaXN0RXgiLCJnZXRWYnlMaXN0IiwiZ2V0VmJ5TGlzdEV4IiwiZ2V0SW50IiwiYml0c3RydG9pbnQiLCJnZXRPSUQiLCJoZXh0b29pZCIsImdldE9JRE5hbWUiLCJvaWQybmFtZSIsImhleHRvb2lkc3RyIiwiZHVtcCIsIm9tbWl0X2xvbmdfb2N0ZXQiLCJpc0FTTjFIRVgiLCJoZXh0b3V0ZjgiLCJvaWRuYW1lIiwiSlNPTiIsIng1MDlFeHROYW1lIiwiY2hlY2tTdHJpY3RERVIiLCJpc0hleCIsIkJhc2U2NHgiLCJzdG9CQSIsIkJBdG9zIiwiQkF0b2hleCIsInN0b2I2NCIsInN0b2I2NHUiLCJiNjR0b2I2NHUiLCJiNjR1dG9zIiwiYjY0dXRvYjY0IiwiaGV4dG9iNjR1IiwiYjY0dXRvaGV4IiwidXRmOHRvYjY0dSIsImI2NHV0b3V0ZjgiLCJCdWZmZXIiLCJmcm9tIiwidXJpY21wdG9oZXgiLCJlbmNvZGVVUklDb21wb25lbnRBbGwiLCJoZXh0b3VyaWNtcCIsInV0Zjh0b2I2NCIsImI2NHRvdXRmOCIsImhleHRvYjY0IiwiaGV4dG9iNjRubCIsImI2NG5sdG9oZXgiLCJwZW10b2hleCIsImhleHRvQXJyYXlCdWZmZXIiLCJBcnJheUJ1ZmZlciIsIkRhdGFWaWV3Iiwic2V0VWludDgiLCJBcnJheUJ1ZmZlcnRvaGV4IiwiYnl0ZUxlbmd0aCIsImdldFVpbnQ4IiwienVsdXRvbXNlYyIsInp1bHV0b3NlYyIsInp1bHV0b2RhdGUiLCJkYXRldG96dWx1IiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwiaXB2NnRvaGV4IiwicmVwZWF0IiwiaGV4dG9pcHY2IiwiaGV4dG9pcCIsImlwdG9oZXgiLCJuZXdsaW5lX3RvVW5peCIsIm5ld2xpbmVfdG9Eb3MiLCJpc0ludGVnZXIiLCJpc2hleCIsImlzQmFzZTY0IiwiaXNCYXNlNjRVUkwiLCJpc0ludGVnZXJBcnJheSIsImlzUHJpbnRhYmxlIiwiaXNJQTUiLCJpc01haWwiLCJoZXh0b3Bvc2hleCIsImludGFyeXN0cnRvaGV4IiwibWFwIiwic3RyZGlmZmlkeCIsInN0cnBhZCIsImludHRvYml0c3RyIiwiTnVtYmVyIiwiRElHRVNUSU5GT0hFQUQiLCJzaGExIiwic2hhMjI0Iiwic2hhMjU2Iiwic2hhMzg0Iiwic2hhNTEyIiwibWQyIiwibWQ1IiwicmlwZW1kMTYwIiwiREVGQVVMVFBST1ZJREVSIiwiaG1hY21kNSIsImhtYWNzaGExIiwiaG1hY3NoYTIyNCIsImhtYWNzaGEyNTYiLCJobWFjc2hhMzg0IiwiaG1hY3NoYTUxMiIsImhtYWNyaXBlbWQxNjAiLCJNRDV3aXRoUlNBIiwiU0hBMXdpdGhSU0EiLCJTSEEyMjR3aXRoUlNBIiwiU0hBMjU2d2l0aFJTQSIsIlNIQTM4NHdpdGhSU0EiLCJTSEE1MTJ3aXRoUlNBIiwiUklQRU1EMTYwd2l0aFJTQSIsIk1ENXdpdGhFQ0RTQSIsIlNIQTF3aXRoRUNEU0EiLCJTSEEyMjR3aXRoRUNEU0EiLCJTSEEyNTZ3aXRoRUNEU0EiLCJTSEEzODR3aXRoRUNEU0EiLCJTSEE1MTJ3aXRoRUNEU0EiLCJSSVBFTUQxNjB3aXRoRUNEU0EiLCJTSEExd2l0aERTQSIsIlNIQTIyNHdpdGhEU0EiLCJTSEEyNTZ3aXRoRFNBIiwiTUQ1d2l0aFJTQWFuZE1HRjEiLCJTSEF3aXRoUlNBYW5kTUdGMSIsIlNIQTF3aXRoUlNBYW5kTUdGMSIsIlNIQTIyNHdpdGhSU0FhbmRNR0YxIiwiU0hBMjU2d2l0aFJTQWFuZE1HRjEiLCJTSEEzODR3aXRoUlNBYW5kTUdGMSIsIlNIQTUxMndpdGhSU0FhbmRNR0YxIiwiUklQRU1EMTYwd2l0aFJTQWFuZE1HRjEiLCJDUllQVE9KU01FU1NBR0VESUdFU1ROQU1FIiwiTUQ1IiwiU0hBMSIsIlNIQTIyNCIsIlJJUEVNRDE2MCIsImdldERpZ2VzdEluZm9IZXgiLCJnZXRQYWRkZWREaWdlc3RJbmZvSGV4IiwiaGFzaFN0cmluZyIsImFsZyIsImRpZ2VzdFN0cmluZyIsImRpZ2VzdEhleCIsInNoYTI1NkhleCIsInNoYTUxMkhleCIsImlzS2V5IiwiRFNBIiwiRUNEU0EiLCJwcm92IiwiU0VDVVJFUkFORE9NR0VOIiwiZ2V0UmFuZG9tSGV4T2ZOYnl0ZXMiLCJnZXRSYW5kb21CaWdJbnRlZ2VyT2ZOYnl0ZXMiLCJnZXRSYW5kb21IZXhPZk5iaXRzIiwiZ2V0UmFuZG9tQmlnSW50ZWdlck9mTmJpdHMiLCJnZXRSYW5kb21CaWdJbnRlZ2VyWmVyb1RvTWF4IiwiZ2V0UmFuZG9tQmlnSW50ZWdlck1pblRvTWF4Iiwic2V0QWxnQW5kUHJvdmlkZXIiLCJtZCIsInVwZGF0ZVN0cmluZyIsInVwZGF0ZUhleCIsImRpZ2VzdCIsInNqY2wiLCJoYXNoIiwiY29kZWMiLCJ0b0JpdHMiLCJmcm9tQml0cyIsImFsZ05hbWUiLCJwcm92TmFtZSIsIkhBU0hMRU5HVEgiLCJNYWMiLCJhbGdQcm92IiwibWFjIiwicGFzcyIsImRvRmluYWwiLCJkb0ZpbmFsU3RyaW5nIiwiZG9GaW5hbEhleCIsInNldFBhc3N3b3JkIiwidXRmOCIsInJzdHIiLCJiNjQiLCJiNjR1IiwiU2lnbmF0dXJlIiwiX3NldEFsZ05hbWVzIiwibWRBbGdOYW1lIiwicHVia2V5QWxnTmFtZSIsIl96ZXJvUGFkZGluZ09mU2lnbmF0dXJlIiwiS0VZVVRJTCIsImdldEtleSIsInBydktleSIsInN0YXRlIiwicHViS2V5Iiwic2lnbiIsInNIYXNoSGV4IiwiZWNwcnZoZXgiLCJlY2N1cnZlbmFtZSIsInBydiIsImhTaWduIiwic2lnbldpdGhNZXNzYWdlSGFzaFBTUyIsInBzc1NhbHRMZW4iLCJzaWduV2l0aE1lc3NhZ2VIYXNoIiwic2lnblN0cmluZyIsInNpZ25IZXgiLCJ2ZXJpZnkiLCJlY3B1YmhleCIsInB1YiIsInZlcmlmeVdpdGhNZXNzYWdlSGFzaFBTUyIsInZlcmlmeVdpdGhNZXNzYWdlSGFzaCIsImFsZ1Byb3ZOYW1lIiwiaW5pdFBhcmFtcyIsInBzc3NhbHRsZW4iLCJwcnZrZXlwZW0iLCJwcnZrZXlwYXMiLCJDaXBoZXIiLCJnZXRBbGdCeUtleUFuZE5hbWUiLCJkZWNyeXB0IiwiZGVjcnlwdE9BRVAiLCJvaWRoZXgybmFtZSIsIkVDUGFyYW1ldGVyREIiLCJnZXROYW1lIiwiZ2V0QmlnUmFuZG9tIiwic2V0TmFtZWRDdXJ2ZSIsImVjcGFyYW1zIiwiZ2V0QnlOYW1lIiwicHJ2S2V5SGV4IiwicHViS2V5SGV4IiwiY3VydmVOYW1lIiwic2V0UHJpdmF0ZUtleUhleCIsInNldFB1YmxpY0tleUhleCIsImdldFB1YmxpY0tleVhZSGV4Iiwia2V5bGVuIiwiZ2V0U2hvcnROSVNUUEN1cnZlTmFtZSIsImdlbmVyYXRlS2V5UGFpckhleCIsImJpUlNTaWdUb0FTTjFTaWciLCJmcm9tQnl0ZUFycmF5VW5zaWduZWQiLCJzZXJpYWxpemVTaWciLCJ2ZXJpZnlIZXgiLCJwYXJzZVNpZ0hleCIsInZlcmlmeVJhdyIsIkJpdGNvaW4iLCJpc0FycmF5IiwicGFyc2VTaWciLCJ0b0J5dGVBcnJheVNpZ25lZCIsInBhcnNlU2lnQ29tcGFjdCIsInJlYWRQS0NTNVBydktleUhleCIsInJlYWRQS0NTOFBydktleUhleCIsInJlYWRQS0NTOFB1YktleUhleCIsInJlYWRDZXJ0UHViS2V5SGV4IiwicGFyc2VTaWdIZXhJbkhleFJTIiwiYXNuMVNpZ1RvQ29uY2F0U2lnIiwiY29uY2F0U2lnVG9BU04xU2lnIiwiaGV4UlNTaWdUb0FTTjFTaWciLCJyZWdpc3QiLCJBRVMiLCJUcmlwbGVERVMiLCJERVMiLCJrZXkiLCJpdiIsImNpcGhlcnRleHQiLCJwcm9jIiwiZXByb2MiLCJpdmxlbiIsImNpcGhlciIsIml2c2FsdCIsImRhdGEiLCJrZXloZXgiLCJpdmhleCIsInZlcnNpb24iLCJwYXJzZVBLQ1M1UEVNIiwiZ2V0S2V5QW5kVW51c2VkSXZCeVBhc3Njb2RlQW5kSXZzYWx0IiwiZGVjcnlwdEtleUI2NCIsImdldERlY3J5cHRlZEtleUhleCIsImdldEVuY3J5cHRlZFBLQ1M1UEVNRnJvbVBydktleUhleCIsInRvVXBwZXJDYXNlIiwicGFyc2VIZXhPZkVuY3J5cHRlZFBLQ1M4IiwiZW5jcnlwdGlvblNjaGVtZUFsZyIsImVuY3J5cHRpb25TY2hlbWVJViIsInBia2RmMlNhbHQiLCJwYmtkZjJJdGVyIiwiZ2V0UEJLREYyS2V5SGV4RnJvbVBhcmFtIiwiUEJLREYyIiwia2V5U2l6ZSIsIml0ZXJhdGlvbnMiLCJfZ2V0UGxhaW5QS0NTOEhleEZyb21FbmNyeXB0ZWRQS0NTOFBFTSIsImdldEtleUZyb21FbmNyeXB0ZWRQS0NTOFBFTSIsImdldEtleUZyb21QbGFpblByaXZhdGVQS0NTOEhleCIsInBhcnNlUGxhaW5Qcml2YXRlUEtDUzhIZXgiLCJhbGdwYXJhbSIsImFsZ29pZCIsImtleWlkeCIsImdldEtleUZyb21QbGFpblByaXZhdGVQS0NTOFBFTSIsIl9nZXRLZXlGcm9tUHVibGljUEtDUzhIZXgiLCJwYXJzZVB1YmxpY1Jhd1JTQUtleUhleCIsInBhcnNlUHVibGljUEtDUzhIZXgiLCJ4eSIsImt0eSIsImRwIiwiZHEiLCJjbyIsInFpIiwic2V0UHJpdmF0ZUV4Iiwic2V0UHJpdmF0ZSIsImNydiIsIlg1MDkiLCJnZXRQdWJsaWNLZXlGcm9tQ2VydEhleCIsImdldFB1YmxpY0tleUZyb21DZXJ0UEVNIiwiZ2VuZXJhdGVLZXlwYWlyIiwiZ2VuZXJhdGUiLCJwcnZLZXlPYmoiLCJwdWJLZXlPYmoiLCJnZXRQRU0iLCJTdWJqZWN0UHVibGljS2V5SW5mbyIsInNlcSIsIm9jdHN0ciIsImJpdHN0ciIsImdldEtleUZyb21DU1JQRU0iLCJnZXRLZXlGcm9tQ1NSSGV4IiwicGFyc2VDU1JIZXgiLCJwOHB1YmtleWhleCIsImdldEtleUlEIiwiZ2V0SldLRnJvbUtleSIsImdldFBvc0FycmF5T2ZDaGlsZHJlbkZyb21IZXgiLCJnZXRIZXhWYWx1ZUFycmF5T2ZDaGlsZHJlbkZyb21IZXgiLCJyZWFkUHJpdmF0ZUtleUZyb21QRU1TdHJpbmciLCJyZWFkUEtDUzVQdWJLZXlIZXgiLCJyZWFkQ2VydEhleCIsImdldFB1YmxpY0tleUhleCIsIl9SRV9IRVhERUNPTkxZIiwiX3JzYXNpZ25fZ2V0SGV4UGFkZGVkRGlnZXN0SW5mb0ZvclN0cmluZyIsImRvUHJpdmF0ZSIsInBzc19tZ2YxX3N0ciIsInNpZ25QU1MiLCJfcnNhc2lnbl9nZXREZWNyeXB0U2lnbmF0dXJlQkkiLCJfcnNhc2lnbl9nZXRIZXhEaWdlc3RJbmZvRnJvbVNpZyIsIl9yc2FzaWduX2dldEFsZ05hbWVBbmRIYXNoRnJvbUhleERpc2dlc3RJbmZvIiwidmVyaWZ5UFNTIiwiU0FMVF9MRU5fSExFTiIsIlNBTFRfTEVOX01BWCIsIlNBTFRfTEVOX1JFQ09WRVIiLCJBbGdvcml0aG1JZGVudGlmaWVyIiwiUFNTTkFNRTJBU04xVExWIiwiSEVYMlNUQUciLCJmb2Zmc2V0IiwiYUV4dEluZm8iLCJnZXRWZXJzaW9uIiwiZ2V0U2VyaWFsTnVtYmVySGV4IiwiZ2V0U2lnbmF0dXJlQWxnb3JpdGhtRmllbGQiLCJnZXRBbGdvcml0aG1JZGVudGlmaWVyTmFtZSIsImdldElzc3VlciIsImdldFg1MDBOYW1lIiwiZ2V0SXNzdWVySGV4IiwiZ2V0SXNzdWVyU3RyaW5nIiwiaGV4MmRuIiwiZ2V0U3ViamVjdCIsImdldFN1YmplY3RIZXgiLCJnZXRTdWJqZWN0U3RyaW5nIiwiZ2V0Tm90QmVmb3JlIiwiZ2V0Tm90QWZ0ZXIiLCJnZXRQdWJsaWNLZXlJZHgiLCJnZXRQdWJsaWNLZXlDb250ZW50SWR4IiwiZ2V0UHVibGljS2V5IiwiZ2V0U2lnbmF0dXJlQWxnb3JpdGhtTmFtZSIsImdldFNpZ25hdHVyZVZhbHVlSGV4IiwidmVyaWZ5U2lnbmF0dXJlIiwicGFyc2VFeHQiLCJjcml0aWNhbCIsInZpZHgiLCJnZXRFeHRJbmZvIiwiZ2V0RXh0QmFzaWNDb25zdHJhaW50cyIsImV4dG5hbWUiLCJjQSIsInBhdGhMZW4iLCJnZXRFeHRLZXlVc2FnZSIsIm5hbWVzIiwiZ2V0RXh0S2V5VXNhZ2VTdHJpbmciLCJnZXRFeHRLZXlVc2FnZUJpbiIsIktFWVVTQUdFX05BTUUiLCJnZXRFeHRTdWJqZWN0S2V5SWRlbnRpZmllciIsImtpZCIsImdldEV4dEF1dGhvcml0eUtleUlkZW50aWZpZXIiLCJnZXRHZW5lcmFsTmFtZXMiLCJpc3N1ZXIiLCJzbiIsImdldEV4dEV4dEtleVVzYWdlIiwiZ2V0RXh0RXh0S2V5VXNhZ2VOYW1lIiwiZ2V0RXh0U3ViamVjdEFsdE5hbWUiLCJnZXRFeHRJc3N1ZXJBbHROYW1lIiwiZ2V0R2VuZXJhbE5hbWUiLCJyZmM4MjIiLCJkbnMiLCJ1cmkiLCJpcCIsImRuIiwiZ2V0RXh0U3ViamVjdEFsdE5hbWUyIiwiZ2V0RXh0Q1JMRGlzdHJpYnV0aW9uUG9pbnRzIiwiZ2V0RGlzdHJpYnV0aW9uUG9pbnQiLCJkcG5hbWUiLCJnZXREaXN0cmlidXRpb25Qb2ludE5hbWUiLCJmdWxsIiwiZ2V0RXh0Q1JMRGlzdHJpYnV0aW9uUG9pbnRzVVJJIiwiZ2V0RXh0QUlBSW5mbyIsIm9jc3AiLCJjYWlzc3VlciIsImdldEV4dEF1dGhvcml0eUluZm9BY2Nlc3MiLCJnZXRFeHRDZXJ0aWZpY2F0ZVBvbGljaWVzIiwiZ2V0UG9saWN5SW5mb3JtYXRpb24iLCJwb2xpY3lvaWQiLCJnZXRQb2xpY3lRdWFsaWZpZXJJbmZvIiwiY3BzIiwidW5vdGljZSIsImdldFVzZXJOb3RpY2UiLCJleHB0ZXh0IiwiZ2V0RGlzcGxheVRleHQiLCJnZXRFeHRDUkxOdW1iZXIiLCJudW0iLCJnZXRFeHRDUkxSZWFzb24iLCJjb2RlIiwiZ2V0RXh0T2NzcE5vbmNlIiwiZ2V0RXh0T2NzcE5vQ2hlY2siLCJnZXRFeHRBZG9iZVRpbWVTdGFtcCIsInJlcWF1dGgiLCJnZXRYNTAwTmFtZVJ1bGUiLCJkcyIsInZhbHVlIiwiZ2V0WDUwME5hbWVBcnJheSIsImRuYXJyYXl0b3N0ciIsImdldFJETiIsImdldEF0dHJUeXBlQW5kVmFsdWUiLCJvaWQyYXR5cGUiLCJyZWFkQ2VydFBFTSIsImdldFBhcmFtIiwic2VyaWFsIiwic2lnYWxnIiwibm90YmVmb3JlIiwibm90YWZ0ZXIiLCJzdWJqZWN0Iiwic2JqcHVia2V5IiwiZXh0IiwiZ2V0RXh0UGFyYW1BcnJheSIsInNpZ2hleCIsImdldEV4dFBhcmFtIiwiZXh0biIsImZpbmRFeHQiLCJ1cGRhdGVFeHRDRFBGdWxsVVJJIiwidXBkYXRlRXh0QUlBT0NTUCIsInVwZGF0ZUV4dEFJQUNBSXNzdWVyIiwiZ2V0SW5mbyIsImRuYW1lIiwiaGV4MnJkbiIsImhleDJhdHRyVHlwZVZhbHVlIiwiZ2V0UHVibGljS2V5SW5mb1Byb3BPZkNlcnRQRU0iLCJqd3MiLCJKV1MiLCJpc1NhZmVKU09OU3RyaW5nIiwicGFyc2VKV1MiLCJwYXJzZWRKV1MiLCJzaWd2YWxIIiwiaGVhZEI2NFUiLCJwYXlsb2FkQjY0VSIsInNpZ3ZhbEI2NFUiLCJzaSIsInNpZ3ZhbEJJIiwiaGVhZFMiLCJwYXlsb2FkUyIsInJlYWRTYWZlSlNPTlN0cmluZyIsImp3c2FsZzJzaWdhbGciLCJoZWFkZXJPYmoiLCJwYXlsb2FkT2JqIiwiaGVhZGVyUFAiLCJwYXlsb2FkUFAiLCJzaWdIZXgiLCJ2ZXJpZnlKV1QiLCJpbkFycmF5IiwiaW5jbHVkZWRBcnJheSIsImlzcyIsInN1YiIsImF1ZCIsIkludERhdGUiLCJnZXROb3ciLCJ2ZXJpZnlBdCIsImdyYWNlUGVyaW9kIiwibmJmIiwiaWF0IiwianRpIiwiSFMyNTYiLCJIUzM4NCIsIkhTNTEyIiwiUlMyNTYiLCJSUzM4NCIsIlJTNTEyIiwiRVMyNTYiLCJFUzM4NCIsIlBTMjU2IiwiUFMzODQiLCJQUzUxMiIsIm5vbmUiLCJnZXRFbmNvZGVkU2lnbmF0dXJlVmFsdWVGcm9tSldTIiwiZ2V0SldLdGh1bWJwcmludCIsImdldCIsImdldFp1bHUiLCJpbnREYXRlMlVUQ1N0cmluZyIsInRvVVRDU3RyaW5nIiwiaW50RGF0ZTJadWx1IiwiRURTQSIsIl9jcnlwdG8iLCJEZWZhdWx0QWNjZXNzVG9rZW5FeHBpcmluZ05vdGlmaWNhdGlvblRpbWUiLCJBY2Nlc3NUb2tlbkV2ZW50cyIsImFjY2Vzc1Rva2VuRXhwaXJpbmdOb3RpZmljYXRpb25UaW1lIiwiYWNjZXNzVG9rZW5FeHBpcmluZ1RpbWVyIiwiVGltZXIiLCJhY2Nlc3NUb2tlbkV4cGlyZWRUaW1lciIsIl9hY2Nlc3NUb2tlbkV4cGlyaW5nTm90aWZpY2F0aW9uVGltZSIsIl9hY2Nlc3NUb2tlbkV4cGlyaW5nIiwiX2FjY2Vzc1Rva2VuRXhwaXJlZCIsImNvbnRhaW5lciIsImFjY2Vzc190b2tlbiIsImV4cGlyZXNfaW4iLCJkdXJhdGlvbiIsIkxvZyIsImRlYnVnIiwiZXhwaXJpbmciLCJjYW5jZWwiLCJleHBpcmVkIiwiY2IiLCJhZGRIYW5kbGVyIiwicmVtb3ZlSGFuZGxlciIsIkRlZmF1bHRJbnRlcnZhbCIsIkNoZWNrU2Vzc2lvbklGcmFtZSIsImNhbGxiYWNrIiwiY2xpZW50X2lkIiwidXJsIiwiaW50ZXJ2YWwiLCJzdG9wT25FcnJvciIsIl9jYWxsYmFjayIsIl9jbGllbnRfaWQiLCJfdXJsIiwiX2ludGVydmFsIiwiX3N0b3BPbkVycm9yIiwiaWR4IiwiX2ZyYW1lX29yaWdpbiIsIl9mcmFtZSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInN0eWxlIiwidmlzaWJpbGl0eSIsInBvc2l0aW9uIiwiZGlzcGxheSIsIndpZHRoIiwiaGVpZ2h0Iiwic3JjIiwiUHJvbWlzZSIsInJlc29sdmUiLCJvbmxvYWQiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJfYm91bmRNZXNzYWdlRXZlbnQiLCJfbWVzc2FnZSIsImJpbmQiLCJhZGRFdmVudExpc3RlbmVyIiwib3JpZ2luIiwic291cmNlIiwiY29udGVudFdpbmRvdyIsImVycm9yIiwic3RvcCIsInNlc3Npb25fc3RhdGUiLCJfc2Vzc2lvbl9zdGF0ZSIsInNlbmQiLCJwb3N0TWVzc2FnZSIsIl90aW1lciIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsIkNsb2NrU2VydmljZSIsIm5vdyIsIkNvcmRvdmFJRnJhbWVOYXZpZ2F0b3IiLCJwb3B1cFdpbmRvd0ZlYXR1cmVzIiwicG9wdXAiLCJDb3Jkb3ZhUG9wdXBXaW5kb3ciLCJDb3Jkb3ZhUG9wdXBOYXZpZ2F0b3IiLCJEZWZhdWx0UG9wdXBGZWF0dXJlcyIsIkRlZmF1bHRQb3B1cFRhcmdldCIsIl9wcm9taXNlIiwicmVqZWN0IiwiX3Jlc29sdmUiLCJfcmVqZWN0IiwiZmVhdHVyZXMiLCJ0YXJnZXQiLCJwb3B1cFdpbmRvd1RhcmdldCIsInJlZGlyZWN0X3VyaSIsInN0YXJ0VXJsIiwiY29yZG92YU1ldGFkYXRhIiwic29tZSIsIl9lcnJvciIsImNvcmRvdmEiLCJyZXF1aXJlIiwibWV0YWRhdGEiLCJfaXNJbkFwcEJyb3dzZXJJbnN0YWxsZWQiLCJfcG9wdXAiLCJJbkFwcEJyb3dzZXIiLCJvcGVuIiwiX2V4aXRDYWxsYmFja0V2ZW50IiwiX2V4aXRDYWxsYmFjayIsIl9sb2FkU3RhcnRDYWxsYmFja0V2ZW50IiwiX2xvYWRTdGFydENhbGxiYWNrIiwicHJvbWlzZSIsImV2ZW50IiwiX3N1Y2Nlc3MiLCJtZXNzYWdlIiwiX2NsZWFudXAiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2xvc2UiLCJFcnJvclJlc3BvbnNlIiwiZXJyb3JfZGVzY3JpcHRpb24iLCJlcnJvcl91cmkiLCJFdmVudCIsIl9uYW1lIiwiX2NhbGxiYWNrcyIsImZpbmRJbmRleCIsIml0ZW0iLCJ0aW1lciIsImhhbmRsZSIsInRlc3RpbmciLCJyZXF1ZXN0IiwiR2xvYmFsIiwibG9jYXRpb24iLCJsb2NhbFN0b3JhZ2UiLCJzZXNzaW9uU3RvcmFnZSIsIm5ld1JlcXVlc3QiLCJYTUxIdHRwUmVxdWVzdCIsIklGcmFtZU5hdmlnYXRvciIsImZyYW1lIiwiSUZyYW1lV2luZG93Iiwibm90aWZ5UGFyZW50IiwiRGVmYXVsdFRpbWVvdXQiLCJ0aW1lb3V0Iiwic2lsZW50UmVxdWVzdFRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiX3RpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJyZW1vdmVDaGlsZCIsIl9vcmlnaW4iLCJzdGFydHNXaXRoIiwicHJvdG9jb2wiLCJob3N0IiwiaHJlZiIsInBhcmVudCIsIkluTWVtb3J5V2ViU3RvcmFnZSIsImdldE93blByb3BlcnR5TmFtZXMiLCJpbmRleCIsIkpvc2VVdGlsIiwiZ2V0Sm9zZVV0aWwiLCJLZXlVdGlsIiwiQWxsb3dlZFNpZ25pbmdBbGdzIiwiand0IiwidG9rZW4iLCJoZWFkZXIiLCJwYXlsb2FkIiwiYXVkaWVuY2UiLCJjbG9ja1NrZXciLCJ0aW1lSW5zZW5zaXRpdmUiLCJ4NWMiLCJfdmFsaWRhdGVKd3QiLCJwYXJzZUp3dCIsInZhbGlkQXVkaWVuY2UiLCJhenAiLCJsb3dlck5vdyIsInVwcGVyTm93IiwidmFsaWRhdGVKd3RBdHRyaWJ1dGVzIiwidGhlbiIsIkpzb25TZXJ2aWNlIiwiYWRkaXRpb25hbENvbnRlbnRUeXBlcyIsIlhNTEh0dHBSZXF1ZXN0Q3RvciIsImp3dEhhbmRsZXIiLCJfY29udGVudFR5cGVzIiwiX1hNTEh0dHBSZXF1ZXN0IiwiX2p3dEhhbmRsZXIiLCJyZXEiLCJhbGxvd2VkQ29udGVudFR5cGVzIiwic3RhdHVzIiwiY29udGVudFR5cGUiLCJnZXRSZXNwb25zZUhlYWRlciIsImZvdW5kIiwiZmluZCIsInJlc3BvbnNlVGV4dCIsInN0YXR1c1RleHQiLCJvbmVycm9yIiwic2V0UmVxdWVzdEhlYWRlciIsImJhc2ljQXV0aCIsImJ0b2EiLCJub3BMb2dnZXIiLCJpbmZvIiwid2FybiIsIk5PTkUiLCJFUlJPUiIsIldBUk4iLCJJTkZPIiwiREVCVUciLCJsb2dnZXIiLCJsZXZlbCIsImFyZ3MiLCJPaWRjTWV0YWRhdGFVcmxQYXRoIiwiTWV0YWRhdGFTZXJ2aWNlIiwic2V0dGluZ3MiLCJKc29uU2VydmljZUN0b3IiLCJfc2V0dGluZ3MiLCJfanNvblNlcnZpY2UiLCJfbWV0YWRhdGFVcmwiLCJtZXRhZGF0YVVybCIsImF1dGhvcml0eSIsInNpZ25pbmdLZXlzIiwiZ2V0SnNvbiIsInNlZWQiLCJtZXRhZGF0YVNlZWQiLCJhc3NpZ24iLCJfZ2V0TWV0YWRhdGFQcm9wZXJ0eSIsIm9wdGlvbmFsIiwiZ2V0TWV0YWRhdGEiLCJqd2tzX3VyaSIsImtleVNldCIsIk9pZGNDbGllbnQiLCJPaWRjQ2xpZW50U2V0dGluZ3MiLCJzdGF0ZVN0b3JlIiwidmFsaWRhdG9yIiwibWV0YWRhdGFTZXJ2aWNlIiwiX21ldGFkYXRhU2VydmljZSIsInJlc3BvbnNlX3R5cGUiLCJzY29wZSIsInByb21wdCIsIm1heF9hZ2UiLCJ1aV9sb2NhbGVzIiwiaWRfdG9rZW5faGludCIsImxvZ2luX2hpbnQiLCJhY3JfdmFsdWVzIiwicmVzb3VyY2UiLCJyZXF1ZXN0X3VyaSIsInJlc3BvbnNlX21vZGUiLCJleHRyYVF1ZXJ5UGFyYW1zIiwiZXh0cmFUb2tlblBhcmFtcyIsInJlcXVlc3RfdHlwZSIsInNraXBVc2VySW5mbyIsIlNpZ25pblJlcXVlc3QiLCJpc0NvZGUiLCJnZXRBdXRob3JpemF0aW9uRW5kcG9pbnQiLCJzaWduaW5SZXF1ZXN0IiwiY2xpZW50X3NlY3JldCIsInNpZ25pblN0YXRlIiwiX3N0YXRlU3RvcmUiLCJzZXQiLCJpZCIsInRvU3RvcmFnZVN0cmluZyIsInJlbW92ZVN0YXRlIiwidXNlUXVlcnkiLCJkZWxpbWl0ZXIiLCJyZXNwb25zZSIsIlNpZ25pblJlc3BvbnNlIiwic3RhdGVBcGkiLCJyZW1vdmUiLCJzdG9yZWRTdGF0ZVN0cmluZyIsIlNpZ25pblN0YXRlIiwiZnJvbVN0b3JhZ2VTdHJpbmciLCJyZWFkU2lnbmluUmVzcG9uc2VTdGF0ZSIsIl92YWxpZGF0b3IiLCJ2YWxpZGF0ZVNpZ25pblJlc3BvbnNlIiwicG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpIiwiZ2V0RW5kU2Vzc2lvbkVuZHBvaW50IiwiU2lnbm91dFJlcXVlc3QiLCJzaWdub3V0U3RhdGUiLCJTaWdub3V0UmVzcG9uc2UiLCJzdGF0ZUtleSIsIlN0YXRlIiwicmVhZFNpZ25vdXRSZXNwb25zZVN0YXRlIiwidmFsaWRhdGVTaWdub3V0UmVzcG9uc2UiLCJjbGVhclN0YWxlU3RhdGUiLCJzdGFsZVN0YXRlQWdlIiwiRGVmYXVsdFJlc3BvbnNlVHlwZSIsIkRlZmF1bHRTY29wZSIsIkRlZmF1bHRDbGllbnRBdXRoZW50aWNhdGlvbiIsIkRlZmF1bHRTdGFsZVN0YXRlQWdlIiwiRGVmYXVsdENsb2NrU2tld0luU2Vjb25kcyIsImNsaWVudF9hdXRoZW50aWNhdGlvbiIsImZpbHRlclByb3RvY29sQ2xhaW1zIiwibG9hZFVzZXJJbmZvIiwiY2xvY2tTZXJ2aWNlIiwidXNlckluZm9Kd3RJc3N1ZXIiLCJtZXJnZUNsYWltcyIsIldlYlN0b3JhZ2VTdGF0ZVN0b3JlIiwiUmVzcG9uc2VWYWxpZGF0b3JDdG9yIiwiUmVzcG9uc2VWYWxpZGF0b3IiLCJNZXRhZGF0YVNlcnZpY2VDdG9yIiwiX2F1dGhvcml0eSIsIl9tZXRhZGF0YSIsIl9tZXRhZGF0YVNlZWQiLCJfc2lnbmluZ0tleXMiLCJfY2xpZW50X3NlY3JldCIsIl9yZXNwb25zZV90eXBlIiwiX3Njb3BlIiwiX3JlZGlyZWN0X3VyaSIsIl9wb3N0X2xvZ291dF9yZWRpcmVjdF91cmkiLCJfY2xpZW50X2F1dGhlbnRpY2F0aW9uIiwiX3Byb21wdCIsIl9kaXNwbGF5IiwiX21heF9hZ2UiLCJfdWlfbG9jYWxlcyIsIl9hY3JfdmFsdWVzIiwiX3Jlc291cmNlIiwiX3Jlc3BvbnNlX21vZGUiLCJfZmlsdGVyUHJvdG9jb2xDbGFpbXMiLCJfbG9hZFVzZXJJbmZvIiwiX3N0YWxlU3RhdGVBZ2UiLCJfY2xvY2tTa2V3IiwiX2Nsb2NrU2VydmljZSIsIl91c2VySW5mb0p3dElzc3VlciIsIl9tZXJnZUNsYWltcyIsIl9leHRyYVF1ZXJ5UGFyYW1zIiwiX2V4dHJhVG9rZW5QYXJhbXMiLCJnZXRFcG9jaFRpbWUiLCJQb3B1cE5hdmlnYXRvciIsIlBvcHVwV2luZG93Iiwia2VlcE9wZW4iLCJub3RpZnlPcGVuZXIiLCJDaGVja0ZvclBvcHVwQ2xvc2VkSW50ZXJ2YWwiLCJfY2hlY2tGb3JQb3B1cENsb3NlZFRpbWVyIiwiX2NoZWNrRm9yUG9wdXBDbG9zZWQiLCJfaWQiLCJmb2N1cyIsImNsb3NlZCIsIm9wZW5lciIsIlVybFV0aWxpdHkiLCJwYXJzZVVybEZyYWdtZW50IiwiUmVkaXJlY3ROYXZpZ2F0b3IiLCJ1c2VSZXBsYWNlVG9OYXZpZ2F0ZSIsIlByb3RvY29sQ2xhaW1zIiwiVXNlckluZm9TZXJ2aWNlQ3RvciIsIlVzZXJJbmZvU2VydmljZSIsImpvc2VVdGlsIiwiVG9rZW5DbGllbnRDdG9yIiwiVG9rZW5DbGllbnQiLCJfdXNlckluZm9TZXJ2aWNlIiwiX2pvc2VVdGlsIiwiX3Rva2VuQ2xpZW50IiwiX3Byb2Nlc3NTaWduaW5QYXJhbXMiLCJfdmFsaWRhdGVUb2tlbnMiLCJfcHJvY2Vzc0NsYWltcyIsIm5vbmNlIiwiaWRfdG9rZW4iLCJjb2RlX3ZlcmlmaWVyIiwiaXNPcGVuSWRDb25uZWN0IiwicHJvZmlsZSIsImdldENsYWltcyIsImNsYWltcyIsImNsYWltczEiLCJjbGFpbXMyIiwicmVzdWx0IiwidmFsdWVzIiwiZm9yRWFjaCIsIl9wcm9jZXNzQ29kZSIsIl92YWxpZGF0ZUlkVG9rZW5BbmRBY2Nlc3NUb2tlbiIsIl92YWxpZGF0ZUlkVG9rZW4iLCJleGNoYW5nZUNvZGUiLCJ0b2tlblJlc3BvbnNlIiwiX3ZhbGlkYXRlSWRUb2tlbkF0dHJpYnV0ZXMiLCJjbG9ja1NrZXdJblNlY29uZHMiLCJfdmFsaWRhdGVBY2Nlc3NUb2tlbiIsImdldFNpZ25pbmdLZXlzIiwiX2ZpbHRlckJ5QWxnIiwiZmlsdGVyIiwiX2dldFNpZ25pbmdLZXlGb3JKd3QiLCJyZXNldFNpZ25pbmdLZXlzIiwiX2dldFNpZ25pbmdLZXlGb3JKd3RXaXRoU2luZ2xlUmV0cnkiLCJ2YWxpZGF0ZUp3dCIsImF0X2hhc2giLCJoYXNoQWxnIiwiaGFzaEJpdHMiLCJzaGEiLCJsZWZ0IiwibGVmdF9iNjR1IiwiaGV4VG9CYXNlNjRVcmwiLCJTZXNzaW9uTW9uaXRvciIsInVzZXJNYW5hZ2VyIiwiQ2hlY2tTZXNzaW9uSUZyYW1lQ3RvciIsIl91c2VyTWFuYWdlciIsIl9DaGVja1Nlc3Npb25JRnJhbWVDdG9yIiwiZXZlbnRzIiwiYWRkVXNlckxvYWRlZCIsIl9zdGFydCIsImFkZFVzZXJVbmxvYWRlZCIsIl9zdG9wIiwiZ2V0VXNlciIsInVzZXIiLCJtb25pdG9yQW5vbnltb3VzU2Vzc2lvbiIsInF1ZXJ5U2Vzc2lvblN0YXR1cyIsInNlc3Npb24iLCJ0bXBVc2VyIiwic2lkIiwiZXJyIiwiY2hlY2tTZXNzaW9uSW50ZXJ2YWwiLCJzdG9wQ2hlY2tTZXNzaW9uT25FcnJvciIsIl9zdWIiLCJfc2lkIiwiX2NoZWNrU2Vzc2lvbklGcmFtZSIsImdldENoZWNrU2Vzc2lvbklmcmFtZSIsIl9jaGVja1Nlc3Npb25JbnRlcnZhbCIsIl9zdG9wQ2hlY2tTZXNzaW9uT25FcnJvciIsImxvYWQiLCJzdGFydCIsInRpbWVySGFuZGxlIiwicmFpc2VFdmVudCIsIl9yYWlzZVVzZXJTZXNzaW9uQ2hhbmdlZCIsIl9yYWlzZVVzZXJTaWduZWRPdXQiLCJfcmFpc2VVc2VyU2lnbmVkSW4iLCJvaWRjIiwiaXNPaWRjIiwiYWRkUXVlcnlQYXJhbSIsImNvZGVfY2hhbGxlbmdlIiwiT2lkY1Njb3BlIiwiZXhwaXJlc19hdCIsInNjb3BlcyIsIl9ub25jZSIsIl9jb2RlX3ZlcmlmaWVyIiwiX2NvZGVfY2hhbGxlbmdlIiwiX3NraXBVc2VySW5mbyIsImNyZWF0ZWQiLCJzdG9yYWdlU3RyaW5nIiwiU2lsZW50UmVuZXdTZXJ2aWNlIiwiX3Rva2VuRXhwaXJpbmciLCJhZGRBY2Nlc3NUb2tlbkV4cGlyaW5nIiwicmVtb3ZlQWNjZXNzVG9rZW5FeHBpcmluZyIsInNpZ25pblNpbGVudCIsIl9yYWlzZVNpbGVudFJlbmV3RXJyb3IiLCJfY3JlYXRlZCIsIl9yZXF1ZXN0X3R5cGUiLCJzdG9yYWdlIiwiYWdlIiwiY3V0b2ZmIiwiZ2V0QWxsS2V5cyIsInByb21pc2VzIiwiYWxsIiwiVGltZXJEdXJhdGlvbiIsIm5vd0Z1bmMiLCJfbm93RnVuYyIsImV4cGlyYXRpb24iLCJfdGltZXJIYW5kbGUiLCJfZXhwaXJhdGlvbiIsInRpbWVyRHVyYXRpb24iLCJkaWZmIiwiZ3JhbnRfdHlwZSIsImdldFRva2VuRW5kcG9pbnQiLCJwb3N0Rm9ybSIsInJlZnJlc2hfdG9rZW4iLCJBY2Nlc3NUb2tlblR5cGVIaW50IiwiUmVmcmVzaFRva2VuVHlwZUhpbnQiLCJUb2tlblJldm9jYXRpb25DbGllbnQiLCJfWE1MSHR0cFJlcXVlc3RDdG9yIiwicmVxdWlyZWQiLCJnZXRSZXZvY2F0aW9uRW5kcG9pbnQiLCJfcmV2b2tlIiwieGhyIiwiZ2xvYmFsIiwibGFzdEluZGV4T2YiLCJyZWdleCIsImNvdW50ZXIiLCJleGVjIiwicHJvcCIsIlVzZXIiLCJ0b2tlbl90eXBlIiwib3RoZXJWYWx1ZXMiLCJvdGhlckNsYWltcyIsIl9nZXRDbGFpbXNGcm9tSnd0IiwiZ2V0VXNlckluZm9FbmRwb2ludCIsImlzc3VlclByb21pc2UiLCJVc2VyTWFuYWdlciIsIlNpbGVudFJlbmV3U2VydmljZUN0b3IiLCJTZXNzaW9uTW9uaXRvckN0b3IiLCJUb2tlblJldm9jYXRpb25DbGllbnRDdG9yIiwiVXNlck1hbmFnZXJTZXR0aW5ncyIsIl9ldmVudHMiLCJVc2VyTWFuYWdlckV2ZW50cyIsIl9zaWxlbnRSZW5ld1NlcnZpY2UiLCJhdXRvbWF0aWNTaWxlbnRSZW5ldyIsInN0YXJ0U2lsZW50UmVuZXciLCJtb25pdG9yU2Vzc2lvbiIsIl9zZXNzaW9uTW9uaXRvciIsIl90b2tlblJldm9jYXRpb25DbGllbnQiLCJyZWRpcmVjdE5hdmlnYXRvciIsInBvcHVwTmF2aWdhdG9yIiwiaWZyYW1lTmF2aWdhdG9yIiwidXNlclN0b3JlIiwiX2xvYWRVc2VyIiwic3RvcmVVc2VyIiwidW5sb2FkIiwibmF2UGFyYW1zIiwiX3NpZ25pblN0YXJ0IiwiX3JlZGlyZWN0TmF2aWdhdG9yIiwiX3NpZ25pbkVuZCIsInBvcHVwX3JlZGlyZWN0X3VyaSIsIl9zaWduaW4iLCJfcG9wdXBOYXZpZ2F0b3IiLCJfc2lnbmluQ2FsbGJhY2siLCJfdXNlUmVmcmVzaFRva2VuIiwiaW5jbHVkZUlkVG9rZW5JblNpbGVudFJlbmV3IiwidmFsaWRhdGVTdWJPblNpbGVudFJlbmV3IiwiY3VycmVudF9zdWIiLCJfc2lnbmluU2lsZW50SWZyYW1lIiwiZXhjaGFuZ2VSZWZyZXNoVG9rZW4iLCJpZFRva2VuVmFsaWRhdGlvbiIsIl92YWxpZGF0ZUlkVG9rZW5Gcm9tVG9rZW5SZWZyZXNoVG9rZW4iLCJhdXRoX3RpbWUiLCJzaWxlbnRfcmVkaXJlY3RfdXJpIiwiX2lmcmFtZU5hdmlnYXRvciIsInNpZ25pblJlZGlyZWN0Q2FsbGJhY2siLCJzaWduaW5Qb3B1cENhbGxiYWNrIiwic2lnbmluU2lsZW50Q2FsbGJhY2siLCJzaWdub3V0UmVkaXJlY3RDYWxsYmFjayIsInNpZ25vdXRQb3B1cENhbGxiYWNrIiwicXVlcnlfc3RhdHVzX3Jlc3BvbnNlX3R5cGUiLCJuYXZSZXNwb25zZSIsInByb2Nlc3NTaWduaW5SZXNwb25zZSIsInNpZ25pblJlc3BvbnNlIiwibmF2aWdhdG9yUGFyYW1zIiwicHJlcGFyZSIsImNyZWF0ZVNpZ25pblJlcXVlc3QiLCJuYXZpZ2F0ZSIsInBvc3RMb2dvdXRSZWRpcmVjdFVyaSIsIl9zaWdub3V0U3RhcnQiLCJfc2lnbm91dEVuZCIsInBvcHVwX3Bvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSIsIl9zaWdub3V0IiwicmV2b2tlUHJvbWlzZSIsInJldm9rZUFjY2Vzc1Rva2VuT25TaWdub3V0IiwiX3Jldm9rZUludGVybmFsIiwicmVtb3ZlVXNlciIsImNyZWF0ZVNpZ25vdXRSZXF1ZXN0Iiwic2lnbm91dFJlcXVlc3QiLCJwcm9jZXNzU2lnbm91dFJlc3BvbnNlIiwic2lnbm91dFJlc3BvbnNlIiwic3VjY2VzcyIsIl9yZXZva2VBY2Nlc3NUb2tlbkludGVybmFsIiwiYXRTdWNjZXNzIiwiX3Jldm9rZVJlZnJlc2hUb2tlbkludGVybmFsIiwicnRTdWNjZXNzIiwicmV2b2tlIiwiX3VzZXJTdG9yZSIsIl91c2VyU3RvcmVLZXkiLCJfdXNlckxvYWRlZCIsIl91c2VyVW5sb2FkZWQiLCJfc2lsZW50UmVuZXdFcnJvciIsIl91c2VyU2lnbmVkSW4iLCJfdXNlclNpZ25lZE91dCIsIl91c2VyU2Vzc2lvbkNoYW5nZWQiLCJyYWlzZSIsIkRlZmF1bHRDaGVja1Nlc3Npb25JbnRlcnZhbCIsInN0b3JlIiwiX3BvcHVwX3JlZGlyZWN0X3VyaSIsIl9wb3B1cF9wb3N0X2xvZ291dF9yZWRpcmVjdF91cmkiLCJfcG9wdXBXaW5kb3dGZWF0dXJlcyIsIl9wb3B1cFdpbmRvd1RhcmdldCIsIl9zaWxlbnRfcmVkaXJlY3RfdXJpIiwiX3NpbGVudFJlcXVlc3RUaW1lb3V0IiwiX2F1dG9tYXRpY1NpbGVudFJlbmV3IiwiX3ZhbGlkYXRlU3ViT25TaWxlbnRSZW5ldyIsIl9pbmNsdWRlSWRUb2tlbkluU2lsZW50UmVuZXciLCJfbW9uaXRvclNlc3Npb24iLCJfbW9uaXRvckFub255bW91c1Nlc3Npb24iLCJfcXVlcnlfc3RhdHVzX3Jlc3BvbnNlX3R5cGUiLCJfcmV2b2tlQWNjZXNzVG9rZW5PblNpZ25vdXQiLCJwcmVmaXgiLCJfc3RvcmUiLCJfcHJlZml4Iiwic2V0SXRlbSIsImdldEl0ZW0iLCJyZW1vdmVJdGVtIiwiX2NyeXB0b1V1aWR2NCIsIl91dWlk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QUF4SyxFQUE0SyxHQUE1SyxFQUFnTCxHQUFoTCxFQUFvTCxHQUFwTCxFQUF3TCxHQUF4TCxFQUE0TCxHQUE1TCxFQUFnTSxHQUFoTSxFQUFvTSxHQUFwTSxFQUF3TSxHQUF4TSxFQUE0TSxHQUE1TSxFQUFnTixHQUFoTixFQUFvTixHQUFwTixFQUF3TixHQUF4TixFQUE0TixHQUE1TixFQUFnTyxHQUFoTyxFQUFvTyxHQUFwTyxFQUF3TyxHQUF4TyxFQUE0TyxHQUE1TyxFQUFnUCxHQUFoUCxFQUFvUCxHQUFwUCxFQUF3UCxHQUF4UCxFQUE0UCxHQUE1UCxFQUFnUSxHQUFoUSxFQUFvUSxHQUFwUSxFQUF3USxHQUF4USxFQUE0USxHQUE1USxFQUFnUixHQUFoUixFQUFvUixHQUFwUixFQUF3UixHQUF4UixFQUE0UixHQUE1UixFQUFnUyxHQUFoUyxFQUFvUyxHQUFwUyxFQUF3UyxHQUF4UyxFQUE0UyxHQUE1UyxFQUFnVCxHQUFoVCxFQUFvVCxHQUFwVCxFQUF3VCxHQUF4VCxFQUE0VCxHQUE1VCxFQUFnVSxHQUFoVSxFQUFvVSxHQUFwVSxFQUF3VSxHQUF4VSxFQUE0VSxHQUE1VSxFQUFnVixHQUFoVixFQUFvVixHQUFwVixFQUF3VixHQUF4VixFQUE0VixHQUE1VixFQUFnVyxHQUFoVyxFQUFvVyxHQUFwVyxFQUF3VyxHQUF4VyxFQUE0VyxHQUE1VyxFQUFnWCxHQUFoWCxFQUFvWCxHQUFwWCxFQUF3WCxHQUF4WCxFQUE0WCxHQUE1WCxFQUFnWSxHQUFoWSxFQUFvWSxHQUFwWSxFQUF3WSxHQUF4WSxFQUE0WSxHQUE1WSxFQUFnWixHQUFoWixFQUFvWixHQUFwWixFQUF3WixHQUF4WixFQUE0WixHQUE1WixFQUFnYSxHQUFoYSxFQUFvYSxHQUFwYSxFQUF3YSxHQUF4YSxFQUE0YSxHQUE1YSxFQUFnYixHQUFoYixFQUFvYixHQUFwYixFQUF3YixHQUF4YixFQUE0YixHQUE1YixFQUFnYyxHQUFoYyxFQUFvYyxHQUFwYyxFQUF3YyxHQUF4YyxFQUE0YyxHQUE1YyxFQUFnZCxHQUFoZCxFQUFvZCxH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QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsVUFBVTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsWUFBWTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBLHVDQUF1QyxTQUFTO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsaUJBQWlCO0FBQ2hDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxpQkFBaUI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELEVBQUU7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGVBQWU7QUFDdkM7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0Esd0JBQXdCLFFBQVE7QUFDaEM7QUFDQSxxQkFBcUIsZUFBZTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsWUFBWTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEscUJBQXFCLFNBQVM7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHFCQUFxQixTQUFTO0FBQzlCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLHFCQUFxQixTQUFTO0FBQzlCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixrQkFBa0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLG1CQUFtQixjQUFjO0FBQ2pDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1REFBdUQsT0FBTztBQUM5RDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdURBQXVELE9BQU87QUFDOUQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EscUJBQXFCLFFBQVE7QUFDN0I7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGVBQWUsU0FBUztBQUN4QjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLG1CQUFtQixTQUFTO0FBQzVCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGlCQUFpQjtBQUNoQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7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QWQsSUFBa0MsV0FBdEU7QUFDQSxNQUFJa3dDLElBQUksR0FBR0QsZUFBZSxHQUFHSCxhQUFILEdBQW1CQyxPQUE3QztBQUNBLFNBQU9HLElBQUksR0FBR3JxQyxPQUFQLENBQWUsSUFBZixFQUFxQixFQUFyQixDQUFQO0FBQ0QsQzs7Ozs7Ozs7Ozs7O0FDdkJEO0FBQUE7QUFBQSxJQUFNc3FDLE9BQU8sR0FBRyxRQUFoQiIsImZpbGUiOiJvaWRjLWNsaWVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSB7XG5cdFx0dmFyIGEgPSBmYWN0b3J5KCk7XG5cdFx0Zm9yKHZhciBpIGluIGEpICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgPyBleHBvcnRzIDogcm9vdClbaV0gPSBhW2ldO1xuXHR9XG59KSh0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiAiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gXCIuL2luZGV4LmpzXCIpO1xuIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuZXhwb3J0IHsgTG9nIH0gZnJvbSAnLi9zcmMvTG9nLmpzJztcbmV4cG9ydCB7IE9pZGNDbGllbnQgfSBmcm9tICcuL3NyYy9PaWRjQ2xpZW50LmpzJztcbmV4cG9ydCB7IE9pZGNDbGllbnRTZXR0aW5ncyB9IGZyb20gJy4vc3JjL09pZGNDbGllbnRTZXR0aW5ncy5qcyc7XG5leHBvcnQgeyBXZWJTdG9yYWdlU3RhdGVTdG9yZSB9IGZyb20gJy4vc3JjL1dlYlN0b3JhZ2VTdGF0ZVN0b3JlLmpzJztcbmV4cG9ydCB7IEluTWVtb3J5V2ViU3RvcmFnZSB9IGZyb20gJy4vc3JjL0luTWVtb3J5V2ViU3RvcmFnZS5qcyc7XG5leHBvcnQgeyBVc2VyTWFuYWdlciB9IGZyb20gJy4vc3JjL1VzZXJNYW5hZ2VyLmpzJztcbmV4cG9ydCB7IEFjY2Vzc1Rva2VuRXZlbnRzIH0gZnJvbSAnLi9zcmMvQWNjZXNzVG9rZW5FdmVudHMuanMnO1xuZXhwb3J0IHsgTWV0YWRhdGFTZXJ2aWNlIH0gZnJvbSAnLi9zcmMvTWV0YWRhdGFTZXJ2aWNlLmpzJztcbmV4cG9ydCB7IENvcmRvdmFQb3B1cE5hdmlnYXRvciB9IGZyb20gJy4vc3JjL0NvcmRvdmFQb3B1cE5hdmlnYXRvci5qcyc7XG5leHBvcnQgeyBDb3Jkb3ZhSUZyYW1lTmF2aWdhdG9yIH0gZnJvbSAnLi9zcmMvQ29yZG92YUlGcmFtZU5hdmlnYXRvci5qcyc7XG5leHBvcnQgeyBDaGVja1Nlc3Npb25JRnJhbWUgfSBmcm9tICcuL3NyYy9DaGVja1Nlc3Npb25JRnJhbWUuanMnO1xuZXhwb3J0IHsgVG9rZW5SZXZvY2F0aW9uQ2xpZW50IH0gZnJvbSAnLi9zcmMvVG9rZW5SZXZvY2F0aW9uQ2xpZW50LmpzJztcbmV4cG9ydCB7IFNlc3Npb25Nb25pdG9yIH0gZnJvbSAnLi9zcmMvU2Vzc2lvbk1vbml0b3IuanMnO1xuZXhwb3J0IHsgR2xvYmFsIH0gZnJvbSAnLi9zcmMvR2xvYmFsLmpzJztcbmV4cG9ydCB7IFVzZXIgfSBmcm9tICcuL3NyYy9Vc2VyLmpzJztcbmV4cG9ydCB7IEVycm9yUmVzcG9uc2UgfSBmcm9tICcuL3NyYy9FcnJvclJlc3BvbnNlJztcbmV4cG9ydCB7IFN0YXRlIH0gZnJvbSAnLi9zcmMvU3RhdGUnO1xuZXhwb3J0IHsgU2lnbmluU3RhdGUgfSBmcm9tICcuL3NyYy9TaWduaW5TdGF0ZSc7XG5cbmV4cG9ydCB7IFZlcnNpb24gfSBmcm9tICcuL3ZlcnNpb24uanMnO1xuIiwiLypcbiAqIGpzcnNhc2lnbihhbGwpIDguMC4xMiAoMjAxOC0wNC0yMikgKGMpIDIwMTAtMjAxOCBLZW5qaSBVcnVzaGltYSB8IGtqdXIuZ2l0aHViLmNvbS9qc3JzYXNpZ24vbGljZW5zZVxuICovXG5cbnZhciBuYXZpZ2F0b3IgPSB7fTtcbm5hdmlnYXRvci51c2VyQWdlbnQgPSBmYWxzZTtcblxudmFyIHdpbmRvdyA9IHt9O1xuXG4vKiFcbkNvcHlyaWdodCAoYykgMjAxMSwgWWFob28hIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbkNvZGUgbGljZW5zZWQgdW5kZXIgdGhlIEJTRCBMaWNlbnNlOlxuaHR0cDovL2RldmVsb3Blci55YWhvby5jb20veXVpL2xpY2Vuc2UuaHRtbFxudmVyc2lvbjogMi45LjBcbiovXG5pZihZQUhPTz09PXVuZGVmaW5lZCl7dmFyIFlBSE9PPXt9fVlBSE9PLmxhbmc9e2V4dGVuZDpmdW5jdGlvbihnLGgsZil7aWYoIWh8fCFnKXt0aHJvdyBuZXcgRXJyb3IoXCJZQUhPTy5sYW5nLmV4dGVuZCBmYWlsZWQsIHBsZWFzZSBjaGVjayB0aGF0IGFsbCBkZXBlbmRlbmNpZXMgYXJlIGluY2x1ZGVkLlwiKX12YXIgZD1mdW5jdGlvbigpe307ZC5wcm90b3R5cGU9aC5wcm90b3R5cGU7Zy5wcm90b3R5cGU9bmV3IGQoKTtnLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1nO2cuc3VwZXJjbGFzcz1oLnByb3RvdHlwZTtpZihoLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj09T2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcil7aC5wcm90b3R5cGUuY29uc3RydWN0b3I9aH1pZihmKXt2YXIgYjtmb3IoYiBpbiBmKXtnLnByb3RvdHlwZVtiXT1mW2JdfXZhciBlPWZ1bmN0aW9uKCl7fSxjPVtcInRvU3RyaW5nXCIsXCJ2YWx1ZU9mXCJdO3RyeXtpZigvTVNJRS8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSl7ZT1mdW5jdGlvbihqLGkpe2ZvcihiPTA7YjxjLmxlbmd0aDtiPWIrMSl7dmFyIGw9Y1tiXSxrPWlbbF07aWYodHlwZW9mIGs9PT1cImZ1bmN0aW9uXCImJmshPU9iamVjdC5wcm90b3R5cGVbbF0pe2pbbF09a319fX19Y2F0Y2goYSl7fWUoZy5wcm90b3R5cGUsZil9fX07XG4vKiEgQ3J5cHRvSlMgdjMuMS4yIGNvcmUtZml4LmpzXG4gKiBjb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanNcbiAqIChjKSAyMDA5LTIwMTMgYnkgSmVmZiBNb3R0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZVxuICogVEhJUyBJUyBGSVggb2YgJ2NvcmUuanMnIHRvIGZpeCBIbWFjIGlzc3VlLlxuICogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanMvaXNzdWVzL2RldGFpbD9pZD04NFxuICogaHR0cHM6Ly9jcnlwdG8tanMuZ29vZ2xlY29kZS5jb20vc3ZuLWhpc3RvcnkvcjY2Ny9icmFuY2hlcy8zLngvc3JjL2NvcmUuanNcbiAqL1xudmFyIENyeXB0b0pTPUNyeXB0b0pTfHwoZnVuY3Rpb24oZSxnKXt2YXIgYT17fTt2YXIgYj1hLmxpYj17fTt2YXIgaj1iLkJhc2U9KGZ1bmN0aW9uKCl7ZnVuY3Rpb24gbigpe31yZXR1cm57ZXh0ZW5kOmZ1bmN0aW9uKHApe24ucHJvdG90eXBlPXRoaXM7dmFyIG89bmV3IG4oKTtpZihwKXtvLm1peEluKHApfWlmKCFvLmhhc093blByb3BlcnR5KFwiaW5pdFwiKSl7by5pbml0PWZ1bmN0aW9uKCl7by4kc3VwZXIuaW5pdC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fW8uaW5pdC5wcm90b3R5cGU9bztvLiRzdXBlcj10aGlzO3JldHVybiBvfSxjcmVhdGU6ZnVuY3Rpb24oKXt2YXIgbz10aGlzLmV4dGVuZCgpO28uaW5pdC5hcHBseShvLGFyZ3VtZW50cyk7cmV0dXJuIG99LGluaXQ6ZnVuY3Rpb24oKXt9LG1peEluOmZ1bmN0aW9uKHApe2Zvcih2YXIgbyBpbiBwKXtpZihwLmhhc093blByb3BlcnR5KG8pKXt0aGlzW29dPXBbb119fWlmKHAuaGFzT3duUHJvcGVydHkoXCJ0b1N0cmluZ1wiKSl7dGhpcy50b1N0cmluZz1wLnRvU3RyaW5nfX0sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pbml0LnByb3RvdHlwZS5leHRlbmQodGhpcyl9fX0oKSk7dmFyIGw9Yi5Xb3JkQXJyYXk9ai5leHRlbmQoe2luaXQ6ZnVuY3Rpb24obyxuKXtvPXRoaXMud29yZHM9b3x8W107aWYobiE9Zyl7dGhpcy5zaWdCeXRlcz1ufWVsc2V7dGhpcy5zaWdCeXRlcz1vLmxlbmd0aCo0fX0sdG9TdHJpbmc6ZnVuY3Rpb24obil7cmV0dXJuKG58fGgpLnN0cmluZ2lmeSh0aGlzKX0sY29uY2F0OmZ1bmN0aW9uKHQpe3ZhciBxPXRoaXMud29yZHM7dmFyIHA9dC53b3Jkczt2YXIgbj10aGlzLnNpZ0J5dGVzO3ZhciBzPXQuc2lnQnl0ZXM7dGhpcy5jbGFtcCgpO2lmKG4lNCl7Zm9yKHZhciByPTA7cjxzO3IrKyl7dmFyIG89KHBbcj4+PjJdPj4+KDI0LShyJTQpKjgpKSYyNTU7cVsobityKT4+PjJdfD1vPDwoMjQtKChuK3IpJTQpKjgpfX1lbHNle2Zvcih2YXIgcj0wO3I8cztyKz00KXtxWyhuK3IpPj4+Ml09cFtyPj4+Ml19fXRoaXMuc2lnQnl0ZXMrPXM7cmV0dXJuIHRoaXN9LGNsYW1wOmZ1bmN0aW9uKCl7dmFyIG89dGhpcy53b3Jkczt2YXIgbj10aGlzLnNpZ0J5dGVzO29bbj4+PjJdJj00Mjk0OTY3Mjk1PDwoMzItKG4lNCkqOCk7by5sZW5ndGg9ZS5jZWlsKG4vNCl9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIG49ai5jbG9uZS5jYWxsKHRoaXMpO24ud29yZHM9dGhpcy53b3Jkcy5zbGljZSgwKTtyZXR1cm4gbn0scmFuZG9tOmZ1bmN0aW9uKHApe3ZhciBvPVtdO2Zvcih2YXIgbj0wO248cDtuKz00KXtvLnB1c2goKGUucmFuZG9tKCkqNDI5NDk2NzI5Nil8MCl9cmV0dXJuIG5ldyBsLmluaXQobyxwKX19KTt2YXIgbT1hLmVuYz17fTt2YXIgaD1tLkhleD17c3RyaW5naWZ5OmZ1bmN0aW9uKHApe3ZhciByPXAud29yZHM7dmFyIG89cC5zaWdCeXRlczt2YXIgcT1bXTtmb3IodmFyIG49MDtuPG87bisrKXt2YXIgcz0ocltuPj4+Ml0+Pj4oMjQtKG4lNCkqOCkpJjI1NTtxLnB1c2goKHM+Pj40KS50b1N0cmluZygxNikpO3EucHVzaCgocyYxNSkudG9TdHJpbmcoMTYpKX1yZXR1cm4gcS5qb2luKFwiXCIpfSxwYXJzZTpmdW5jdGlvbihwKXt2YXIgbj1wLmxlbmd0aDt2YXIgcT1bXTtmb3IodmFyIG89MDtvPG47bys9Mil7cVtvPj4+M118PXBhcnNlSW50KHAuc3Vic3RyKG8sMiksMTYpPDwoMjQtKG8lOCkqNCl9cmV0dXJuIG5ldyBsLmluaXQocSxuLzIpfX07dmFyIGQ9bS5MYXRpbjE9e3N0cmluZ2lmeTpmdW5jdGlvbihxKXt2YXIgcj1xLndvcmRzO3ZhciBwPXEuc2lnQnl0ZXM7dmFyIG49W107Zm9yKHZhciBvPTA7bzxwO28rKyl7dmFyIHM9KHJbbz4+PjJdPj4+KDI0LShvJTQpKjgpKSYyNTU7bi5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUocykpfXJldHVybiBuLmpvaW4oXCJcIil9LHBhcnNlOmZ1bmN0aW9uKHApe3ZhciBuPXAubGVuZ3RoO3ZhciBxPVtdO2Zvcih2YXIgbz0wO288bjtvKyspe3Fbbz4+PjJdfD0ocC5jaGFyQ29kZUF0KG8pJjI1NSk8PCgyNC0obyU0KSo4KX1yZXR1cm4gbmV3IGwuaW5pdChxLG4pfX07dmFyIGM9bS5VdGY4PXtzdHJpbmdpZnk6ZnVuY3Rpb24obil7dHJ5e3JldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKGQuc3RyaW5naWZ5KG4pKSl9Y2F0Y2gobyl7dGhyb3cgbmV3IEVycm9yKFwiTWFsZm9ybWVkIFVURi04IGRhdGFcIil9fSxwYXJzZTpmdW5jdGlvbihuKXtyZXR1cm4gZC5wYXJzZSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQobikpKX19O3ZhciBpPWIuQnVmZmVyZWRCbG9ja0FsZ29yaXRobT1qLmV4dGVuZCh7cmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9kYXRhPW5ldyBsLmluaXQoKTt0aGlzLl9uRGF0YUJ5dGVzPTB9LF9hcHBlbmQ6ZnVuY3Rpb24obil7aWYodHlwZW9mIG49PVwic3RyaW5nXCIpe249Yy5wYXJzZShuKX10aGlzLl9kYXRhLmNvbmNhdChuKTt0aGlzLl9uRGF0YUJ5dGVzKz1uLnNpZ0J5dGVzfSxfcHJvY2VzczpmdW5jdGlvbih3KXt2YXIgcT10aGlzLl9kYXRhO3ZhciB4PXEud29yZHM7dmFyIG49cS5zaWdCeXRlczt2YXIgdD10aGlzLmJsb2NrU2l6ZTt2YXIgdj10KjQ7dmFyIHU9bi92O2lmKHcpe3U9ZS5jZWlsKHUpfWVsc2V7dT1lLm1heCgodXwwKS10aGlzLl9taW5CdWZmZXJTaXplLDApfXZhciBzPXUqdDt2YXIgcj1lLm1pbihzKjQsbik7aWYocyl7Zm9yKHZhciBwPTA7cDxzO3ArPXQpe3RoaXMuX2RvUHJvY2Vzc0Jsb2NrKHgscCl9dmFyIG89eC5zcGxpY2UoMCxzKTtxLnNpZ0J5dGVzLT1yfXJldHVybiBuZXcgbC5pbml0KG8scil9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIG49ai5jbG9uZS5jYWxsKHRoaXMpO24uX2RhdGE9dGhpcy5fZGF0YS5jbG9uZSgpO3JldHVybiBufSxfbWluQnVmZmVyU2l6ZTowfSk7dmFyIGY9Yi5IYXNoZXI9aS5leHRlbmQoe2NmZzpqLmV4dGVuZCgpLGluaXQ6ZnVuY3Rpb24obil7dGhpcy5jZmc9dGhpcy5jZmcuZXh0ZW5kKG4pO3RoaXMucmVzZXQoKX0scmVzZXQ6ZnVuY3Rpb24oKXtpLnJlc2V0LmNhbGwodGhpcyk7dGhpcy5fZG9SZXNldCgpfSx1cGRhdGU6ZnVuY3Rpb24obil7dGhpcy5fYXBwZW5kKG4pO3RoaXMuX3Byb2Nlc3MoKTtyZXR1cm4gdGhpc30sZmluYWxpemU6ZnVuY3Rpb24obil7aWYobil7dGhpcy5fYXBwZW5kKG4pfXZhciBvPXRoaXMuX2RvRmluYWxpemUoKTtyZXR1cm4gb30sYmxvY2tTaXplOjUxMi8zMixfY3JlYXRlSGVscGVyOmZ1bmN0aW9uKG4pe3JldHVybiBmdW5jdGlvbihwLG8pe3JldHVybiBuZXcgbi5pbml0KG8pLmZpbmFsaXplKHApfX0sX2NyZWF0ZUhtYWNIZWxwZXI6ZnVuY3Rpb24obil7cmV0dXJuIGZ1bmN0aW9uKHAsbyl7cmV0dXJuIG5ldyBrLkhNQUMuaW5pdChuLG8pLmZpbmFsaXplKHApfX19KTt2YXIgaz1hLmFsZ289e307cmV0dXJuIGF9KE1hdGgpKTtcbi8qXG5DcnlwdG9KUyB2My4xLjIgeDY0LWNvcmUtbWluLmpzXG5jb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanNcbihjKSAyMDA5LTIwMTMgYnkgSmVmZiBNb3R0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZVxuKi9cbihmdW5jdGlvbihnKXt2YXIgYT1DcnlwdG9KUyxmPWEubGliLGU9Zi5CYXNlLGg9Zi5Xb3JkQXJyYXksYT1hLng2ND17fTthLldvcmQ9ZS5leHRlbmQoe2luaXQ6ZnVuY3Rpb24oYixjKXt0aGlzLmhpZ2g9Yjt0aGlzLmxvdz1jfX0pO2EuV29yZEFycmF5PWUuZXh0ZW5kKHtpbml0OmZ1bmN0aW9uKGIsYyl7Yj10aGlzLndvcmRzPWJ8fFtdO3RoaXMuc2lnQnl0ZXM9YyE9Zz9jOjgqYi5sZW5ndGh9LHRvWDMyOmZ1bmN0aW9uKCl7Zm9yKHZhciBiPXRoaXMud29yZHMsYz1iLmxlbmd0aCxhPVtdLGQ9MDtkPGM7ZCsrKXt2YXIgZT1iW2RdO2EucHVzaChlLmhpZ2gpO2EucHVzaChlLmxvdyl9cmV0dXJuIGguY3JlYXRlKGEsdGhpcy5zaWdCeXRlcyl9LGNsb25lOmZ1bmN0aW9uKCl7Zm9yKHZhciBiPWUuY2xvbmUuY2FsbCh0aGlzKSxjPWIud29yZHM9dGhpcy53b3Jkcy5zbGljZSgwKSxhPWMubGVuZ3RoLGQ9MDtkPGE7ZCsrKWNbZF09Y1tkXS5jbG9uZSgpO3JldHVybiBifX0pfSkoKTtcblxuLypcbkNyeXB0b0pTIHYzLjEuMiBlbmMtYmFzZTY0LmpzXG5jb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanNcbihjKSAyMDA5LTIwMTMgYnkgSmVmZiBNb3R0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZVxuKi9cbihmdW5jdGlvbigpe3ZhciBoPUNyeXB0b0pTLGo9aC5saWIuV29yZEFycmF5O2guZW5jLkJhc2U2ND17c3RyaW5naWZ5OmZ1bmN0aW9uKGIpe3ZhciBlPWIud29yZHMsZj1iLnNpZ0J5dGVzLGM9dGhpcy5fbWFwO2IuY2xhbXAoKTtiPVtdO2Zvcih2YXIgYT0wO2E8ZjthKz0zKWZvcih2YXIgZD0oZVthPj4+Ml0+Pj4yNC04KihhJTQpJjI1NSk8PDE2fChlW2ErMT4+PjJdPj4+MjQtOCooKGErMSklNCkmMjU1KTw8OHxlW2ErMj4+PjJdPj4+MjQtOCooKGErMiklNCkmMjU1LGc9MDs0PmcmJmErMC43NSpnPGY7ZysrKWIucHVzaChjLmNoYXJBdChkPj4+NiooMy1nKSY2MykpO2lmKGU9Yy5jaGFyQXQoNjQpKWZvcig7Yi5sZW5ndGglNDspYi5wdXNoKGUpO3JldHVybiBiLmpvaW4oXCJcIil9LHBhcnNlOmZ1bmN0aW9uKGIpe3ZhciBlPWIubGVuZ3RoLGY9dGhpcy5fbWFwLGM9Zi5jaGFyQXQoNjQpO2MmJihjPWIuaW5kZXhPZihjKSwtMSE9YyYmKGU9YykpO2Zvcih2YXIgYz1bXSxhPTAsZD0wO2Q8XG5lO2QrKylpZihkJTQpe3ZhciBnPWYuaW5kZXhPZihiLmNoYXJBdChkLTEpKTw8MiooZCU0KSxoPWYuaW5kZXhPZihiLmNoYXJBdChkKSk+Pj42LTIqKGQlNCk7Y1thPj4+Ml18PShnfGgpPDwyNC04KihhJTQpO2ErK31yZXR1cm4gai5jcmVhdGUoYyxhKX0sX21hcDpcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89XCJ9fSkoKTtcblxuLypcbkNyeXB0b0pTIHYzLjEuMiBzaGEyNTYtbWluLmpzXG5jb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanNcbihjKSAyMDA5LTIwMTMgYnkgSmVmZiBNb3R0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZVxuKi9cbihmdW5jdGlvbihrKXtmb3IodmFyIGc9Q3J5cHRvSlMsaD1nLmxpYix2PWguV29yZEFycmF5LGo9aC5IYXNoZXIsaD1nLmFsZ28scz1bXSx0PVtdLHU9ZnVuY3Rpb24ocSl7cmV0dXJuIDQyOTQ5NjcyOTYqKHEtKHF8MCkpfDB9LGw9MixiPTA7NjQ+Yjspe3ZhciBkO2E6e2Q9bDtmb3IodmFyIHc9ay5zcXJ0KGQpLHI9MjtyPD13O3IrKylpZighKGQlcikpe2Q9ITE7YnJlYWsgYX1kPSEwfWQmJig4PmImJihzW2JdPXUoay5wb3cobCwwLjUpKSksdFtiXT11KGsucG93KGwsMS8zKSksYisrKTtsKyt9dmFyIG49W10saD1oLlNIQTI1Nj1qLmV4dGVuZCh7X2RvUmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9oYXNoPW5ldyB2LmluaXQocy5zbGljZSgwKSl9LF9kb1Byb2Nlc3NCbG9jazpmdW5jdGlvbihxLGgpe2Zvcih2YXIgYT10aGlzLl9oYXNoLndvcmRzLGM9YVswXSxkPWFbMV0sYj1hWzJdLGs9YVszXSxmPWFbNF0sZz1hWzVdLGo9YVs2XSxsPWFbN10sZT0wOzY0PmU7ZSsrKXtpZigxNj5lKW5bZV09XG5xW2grZV18MDtlbHNle3ZhciBtPW5bZS0xNV0scD1uW2UtMl07bltlXT0oKG08PDI1fG0+Pj43KV4obTw8MTR8bT4+PjE4KV5tPj4+MykrbltlLTddKygocDw8MTV8cD4+PjE3KV4ocDw8MTN8cD4+PjE5KV5wPj4+MTApK25bZS0xNl19bT1sKygoZjw8MjZ8Zj4+PjYpXihmPDwyMXxmPj4+MTEpXihmPDw3fGY+Pj4yNSkpKyhmJmdefmYmaikrdFtlXStuW2VdO3A9KChjPDwzMHxjPj4+MileKGM8PDE5fGM+Pj4xMyleKGM8PDEwfGM+Pj4yMikpKyhjJmReYyZiXmQmYik7bD1qO2o9ZztnPWY7Zj1rK218MDtrPWI7Yj1kO2Q9YztjPW0rcHwwfWFbMF09YVswXStjfDA7YVsxXT1hWzFdK2R8MDthWzJdPWFbMl0rYnwwO2FbM109YVszXStrfDA7YVs0XT1hWzRdK2Z8MDthWzVdPWFbNV0rZ3wwO2FbNl09YVs2XStqfDA7YVs3XT1hWzddK2x8MH0sX2RvRmluYWxpemU6ZnVuY3Rpb24oKXt2YXIgZD10aGlzLl9kYXRhLGI9ZC53b3JkcyxhPTgqdGhpcy5fbkRhdGFCeXRlcyxjPTgqZC5zaWdCeXRlcztcbmJbYz4+PjVdfD0xMjg8PDI0LWMlMzI7YlsoYys2ND4+Pjk8PDQpKzE0XT1rLmZsb29yKGEvNDI5NDk2NzI5Nik7YlsoYys2ND4+Pjk8PDQpKzE1XT1hO2Quc2lnQnl0ZXM9NCpiLmxlbmd0aDt0aGlzLl9wcm9jZXNzKCk7cmV0dXJuIHRoaXMuX2hhc2h9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGI9ai5jbG9uZS5jYWxsKHRoaXMpO2IuX2hhc2g9dGhpcy5faGFzaC5jbG9uZSgpO3JldHVybiBifX0pO2cuU0hBMjU2PWouX2NyZWF0ZUhlbHBlcihoKTtnLkhtYWNTSEEyNTY9ai5fY3JlYXRlSG1hY0hlbHBlcihoKX0pKE1hdGgpO1xuXG4vKlxuQ3J5cHRvSlMgdjMuMS4yIHNoYTUxMi1taW4uanNcbmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qc1xuKGMpIDIwMDktMjAxMyBieSBKZWZmIE1vdHQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5jb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanMvd2lraS9MaWNlbnNlXG4qL1xuKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gYSgpe3JldHVybiBkLmNyZWF0ZS5hcHBseShkLGFyZ3VtZW50cyl9Zm9yKHZhciBuPUNyeXB0b0pTLHI9bi5saWIuSGFzaGVyLGU9bi54NjQsZD1lLldvcmQsVD1lLldvcmRBcnJheSxlPW4uYWxnbyxlYT1bYSgxMTE2MzUyNDA4LDM2MDk3Njc0NTgpLGEoMTg5OTQ0NzQ0MSw2MDI4OTE3MjUpLGEoMzA0OTMyMzQ3MSwzOTY0NDg0Mzk5KSxhKDM5MjEwMDk1NzMsMjE3MzI5NTU0OCksYSg5NjE5ODcxNjMsNDA4MTYyODQ3MiksYSgxNTA4OTcwOTkzLDMwNTM4MzQyNjUpLGEoMjQ1MzYzNTc0OCwyOTM3NjcxNTc5KSxhKDI4NzA3NjMyMjEsMzY2NDYwOTU2MCksYSgzNjI0MzgxMDgwLDI3MzQ4ODMzOTQpLGEoMzEwNTk4NDAxLDExNjQ5OTY1NDIpLGEoNjA3MjI1Mjc4LDEzMjM2MTA3NjQpLGEoMTQyNjg4MTk4NywzNTkwMzA0OTk0KSxhKDE5MjUwNzgzODgsNDA2ODE4MjM4MyksYSgyMTYyMDc4MjA2LDk5MTMzNjExMyksYSgyNjE0ODg4MTAzLDYzMzgwMzMxNyksXG5hKDMyNDgyMjI1ODAsMzQ3OTc3NDg2OCksYSgzODM1MzkwNDAxLDI2NjY2MTM0NTgpLGEoNDAyMjIyNDc3NCw5NDQ3MTExMzkpLGEoMjY0MzQ3MDc4LDIzNDEyNjI3NzMpLGEoNjA0ODA3NjI4LDIwMDc4MDA5MzMpLGEoNzcwMjU1OTgzLDE0OTU5OTA5MDEpLGEoMTI0OTE1MDEyMiwxODU2NDMxMjM1KSxhKDE1NTUwODE2OTIsMzE3NTIxODEzMiksYSgxOTk2MDY0OTg2LDIxOTg5NTA4MzcpLGEoMjU1NDIyMDg4MiwzOTk5NzE5MzM5KSxhKDI4MjE4MzQzNDksNzY2Nzg0MDE2KSxhKDI5NTI5OTY4MDgsMjU2NjU5NDg3OSksYSgzMjEwMzEzNjcxLDMyMDMzMzc5NTYpLGEoMzMzNjU3MTg5MSwxMDM0NDU3MDI2KSxhKDM1ODQ1Mjg3MTEsMjQ2Njk0ODkwMSksYSgxMTM5MjY5OTMsMzc1ODMyNjM4MyksYSgzMzgyNDE4OTUsMTY4NzE3OTM2KSxhKDY2NjMwNzIwNSwxMTg4MTc5OTY0KSxhKDc3MzUyOTkxMiwxNTQ2MDQ1NzM0KSxhKDEyOTQ3NTczNzIsMTUyMjgwNTQ4NSksYSgxMzk2MTgyMjkxLFxuMjY0MzgzMzgyMyksYSgxNjk1MTgzNzAwLDIzNDM1MjczOTApLGEoMTk4NjY2MTA1MSwxMDE0NDc3NDgwKSxhKDIxNzcwMjYzNTAsMTIwNjc1OTE0MiksYSgyNDU2OTU2MDM3LDM0NDA3NzYyNyksYSgyNzMwNDg1OTIxLDEyOTA4NjM0NjApLGEoMjgyMDMwMjQxMSwzMTU4NDU0MjczKSxhKDMyNTk3MzA4MDAsMzUwNTk1MjY1NyksYSgzMzQ1NzY0NzcxLDEwNjIxNzAwOCksYSgzNTE2MDY1ODE3LDM2MDYwMDgzNDQpLGEoMzYwMDM1MjgwNCwxNDMyNzI1Nzc2KSxhKDQwOTQ1NzE5MDksMTQ2NzAzMTU5NCksYSgyNzU0MjMzNDQsODUxMTY5NzIwKSxhKDQzMDIyNzczNCwzMTAwODIzNzUyKSxhKDUwNjk0ODYxNiwxMzYzMjU4MTk1KSxhKDY1OTA2MDU1NiwzNzUwNjg1NTkzKSxhKDg4Mzk5Nzg3NywzNzg1MDUwMjgwKSxhKDk1ODEzOTU3MSwzMzE4MzA3NDI3KSxhKDEzMjI4MjIyMTgsMzgxMjcyMzQwMyksYSgxNTM3MDAyMDYzLDIwMDMwMzQ5OTUpLGEoMTc0Nzg3Mzc3OSwzNjAyMDM2ODk5KSxcbmEoMTk1NTU2MjIyMiwxNTc1OTkwMDEyKSxhKDIwMjQxMDQ4MTUsMTEyNTU5MjkyOCksYSgyMjI3NzMwNDUyLDI3MTY5MDQzMDYpLGEoMjM2MTg1MjQyNCw0NDI3NzYwNDQpLGEoMjQyODQzNjQ3NCw1OTM2OTgzNDQpLGEoMjc1NjczNDE4NywzNzMzMTEwMjQ5KSxhKDMyMDQwMzE0NzksMjk5OTM1MTU3MyksYSgzMzI5MzI1Mjk4LDM4MTU5MjA0MjcpLGEoMzM5MTU2OTYxNCwzOTI4MzgzOTAwKSxhKDM1MTUyNjcyNzEsNTY2MjgwNzExKSxhKDM5NDAxODc2MDYsMzQ1NDA2OTUzNCksYSg0MTE4NjMwMjcxLDQwMDAyMzk5OTIpLGEoMTE2NDE4NDc0LDE5MTQxMzg1NTQpLGEoMTc0MjkyNDIxLDI3MzEwNTUyNzApLGEoMjg5MzgwMzU2LDMyMDM5OTMwMDYpLGEoNDYwMzkzMjY5LDMyMDYyMDMxNSksYSg2ODU0NzE3MzMsNTg3NDk2ODM2KSxhKDg1MjE0Mjk3MSwxMDg2NzkyODUxKSxhKDEwMTcwMzYyOTgsMzY1NTQzMTAwKSxhKDExMjYwMDA1ODAsMjYxODI5NzY3NiksYSgxMjg4MDMzNDcwLFxuMzQwOTg1NTE1OCksYSgxNTAxNTA1OTQ4LDQyMzQ1MDk4NjYpLGEoMTYwNzE2NzkxNSw5ODcxNjc0NjgpLGEoMTgxNjQwMjMxNiwxMjQ2MTg5NTkxKV0sdj1bXSx3PTA7ODA+dzt3Kyspdlt3XT1hKCk7ZT1lLlNIQTUxMj1yLmV4dGVuZCh7X2RvUmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9oYXNoPW5ldyBULmluaXQoW25ldyBkLmluaXQoMTc3OTAzMzcwMyw0MDg5MjM1NzIwKSxuZXcgZC5pbml0KDMxNDQxMzQyNzcsMjIyNzg3MzU5NSksbmV3IGQuaW5pdCgxMDEzOTA0MjQyLDQyNzExNzU3MjMpLG5ldyBkLmluaXQoMjc3MzQ4MDc2MiwxNTk1NzUwMTI5KSxuZXcgZC5pbml0KDEzNTk4OTMxMTksMjkxNzU2NTEzNyksbmV3IGQuaW5pdCgyNjAwODIyOTI0LDcyNTUxMTE5OSksbmV3IGQuaW5pdCg1Mjg3MzQ2MzUsNDIxNTM4OTU0NyksbmV3IGQuaW5pdCgxNTQxNDU5MjI1LDMyNzAzMzIwOSldKX0sX2RvUHJvY2Vzc0Jsb2NrOmZ1bmN0aW9uKGEsZCl7Zm9yKHZhciBmPXRoaXMuX2hhc2gud29yZHMsXG5GPWZbMF0sZT1mWzFdLG49ZlsyXSxyPWZbM10sRz1mWzRdLEg9Zls1XSxJPWZbNl0sZj1mWzddLHc9Ri5oaWdoLEo9Ri5sb3csWD1lLmhpZ2gsSz1lLmxvdyxZPW4uaGlnaCxMPW4ubG93LFo9ci5oaWdoLE09ci5sb3csJD1HLmhpZ2gsTj1HLmxvdyxhYT1ILmhpZ2gsTz1ILmxvdyxiYT1JLmhpZ2gsUD1JLmxvdyxjYT1mLmhpZ2gsUT1mLmxvdyxrPXcsZz1KLHo9WCx4PUssQT1ZLHk9TCxVPVosQj1NLGw9JCxoPU4sUj1hYSxDPU8sUz1iYSxEPVAsVj1jYSxFPVEsbT0wOzgwPm07bSsrKXt2YXIgcz12W21dO2lmKDE2Pm0pdmFyIGo9cy5oaWdoPWFbZCsyKm1dfDAsYj1zLmxvdz1hW2QrMiptKzFdfDA7ZWxzZXt2YXIgaj12W20tMTVdLGI9ai5oaWdoLHA9ai5sb3csaj0oYj4+PjF8cDw8MzEpXihiPj4+OHxwPDwyNCleYj4+PjcscD0ocD4+PjF8Yjw8MzEpXihwPj4+OHxiPDwyNCleKHA+Pj43fGI8PDI1KSx1PXZbbS0yXSxiPXUuaGlnaCxjPXUubG93LHU9KGI+Pj4xOXxjPDwxMyleKGI8PFxuM3xjPj4+MjkpXmI+Pj42LGM9KGM+Pj4xOXxiPDwxMyleKGM8PDN8Yj4+PjI5KV4oYz4+PjZ8Yjw8MjYpLGI9dlttLTddLFc9Yi5oaWdoLHQ9dlttLTE2XSxxPXQuaGlnaCx0PXQubG93LGI9cCtiLmxvdyxqPWorVysoYj4+PjA8cD4+PjA/MTowKSxiPWIrYyxqPWordSsoYj4+PjA8Yz4+PjA/MTowKSxiPWIrdCxqPWorcSsoYj4+PjA8dD4+PjA/MTowKTtzLmhpZ2g9ajtzLmxvdz1ifXZhciBXPWwmUl5+bCZTLHQ9aCZDXn5oJkQscz1rJnpeayZBXnomQSxUPWcmeF5nJnleeCZ5LHA9KGs+Pj4yOHxnPDw0KV4oazw8MzB8Zz4+PjIpXihrPDwyNXxnPj4+NyksdT0oZz4+PjI4fGs8PDQpXihnPDwzMHxrPj4+MileKGc8PDI1fGs+Pj43KSxjPWVhW21dLGZhPWMuaGlnaCxkYT1jLmxvdyxjPUUrKChoPj4+MTR8bDw8MTgpXihoPj4+MTh8bDw8MTQpXihoPDwyM3xsPj4+OSkpLHE9VisoKGw+Pj4xNHxoPDwxOCleKGw+Pj4xOHxoPDwxNCleKGw8PDIzfGg+Pj45KSkrKGM+Pj4wPEU+Pj4wPzE6XG4wKSxjPWMrdCxxPXErVysoYz4+PjA8dD4+PjA/MTowKSxjPWMrZGEscT1xK2ZhKyhjPj4+MDxkYT4+PjA/MTowKSxjPWMrYixxPXEraisoYz4+PjA8Yj4+PjA/MTowKSxiPXUrVCxzPXArcysoYj4+PjA8dT4+PjA/MTowKSxWPVMsRT1ELFM9UixEPUMsUj1sLEM9aCxoPUIrY3wwLGw9VStxKyhoPj4+MDxCPj4+MD8xOjApfDAsVT1BLEI9eSxBPXoseT14LHo9ayx4PWcsZz1jK2J8MCxrPXErcysoZz4+PjA8Yz4+PjA/MTowKXwwfUo9Ri5sb3c9SitnO0YuaGlnaD13K2srKEo+Pj4wPGc+Pj4wPzE6MCk7Sz1lLmxvdz1LK3g7ZS5oaWdoPVgreisoSz4+PjA8eD4+PjA/MTowKTtMPW4ubG93PUwreTtuLmhpZ2g9WStBKyhMPj4+MDx5Pj4+MD8xOjApO009ci5sb3c9TStCO3IuaGlnaD1aK1UrKE0+Pj4wPEI+Pj4wPzE6MCk7Tj1HLmxvdz1OK2g7Ry5oaWdoPSQrbCsoTj4+PjA8aD4+PjA/MTowKTtPPUgubG93PU8rQztILmhpZ2g9YWErUisoTz4+PjA8Qz4+PjA/MTowKTtQPUkubG93PVArRDtcbkkuaGlnaD1iYStTKyhQPj4+MDxEPj4+MD8xOjApO1E9Zi5sb3c9UStFO2YuaGlnaD1jYStWKyhRPj4+MDxFPj4+MD8xOjApfSxfZG9GaW5hbGl6ZTpmdW5jdGlvbigpe3ZhciBhPXRoaXMuX2RhdGEsZD1hLndvcmRzLGY9OCp0aGlzLl9uRGF0YUJ5dGVzLGU9OCphLnNpZ0J5dGVzO2RbZT4+PjVdfD0xMjg8PDI0LWUlMzI7ZFsoZSsxMjg+Pj4xMDw8NSkrMzBdPU1hdGguZmxvb3IoZi80Mjk0OTY3Mjk2KTtkWyhlKzEyOD4+PjEwPDw1KSszMV09ZjthLnNpZ0J5dGVzPTQqZC5sZW5ndGg7dGhpcy5fcHJvY2VzcygpO3JldHVybiB0aGlzLl9oYXNoLnRvWDMyKCl9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9ci5jbG9uZS5jYWxsKHRoaXMpO2EuX2hhc2g9dGhpcy5faGFzaC5jbG9uZSgpO3JldHVybiBhfSxibG9ja1NpemU6MzJ9KTtuLlNIQTUxMj1yLl9jcmVhdGVIZWxwZXIoZSk7bi5IbWFjU0hBNTEyPXIuX2NyZWF0ZUhtYWNIZWxwZXIoZSl9KSgpO1xuXG4vKlxuQ3J5cHRvSlMgdjMuMS4yIHNoYTM4NC1taW4uanNcbmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qc1xuKGMpIDIwMDktMjAxMyBieSBKZWZmIE1vdHQuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5jb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanMvd2lraS9MaWNlbnNlXG4qL1xuKGZ1bmN0aW9uKCl7dmFyIGM9Q3J5cHRvSlMsYT1jLng2NCxiPWEuV29yZCxlPWEuV29yZEFycmF5LGE9Yy5hbGdvLGQ9YS5TSEE1MTIsYT1hLlNIQTM4ND1kLmV4dGVuZCh7X2RvUmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9oYXNoPW5ldyBlLmluaXQoW25ldyBiLmluaXQoMzQxODA3MDM2NSwzMjM4MzcxMDMyKSxuZXcgYi5pbml0KDE2NTQyNzAyNTAsOTE0MTUwNjYzKSxuZXcgYi5pbml0KDI0Mzg1MjkzNzAsODEyNzAyOTk5KSxuZXcgYi5pbml0KDM1NTQ2MjM2MCw0MTQ0OTEyNjk3KSxuZXcgYi5pbml0KDE3MzE0MDU0MTUsNDI5MDc3NTg1NyksbmV3IGIuaW5pdCgyMzk0MTgwMjMxLDE3NTA2MDMwMjUpLG5ldyBiLmluaXQoMzY3NTAwODUyNSwxNjk0MDc2ODM5KSxuZXcgYi5pbml0KDEyMDMwNjI4MTMsMzIwNDA3NTQyOCldKX0sX2RvRmluYWxpemU6ZnVuY3Rpb24oKXt2YXIgYT1kLl9kb0ZpbmFsaXplLmNhbGwodGhpcyk7YS5zaWdCeXRlcy09MTY7cmV0dXJuIGF9fSk7Yy5TSEEzODQ9XG5kLl9jcmVhdGVIZWxwZXIoYSk7Yy5IbWFjU0hBMzg0PWQuX2NyZWF0ZUhtYWNIZWxwZXIoYSl9KSgpO1xuXG4vKiEgKGMpIFRvbSBXdSB8IGh0dHA6Ly93d3ctY3Mtc3R1ZGVudHMuc3RhbmZvcmQuZWR1L350ancvanNibi9cbiAqL1xudmFyIGI2NG1hcD1cIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky9cIjt2YXIgYjY0cGFkPVwiPVwiO2Z1bmN0aW9uIGhleDJiNjQoZCl7dmFyIGI7dmFyIGU7dmFyIGE9XCJcIjtmb3IoYj0wO2IrMzw9ZC5sZW5ndGg7Yis9Myl7ZT1wYXJzZUludChkLnN1YnN0cmluZyhiLGIrMyksMTYpO2ErPWI2NG1hcC5jaGFyQXQoZT4+NikrYjY0bWFwLmNoYXJBdChlJjYzKX1pZihiKzE9PWQubGVuZ3RoKXtlPXBhcnNlSW50KGQuc3Vic3RyaW5nKGIsYisxKSwxNik7YSs9YjY0bWFwLmNoYXJBdChlPDwyKX1lbHNle2lmKGIrMj09ZC5sZW5ndGgpe2U9cGFyc2VJbnQoZC5zdWJzdHJpbmcoYixiKzIpLDE2KTthKz1iNjRtYXAuY2hhckF0KGU+PjIpK2I2NG1hcC5jaGFyQXQoKGUmMyk8PDQpfX1pZihiNjRwYWQpe3doaWxlKChhLmxlbmd0aCYzKT4wKXthKz1iNjRwYWR9fXJldHVybiBhfWZ1bmN0aW9uIGI2NHRvaGV4KGYpe3ZhciBkPVwiXCI7dmFyIGU7dmFyIGI9MDt2YXIgYzt2YXIgYTtmb3IoZT0wO2U8Zi5sZW5ndGg7KytlKXtpZihmLmNoYXJBdChlKT09YjY0cGFkKXticmVha31hPWI2NG1hcC5pbmRleE9mKGYuY2hhckF0KGUpKTtpZihhPDApe2NvbnRpbnVlfWlmKGI9PTApe2QrPWludDJjaGFyKGE+PjIpO2M9YSYzO2I9MX1lbHNle2lmKGI9PTEpe2QrPWludDJjaGFyKChjPDwyKXwoYT4+NCkpO2M9YSYxNTtiPTJ9ZWxzZXtpZihiPT0yKXtkKz1pbnQyY2hhcihjKTtkKz1pbnQyY2hhcihhPj4yKTtjPWEmMztiPTN9ZWxzZXtkKz1pbnQyY2hhcigoYzw8Mil8KGE+PjQpKTtkKz1pbnQyY2hhcihhJjE1KTtiPTB9fX19aWYoYj09MSl7ZCs9aW50MmNoYXIoYzw8Mil9cmV0dXJuIGR9ZnVuY3Rpb24gYjY0dG9CQShlKXt2YXIgZD1iNjR0b2hleChlKTt2YXIgYzt2YXIgYj1uZXcgQXJyYXkoKTtmb3IoYz0wOzIqYzxkLmxlbmd0aDsrK2Mpe2JbY109cGFyc2VJbnQoZC5zdWJzdHJpbmcoMipjLDIqYysyKSwxNil9cmV0dXJuIGJ9O1xuLyohIChjKSBUb20gV3UgfCBodHRwOi8vd3d3LWNzLXN0dWRlbnRzLnN0YW5mb3JkLmVkdS9+dGp3L2pzYm4vXG4gKi9cbnZhciBkYml0czt2YXIgY2FuYXJ5PTI0NDgzNzgxNDA5NDU5MDt2YXIgal9sbT0oKGNhbmFyeSYxNjc3NzIxNSk9PTE1NzE1MDcwKTtmdW5jdGlvbiBCaWdJbnRlZ2VyKGUsZCxmKXtpZihlIT1udWxsKXtpZihcIm51bWJlclwiPT10eXBlb2YgZSl7dGhpcy5mcm9tTnVtYmVyKGUsZCxmKX1lbHNle2lmKGQ9PW51bGwmJlwic3RyaW5nXCIhPXR5cGVvZiBlKXt0aGlzLmZyb21TdHJpbmcoZSwyNTYpfWVsc2V7dGhpcy5mcm9tU3RyaW5nKGUsZCl9fX19ZnVuY3Rpb24gbmJpKCl7cmV0dXJuIG5ldyBCaWdJbnRlZ2VyKG51bGwpfWZ1bmN0aW9uIGFtMShmLGEsYixlLGgsZyl7d2hpbGUoLS1nPj0wKXt2YXIgZD1hKnRoaXNbZisrXStiW2VdK2g7aD1NYXRoLmZsb29yKGQvNjcxMDg4NjQpO2JbZSsrXT1kJjY3MTA4ODYzfXJldHVybiBofWZ1bmN0aW9uIGFtMihmLHEscixlLG8sYSl7dmFyIGs9cSYzMjc2NyxwPXE+PjE1O3doaWxlKC0tYT49MCl7dmFyIGQ9dGhpc1tmXSYzMjc2Nzt2YXIgZz10aGlzW2YrK10+PjE1O3ZhciBiPXAqZCtnKms7ZD1rKmQrKChiJjMyNzY3KTw8MTUpK3JbZV0rKG8mMTA3Mzc0MTgyMyk7bz0oZD4+PjMwKSsoYj4+PjE1KStwKmcrKG8+Pj4zMCk7cltlKytdPWQmMTA3Mzc0MTgyM31yZXR1cm4gb31mdW5jdGlvbiBhbTMoZixxLHIsZSxvLGEpe3ZhciBrPXEmMTYzODMscD1xPj4xNDt3aGlsZSgtLWE+PTApe3ZhciBkPXRoaXNbZl0mMTYzODM7dmFyIGc9dGhpc1tmKytdPj4xNDt2YXIgYj1wKmQrZyprO2Q9aypkKygoYiYxNjM4Myk8PDE0KStyW2VdK287bz0oZD4+MjgpKyhiPj4xNCkrcCpnO3JbZSsrXT1kJjI2ODQzNTQ1NX1yZXR1cm4gb31pZihqX2xtJiYobmF2aWdhdG9yLmFwcE5hbWU9PVwiTWljcm9zb2Z0IEludGVybmV0IEV4cGxvcmVyXCIpKXtCaWdJbnRlZ2VyLnByb3RvdHlwZS5hbT1hbTI7ZGJpdHM9MzB9ZWxzZXtpZihqX2xtJiYobmF2aWdhdG9yLmFwcE5hbWUhPVwiTmV0c2NhcGVcIikpe0JpZ0ludGVnZXIucHJvdG90eXBlLmFtPWFtMTtkYml0cz0yNn1lbHNle0JpZ0ludGVnZXIucHJvdG90eXBlLmFtPWFtMztkYml0cz0yOH19QmlnSW50ZWdlci5wcm90b3R5cGUuREI9ZGJpdHM7QmlnSW50ZWdlci5wcm90b3R5cGUuRE09KCgxPDxkYml0cyktMSk7QmlnSW50ZWdlci5wcm90b3R5cGUuRFY9KDE8PGRiaXRzKTt2YXIgQklfRlA9NTI7QmlnSW50ZWdlci5wcm90b3R5cGUuRlY9TWF0aC5wb3coMixCSV9GUCk7QmlnSW50ZWdlci5wcm90b3R5cGUuRjE9QklfRlAtZGJpdHM7QmlnSW50ZWdlci5wcm90b3R5cGUuRjI9MipkYml0cy1CSV9GUDt2YXIgQklfUk09XCIwMTIzNDU2Nzg5YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpcIjt2YXIgQklfUkM9bmV3IEFycmF5KCk7dmFyIHJyLHZ2O3JyPVwiMFwiLmNoYXJDb2RlQXQoMCk7Zm9yKHZ2PTA7dnY8PTk7Kyt2dil7QklfUkNbcnIrK109dnZ9cnI9XCJhXCIuY2hhckNvZGVBdCgwKTtmb3IodnY9MTA7dnY8MzY7Kyt2dil7QklfUkNbcnIrK109dnZ9cnI9XCJBXCIuY2hhckNvZGVBdCgwKTtmb3IodnY9MTA7dnY8MzY7Kyt2dil7QklfUkNbcnIrK109dnZ9ZnVuY3Rpb24gaW50MmNoYXIoYSl7cmV0dXJuIEJJX1JNLmNoYXJBdChhKX1mdW5jdGlvbiBpbnRBdChiLGEpe3ZhciBkPUJJX1JDW2IuY2hhckNvZGVBdChhKV07cmV0dXJuKGQ9PW51bGwpPy0xOmR9ZnVuY3Rpb24gYm5wQ29weVRvKGIpe2Zvcih2YXIgYT10aGlzLnQtMTthPj0wOy0tYSl7YlthXT10aGlzW2FdfWIudD10aGlzLnQ7Yi5zPXRoaXMuc31mdW5jdGlvbiBibnBGcm9tSW50KGEpe3RoaXMudD0xO3RoaXMucz0oYTwwKT8tMTowO2lmKGE+MCl7dGhpc1swXT1hfWVsc2V7aWYoYTwtMSl7dGhpc1swXT1hK3RoaXMuRFZ9ZWxzZXt0aGlzLnQ9MH19fWZ1bmN0aW9uIG5idihhKXt2YXIgYj1uYmkoKTtiLmZyb21JbnQoYSk7cmV0dXJuIGJ9ZnVuY3Rpb24gYm5wRnJvbVN0cmluZyhoLGMpe3ZhciBlO2lmKGM9PTE2KXtlPTR9ZWxzZXtpZihjPT04KXtlPTN9ZWxzZXtpZihjPT0yNTYpe2U9OH1lbHNle2lmKGM9PTIpe2U9MX1lbHNle2lmKGM9PTMyKXtlPTV9ZWxzZXtpZihjPT00KXtlPTJ9ZWxzZXt0aGlzLmZyb21SYWRpeChoLGMpO3JldHVybn19fX19fXRoaXMudD0wO3RoaXMucz0wO3ZhciBnPWgubGVuZ3RoLGQ9ZmFsc2UsZj0wO3doaWxlKC0tZz49MCl7dmFyIGE9KGU9PTgpP2hbZ10mMjU1OmludEF0KGgsZyk7aWYoYTwwKXtpZihoLmNoYXJBdChnKT09XCItXCIpe2Q9dHJ1ZX1jb250aW51ZX1kPWZhbHNlO2lmKGY9PTApe3RoaXNbdGhpcy50KytdPWF9ZWxzZXtpZihmK2U+dGhpcy5EQil7dGhpc1t0aGlzLnQtMV18PShhJigoMTw8KHRoaXMuREItZikpLTEpKTw8Zjt0aGlzW3RoaXMudCsrXT0oYT4+KHRoaXMuREItZikpfWVsc2V7dGhpc1t0aGlzLnQtMV18PWE8PGZ9fWYrPWU7aWYoZj49dGhpcy5EQil7Zi09dGhpcy5EQn19aWYoZT09OCYmKGhbMF0mMTI4KSE9MCl7dGhpcy5zPS0xO2lmKGY+MCl7dGhpc1t0aGlzLnQtMV18PSgoMTw8KHRoaXMuREItZikpLTEpPDxmfX10aGlzLmNsYW1wKCk7aWYoZCl7QmlnSW50ZWdlci5aRVJPLnN1YlRvKHRoaXMsdGhpcyl9fWZ1bmN0aW9uIGJucENsYW1wKCl7dmFyIGE9dGhpcy5zJnRoaXMuRE07d2hpbGUodGhpcy50PjAmJnRoaXNbdGhpcy50LTFdPT1hKXstLXRoaXMudH19ZnVuY3Rpb24gYm5Ub1N0cmluZyhjKXtpZih0aGlzLnM8MCl7cmV0dXJuXCItXCIrdGhpcy5uZWdhdGUoKS50b1N0cmluZyhjKX12YXIgZTtpZihjPT0xNil7ZT00fWVsc2V7aWYoYz09OCl7ZT0zfWVsc2V7aWYoYz09Mil7ZT0xfWVsc2V7aWYoYz09MzIpe2U9NX1lbHNle2lmKGM9PTQpe2U9Mn1lbHNle3JldHVybiB0aGlzLnRvUmFkaXgoYyl9fX19fXZhciBnPSgxPDxlKS0xLGwsYT1mYWxzZSxoPVwiXCIsZj10aGlzLnQ7dmFyIGo9dGhpcy5EQi0oZip0aGlzLkRCKSVlO2lmKGYtLT4wKXtpZihqPHRoaXMuREImJihsPXRoaXNbZl0+PmopPjApe2E9dHJ1ZTtoPWludDJjaGFyKGwpfXdoaWxlKGY+PTApe2lmKGo8ZSl7bD0odGhpc1tmXSYoKDE8PGopLTEpKTw8KGUtaik7bHw9dGhpc1stLWZdPj4oais9dGhpcy5EQi1lKX1lbHNle2w9KHRoaXNbZl0+PihqLT1lKSkmZztpZihqPD0wKXtqKz10aGlzLkRCOy0tZn19aWYobD4wKXthPXRydWV9aWYoYSl7aCs9aW50MmNoYXIobCl9fX1yZXR1cm4gYT9oOlwiMFwifWZ1bmN0aW9uIGJuTmVnYXRlKCl7dmFyIGE9bmJpKCk7QmlnSW50ZWdlci5aRVJPLnN1YlRvKHRoaXMsYSk7cmV0dXJuIGF9ZnVuY3Rpb24gYm5BYnMoKXtyZXR1cm4odGhpcy5zPDApP3RoaXMubmVnYXRlKCk6dGhpc31mdW5jdGlvbiBibkNvbXBhcmVUbyhiKXt2YXIgZD10aGlzLnMtYi5zO2lmKGQhPTApe3JldHVybiBkfXZhciBjPXRoaXMudDtkPWMtYi50O2lmKGQhPTApe3JldHVybih0aGlzLnM8MCk/LWQ6ZH13aGlsZSgtLWM+PTApe2lmKChkPXRoaXNbY10tYltjXSkhPTApe3JldHVybiBkfX1yZXR1cm4gMH1mdW5jdGlvbiBuYml0cyhhKXt2YXIgYz0xLGI7aWYoKGI9YT4+PjE2KSE9MCl7YT1iO2MrPTE2fWlmKChiPWE+PjgpIT0wKXthPWI7Yys9OH1pZigoYj1hPj40KSE9MCl7YT1iO2MrPTR9aWYoKGI9YT4+MikhPTApe2E9YjtjKz0yfWlmKChiPWE+PjEpIT0wKXthPWI7Yys9MX1yZXR1cm4gY31mdW5jdGlvbiBibkJpdExlbmd0aCgpe2lmKHRoaXMudDw9MCl7cmV0dXJuIDB9cmV0dXJuIHRoaXMuREIqKHRoaXMudC0xKStuYml0cyh0aGlzW3RoaXMudC0xXV4odGhpcy5zJnRoaXMuRE0pKX1mdW5jdGlvbiBibnBETFNoaWZ0VG8oYyxiKXt2YXIgYTtmb3IoYT10aGlzLnQtMTthPj0wOy0tYSl7YlthK2NdPXRoaXNbYV19Zm9yKGE9Yy0xO2E+PTA7LS1hKXtiW2FdPTB9Yi50PXRoaXMudCtjO2Iucz10aGlzLnN9ZnVuY3Rpb24gYm5wRFJTaGlmdFRvKGMsYil7Zm9yKHZhciBhPWM7YTx0aGlzLnQ7KythKXtiW2EtY109dGhpc1thXX1iLnQ9TWF0aC5tYXgodGhpcy50LWMsMCk7Yi5zPXRoaXMuc31mdW5jdGlvbiBibnBMU2hpZnRUbyhqLGUpe3ZhciBiPWoldGhpcy5EQjt2YXIgYT10aGlzLkRCLWI7dmFyIGc9KDE8PGEpLTE7dmFyIGY9TWF0aC5mbG9vcihqL3RoaXMuREIpLGg9KHRoaXMuczw8YikmdGhpcy5ETSxkO2ZvcihkPXRoaXMudC0xO2Q+PTA7LS1kKXtlW2QrZisxXT0odGhpc1tkXT4+YSl8aDtoPSh0aGlzW2RdJmcpPDxifWZvcihkPWYtMTtkPj0wOy0tZCl7ZVtkXT0wfWVbZl09aDtlLnQ9dGhpcy50K2YrMTtlLnM9dGhpcy5zO2UuY2xhbXAoKX1mdW5jdGlvbiBibnBSU2hpZnRUbyhnLGQpe2Qucz10aGlzLnM7dmFyIGU9TWF0aC5mbG9vcihnL3RoaXMuREIpO2lmKGU+PXRoaXMudCl7ZC50PTA7cmV0dXJufXZhciBiPWcldGhpcy5EQjt2YXIgYT10aGlzLkRCLWI7dmFyIGY9KDE8PGIpLTE7ZFswXT10aGlzW2VdPj5iO2Zvcih2YXIgYz1lKzE7Yzx0aGlzLnQ7KytjKXtkW2MtZS0xXXw9KHRoaXNbY10mZik8PGE7ZFtjLWVdPXRoaXNbY10+PmJ9aWYoYj4wKXtkW3RoaXMudC1lLTFdfD0odGhpcy5zJmYpPDxhfWQudD10aGlzLnQtZTtkLmNsYW1wKCl9ZnVuY3Rpb24gYm5wU3ViVG8oZCxmKXt2YXIgZT0wLGc9MCxiPU1hdGgubWluKGQudCx0aGlzLnQpO3doaWxlKGU8Yil7Zys9dGhpc1tlXS1kW2VdO2ZbZSsrXT1nJnRoaXMuRE07Zz4+PXRoaXMuREJ9aWYoZC50PHRoaXMudCl7Zy09ZC5zO3doaWxlKGU8dGhpcy50KXtnKz10aGlzW2VdO2ZbZSsrXT1nJnRoaXMuRE07Zz4+PXRoaXMuREJ9Zys9dGhpcy5zfWVsc2V7Zys9dGhpcy5zO3doaWxlKGU8ZC50KXtnLT1kW2VdO2ZbZSsrXT1nJnRoaXMuRE07Zz4+PXRoaXMuREJ9Zy09ZC5zfWYucz0oZzwwKT8tMTowO2lmKGc8LTEpe2ZbZSsrXT10aGlzLkRWK2d9ZWxzZXtpZihnPjApe2ZbZSsrXT1nfX1mLnQ9ZTtmLmNsYW1wKCl9ZnVuY3Rpb24gYm5wTXVsdGlwbHlUbyhjLGUpe3ZhciBiPXRoaXMuYWJzKCksZj1jLmFicygpO3ZhciBkPWIudDtlLnQ9ZCtmLnQ7d2hpbGUoLS1kPj0wKXtlW2RdPTB9Zm9yKGQ9MDtkPGYudDsrK2Qpe2VbZCtiLnRdPWIuYW0oMCxmW2RdLGUsZCwwLGIudCl9ZS5zPTA7ZS5jbGFtcCgpO2lmKHRoaXMucyE9Yy5zKXtCaWdJbnRlZ2VyLlpFUk8uc3ViVG8oZSxlKX19ZnVuY3Rpb24gYm5wU3F1YXJlVG8oZCl7dmFyIGE9dGhpcy5hYnMoKTt2YXIgYj1kLnQ9MiphLnQ7d2hpbGUoLS1iPj0wKXtkW2JdPTB9Zm9yKGI9MDtiPGEudC0xOysrYil7dmFyIGU9YS5hbShiLGFbYl0sZCwyKmIsMCwxKTtpZigoZFtiK2EudF0rPWEuYW0oYisxLDIqYVtiXSxkLDIqYisxLGUsYS50LWItMSkpPj1hLkRWKXtkW2IrYS50XS09YS5EVjtkW2IrYS50KzFdPTF9fWlmKGQudD4wKXtkW2QudC0xXSs9YS5hbShiLGFbYl0sZCwyKmIsMCwxKX1kLnM9MDtkLmNsYW1wKCl9ZnVuY3Rpb24gYm5wRGl2UmVtVG8obixoLGcpe3ZhciB3PW4uYWJzKCk7aWYody50PD0wKXtyZXR1cm59dmFyIGs9dGhpcy5hYnMoKTtpZihrLnQ8dy50KXtpZihoIT1udWxsKXtoLmZyb21JbnQoMCl9aWYoZyE9bnVsbCl7dGhpcy5jb3B5VG8oZyl9cmV0dXJufWlmKGc9PW51bGwpe2c9bmJpKCl9dmFyIGQ9bmJpKCksYT10aGlzLnMsbD1uLnM7dmFyIHY9dGhpcy5EQi1uYml0cyh3W3cudC0xXSk7aWYodj4wKXt3LmxTaGlmdFRvKHYsZCk7ay5sU2hpZnRUbyh2LGcpfWVsc2V7dy5jb3B5VG8oZCk7ay5jb3B5VG8oZyl9dmFyIHA9ZC50O3ZhciBiPWRbcC0xXTtpZihiPT0wKXtyZXR1cm59dmFyIG89YiooMTw8dGhpcy5GMSkrKChwPjEpP2RbcC0yXT4+dGhpcy5GMjowKTt2YXIgQT10aGlzLkZWL28sej0oMTw8dGhpcy5GMSkvbyx4PTE8PHRoaXMuRjI7dmFyIHU9Zy50LHM9dS1wLGY9KGg9PW51bGwpP25iaSgpOmg7ZC5kbFNoaWZ0VG8ocyxmKTtpZihnLmNvbXBhcmVUbyhmKT49MCl7Z1tnLnQrK109MTtnLnN1YlRvKGYsZyl9QmlnSW50ZWdlci5PTkUuZGxTaGlmdFRvKHAsZik7Zi5zdWJUbyhkLGQpO3doaWxlKGQudDxwKXtkW2QudCsrXT0wfXdoaWxlKC0tcz49MCl7dmFyIGM9KGdbLS11XT09Yik/dGhpcy5ETTpNYXRoLmZsb29yKGdbdV0qQSsoZ1t1LTFdK3gpKnopO2lmKChnW3VdKz1kLmFtKDAsYyxnLHMsMCxwKSk8Yyl7ZC5kbFNoaWZ0VG8ocyxmKTtnLnN1YlRvKGYsZyk7d2hpbGUoZ1t1XTwtLWMpe2cuc3ViVG8oZixnKX19fWlmKGghPW51bGwpe2cuZHJTaGlmdFRvKHAsaCk7aWYoYSE9bCl7QmlnSW50ZWdlci5aRVJPLnN1YlRvKGgsaCl9fWcudD1wO2cuY2xhbXAoKTtpZih2PjApe2cuclNoaWZ0VG8odixnKX1pZihhPDApe0JpZ0ludGVnZXIuWkVSTy5zdWJUbyhnLGcpfX1mdW5jdGlvbiBibk1vZChiKXt2YXIgYz1uYmkoKTt0aGlzLmFicygpLmRpdlJlbVRvKGIsbnVsbCxjKTtpZih0aGlzLnM8MCYmYy5jb21wYXJlVG8oQmlnSW50ZWdlci5aRVJPKT4wKXtiLnN1YlRvKGMsYyl9cmV0dXJuIGN9ZnVuY3Rpb24gQ2xhc3NpYyhhKXt0aGlzLm09YX1mdW5jdGlvbiBjQ29udmVydChhKXtpZihhLnM8MHx8YS5jb21wYXJlVG8odGhpcy5tKT49MCl7cmV0dXJuIGEubW9kKHRoaXMubSl9ZWxzZXtyZXR1cm4gYX19ZnVuY3Rpb24gY1JldmVydChhKXtyZXR1cm4gYX1mdW5jdGlvbiBjUmVkdWNlKGEpe2EuZGl2UmVtVG8odGhpcy5tLG51bGwsYSl9ZnVuY3Rpb24gY011bFRvKGEsYyxiKXthLm11bHRpcGx5VG8oYyxiKTt0aGlzLnJlZHVjZShiKX1mdW5jdGlvbiBjU3FyVG8oYSxiKXthLnNxdWFyZVRvKGIpO3RoaXMucmVkdWNlKGIpfUNsYXNzaWMucHJvdG90eXBlLmNvbnZlcnQ9Y0NvbnZlcnQ7Q2xhc3NpYy5wcm90b3R5cGUucmV2ZXJ0PWNSZXZlcnQ7Q2xhc3NpYy5wcm90b3R5cGUucmVkdWNlPWNSZWR1Y2U7Q2xhc3NpYy5wcm90b3R5cGUubXVsVG89Y011bFRvO0NsYXNzaWMucHJvdG90eXBlLnNxclRvPWNTcXJUbztmdW5jdGlvbiBibnBJbnZEaWdpdCgpe2lmKHRoaXMudDwxKXtyZXR1cm4gMH12YXIgYT10aGlzWzBdO2lmKChhJjEpPT0wKXtyZXR1cm4gMH12YXIgYj1hJjM7Yj0oYiooMi0oYSYxNSkqYikpJjE1O2I9KGIqKDItKGEmMjU1KSpiKSkmMjU1O2I9KGIqKDItKCgoYSY2NTUzNSkqYikmNjU1MzUpKSkmNjU1MzU7Yj0oYiooMi1hKmIldGhpcy5EVikpJXRoaXMuRFY7cmV0dXJuKGI+MCk/dGhpcy5EVi1iOi1ifWZ1bmN0aW9uIE1vbnRnb21lcnkoYSl7dGhpcy5tPWE7dGhpcy5tcD1hLmludkRpZ2l0KCk7dGhpcy5tcGw9dGhpcy5tcCYzMjc2Nzt0aGlzLm1waD10aGlzLm1wPj4xNTt0aGlzLnVtPSgxPDwoYS5EQi0xNSkpLTE7dGhpcy5tdDI9MiphLnR9ZnVuY3Rpb24gbW9udENvbnZlcnQoYSl7dmFyIGI9bmJpKCk7YS5hYnMoKS5kbFNoaWZ0VG8odGhpcy5tLnQsYik7Yi5kaXZSZW1Ubyh0aGlzLm0sbnVsbCxiKTtpZihhLnM8MCYmYi5jb21wYXJlVG8oQmlnSW50ZWdlci5aRVJPKT4wKXt0aGlzLm0uc3ViVG8oYixiKX1yZXR1cm4gYn1mdW5jdGlvbiBtb250UmV2ZXJ0KGEpe3ZhciBiPW5iaSgpO2EuY29weVRvKGIpO3RoaXMucmVkdWNlKGIpO3JldHVybiBifWZ1bmN0aW9uIG1vbnRSZWR1Y2UoYSl7d2hpbGUoYS50PD10aGlzLm10Mil7YVthLnQrK109MH1mb3IodmFyIGM9MDtjPHRoaXMubS50OysrYyl7dmFyIGI9YVtjXSYzMjc2Nzt2YXIgZD0oYip0aGlzLm1wbCsoKChiKnRoaXMubXBoKyhhW2NdPj4xNSkqdGhpcy5tcGwpJnRoaXMudW0pPDwxNSkpJmEuRE07Yj1jK3RoaXMubS50O2FbYl0rPXRoaXMubS5hbSgwLGQsYSxjLDAsdGhpcy5tLnQpO3doaWxlKGFbYl0+PWEuRFYpe2FbYl0tPWEuRFY7YVsrK2JdKyt9fWEuY2xhbXAoKTthLmRyU2hpZnRUbyh0aGlzLm0udCxhKTtpZihhLmNvbXBhcmVUbyh0aGlzLm0pPj0wKXthLnN1YlRvKHRoaXMubSxhKX19ZnVuY3Rpb24gbW9udFNxclRvKGEsYil7YS5zcXVhcmVUbyhiKTt0aGlzLnJlZHVjZShiKX1mdW5jdGlvbiBtb250TXVsVG8oYSxjLGIpe2EubXVsdGlwbHlUbyhjLGIpO3RoaXMucmVkdWNlKGIpfU1vbnRnb21lcnkucHJvdG90eXBlLmNvbnZlcnQ9bW9udENvbnZlcnQ7TW9udGdvbWVyeS5wcm90b3R5cGUucmV2ZXJ0PW1vbnRSZXZlcnQ7TW9udGdvbWVyeS5wcm90b3R5cGUucmVkdWNlPW1vbnRSZWR1Y2U7TW9udGdvbWVyeS5wcm90b3R5cGUubXVsVG89bW9udE11bFRvO01vbnRnb21lcnkucHJvdG90eXBlLnNxclRvPW1vbnRTcXJUbztmdW5jdGlvbiBibnBJc0V2ZW4oKXtyZXR1cm4oKHRoaXMudD4wKT8odGhpc1swXSYxKTp0aGlzLnMpPT0wfWZ1bmN0aW9uIGJucEV4cChoLGope2lmKGg+NDI5NDk2NzI5NXx8aDwxKXtyZXR1cm4gQmlnSW50ZWdlci5PTkV9dmFyIGY9bmJpKCksYT1uYmkoKSxkPWouY29udmVydCh0aGlzKSxjPW5iaXRzKGgpLTE7ZC5jb3B5VG8oZik7d2hpbGUoLS1jPj0wKXtqLnNxclRvKGYsYSk7aWYoKGgmKDE8PGMpKT4wKXtqLm11bFRvKGEsZCxmKX1lbHNle3ZhciBiPWY7Zj1hO2E9Yn19cmV0dXJuIGoucmV2ZXJ0KGYpfWZ1bmN0aW9uIGJuTW9kUG93SW50KGIsYSl7dmFyIGM7aWYoYjwyNTZ8fGEuaXNFdmVuKCkpe2M9bmV3IENsYXNzaWMoYSl9ZWxzZXtjPW5ldyBNb250Z29tZXJ5KGEpfXJldHVybiB0aGlzLmV4cChiLGMpfUJpZ0ludGVnZXIucHJvdG90eXBlLmNvcHlUbz1ibnBDb3B5VG87QmlnSW50ZWdlci5wcm90b3R5cGUuZnJvbUludD1ibnBGcm9tSW50O0JpZ0ludGVnZXIucHJvdG90eXBlLmZyb21TdHJpbmc9Ym5wRnJvbVN0cmluZztCaWdJbnRlZ2VyLnByb3RvdHlwZS5jbGFtcD1ibnBDbGFtcDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5kbFNoaWZ0VG89Ym5wRExTaGlmdFRvO0JpZ0ludGVnZXIucHJvdG90eXBlLmRyU2hpZnRUbz1ibnBEUlNoaWZ0VG87QmlnSW50ZWdlci5wcm90b3R5cGUubFNoaWZ0VG89Ym5wTFNoaWZ0VG87QmlnSW50ZWdlci5wcm90b3R5cGUuclNoaWZ0VG89Ym5wUlNoaWZ0VG87QmlnSW50ZWdlci5wcm90b3R5cGUuc3ViVG89Ym5wU3ViVG87QmlnSW50ZWdlci5wcm90b3R5cGUubXVsdGlwbHlUbz1ibnBNdWx0aXBseVRvO0JpZ0ludGVnZXIucHJvdG90eXBlLnNxdWFyZVRvPWJucFNxdWFyZVRvO0JpZ0ludGVnZXIucHJvdG90eXBlLmRpdlJlbVRvPWJucERpdlJlbVRvO0JpZ0ludGVnZXIucHJvdG90eXBlLmludkRpZ2l0PWJucEludkRpZ2l0O0JpZ0ludGVnZXIucHJvdG90eXBlLmlzRXZlbj1ibnBJc0V2ZW47QmlnSW50ZWdlci5wcm90b3R5cGUuZXhwPWJucEV4cDtCaWdJbnRlZ2VyLnByb3RvdHlwZS50b1N0cmluZz1iblRvU3RyaW5nO0JpZ0ludGVnZXIucHJvdG90eXBlLm5lZ2F0ZT1ibk5lZ2F0ZTtCaWdJbnRlZ2VyLnByb3RvdHlwZS5hYnM9Ym5BYnM7QmlnSW50ZWdlci5wcm90b3R5cGUuY29tcGFyZVRvPWJuQ29tcGFyZVRvO0JpZ0ludGVnZXIucHJvdG90eXBlLmJpdExlbmd0aD1ibkJpdExlbmd0aDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5tb2Q9Ym5Nb2Q7QmlnSW50ZWdlci5wcm90b3R5cGUubW9kUG93SW50PWJuTW9kUG93SW50O0JpZ0ludGVnZXIuWkVSTz1uYnYoMCk7QmlnSW50ZWdlci5PTkU9bmJ2KDEpO1xuLyohIChjKSBUb20gV3UgfCBodHRwOi8vd3d3LWNzLXN0dWRlbnRzLnN0YW5mb3JkLmVkdS9+dGp3L2pzYm4vXG4gKi9cbmZ1bmN0aW9uIGJuQ2xvbmUoKXt2YXIgYT1uYmkoKTt0aGlzLmNvcHlUbyhhKTtyZXR1cm4gYX1mdW5jdGlvbiBibkludFZhbHVlKCl7aWYodGhpcy5zPDApe2lmKHRoaXMudD09MSl7cmV0dXJuIHRoaXNbMF0tdGhpcy5EVn1lbHNle2lmKHRoaXMudD09MCl7cmV0dXJuIC0xfX19ZWxzZXtpZih0aGlzLnQ9PTEpe3JldHVybiB0aGlzWzBdfWVsc2V7aWYodGhpcy50PT0wKXtyZXR1cm4gMH19fXJldHVybigodGhpc1sxXSYoKDE8PCgzMi10aGlzLkRCKSktMSkpPDx0aGlzLkRCKXx0aGlzWzBdfWZ1bmN0aW9uIGJuQnl0ZVZhbHVlKCl7cmV0dXJuKHRoaXMudD09MCk/dGhpcy5zOih0aGlzWzBdPDwyNCk+PjI0fWZ1bmN0aW9uIGJuU2hvcnRWYWx1ZSgpe3JldHVybih0aGlzLnQ9PTApP3RoaXMuczoodGhpc1swXTw8MTYpPj4xNn1mdW5jdGlvbiBibnBDaHVua1NpemUoYSl7cmV0dXJuIE1hdGguZmxvb3IoTWF0aC5MTjIqdGhpcy5EQi9NYXRoLmxvZyhhKSl9ZnVuY3Rpb24gYm5TaWdOdW0oKXtpZih0aGlzLnM8MCl7cmV0dXJuIC0xfWVsc2V7aWYodGhpcy50PD0wfHwodGhpcy50PT0xJiZ0aGlzWzBdPD0wKSl7cmV0dXJuIDB9ZWxzZXtyZXR1cm4gMX19fWZ1bmN0aW9uIGJucFRvUmFkaXgoYyl7aWYoYz09bnVsbCl7Yz0xMH1pZih0aGlzLnNpZ251bSgpPT0wfHxjPDJ8fGM+MzYpe3JldHVyblwiMFwifXZhciBmPXRoaXMuY2h1bmtTaXplKGMpO3ZhciBlPU1hdGgucG93KGMsZik7dmFyIGk9bmJ2KGUpLGo9bmJpKCksaD1uYmkoKSxnPVwiXCI7dGhpcy5kaXZSZW1UbyhpLGosaCk7d2hpbGUoai5zaWdudW0oKT4wKXtnPShlK2guaW50VmFsdWUoKSkudG9TdHJpbmcoYykuc3Vic3RyKDEpK2c7ai5kaXZSZW1UbyhpLGosaCl9cmV0dXJuIGguaW50VmFsdWUoKS50b1N0cmluZyhjKStnfWZ1bmN0aW9uIGJucEZyb21SYWRpeChtLGgpe3RoaXMuZnJvbUludCgwKTtpZihoPT1udWxsKXtoPTEwfXZhciBmPXRoaXMuY2h1bmtTaXplKGgpO3ZhciBnPU1hdGgucG93KGgsZiksZT1mYWxzZSxhPTAsbD0wO2Zvcih2YXIgYz0wO2M8bS5sZW5ndGg7KytjKXt2YXIgaz1pbnRBdChtLGMpO2lmKGs8MCl7aWYobS5jaGFyQXQoYyk9PVwiLVwiJiZ0aGlzLnNpZ251bSgpPT0wKXtlPXRydWV9Y29udGludWV9bD1oKmwraztpZigrK2E+PWYpe3RoaXMuZE11bHRpcGx5KGcpO3RoaXMuZEFkZE9mZnNldChsLDApO2E9MDtsPTB9fWlmKGE+MCl7dGhpcy5kTXVsdGlwbHkoTWF0aC5wb3coaCxhKSk7dGhpcy5kQWRkT2Zmc2V0KGwsMCl9aWYoZSl7QmlnSW50ZWdlci5aRVJPLnN1YlRvKHRoaXMsdGhpcyl9fWZ1bmN0aW9uIGJucEZyb21OdW1iZXIoZixlLGgpe2lmKFwibnVtYmVyXCI9PXR5cGVvZiBlKXtpZihmPDIpe3RoaXMuZnJvbUludCgxKX1lbHNle3RoaXMuZnJvbU51bWJlcihmLGgpO2lmKCF0aGlzLnRlc3RCaXQoZi0xKSl7dGhpcy5iaXR3aXNlVG8oQmlnSW50ZWdlci5PTkUuc2hpZnRMZWZ0KGYtMSksb3Bfb3IsdGhpcyl9aWYodGhpcy5pc0V2ZW4oKSl7dGhpcy5kQWRkT2Zmc2V0KDEsMCl9d2hpbGUoIXRoaXMuaXNQcm9iYWJsZVByaW1lKGUpKXt0aGlzLmRBZGRPZmZzZXQoMiwwKTtpZih0aGlzLmJpdExlbmd0aCgpPmYpe3RoaXMuc3ViVG8oQmlnSW50ZWdlci5PTkUuc2hpZnRMZWZ0KGYtMSksdGhpcyl9fX19ZWxzZXt2YXIgZD1uZXcgQXJyYXkoKSxnPWYmNztkLmxlbmd0aD0oZj4+MykrMTtlLm5leHRCeXRlcyhkKTtpZihnPjApe2RbMF0mPSgoMTw8ZyktMSl9ZWxzZXtkWzBdPTB9dGhpcy5mcm9tU3RyaW5nKGQsMjU2KX19ZnVuY3Rpb24gYm5Ub0J5dGVBcnJheSgpe3ZhciBiPXRoaXMudCxjPW5ldyBBcnJheSgpO2NbMF09dGhpcy5zO3ZhciBlPXRoaXMuREItKGIqdGhpcy5EQiklOCxmLGE9MDtpZihiLS0+MCl7aWYoZTx0aGlzLkRCJiYoZj10aGlzW2JdPj5lKSE9KHRoaXMucyZ0aGlzLkRNKT4+ZSl7Y1thKytdPWZ8KHRoaXMuczw8KHRoaXMuREItZSkpfXdoaWxlKGI+PTApe2lmKGU8OCl7Zj0odGhpc1tiXSYoKDE8PGUpLTEpKTw8KDgtZSk7Znw9dGhpc1stLWJdPj4oZSs9dGhpcy5EQi04KX1lbHNle2Y9KHRoaXNbYl0+PihlLT04KSkmMjU1O2lmKGU8PTApe2UrPXRoaXMuREI7LS1ifX1pZigoZiYxMjgpIT0wKXtmfD0tMjU2fWlmKGE9PTAmJih0aGlzLnMmMTI4KSE9KGYmMTI4KSl7KythfWlmKGE+MHx8ZiE9dGhpcy5zKXtjW2ErK109Zn19fXJldHVybiBjfWZ1bmN0aW9uIGJuRXF1YWxzKGIpe3JldHVybih0aGlzLmNvbXBhcmVUbyhiKT09MCl9ZnVuY3Rpb24gYm5NaW4oYil7cmV0dXJuKHRoaXMuY29tcGFyZVRvKGIpPDApP3RoaXM6Yn1mdW5jdGlvbiBibk1heChiKXtyZXR1cm4odGhpcy5jb21wYXJlVG8oYik+MCk/dGhpczpifWZ1bmN0aW9uIGJucEJpdHdpc2VUbyhjLGgsZSl7dmFyIGQsZyxiPU1hdGgubWluKGMudCx0aGlzLnQpO2ZvcihkPTA7ZDxiOysrZCl7ZVtkXT1oKHRoaXNbZF0sY1tkXSl9aWYoYy50PHRoaXMudCl7Zz1jLnMmdGhpcy5ETTtmb3IoZD1iO2Q8dGhpcy50OysrZCl7ZVtkXT1oKHRoaXNbZF0sZyl9ZS50PXRoaXMudH1lbHNle2c9dGhpcy5zJnRoaXMuRE07Zm9yKGQ9YjtkPGMudDsrK2Qpe2VbZF09aChnLGNbZF0pfWUudD1jLnR9ZS5zPWgodGhpcy5zLGMucyk7ZS5jbGFtcCgpfWZ1bmN0aW9uIG9wX2FuZChhLGIpe3JldHVybiBhJmJ9ZnVuY3Rpb24gYm5BbmQoYil7dmFyIGM9bmJpKCk7dGhpcy5iaXR3aXNlVG8oYixvcF9hbmQsYyk7cmV0dXJuIGN9ZnVuY3Rpb24gb3Bfb3IoYSxiKXtyZXR1cm4gYXxifWZ1bmN0aW9uIGJuT3IoYil7dmFyIGM9bmJpKCk7dGhpcy5iaXR3aXNlVG8oYixvcF9vcixjKTtyZXR1cm4gY31mdW5jdGlvbiBvcF94b3IoYSxiKXtyZXR1cm4gYV5ifWZ1bmN0aW9uIGJuWG9yKGIpe3ZhciBjPW5iaSgpO3RoaXMuYml0d2lzZVRvKGIsb3BfeG9yLGMpO3JldHVybiBjfWZ1bmN0aW9uIG9wX2FuZG5vdChhLGIpe3JldHVybiBhJn5ifWZ1bmN0aW9uIGJuQW5kTm90KGIpe3ZhciBjPW5iaSgpO3RoaXMuYml0d2lzZVRvKGIsb3BfYW5kbm90LGMpO3JldHVybiBjfWZ1bmN0aW9uIGJuTm90KCl7dmFyIGI9bmJpKCk7Zm9yKHZhciBhPTA7YTx0aGlzLnQ7KythKXtiW2FdPXRoaXMuRE0mfnRoaXNbYV19Yi50PXRoaXMudDtiLnM9fnRoaXMucztyZXR1cm4gYn1mdW5jdGlvbiBiblNoaWZ0TGVmdChiKXt2YXIgYT1uYmkoKTtpZihiPDApe3RoaXMuclNoaWZ0VG8oLWIsYSl9ZWxzZXt0aGlzLmxTaGlmdFRvKGIsYSl9cmV0dXJuIGF9ZnVuY3Rpb24gYm5TaGlmdFJpZ2h0KGIpe3ZhciBhPW5iaSgpO2lmKGI8MCl7dGhpcy5sU2hpZnRUbygtYixhKX1lbHNle3RoaXMuclNoaWZ0VG8oYixhKX1yZXR1cm4gYX1mdW5jdGlvbiBsYml0KGEpe2lmKGE9PTApe3JldHVybiAtMX12YXIgYj0wO2lmKChhJjY1NTM1KT09MCl7YT4+PTE2O2IrPTE2fWlmKChhJjI1NSk9PTApe2E+Pj04O2IrPTh9aWYoKGEmMTUpPT0wKXthPj49NDtiKz00fWlmKChhJjMpPT0wKXthPj49MjtiKz0yfWlmKChhJjEpPT0wKXsrK2J9cmV0dXJuIGJ9ZnVuY3Rpb24gYm5HZXRMb3dlc3RTZXRCaXQoKXtmb3IodmFyIGE9MDthPHRoaXMudDsrK2Epe2lmKHRoaXNbYV0hPTApe3JldHVybiBhKnRoaXMuREIrbGJpdCh0aGlzW2FdKX19aWYodGhpcy5zPDApe3JldHVybiB0aGlzLnQqdGhpcy5EQn1yZXR1cm4gLTF9ZnVuY3Rpb24gY2JpdChhKXt2YXIgYj0wO3doaWxlKGEhPTApe2EmPWEtMTsrK2J9cmV0dXJuIGJ9ZnVuY3Rpb24gYm5CaXRDb3VudCgpe3ZhciBjPTAsYT10aGlzLnMmdGhpcy5ETTtmb3IodmFyIGI9MDtiPHRoaXMudDsrK2Ipe2MrPWNiaXQodGhpc1tiXV5hKX1yZXR1cm4gY31mdW5jdGlvbiBiblRlc3RCaXQoYil7dmFyIGE9TWF0aC5mbG9vcihiL3RoaXMuREIpO2lmKGE+PXRoaXMudCl7cmV0dXJuKHRoaXMucyE9MCl9cmV0dXJuKCh0aGlzW2FdJigxPDwoYiV0aGlzLkRCKSkpIT0wKX1mdW5jdGlvbiBibnBDaGFuZ2VCaXQoYyxiKXt2YXIgYT1CaWdJbnRlZ2VyLk9ORS5zaGlmdExlZnQoYyk7dGhpcy5iaXR3aXNlVG8oYSxiLGEpO3JldHVybiBhfWZ1bmN0aW9uIGJuU2V0Qml0KGEpe3JldHVybiB0aGlzLmNoYW5nZUJpdChhLG9wX29yKX1mdW5jdGlvbiBibkNsZWFyQml0KGEpe3JldHVybiB0aGlzLmNoYW5nZUJpdChhLG9wX2FuZG5vdCl9ZnVuY3Rpb24gYm5GbGlwQml0KGEpe3JldHVybiB0aGlzLmNoYW5nZUJpdChhLG9wX3hvcil9ZnVuY3Rpb24gYm5wQWRkVG8oZCxmKXt2YXIgZT0wLGc9MCxiPU1hdGgubWluKGQudCx0aGlzLnQpO3doaWxlKGU8Yil7Zys9dGhpc1tlXStkW2VdO2ZbZSsrXT1nJnRoaXMuRE07Zz4+PXRoaXMuREJ9aWYoZC50PHRoaXMudCl7Zys9ZC5zO3doaWxlKGU8dGhpcy50KXtnKz10aGlzW2VdO2ZbZSsrXT1nJnRoaXMuRE07Zz4+PXRoaXMuREJ9Zys9dGhpcy5zfWVsc2V7Zys9dGhpcy5zO3doaWxlKGU8ZC50KXtnKz1kW2VdO2ZbZSsrXT1nJnRoaXMuRE07Zz4+PXRoaXMuREJ9Zys9ZC5zfWYucz0oZzwwKT8tMTowO2lmKGc+MCl7ZltlKytdPWd9ZWxzZXtpZihnPC0xKXtmW2UrK109dGhpcy5EVitnfX1mLnQ9ZTtmLmNsYW1wKCl9ZnVuY3Rpb24gYm5BZGQoYil7dmFyIGM9bmJpKCk7dGhpcy5hZGRUbyhiLGMpO3JldHVybiBjfWZ1bmN0aW9uIGJuU3VidHJhY3QoYil7dmFyIGM9bmJpKCk7dGhpcy5zdWJUbyhiLGMpO3JldHVybiBjfWZ1bmN0aW9uIGJuTXVsdGlwbHkoYil7dmFyIGM9bmJpKCk7dGhpcy5tdWx0aXBseVRvKGIsYyk7cmV0dXJuIGN9ZnVuY3Rpb24gYm5TcXVhcmUoKXt2YXIgYT1uYmkoKTt0aGlzLnNxdWFyZVRvKGEpO3JldHVybiBhfWZ1bmN0aW9uIGJuRGl2aWRlKGIpe3ZhciBjPW5iaSgpO3RoaXMuZGl2UmVtVG8oYixjLG51bGwpO3JldHVybiBjfWZ1bmN0aW9uIGJuUmVtYWluZGVyKGIpe3ZhciBjPW5iaSgpO3RoaXMuZGl2UmVtVG8oYixudWxsLGMpO3JldHVybiBjfWZ1bmN0aW9uIGJuRGl2aWRlQW5kUmVtYWluZGVyKGIpe3ZhciBkPW5iaSgpLGM9bmJpKCk7dGhpcy5kaXZSZW1UbyhiLGQsYyk7cmV0dXJuIG5ldyBBcnJheShkLGMpfWZ1bmN0aW9uIGJucERNdWx0aXBseShhKXt0aGlzW3RoaXMudF09dGhpcy5hbSgwLGEtMSx0aGlzLDAsMCx0aGlzLnQpOysrdGhpcy50O3RoaXMuY2xhbXAoKX1mdW5jdGlvbiBibnBEQWRkT2Zmc2V0KGIsYSl7aWYoYj09MCl7cmV0dXJufXdoaWxlKHRoaXMudDw9YSl7dGhpc1t0aGlzLnQrK109MH10aGlzW2FdKz1iO3doaWxlKHRoaXNbYV0+PXRoaXMuRFYpe3RoaXNbYV0tPXRoaXMuRFY7aWYoKythPj10aGlzLnQpe3RoaXNbdGhpcy50KytdPTB9Kyt0aGlzW2FdfX1mdW5jdGlvbiBOdWxsRXhwKCl7fWZ1bmN0aW9uIG5Ob3AoYSl7cmV0dXJuIGF9ZnVuY3Rpb24gbk11bFRvKGEsYyxiKXthLm11bHRpcGx5VG8oYyxiKX1mdW5jdGlvbiBuU3FyVG8oYSxiKXthLnNxdWFyZVRvKGIpfU51bGxFeHAucHJvdG90eXBlLmNvbnZlcnQ9bk5vcDtOdWxsRXhwLnByb3RvdHlwZS5yZXZlcnQ9bk5vcDtOdWxsRXhwLnByb3RvdHlwZS5tdWxUbz1uTXVsVG87TnVsbEV4cC5wcm90b3R5cGUuc3FyVG89blNxclRvO2Z1bmN0aW9uIGJuUG93KGEpe3JldHVybiB0aGlzLmV4cChhLG5ldyBOdWxsRXhwKCkpfWZ1bmN0aW9uIGJucE11bHRpcGx5TG93ZXJUbyhiLGYsZSl7dmFyIGQ9TWF0aC5taW4odGhpcy50K2IudCxmKTtlLnM9MDtlLnQ9ZDt3aGlsZShkPjApe2VbLS1kXT0wfXZhciBjO2ZvcihjPWUudC10aGlzLnQ7ZDxjOysrZCl7ZVtkK3RoaXMudF09dGhpcy5hbSgwLGJbZF0sZSxkLDAsdGhpcy50KX1mb3IoYz1NYXRoLm1pbihiLnQsZik7ZDxjOysrZCl7dGhpcy5hbSgwLGJbZF0sZSxkLDAsZi1kKX1lLmNsYW1wKCl9ZnVuY3Rpb24gYm5wTXVsdGlwbHlVcHBlclRvKGIsZSxkKXstLWU7dmFyIGM9ZC50PXRoaXMudCtiLnQtZTtkLnM9MDt3aGlsZSgtLWM+PTApe2RbY109MH1mb3IoYz1NYXRoLm1heChlLXRoaXMudCwwKTtjPGIudDsrK2Mpe2RbdGhpcy50K2MtZV09dGhpcy5hbShlLWMsYltjXSxkLDAsMCx0aGlzLnQrYy1lKX1kLmNsYW1wKCk7ZC5kclNoaWZ0VG8oMSxkKX1mdW5jdGlvbiBCYXJyZXR0KGEpe3RoaXMucjI9bmJpKCk7dGhpcy5xMz1uYmkoKTtCaWdJbnRlZ2VyLk9ORS5kbFNoaWZ0VG8oMiphLnQsdGhpcy5yMik7dGhpcy5tdT10aGlzLnIyLmRpdmlkZShhKTt0aGlzLm09YX1mdW5jdGlvbiBiYXJyZXR0Q29udmVydChhKXtpZihhLnM8MHx8YS50PjIqdGhpcy5tLnQpe3JldHVybiBhLm1vZCh0aGlzLm0pfWVsc2V7aWYoYS5jb21wYXJlVG8odGhpcy5tKTwwKXtyZXR1cm4gYX1lbHNle3ZhciBiPW5iaSgpO2EuY29weVRvKGIpO3RoaXMucmVkdWNlKGIpO3JldHVybiBifX19ZnVuY3Rpb24gYmFycmV0dFJldmVydChhKXtyZXR1cm4gYX1mdW5jdGlvbiBiYXJyZXR0UmVkdWNlKGEpe2EuZHJTaGlmdFRvKHRoaXMubS50LTEsdGhpcy5yMik7aWYoYS50PnRoaXMubS50KzEpe2EudD10aGlzLm0udCsxO2EuY2xhbXAoKX10aGlzLm11Lm11bHRpcGx5VXBwZXJUbyh0aGlzLnIyLHRoaXMubS50KzEsdGhpcy5xMyk7dGhpcy5tLm11bHRpcGx5TG93ZXJUbyh0aGlzLnEzLHRoaXMubS50KzEsdGhpcy5yMik7d2hpbGUoYS5jb21wYXJlVG8odGhpcy5yMik8MCl7YS5kQWRkT2Zmc2V0KDEsdGhpcy5tLnQrMSl9YS5zdWJUbyh0aGlzLnIyLGEpO3doaWxlKGEuY29tcGFyZVRvKHRoaXMubSk+PTApe2Euc3ViVG8odGhpcy5tLGEpfX1mdW5jdGlvbiBiYXJyZXR0U3FyVG8oYSxiKXthLnNxdWFyZVRvKGIpO3RoaXMucmVkdWNlKGIpfWZ1bmN0aW9uIGJhcnJldHRNdWxUbyhhLGMsYil7YS5tdWx0aXBseVRvKGMsYik7dGhpcy5yZWR1Y2UoYil9QmFycmV0dC5wcm90b3R5cGUuY29udmVydD1iYXJyZXR0Q29udmVydDtCYXJyZXR0LnByb3RvdHlwZS5yZXZlcnQ9YmFycmV0dFJldmVydDtCYXJyZXR0LnByb3RvdHlwZS5yZWR1Y2U9YmFycmV0dFJlZHVjZTtCYXJyZXR0LnByb3RvdHlwZS5tdWxUbz1iYXJyZXR0TXVsVG87QmFycmV0dC5wcm90b3R5cGUuc3FyVG89YmFycmV0dFNxclRvO2Z1bmN0aW9uIGJuTW9kUG93KHEsZil7dmFyIG89cS5iaXRMZW5ndGgoKSxoLGI9bmJ2KDEpLHY7aWYobzw9MCl7cmV0dXJuIGJ9ZWxzZXtpZihvPDE4KXtoPTF9ZWxzZXtpZihvPDQ4KXtoPTN9ZWxzZXtpZihvPDE0NCl7aD00fWVsc2V7aWYobzw3Njgpe2g9NX1lbHNle2g9Nn19fX19aWYobzw4KXt2PW5ldyBDbGFzc2ljKGYpfWVsc2V7aWYoZi5pc0V2ZW4oKSl7dj1uZXcgQmFycmV0dChmKX1lbHNle3Y9bmV3IE1vbnRnb21lcnkoZil9fXZhciBwPW5ldyBBcnJheSgpLGQ9MyxzPWgtMSxhPSgxPDxoKS0xO3BbMV09di5jb252ZXJ0KHRoaXMpO2lmKGg+MSl7dmFyIEE9bmJpKCk7di5zcXJUbyhwWzFdLEEpO3doaWxlKGQ8PWEpe3BbZF09bmJpKCk7di5tdWxUbyhBLHBbZC0yXSxwW2RdKTtkKz0yfX12YXIgbD1xLnQtMSx4LHU9dHJ1ZSxjPW5iaSgpLHk7bz1uYml0cyhxW2xdKS0xO3doaWxlKGw+PTApe2lmKG8+PXMpe3g9KHFbbF0+PihvLXMpKSZhfWVsc2V7eD0ocVtsXSYoKDE8PChvKzEpKS0xKSk8PChzLW8pO2lmKGw+MCl7eHw9cVtsLTFdPj4odGhpcy5EQitvLXMpfX1kPWg7d2hpbGUoKHgmMSk9PTApe3g+Pj0xOy0tZH1pZigoby09ZCk8MCl7bys9dGhpcy5EQjstLWx9aWYodSl7cFt4XS5jb3B5VG8oYik7dT1mYWxzZX1lbHNle3doaWxlKGQ+MSl7di5zcXJUbyhiLGMpO3Yuc3FyVG8oYyxiKTtkLT0yfWlmKGQ+MCl7di5zcXJUbyhiLGMpfWVsc2V7eT1iO2I9YztjPXl9di5tdWxUbyhjLHBbeF0sYil9d2hpbGUobD49MCYmKHFbbF0mKDE8PG8pKT09MCl7di5zcXJUbyhiLGMpO3k9YjtiPWM7Yz15O2lmKC0tbzwwKXtvPXRoaXMuREItMTstLWx9fX1yZXR1cm4gdi5yZXZlcnQoYil9ZnVuY3Rpb24gYm5HQ0QoYyl7dmFyIGI9KHRoaXMuczwwKT90aGlzLm5lZ2F0ZSgpOnRoaXMuY2xvbmUoKTt2YXIgaD0oYy5zPDApP2MubmVnYXRlKCk6Yy5jbG9uZSgpO2lmKGIuY29tcGFyZVRvKGgpPDApe3ZhciBlPWI7Yj1oO2g9ZX12YXIgZD1iLmdldExvd2VzdFNldEJpdCgpLGY9aC5nZXRMb3dlc3RTZXRCaXQoKTtpZihmPDApe3JldHVybiBifWlmKGQ8Zil7Zj1kfWlmKGY+MCl7Yi5yU2hpZnRUbyhmLGIpO2guclNoaWZ0VG8oZixoKX13aGlsZShiLnNpZ251bSgpPjApe2lmKChkPWIuZ2V0TG93ZXN0U2V0Qml0KCkpPjApe2IuclNoaWZ0VG8oZCxiKX1pZigoZD1oLmdldExvd2VzdFNldEJpdCgpKT4wKXtoLnJTaGlmdFRvKGQsaCl9aWYoYi5jb21wYXJlVG8oaCk+PTApe2Iuc3ViVG8oaCxiKTtiLnJTaGlmdFRvKDEsYil9ZWxzZXtoLnN1YlRvKGIsaCk7aC5yU2hpZnRUbygxLGgpfX1pZihmPjApe2gubFNoaWZ0VG8oZixoKX1yZXR1cm4gaH1mdW5jdGlvbiBibnBNb2RJbnQoZSl7aWYoZTw9MCl7cmV0dXJuIDB9dmFyIGM9dGhpcy5EViVlLGI9KHRoaXMuczwwKT9lLTE6MDtpZih0aGlzLnQ+MCl7aWYoYz09MCl7Yj10aGlzWzBdJWV9ZWxzZXtmb3IodmFyIGE9dGhpcy50LTE7YT49MDstLWEpe2I9KGMqYit0aGlzW2FdKSVlfX19cmV0dXJuIGJ9ZnVuY3Rpb24gYm5Nb2RJbnZlcnNlKGYpe3ZhciBqPWYuaXNFdmVuKCk7aWYoKHRoaXMuaXNFdmVuKCkmJmopfHxmLnNpZ251bSgpPT0wKXtyZXR1cm4gQmlnSW50ZWdlci5aRVJPfXZhciBpPWYuY2xvbmUoKSxoPXRoaXMuY2xvbmUoKTt2YXIgZz1uYnYoMSksZT1uYnYoMCksbD1uYnYoMCksaz1uYnYoMSk7d2hpbGUoaS5zaWdudW0oKSE9MCl7d2hpbGUoaS5pc0V2ZW4oKSl7aS5yU2hpZnRUbygxLGkpO2lmKGope2lmKCFnLmlzRXZlbigpfHwhZS5pc0V2ZW4oKSl7Zy5hZGRUbyh0aGlzLGcpO2Uuc3ViVG8oZixlKX1nLnJTaGlmdFRvKDEsZyl9ZWxzZXtpZighZS5pc0V2ZW4oKSl7ZS5zdWJUbyhmLGUpfX1lLnJTaGlmdFRvKDEsZSl9d2hpbGUoaC5pc0V2ZW4oKSl7aC5yU2hpZnRUbygxLGgpO2lmKGope2lmKCFsLmlzRXZlbigpfHwhay5pc0V2ZW4oKSl7bC5hZGRUbyh0aGlzLGwpO2suc3ViVG8oZixrKX1sLnJTaGlmdFRvKDEsbCl9ZWxzZXtpZighay5pc0V2ZW4oKSl7ay5zdWJUbyhmLGspfX1rLnJTaGlmdFRvKDEsayl9aWYoaS5jb21wYXJlVG8oaCk+PTApe2kuc3ViVG8oaCxpKTtpZihqKXtnLnN1YlRvKGwsZyl9ZS5zdWJUbyhrLGUpfWVsc2V7aC5zdWJUbyhpLGgpO2lmKGope2wuc3ViVG8oZyxsKX1rLnN1YlRvKGUsayl9fWlmKGguY29tcGFyZVRvKEJpZ0ludGVnZXIuT05FKSE9MCl7cmV0dXJuIEJpZ0ludGVnZXIuWkVST31pZihrLmNvbXBhcmVUbyhmKT49MCl7cmV0dXJuIGsuc3VidHJhY3QoZil9aWYoay5zaWdudW0oKTwwKXtrLmFkZFRvKGYsayl9ZWxzZXtyZXR1cm4ga31pZihrLnNpZ251bSgpPDApe3JldHVybiBrLmFkZChmKX1lbHNle3JldHVybiBrfX12YXIgbG93cHJpbWVzPVsyLDMsNSw3LDExLDEzLDE3LDE5LDIzLDI5LDMxLDM3LDQxLDQzLDQ3LDUzLDU5LDYxLDY3LDcxLDczLDc5LDgzLDg5LDk3LDEwMSwxMDMsMTA3LDEwOSwxMTMsMTI3LDEzMSwxMzcsMTM5LDE0OSwxNTEsMTU3LDE2MywxNjcsMTczLDE3OSwxODEsMTkxLDE5MywxOTcsMTk5LDIxMSwyMjMsMjI3LDIyOSwyMzMsMjM5LDI0MSwyNTEsMjU3LDI2MywyNjksMjcxLDI3NywyODEsMjgzLDI5MywzMDcsMzExLDMxMywzMTcsMzMxLDMzNywzNDcsMzQ5LDM1MywzNTksMzY3LDM3MywzNzksMzgzLDM4OSwzOTcsNDAxLDQwOSw0MTksNDIxLDQzMSw0MzMsNDM5LDQ0Myw0NDksNDU3LDQ2MSw0NjMsNDY3LDQ3OSw0ODcsNDkxLDQ5OSw1MDMsNTA5LDUyMSw1MjMsNTQxLDU0Nyw1NTcsNTYzLDU2OSw1NzEsNTc3LDU4Nyw1OTMsNTk5LDYwMSw2MDcsNjEzLDYxNyw2MTksNjMxLDY0MSw2NDMsNjQ3LDY1Myw2NTksNjYxLDY3Myw2NzcsNjgzLDY5MSw3MDEsNzA5LDcxOSw3MjcsNzMzLDczOSw3NDMsNzUxLDc1Nyw3NjEsNzY5LDc3Myw3ODcsNzk3LDgwOSw4MTEsODIxLDgyMyw4MjcsODI5LDgzOSw4NTMsODU3LDg1OSw4NjMsODc3LDg4MSw4ODMsODg3LDkwNyw5MTEsOTE5LDkyOSw5MzcsOTQxLDk0Nyw5NTMsOTY3LDk3MSw5NzcsOTgzLDk5MSw5OTddO3ZhciBscGxpbT0oMTw8MjYpL2xvd3ByaW1lc1tsb3dwcmltZXMubGVuZ3RoLTFdO2Z1bmN0aW9uIGJuSXNQcm9iYWJsZVByaW1lKGUpe3ZhciBkLGI9dGhpcy5hYnMoKTtpZihiLnQ9PTEmJmJbMF08PWxvd3ByaW1lc1tsb3dwcmltZXMubGVuZ3RoLTFdKXtmb3IoZD0wO2Q8bG93cHJpbWVzLmxlbmd0aDsrK2Qpe2lmKGJbMF09PWxvd3ByaW1lc1tkXSl7cmV0dXJuIHRydWV9fXJldHVybiBmYWxzZX1pZihiLmlzRXZlbigpKXtyZXR1cm4gZmFsc2V9ZD0xO3doaWxlKGQ8bG93cHJpbWVzLmxlbmd0aCl7dmFyIGE9bG93cHJpbWVzW2RdLGM9ZCsxO3doaWxlKGM8bG93cHJpbWVzLmxlbmd0aCYmYTxscGxpbSl7YSo9bG93cHJpbWVzW2MrK119YT1iLm1vZEludChhKTt3aGlsZShkPGMpe2lmKGElbG93cHJpbWVzW2QrK109PTApe3JldHVybiBmYWxzZX19fXJldHVybiBiLm1pbGxlclJhYmluKGUpfWZ1bmN0aW9uIGJucE1pbGxlclJhYmluKGYpe3ZhciBnPXRoaXMuc3VidHJhY3QoQmlnSW50ZWdlci5PTkUpO3ZhciBjPWcuZ2V0TG93ZXN0U2V0Qml0KCk7aWYoYzw9MCl7cmV0dXJuIGZhbHNlfXZhciBoPWcuc2hpZnRSaWdodChjKTtmPShmKzEpPj4xO2lmKGY+bG93cHJpbWVzLmxlbmd0aCl7Zj1sb3dwcmltZXMubGVuZ3RofXZhciBiPW5iaSgpO2Zvcih2YXIgZT0wO2U8ZjsrK2Upe2IuZnJvbUludChsb3dwcmltZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKmxvd3ByaW1lcy5sZW5ndGgpXSk7dmFyIGw9Yi5tb2RQb3coaCx0aGlzKTtpZihsLmNvbXBhcmVUbyhCaWdJbnRlZ2VyLk9ORSkhPTAmJmwuY29tcGFyZVRvKGcpIT0wKXt2YXIgZD0xO3doaWxlKGQrKzxjJiZsLmNvbXBhcmVUbyhnKSE9MCl7bD1sLm1vZFBvd0ludCgyLHRoaXMpO2lmKGwuY29tcGFyZVRvKEJpZ0ludGVnZXIuT05FKT09MCl7cmV0dXJuIGZhbHNlfX1pZihsLmNvbXBhcmVUbyhnKSE9MCl7cmV0dXJuIGZhbHNlfX19cmV0dXJuIHRydWV9QmlnSW50ZWdlci5wcm90b3R5cGUuY2h1bmtTaXplPWJucENodW5rU2l6ZTtCaWdJbnRlZ2VyLnByb3RvdHlwZS50b1JhZGl4PWJucFRvUmFkaXg7QmlnSW50ZWdlci5wcm90b3R5cGUuZnJvbVJhZGl4PWJucEZyb21SYWRpeDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5mcm9tTnVtYmVyPWJucEZyb21OdW1iZXI7QmlnSW50ZWdlci5wcm90b3R5cGUuYml0d2lzZVRvPWJucEJpdHdpc2VUbztCaWdJbnRlZ2VyLnByb3RvdHlwZS5jaGFuZ2VCaXQ9Ym5wQ2hhbmdlQml0O0JpZ0ludGVnZXIucHJvdG90eXBlLmFkZFRvPWJucEFkZFRvO0JpZ0ludGVnZXIucHJvdG90eXBlLmRNdWx0aXBseT1ibnBETXVsdGlwbHk7QmlnSW50ZWdlci5wcm90b3R5cGUuZEFkZE9mZnNldD1ibnBEQWRkT2Zmc2V0O0JpZ0ludGVnZXIucHJvdG90eXBlLm11bHRpcGx5TG93ZXJUbz1ibnBNdWx0aXBseUxvd2VyVG87QmlnSW50ZWdlci5wcm90b3R5cGUubXVsdGlwbHlVcHBlclRvPWJucE11bHRpcGx5VXBwZXJUbztCaWdJbnRlZ2VyLnByb3RvdHlwZS5tb2RJbnQ9Ym5wTW9kSW50O0JpZ0ludGVnZXIucHJvdG90eXBlLm1pbGxlclJhYmluPWJucE1pbGxlclJhYmluO0JpZ0ludGVnZXIucHJvdG90eXBlLmNsb25lPWJuQ2xvbmU7QmlnSW50ZWdlci5wcm90b3R5cGUuaW50VmFsdWU9Ym5JbnRWYWx1ZTtCaWdJbnRlZ2VyLnByb3RvdHlwZS5ieXRlVmFsdWU9Ym5CeXRlVmFsdWU7QmlnSW50ZWdlci5wcm90b3R5cGUuc2hvcnRWYWx1ZT1iblNob3J0VmFsdWU7QmlnSW50ZWdlci5wcm90b3R5cGUuc2lnbnVtPWJuU2lnTnVtO0JpZ0ludGVnZXIucHJvdG90eXBlLnRvQnl0ZUFycmF5PWJuVG9CeXRlQXJyYXk7QmlnSW50ZWdlci5wcm90b3R5cGUuZXF1YWxzPWJuRXF1YWxzO0JpZ0ludGVnZXIucHJvdG90eXBlLm1pbj1ibk1pbjtCaWdJbnRlZ2VyLnByb3RvdHlwZS5tYXg9Ym5NYXg7QmlnSW50ZWdlci5wcm90b3R5cGUuYW5kPWJuQW5kO0JpZ0ludGVnZXIucHJvdG90eXBlLm9yPWJuT3I7QmlnSW50ZWdlci5wcm90b3R5cGUueG9yPWJuWG9yO0JpZ0ludGVnZXIucHJvdG90eXBlLmFuZE5vdD1ibkFuZE5vdDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5ub3Q9Ym5Ob3Q7QmlnSW50ZWdlci5wcm90b3R5cGUuc2hpZnRMZWZ0PWJuU2hpZnRMZWZ0O0JpZ0ludGVnZXIucHJvdG90eXBlLnNoaWZ0UmlnaHQ9Ym5TaGlmdFJpZ2h0O0JpZ0ludGVnZXIucHJvdG90eXBlLmdldExvd2VzdFNldEJpdD1ibkdldExvd2VzdFNldEJpdDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5iaXRDb3VudD1ibkJpdENvdW50O0JpZ0ludGVnZXIucHJvdG90eXBlLnRlc3RCaXQ9Ym5UZXN0Qml0O0JpZ0ludGVnZXIucHJvdG90eXBlLnNldEJpdD1iblNldEJpdDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5jbGVhckJpdD1ibkNsZWFyQml0O0JpZ0ludGVnZXIucHJvdG90eXBlLmZsaXBCaXQ9Ym5GbGlwQml0O0JpZ0ludGVnZXIucHJvdG90eXBlLmFkZD1ibkFkZDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5zdWJ0cmFjdD1iblN1YnRyYWN0O0JpZ0ludGVnZXIucHJvdG90eXBlLm11bHRpcGx5PWJuTXVsdGlwbHk7QmlnSW50ZWdlci5wcm90b3R5cGUuZGl2aWRlPWJuRGl2aWRlO0JpZ0ludGVnZXIucHJvdG90eXBlLnJlbWFpbmRlcj1iblJlbWFpbmRlcjtCaWdJbnRlZ2VyLnByb3RvdHlwZS5kaXZpZGVBbmRSZW1haW5kZXI9Ym5EaXZpZGVBbmRSZW1haW5kZXI7QmlnSW50ZWdlci5wcm90b3R5cGUubW9kUG93PWJuTW9kUG93O0JpZ0ludGVnZXIucHJvdG90eXBlLm1vZEludmVyc2U9Ym5Nb2RJbnZlcnNlO0JpZ0ludGVnZXIucHJvdG90eXBlLnBvdz1iblBvdztCaWdJbnRlZ2VyLnByb3RvdHlwZS5nY2Q9Ym5HQ0Q7QmlnSW50ZWdlci5wcm90b3R5cGUuaXNQcm9iYWJsZVByaW1lPWJuSXNQcm9iYWJsZVByaW1lO0JpZ0ludGVnZXIucHJvdG90eXBlLnNxdWFyZT1iblNxdWFyZTtcbi8qISAoYykgVG9tIFd1IHwgaHR0cDovL3d3dy1jcy1zdHVkZW50cy5zdGFuZm9yZC5lZHUvfnRqdy9qc2JuL1xuICovXG5mdW5jdGlvbiBBcmNmb3VyKCl7dGhpcy5pPTA7dGhpcy5qPTA7dGhpcy5TPW5ldyBBcnJheSgpfWZ1bmN0aW9uIEFSQzRpbml0KGQpe3ZhciBjLGEsYjtmb3IoYz0wO2M8MjU2OysrYyl7dGhpcy5TW2NdPWN9YT0wO2ZvcihjPTA7YzwyNTY7KytjKXthPShhK3RoaXMuU1tjXStkW2MlZC5sZW5ndGhdKSYyNTU7Yj10aGlzLlNbY107dGhpcy5TW2NdPXRoaXMuU1thXTt0aGlzLlNbYV09Yn10aGlzLmk9MDt0aGlzLmo9MH1mdW5jdGlvbiBBUkM0bmV4dCgpe3ZhciBhO3RoaXMuaT0odGhpcy5pKzEpJjI1NTt0aGlzLmo9KHRoaXMuait0aGlzLlNbdGhpcy5pXSkmMjU1O2E9dGhpcy5TW3RoaXMuaV07dGhpcy5TW3RoaXMuaV09dGhpcy5TW3RoaXMual07dGhpcy5TW3RoaXMual09YTtyZXR1cm4gdGhpcy5TWyhhK3RoaXMuU1t0aGlzLmldKSYyNTVdfUFyY2ZvdXIucHJvdG90eXBlLmluaXQ9QVJDNGluaXQ7QXJjZm91ci5wcm90b3R5cGUubmV4dD1BUkM0bmV4dDtmdW5jdGlvbiBwcm5nX25ld3N0YXRlKCl7cmV0dXJuIG5ldyBBcmNmb3VyKCl9dmFyIHJuZ19wc2l6ZT0yNTY7XG4vKiEgKGMpIFRvbSBXdSB8IGh0dHA6Ly93d3ctY3Mtc3R1ZGVudHMuc3RhbmZvcmQuZWR1L350ancvanNibi9cbiAqL1xudmFyIHJuZ19zdGF0ZTt2YXIgcm5nX3Bvb2w7dmFyIHJuZ19wcHRyO2Z1bmN0aW9uIHJuZ19zZWVkX2ludChhKXtybmdfcG9vbFtybmdfcHB0cisrXV49YSYyNTU7cm5nX3Bvb2xbcm5nX3BwdHIrK11ePShhPj44KSYyNTU7cm5nX3Bvb2xbcm5nX3BwdHIrK11ePShhPj4xNikmMjU1O3JuZ19wb29sW3JuZ19wcHRyKytdXj0oYT4+MjQpJjI1NTtpZihybmdfcHB0cj49cm5nX3BzaXplKXtybmdfcHB0ci09cm5nX3BzaXplfX1mdW5jdGlvbiBybmdfc2VlZF90aW1lKCl7cm5nX3NlZWRfaW50KG5ldyBEYXRlKCkuZ2V0VGltZSgpKX1pZihybmdfcG9vbD09bnVsbCl7cm5nX3Bvb2w9bmV3IEFycmF5KCk7cm5nX3BwdHI9MDt2YXIgdDtpZih3aW5kb3chPT11bmRlZmluZWQmJih3aW5kb3cuY3J5cHRvIT09dW5kZWZpbmVkfHx3aW5kb3cubXNDcnlwdG8hPT11bmRlZmluZWQpKXt2YXIgY3J5cHRvPXdpbmRvdy5jcnlwdG98fHdpbmRvdy5tc0NyeXB0bztpZihjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKXt2YXIgdWE9bmV3IFVpbnQ4QXJyYXkoMzIpO2NyeXB0by5nZXRSYW5kb21WYWx1ZXModWEpO2Zvcih0PTA7dDwzMjsrK3Qpe3JuZ19wb29sW3JuZ19wcHRyKytdPXVhW3RdfX1lbHNle2lmKG5hdmlnYXRvci5hcHBOYW1lPT1cIk5ldHNjYXBlXCImJm5hdmlnYXRvci5hcHBWZXJzaW9uPFwiNVwiKXt2YXIgej13aW5kb3cuY3J5cHRvLnJhbmRvbSgzMik7Zm9yKHQ9MDt0PHoubGVuZ3RoOysrdCl7cm5nX3Bvb2xbcm5nX3BwdHIrK109ei5jaGFyQ29kZUF0KHQpJjI1NX19fX13aGlsZShybmdfcHB0cjxybmdfcHNpemUpe3Q9TWF0aC5mbG9vcig2NTUzNipNYXRoLnJhbmRvbSgpKTtybmdfcG9vbFtybmdfcHB0cisrXT10Pj4+ODtybmdfcG9vbFtybmdfcHB0cisrXT10JjI1NX1ybmdfcHB0cj0wO3JuZ19zZWVkX3RpbWUoKX1mdW5jdGlvbiBybmdfZ2V0X2J5dGUoKXtpZihybmdfc3RhdGU9PW51bGwpe3JuZ19zZWVkX3RpbWUoKTtybmdfc3RhdGU9cHJuZ19uZXdzdGF0ZSgpO3JuZ19zdGF0ZS5pbml0KHJuZ19wb29sKTtmb3Iocm5nX3BwdHI9MDtybmdfcHB0cjxybmdfcG9vbC5sZW5ndGg7KytybmdfcHB0cil7cm5nX3Bvb2xbcm5nX3BwdHJdPTB9cm5nX3BwdHI9MH1yZXR1cm4gcm5nX3N0YXRlLm5leHQoKX1mdW5jdGlvbiBybmdfZ2V0X2J5dGVzKGIpe3ZhciBhO2ZvcihhPTA7YTxiLmxlbmd0aDsrK2Epe2JbYV09cm5nX2dldF9ieXRlKCl9fWZ1bmN0aW9uIFNlY3VyZVJhbmRvbSgpe31TZWN1cmVSYW5kb20ucHJvdG90eXBlLm5leHRCeXRlcz1ybmdfZ2V0X2J5dGVzO1xuLyohIChjKSBUb20gV3UgfCBodHRwOi8vd3d3LWNzLXN0dWRlbnRzLnN0YW5mb3JkLmVkdS9+dGp3L2pzYm4vXG4gKi9cbmZ1bmN0aW9uIHBhcnNlQmlnSW50KGIsYSl7cmV0dXJuIG5ldyBCaWdJbnRlZ2VyKGIsYSl9ZnVuY3Rpb24gbGluZWJyayhjLGQpe3ZhciBhPVwiXCI7dmFyIGI9MDt3aGlsZShiK2Q8Yy5sZW5ndGgpe2ErPWMuc3Vic3RyaW5nKGIsYitkKStcIlxcblwiO2IrPWR9cmV0dXJuIGErYy5zdWJzdHJpbmcoYixjLmxlbmd0aCl9ZnVuY3Rpb24gYnl0ZTJIZXgoYSl7aWYoYTwxNil7cmV0dXJuXCIwXCIrYS50b1N0cmluZygxNil9ZWxzZXtyZXR1cm4gYS50b1N0cmluZygxNil9fWZ1bmN0aW9uIHBrY3MxcGFkMihlLGgpe2lmKGg8ZS5sZW5ndGgrMTEpe3Rocm93XCJNZXNzYWdlIHRvbyBsb25nIGZvciBSU0FcIjtyZXR1cm4gbnVsbH12YXIgZz1uZXcgQXJyYXkoKTt2YXIgZD1lLmxlbmd0aC0xO3doaWxlKGQ+PTAmJmg+MCl7dmFyIGY9ZS5jaGFyQ29kZUF0KGQtLSk7aWYoZjwxMjgpe2dbLS1oXT1mfWVsc2V7aWYoKGY+MTI3KSYmKGY8MjA0OCkpe2dbLS1oXT0oZiY2Myl8MTI4O2dbLS1oXT0oZj4+Nil8MTkyfWVsc2V7Z1stLWhdPShmJjYzKXwxMjg7Z1stLWhdPSgoZj4+NikmNjMpfDEyODtnWy0taF09KGY+PjEyKXwyMjR9fX1nWy0taF09MDt2YXIgYj1uZXcgU2VjdXJlUmFuZG9tKCk7dmFyIGE9bmV3IEFycmF5KCk7d2hpbGUoaD4yKXthWzBdPTA7d2hpbGUoYVswXT09MCl7Yi5uZXh0Qnl0ZXMoYSl9Z1stLWhdPWFbMF19Z1stLWhdPTI7Z1stLWhdPTA7cmV0dXJuIG5ldyBCaWdJbnRlZ2VyKGcpfWZ1bmN0aW9uIG9hZXBfbWdmMV9hcnIoYyxhLGUpe3ZhciBiPVwiXCIsZD0wO3doaWxlKGIubGVuZ3RoPGEpe2IrPWUoU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsYy5jb25jYXQoWyhkJjQyNzgxOTAwODApPj4yNCwoZCYxNjcxMTY4MCk+PjE2LChkJjY1MjgwKT4+OCxkJjI1NV0pKSk7ZCs9MX1yZXR1cm4gYn1mdW5jdGlvbiBvYWVwX3BhZChxLGEsZixsKXt2YXIgYz1LSlVSLmNyeXB0by5NZXNzYWdlRGlnZXN0O3ZhciBvPUtKVVIuY3J5cHRvLlV0aWw7dmFyIGI9bnVsbDtpZighZil7Zj1cInNoYTFcIn1pZih0eXBlb2YgZj09PVwic3RyaW5nXCIpe2I9Yy5nZXRDYW5vbmljYWxBbGdOYW1lKGYpO2w9Yy5nZXRIYXNoTGVuZ3RoKGIpO2Y9ZnVuY3Rpb24oaSl7cmV0dXJuIGhleHRvcnN0cihvLmhhc2hIZXgocnN0cnRvaGV4KGkpLGIpKX19aWYocS5sZW5ndGgrMipsKzI+YSl7dGhyb3dcIk1lc3NhZ2UgdG9vIGxvbmcgZm9yIFJTQVwifXZhciBrPVwiXCIsZTtmb3IoZT0wO2U8YS1xLmxlbmd0aC0yKmwtMjtlKz0xKXtrKz1cIlxceDAwXCJ9dmFyIGg9ZihcIlwiKStrK1wiXFx4MDFcIitxO3ZhciBnPW5ldyBBcnJheShsKTtuZXcgU2VjdXJlUmFuZG9tKCkubmV4dEJ5dGVzKGcpO3ZhciBqPW9hZXBfbWdmMV9hcnIoZyxoLmxlbmd0aCxmKTt2YXIgcD1bXTtmb3IoZT0wO2U8aC5sZW5ndGg7ZSs9MSl7cFtlXT1oLmNoYXJDb2RlQXQoZSleai5jaGFyQ29kZUF0KGUpfXZhciBtPW9hZXBfbWdmMV9hcnIocCxnLmxlbmd0aCxmKTt2YXIgZD1bMF07Zm9yKGU9MDtlPGcubGVuZ3RoO2UrPTEpe2RbZSsxXT1nW2VdXm0uY2hhckNvZGVBdChlKX1yZXR1cm4gbmV3IEJpZ0ludGVnZXIoZC5jb25jYXQocCkpfWZ1bmN0aW9uIFJTQUtleSgpe3RoaXMubj1udWxsO3RoaXMuZT0wO3RoaXMuZD1udWxsO3RoaXMucD1udWxsO3RoaXMucT1udWxsO3RoaXMuZG1wMT1udWxsO3RoaXMuZG1xMT1udWxsO3RoaXMuY29lZmY9bnVsbH1mdW5jdGlvbiBSU0FTZXRQdWJsaWMoYixhKXt0aGlzLmlzUHVibGljPXRydWU7dGhpcy5pc1ByaXZhdGU9ZmFsc2U7aWYodHlwZW9mIGIhPT1cInN0cmluZ1wiKXt0aGlzLm49Yjt0aGlzLmU9YX1lbHNle2lmKGIhPW51bGwmJmEhPW51bGwmJmIubGVuZ3RoPjAmJmEubGVuZ3RoPjApe3RoaXMubj1wYXJzZUJpZ0ludChiLDE2KTt0aGlzLmU9cGFyc2VJbnQoYSwxNil9ZWxzZXt0aHJvd1wiSW52YWxpZCBSU0EgcHVibGljIGtleVwifX19ZnVuY3Rpb24gUlNBRG9QdWJsaWMoYSl7cmV0dXJuIGEubW9kUG93SW50KHRoaXMuZSx0aGlzLm4pfWZ1bmN0aW9uIFJTQUVuY3J5cHQoZCl7dmFyIGE9cGtjczFwYWQyKGQsKHRoaXMubi5iaXRMZW5ndGgoKSs3KT4+Myk7aWYoYT09bnVsbCl7cmV0dXJuIG51bGx9dmFyIGU9dGhpcy5kb1B1YmxpYyhhKTtpZihlPT1udWxsKXtyZXR1cm4gbnVsbH12YXIgYj1lLnRvU3RyaW5nKDE2KTtpZigoYi5sZW5ndGgmMSk9PTApe3JldHVybiBifWVsc2V7cmV0dXJuXCIwXCIrYn19ZnVuY3Rpb24gUlNBRW5jcnlwdE9BRVAoZixlLGIpe3ZhciBhPW9hZXBfcGFkKGYsKHRoaXMubi5iaXRMZW5ndGgoKSs3KT4+MyxlLGIpO2lmKGE9PW51bGwpe3JldHVybiBudWxsfXZhciBnPXRoaXMuZG9QdWJsaWMoYSk7aWYoZz09bnVsbCl7cmV0dXJuIG51bGx9dmFyIGQ9Zy50b1N0cmluZygxNik7aWYoKGQubGVuZ3RoJjEpPT0wKXtyZXR1cm4gZH1lbHNle3JldHVyblwiMFwiK2R9fVJTQUtleS5wcm90b3R5cGUuZG9QdWJsaWM9UlNBRG9QdWJsaWM7UlNBS2V5LnByb3RvdHlwZS5zZXRQdWJsaWM9UlNBU2V0UHVibGljO1JTQUtleS5wcm90b3R5cGUuZW5jcnlwdD1SU0FFbmNyeXB0O1JTQUtleS5wcm90b3R5cGUuZW5jcnlwdE9BRVA9UlNBRW5jcnlwdE9BRVA7UlNBS2V5LnByb3RvdHlwZS50eXBlPVwiUlNBXCI7XG4vKiEgKGMpIFRvbSBXdSB8IGh0dHA6Ly93d3ctY3Mtc3R1ZGVudHMuc3RhbmZvcmQuZWR1L350ancvanNibi9cbiAqL1xuZnVuY3Rpb24gRUNGaWVsZEVsZW1lbnRGcChiLGEpe3RoaXMueD1hO3RoaXMucT1ifWZ1bmN0aW9uIGZlRnBFcXVhbHMoYSl7aWYoYT09dGhpcyl7cmV0dXJuIHRydWV9cmV0dXJuKHRoaXMucS5lcXVhbHMoYS5xKSYmdGhpcy54LmVxdWFscyhhLngpKX1mdW5jdGlvbiBmZUZwVG9CaWdJbnRlZ2VyKCl7cmV0dXJuIHRoaXMueH1mdW5jdGlvbiBmZUZwTmVnYXRlKCl7cmV0dXJuIG5ldyBFQ0ZpZWxkRWxlbWVudEZwKHRoaXMucSx0aGlzLngubmVnYXRlKCkubW9kKHRoaXMucSkpfWZ1bmN0aW9uIGZlRnBBZGQoYSl7cmV0dXJuIG5ldyBFQ0ZpZWxkRWxlbWVudEZwKHRoaXMucSx0aGlzLnguYWRkKGEudG9CaWdJbnRlZ2VyKCkpLm1vZCh0aGlzLnEpKX1mdW5jdGlvbiBmZUZwU3VidHJhY3QoYSl7cmV0dXJuIG5ldyBFQ0ZpZWxkRWxlbWVudEZwKHRoaXMucSx0aGlzLnguc3VidHJhY3QoYS50b0JpZ0ludGVnZXIoKSkubW9kKHRoaXMucSkpfWZ1bmN0aW9uIGZlRnBNdWx0aXBseShhKXtyZXR1cm4gbmV3IEVDRmllbGRFbGVtZW50RnAodGhpcy5xLHRoaXMueC5tdWx0aXBseShhLnRvQmlnSW50ZWdlcigpKS5tb2QodGhpcy5xKSl9ZnVuY3Rpb24gZmVGcFNxdWFyZSgpe3JldHVybiBuZXcgRUNGaWVsZEVsZW1lbnRGcCh0aGlzLnEsdGhpcy54LnNxdWFyZSgpLm1vZCh0aGlzLnEpKX1mdW5jdGlvbiBmZUZwRGl2aWRlKGEpe3JldHVybiBuZXcgRUNGaWVsZEVsZW1lbnRGcCh0aGlzLnEsdGhpcy54Lm11bHRpcGx5KGEudG9CaWdJbnRlZ2VyKCkubW9kSW52ZXJzZSh0aGlzLnEpKS5tb2QodGhpcy5xKSl9RUNGaWVsZEVsZW1lbnRGcC5wcm90b3R5cGUuZXF1YWxzPWZlRnBFcXVhbHM7RUNGaWVsZEVsZW1lbnRGcC5wcm90b3R5cGUudG9CaWdJbnRlZ2VyPWZlRnBUb0JpZ0ludGVnZXI7RUNGaWVsZEVsZW1lbnRGcC5wcm90b3R5cGUubmVnYXRlPWZlRnBOZWdhdGU7RUNGaWVsZEVsZW1lbnRGcC5wcm90b3R5cGUuYWRkPWZlRnBBZGQ7RUNGaWVsZEVsZW1lbnRGcC5wcm90b3R5cGUuc3VidHJhY3Q9ZmVGcFN1YnRyYWN0O0VDRmllbGRFbGVtZW50RnAucHJvdG90eXBlLm11bHRpcGx5PWZlRnBNdWx0aXBseTtFQ0ZpZWxkRWxlbWVudEZwLnByb3RvdHlwZS5zcXVhcmU9ZmVGcFNxdWFyZTtFQ0ZpZWxkRWxlbWVudEZwLnByb3RvdHlwZS5kaXZpZGU9ZmVGcERpdmlkZTtmdW5jdGlvbiBFQ1BvaW50RnAoYyxhLGQsYil7dGhpcy5jdXJ2ZT1jO3RoaXMueD1hO3RoaXMueT1kO2lmKGI9PW51bGwpe3RoaXMuej1CaWdJbnRlZ2VyLk9ORX1lbHNle3RoaXMuej1ifXRoaXMuemludj1udWxsfWZ1bmN0aW9uIHBvaW50RnBHZXRYKCl7aWYodGhpcy56aW52PT1udWxsKXt0aGlzLnppbnY9dGhpcy56Lm1vZEludmVyc2UodGhpcy5jdXJ2ZS5xKX1yZXR1cm4gdGhpcy5jdXJ2ZS5mcm9tQmlnSW50ZWdlcih0aGlzLngudG9CaWdJbnRlZ2VyKCkubXVsdGlwbHkodGhpcy56aW52KS5tb2QodGhpcy5jdXJ2ZS5xKSl9ZnVuY3Rpb24gcG9pbnRGcEdldFkoKXtpZih0aGlzLnppbnY9PW51bGwpe3RoaXMuemludj10aGlzLnoubW9kSW52ZXJzZSh0aGlzLmN1cnZlLnEpfXJldHVybiB0aGlzLmN1cnZlLmZyb21CaWdJbnRlZ2VyKHRoaXMueS50b0JpZ0ludGVnZXIoKS5tdWx0aXBseSh0aGlzLnppbnYpLm1vZCh0aGlzLmN1cnZlLnEpKX1mdW5jdGlvbiBwb2ludEZwRXF1YWxzKGEpe2lmKGE9PXRoaXMpe3JldHVybiB0cnVlfWlmKHRoaXMuaXNJbmZpbml0eSgpKXtyZXR1cm4gYS5pc0luZmluaXR5KCl9aWYoYS5pc0luZmluaXR5KCkpe3JldHVybiB0aGlzLmlzSW5maW5pdHkoKX12YXIgYyxiO2M9YS55LnRvQmlnSW50ZWdlcigpLm11bHRpcGx5KHRoaXMueikuc3VidHJhY3QodGhpcy55LnRvQmlnSW50ZWdlcigpLm11bHRpcGx5KGEueikpLm1vZCh0aGlzLmN1cnZlLnEpO2lmKCFjLmVxdWFscyhCaWdJbnRlZ2VyLlpFUk8pKXtyZXR1cm4gZmFsc2V9Yj1hLngudG9CaWdJbnRlZ2VyKCkubXVsdGlwbHkodGhpcy56KS5zdWJ0cmFjdCh0aGlzLngudG9CaWdJbnRlZ2VyKCkubXVsdGlwbHkoYS56KSkubW9kKHRoaXMuY3VydmUucSk7cmV0dXJuIGIuZXF1YWxzKEJpZ0ludGVnZXIuWkVSTyl9ZnVuY3Rpb24gcG9pbnRGcElzSW5maW5pdHkoKXtpZigodGhpcy54PT1udWxsKSYmKHRoaXMueT09bnVsbCkpe3JldHVybiB0cnVlfXJldHVybiB0aGlzLnouZXF1YWxzKEJpZ0ludGVnZXIuWkVSTykmJiF0aGlzLnkudG9CaWdJbnRlZ2VyKCkuZXF1YWxzKEJpZ0ludGVnZXIuWkVSTyl9ZnVuY3Rpb24gcG9pbnRGcE5lZ2F0ZSgpe3JldHVybiBuZXcgRUNQb2ludEZwKHRoaXMuY3VydmUsdGhpcy54LHRoaXMueS5uZWdhdGUoKSx0aGlzLnopfWZ1bmN0aW9uIHBvaW50RnBBZGQobCl7aWYodGhpcy5pc0luZmluaXR5KCkpe3JldHVybiBsfWlmKGwuaXNJbmZpbml0eSgpKXtyZXR1cm4gdGhpc312YXIgcD1sLnkudG9CaWdJbnRlZ2VyKCkubXVsdGlwbHkodGhpcy56KS5zdWJ0cmFjdCh0aGlzLnkudG9CaWdJbnRlZ2VyKCkubXVsdGlwbHkobC56KSkubW9kKHRoaXMuY3VydmUucSk7dmFyIG89bC54LnRvQmlnSW50ZWdlcigpLm11bHRpcGx5KHRoaXMueikuc3VidHJhY3QodGhpcy54LnRvQmlnSW50ZWdlcigpLm11bHRpcGx5KGwueikpLm1vZCh0aGlzLmN1cnZlLnEpO2lmKEJpZ0ludGVnZXIuWkVSTy5lcXVhbHMobykpe2lmKEJpZ0ludGVnZXIuWkVSTy5lcXVhbHMocCkpe3JldHVybiB0aGlzLnR3aWNlKCl9cmV0dXJuIHRoaXMuY3VydmUuZ2V0SW5maW5pdHkoKX12YXIgaj1uZXcgQmlnSW50ZWdlcihcIjNcIik7dmFyIGU9dGhpcy54LnRvQmlnSW50ZWdlcigpO3ZhciBuPXRoaXMueS50b0JpZ0ludGVnZXIoKTt2YXIgYz1sLngudG9CaWdJbnRlZ2VyKCk7dmFyIGs9bC55LnRvQmlnSW50ZWdlcigpO3ZhciBtPW8uc3F1YXJlKCk7dmFyIGk9bS5tdWx0aXBseShvKTt2YXIgZD1lLm11bHRpcGx5KG0pO3ZhciBnPXAuc3F1YXJlKCkubXVsdGlwbHkodGhpcy56KTt2YXIgYT1nLnN1YnRyYWN0KGQuc2hpZnRMZWZ0KDEpKS5tdWx0aXBseShsLnopLnN1YnRyYWN0KGkpLm11bHRpcGx5KG8pLm1vZCh0aGlzLmN1cnZlLnEpO3ZhciBoPWQubXVsdGlwbHkoaikubXVsdGlwbHkocCkuc3VidHJhY3Qobi5tdWx0aXBseShpKSkuc3VidHJhY3QoZy5tdWx0aXBseShwKSkubXVsdGlwbHkobC56KS5hZGQocC5tdWx0aXBseShpKSkubW9kKHRoaXMuY3VydmUucSk7dmFyIGY9aS5tdWx0aXBseSh0aGlzLnopLm11bHRpcGx5KGwueikubW9kKHRoaXMuY3VydmUucSk7cmV0dXJuIG5ldyBFQ1BvaW50RnAodGhpcy5jdXJ2ZSx0aGlzLmN1cnZlLmZyb21CaWdJbnRlZ2VyKGEpLHRoaXMuY3VydmUuZnJvbUJpZ0ludGVnZXIoaCksZil9ZnVuY3Rpb24gcG9pbnRGcFR3aWNlKCl7aWYodGhpcy5pc0luZmluaXR5KCkpe3JldHVybiB0aGlzfWlmKHRoaXMueS50b0JpZ0ludGVnZXIoKS5zaWdudW0oKT09MCl7cmV0dXJuIHRoaXMuY3VydmUuZ2V0SW5maW5pdHkoKX12YXIgZz1uZXcgQmlnSW50ZWdlcihcIjNcIik7dmFyIGM9dGhpcy54LnRvQmlnSW50ZWdlcigpO3ZhciBoPXRoaXMueS50b0JpZ0ludGVnZXIoKTt2YXIgZT1oLm11bHRpcGx5KHRoaXMueik7dmFyIGo9ZS5tdWx0aXBseShoKS5tb2QodGhpcy5jdXJ2ZS5xKTt2YXIgaT10aGlzLmN1cnZlLmEudG9CaWdJbnRlZ2VyKCk7dmFyIGs9Yy5zcXVhcmUoKS5tdWx0aXBseShnKTtpZighQmlnSW50ZWdlci5aRVJPLmVxdWFscyhpKSl7az1rLmFkZCh0aGlzLnouc3F1YXJlKCkubXVsdGlwbHkoaSkpfWs9ay5tb2QodGhpcy5jdXJ2ZS5xKTt2YXIgYj1rLnNxdWFyZSgpLnN1YnRyYWN0KGMuc2hpZnRMZWZ0KDMpLm11bHRpcGx5KGopKS5zaGlmdExlZnQoMSkubXVsdGlwbHkoZSkubW9kKHRoaXMuY3VydmUucSk7dmFyIGY9ay5tdWx0aXBseShnKS5tdWx0aXBseShjKS5zdWJ0cmFjdChqLnNoaWZ0TGVmdCgxKSkuc2hpZnRMZWZ0KDIpLm11bHRpcGx5KGopLnN1YnRyYWN0KGsuc3F1YXJlKCkubXVsdGlwbHkoaykpLm1vZCh0aGlzLmN1cnZlLnEpO3ZhciBkPWUuc3F1YXJlKCkubXVsdGlwbHkoZSkuc2hpZnRMZWZ0KDMpLm1vZCh0aGlzLmN1cnZlLnEpO3JldHVybiBuZXcgRUNQb2ludEZwKHRoaXMuY3VydmUsdGhpcy5jdXJ2ZS5mcm9tQmlnSW50ZWdlcihiKSx0aGlzLmN1cnZlLmZyb21CaWdJbnRlZ2VyKGYpLGQpfWZ1bmN0aW9uIHBvaW50RnBNdWx0aXBseShkKXtpZih0aGlzLmlzSW5maW5pdHkoKSl7cmV0dXJuIHRoaXN9aWYoZC5zaWdudW0oKT09MCl7cmV0dXJuIHRoaXMuY3VydmUuZ2V0SW5maW5pdHkoKX12YXIgbT1kO3ZhciBsPW0ubXVsdGlwbHkobmV3IEJpZ0ludGVnZXIoXCIzXCIpKTt2YXIgYj10aGlzLm5lZ2F0ZSgpO3ZhciBqPXRoaXM7dmFyIHE9dGhpcy5jdXJ2ZS5xLnN1YnRyYWN0KGQpO3ZhciBvPXEubXVsdGlwbHkobmV3IEJpZ0ludGVnZXIoXCIzXCIpKTt2YXIgYz1uZXcgRUNQb2ludEZwKHRoaXMuY3VydmUsdGhpcy54LHRoaXMueSk7dmFyIGE9Yy5uZWdhdGUoKTt2YXIgZztmb3IoZz1sLmJpdExlbmd0aCgpLTI7Zz4wOy0tZyl7aj1qLnR3aWNlKCk7dmFyIG49bC50ZXN0Qml0KGcpO3ZhciBmPW0udGVzdEJpdChnKTtpZihuIT1mKXtqPWouYWRkKG4/dGhpczpiKX19Zm9yKGc9by5iaXRMZW5ndGgoKS0yO2c+MDstLWcpe2M9Yy50d2ljZSgpO3ZhciBwPW8udGVzdEJpdChnKTt2YXIgcj1xLnRlc3RCaXQoZyk7aWYocCE9cil7Yz1jLmFkZChwP2M6YSl9fXJldHVybiBqfWZ1bmN0aW9uIHBvaW50RnBNdWx0aXBseVR3byhjLGEsYil7dmFyIGQ7aWYoYy5iaXRMZW5ndGgoKT5iLmJpdExlbmd0aCgpKXtkPWMuYml0TGVuZ3RoKCktMX1lbHNle2Q9Yi5iaXRMZW5ndGgoKS0xfXZhciBmPXRoaXMuY3VydmUuZ2V0SW5maW5pdHkoKTt2YXIgZT10aGlzLmFkZChhKTt3aGlsZShkPj0wKXtmPWYudHdpY2UoKTtpZihjLnRlc3RCaXQoZCkpe2lmKGIudGVzdEJpdChkKSl7Zj1mLmFkZChlKX1lbHNle2Y9Zi5hZGQodGhpcyl9fWVsc2V7aWYoYi50ZXN0Qml0KGQpKXtmPWYuYWRkKGEpfX0tLWR9cmV0dXJuIGZ9RUNQb2ludEZwLnByb3RvdHlwZS5nZXRYPXBvaW50RnBHZXRYO0VDUG9pbnRGcC5wcm90b3R5cGUuZ2V0WT1wb2ludEZwR2V0WTtFQ1BvaW50RnAucHJvdG90eXBlLmVxdWFscz1wb2ludEZwRXF1YWxzO0VDUG9pbnRGcC5wcm90b3R5cGUuaXNJbmZpbml0eT1wb2ludEZwSXNJbmZpbml0eTtFQ1BvaW50RnAucHJvdG90eXBlLm5lZ2F0ZT1wb2ludEZwTmVnYXRlO0VDUG9pbnRGcC5wcm90b3R5cGUuYWRkPXBvaW50RnBBZGQ7RUNQb2ludEZwLnByb3RvdHlwZS50d2ljZT1wb2ludEZwVHdpY2U7RUNQb2ludEZwLnByb3RvdHlwZS5tdWx0aXBseT1wb2ludEZwTXVsdGlwbHk7RUNQb2ludEZwLnByb3RvdHlwZS5tdWx0aXBseVR3bz1wb2ludEZwTXVsdGlwbHlUd287ZnVuY3Rpb24gRUNDdXJ2ZUZwKGUsZCxjKXt0aGlzLnE9ZTt0aGlzLmE9dGhpcy5mcm9tQmlnSW50ZWdlcihkKTt0aGlzLmI9dGhpcy5mcm9tQmlnSW50ZWdlcihjKTt0aGlzLmluZmluaXR5PW5ldyBFQ1BvaW50RnAodGhpcyxudWxsLG51bGwpfWZ1bmN0aW9uIGN1cnZlRnBHZXRRKCl7cmV0dXJuIHRoaXMucX1mdW5jdGlvbiBjdXJ2ZUZwR2V0QSgpe3JldHVybiB0aGlzLmF9ZnVuY3Rpb24gY3VydmVGcEdldEIoKXtyZXR1cm4gdGhpcy5ifWZ1bmN0aW9uIGN1cnZlRnBFcXVhbHMoYSl7aWYoYT09dGhpcyl7cmV0dXJuIHRydWV9cmV0dXJuKHRoaXMucS5lcXVhbHMoYS5xKSYmdGhpcy5hLmVxdWFscyhhLmEpJiZ0aGlzLmIuZXF1YWxzKGEuYikpfWZ1bmN0aW9uIGN1cnZlRnBHZXRJbmZpbml0eSgpe3JldHVybiB0aGlzLmluZmluaXR5fWZ1bmN0aW9uIGN1cnZlRnBGcm9tQmlnSW50ZWdlcihhKXtyZXR1cm4gbmV3IEVDRmllbGRFbGVtZW50RnAodGhpcy5xLGEpfWZ1bmN0aW9uIGN1cnZlRnBEZWNvZGVQb2ludEhleChkKXtzd2l0Y2gocGFyc2VJbnQoZC5zdWJzdHIoMCwyKSwxNikpe2Nhc2UgMDpyZXR1cm4gdGhpcy5pbmZpbml0eTtjYXNlIDI6Y2FzZSAzOnJldHVybiBudWxsO2Nhc2UgNDpjYXNlIDY6Y2FzZSA3OnZhciBhPShkLmxlbmd0aC0yKS8yO3ZhciBjPWQuc3Vic3RyKDIsYSk7dmFyIGI9ZC5zdWJzdHIoYSsyLGEpO3JldHVybiBuZXcgRUNQb2ludEZwKHRoaXMsdGhpcy5mcm9tQmlnSW50ZWdlcihuZXcgQmlnSW50ZWdlcihjLDE2KSksdGhpcy5mcm9tQmlnSW50ZWdlcihuZXcgQmlnSW50ZWdlcihiLDE2KSkpO2RlZmF1bHQ6cmV0dXJuIG51bGx9fUVDQ3VydmVGcC5wcm90b3R5cGUuZ2V0UT1jdXJ2ZUZwR2V0UTtFQ0N1cnZlRnAucHJvdG90eXBlLmdldEE9Y3VydmVGcEdldEE7RUNDdXJ2ZUZwLnByb3RvdHlwZS5nZXRCPWN1cnZlRnBHZXRCO0VDQ3VydmVGcC5wcm90b3R5cGUuZXF1YWxzPWN1cnZlRnBFcXVhbHM7RUNDdXJ2ZUZwLnByb3RvdHlwZS5nZXRJbmZpbml0eT1jdXJ2ZUZwR2V0SW5maW5pdHk7RUNDdXJ2ZUZwLnByb3RvdHlwZS5mcm9tQmlnSW50ZWdlcj1jdXJ2ZUZwRnJvbUJpZ0ludGVnZXI7RUNDdXJ2ZUZwLnByb3RvdHlwZS5kZWNvZGVQb2ludEhleD1jdXJ2ZUZwRGVjb2RlUG9pbnRIZXg7XG4vKiEgKGMpIFN0ZWZhbiBUaG9tYXMgfCBodHRwczovL2dpdGh1Yi5jb20vYml0Y29pbmpzL2JpdGNvaW5qcy1saWJcbiAqL1xuRUNGaWVsZEVsZW1lbnRGcC5wcm90b3R5cGUuZ2V0Qnl0ZUxlbmd0aD1mdW5jdGlvbigpe3JldHVybiBNYXRoLmZsb29yKCh0aGlzLnRvQmlnSW50ZWdlcigpLmJpdExlbmd0aCgpKzcpLzgpfTtFQ1BvaW50RnAucHJvdG90eXBlLmdldEVuY29kZWQ9ZnVuY3Rpb24oYyl7dmFyIGQ9ZnVuY3Rpb24oaCxmKXt2YXIgZz1oLnRvQnl0ZUFycmF5VW5zaWduZWQoKTtpZihmPGcubGVuZ3RoKXtnPWcuc2xpY2UoZy5sZW5ndGgtZil9ZWxzZXt3aGlsZShmPmcubGVuZ3RoKXtnLnVuc2hpZnQoMCl9fXJldHVybiBnfTt2YXIgYT10aGlzLmdldFgoKS50b0JpZ0ludGVnZXIoKTt2YXIgZT10aGlzLmdldFkoKS50b0JpZ0ludGVnZXIoKTt2YXIgYj1kKGEsMzIpO2lmKGMpe2lmKGUuaXNFdmVuKCkpe2IudW5zaGlmdCgyKX1lbHNle2IudW5zaGlmdCgzKX19ZWxzZXtiLnVuc2hpZnQoNCk7Yj1iLmNvbmNhdChkKGUsMzIpKX1yZXR1cm4gYn07RUNQb2ludEZwLmRlY29kZUZyb209ZnVuY3Rpb24oZyxjKXt2YXIgZj1jWzBdO3ZhciBlPWMubGVuZ3RoLTE7dmFyIGQ9Yy5zbGljZSgxLDErZS8yKTt2YXIgYj1jLnNsaWNlKDErZS8yLDErZSk7ZC51bnNoaWZ0KDApO2IudW5zaGlmdCgwKTt2YXIgYT1uZXcgQmlnSW50ZWdlcihkKTt2YXIgaD1uZXcgQmlnSW50ZWdlcihiKTtyZXR1cm4gbmV3IEVDUG9pbnRGcChnLGcuZnJvbUJpZ0ludGVnZXIoYSksZy5mcm9tQmlnSW50ZWdlcihoKSl9O0VDUG9pbnRGcC5kZWNvZGVGcm9tSGV4PWZ1bmN0aW9uKGcsYyl7dmFyIGY9Yy5zdWJzdHIoMCwyKTt2YXIgZT1jLmxlbmd0aC0yO3ZhciBkPWMuc3Vic3RyKDIsZS8yKTt2YXIgYj1jLnN1YnN0cigyK2UvMixlLzIpO3ZhciBhPW5ldyBCaWdJbnRlZ2VyKGQsMTYpO3ZhciBoPW5ldyBCaWdJbnRlZ2VyKGIsMTYpO3JldHVybiBuZXcgRUNQb2ludEZwKGcsZy5mcm9tQmlnSW50ZWdlcihhKSxnLmZyb21CaWdJbnRlZ2VyKGgpKX07RUNQb2ludEZwLnByb3RvdHlwZS5hZGQyRD1mdW5jdGlvbihjKXtpZih0aGlzLmlzSW5maW5pdHkoKSl7cmV0dXJuIGN9aWYoYy5pc0luZmluaXR5KCkpe3JldHVybiB0aGlzfWlmKHRoaXMueC5lcXVhbHMoYy54KSl7aWYodGhpcy55LmVxdWFscyhjLnkpKXtyZXR1cm4gdGhpcy50d2ljZSgpfXJldHVybiB0aGlzLmN1cnZlLmdldEluZmluaXR5KCl9dmFyIGc9Yy54LnN1YnRyYWN0KHRoaXMueCk7dmFyIGU9Yy55LnN1YnRyYWN0KHRoaXMueSk7dmFyIGE9ZS5kaXZpZGUoZyk7dmFyIGQ9YS5zcXVhcmUoKS5zdWJ0cmFjdCh0aGlzLngpLnN1YnRyYWN0KGMueCk7dmFyIGY9YS5tdWx0aXBseSh0aGlzLnguc3VidHJhY3QoZCkpLnN1YnRyYWN0KHRoaXMueSk7cmV0dXJuIG5ldyBFQ1BvaW50RnAodGhpcy5jdXJ2ZSxkLGYpfTtFQ1BvaW50RnAucHJvdG90eXBlLnR3aWNlMkQ9ZnVuY3Rpb24oKXtpZih0aGlzLmlzSW5maW5pdHkoKSl7cmV0dXJuIHRoaXN9aWYodGhpcy55LnRvQmlnSW50ZWdlcigpLnNpZ251bSgpPT0wKXtyZXR1cm4gdGhpcy5jdXJ2ZS5nZXRJbmZpbml0eSgpfXZhciBiPXRoaXMuY3VydmUuZnJvbUJpZ0ludGVnZXIoQmlnSW50ZWdlci52YWx1ZU9mKDIpKTt2YXIgZT10aGlzLmN1cnZlLmZyb21CaWdJbnRlZ2VyKEJpZ0ludGVnZXIudmFsdWVPZigzKSk7dmFyIGE9dGhpcy54LnNxdWFyZSgpLm11bHRpcGx5KGUpLmFkZCh0aGlzLmN1cnZlLmEpLmRpdmlkZSh0aGlzLnkubXVsdGlwbHkoYikpO3ZhciBjPWEuc3F1YXJlKCkuc3VidHJhY3QodGhpcy54Lm11bHRpcGx5KGIpKTt2YXIgZD1hLm11bHRpcGx5KHRoaXMueC5zdWJ0cmFjdChjKSkuc3VidHJhY3QodGhpcy55KTtyZXR1cm4gbmV3IEVDUG9pbnRGcCh0aGlzLmN1cnZlLGMsZCl9O0VDUG9pbnRGcC5wcm90b3R5cGUubXVsdGlwbHkyRD1mdW5jdGlvbihiKXtpZih0aGlzLmlzSW5maW5pdHkoKSl7cmV0dXJuIHRoaXN9aWYoYi5zaWdudW0oKT09MCl7cmV0dXJuIHRoaXMuY3VydmUuZ2V0SW5maW5pdHkoKX12YXIgZz1iO3ZhciBmPWcubXVsdGlwbHkobmV3IEJpZ0ludGVnZXIoXCIzXCIpKTt2YXIgbD10aGlzLm5lZ2F0ZSgpO3ZhciBkPXRoaXM7dmFyIGM7Zm9yKGM9Zi5iaXRMZW5ndGgoKS0yO2M+MDstLWMpe2Q9ZC50d2ljZSgpO3ZhciBhPWYudGVzdEJpdChjKTt2YXIgaj1nLnRlc3RCaXQoYyk7aWYoYSE9ail7ZD1kLmFkZDJEKGE/dGhpczpsKX19cmV0dXJuIGR9O0VDUG9pbnRGcC5wcm90b3R5cGUuaXNPbkN1cnZlPWZ1bmN0aW9uKCl7dmFyIGQ9dGhpcy5nZXRYKCkudG9CaWdJbnRlZ2VyKCk7dmFyIGk9dGhpcy5nZXRZKCkudG9CaWdJbnRlZ2VyKCk7dmFyIGY9dGhpcy5jdXJ2ZS5nZXRBKCkudG9CaWdJbnRlZ2VyKCk7dmFyIGM9dGhpcy5jdXJ2ZS5nZXRCKCkudG9CaWdJbnRlZ2VyKCk7dmFyIGg9dGhpcy5jdXJ2ZS5nZXRRKCk7dmFyIGU9aS5tdWx0aXBseShpKS5tb2QoaCk7dmFyIGc9ZC5tdWx0aXBseShkKS5tdWx0aXBseShkKS5hZGQoZi5tdWx0aXBseShkKSkuYWRkKGMpLm1vZChoKTtyZXR1cm4gZS5lcXVhbHMoZyl9O0VDUG9pbnRGcC5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIihcIit0aGlzLmdldFgoKS50b0JpZ0ludGVnZXIoKS50b1N0cmluZygpK1wiLFwiK3RoaXMuZ2V0WSgpLnRvQmlnSW50ZWdlcigpLnRvU3RyaW5nKCkrXCIpXCJ9O0VDUG9pbnRGcC5wcm90b3R5cGUudmFsaWRhdGU9ZnVuY3Rpb24oKXt2YXIgYz10aGlzLmN1cnZlLmdldFEoKTtpZih0aGlzLmlzSW5maW5pdHkoKSl7dGhyb3cgbmV3IEVycm9yKFwiUG9pbnQgaXMgYXQgaW5maW5pdHkuXCIpfXZhciBhPXRoaXMuZ2V0WCgpLnRvQmlnSW50ZWdlcigpO3ZhciBiPXRoaXMuZ2V0WSgpLnRvQmlnSW50ZWdlcigpO2lmKGEuY29tcGFyZVRvKEJpZ0ludGVnZXIuT05FKTwwfHxhLmNvbXBhcmVUbyhjLnN1YnRyYWN0KEJpZ0ludGVnZXIuT05FKSk+MCl7dGhyb3cgbmV3IEVycm9yKFwieCBjb29yZGluYXRlIG91dCBvZiBib3VuZHNcIil9aWYoYi5jb21wYXJlVG8oQmlnSW50ZWdlci5PTkUpPDB8fGIuY29tcGFyZVRvKGMuc3VidHJhY3QoQmlnSW50ZWdlci5PTkUpKT4wKXt0aHJvdyBuZXcgRXJyb3IoXCJ5IGNvb3JkaW5hdGUgb3V0IG9mIGJvdW5kc1wiKX1pZighdGhpcy5pc09uQ3VydmUoKSl7dGhyb3cgbmV3IEVycm9yKFwiUG9pbnQgaXMgbm90IG9uIHRoZSBjdXJ2ZS5cIil9aWYodGhpcy5tdWx0aXBseShjKS5pc0luZmluaXR5KCkpe3Rocm93IG5ldyBFcnJvcihcIlBvaW50IGlzIG5vdCBhIHNjYWxhciBtdWx0aXBsZSBvZiBHLlwiKX1yZXR1cm4gdHJ1ZX07XG4vKiEgTWlrZSBTYW11ZWwgKGMpIDIwMDkgfCBjb2RlLmdvb2dsZS5jb20vcC9qc29uLXNhbnMtZXZhbFxuICovXG52YXIganNvblBhcnNlPShmdW5jdGlvbigpe3ZhciBlPVwiKD86LT9cXFxcYig/OjB8WzEtOV1bMC05XSopKD86XFxcXC5bMC05XSspPyg/OltlRV1bKy1dP1swLTldKyk/XFxcXGIpXCI7dmFyIGo9Jyg/OlteXFxcXDAtXFxcXHgwOFxcXFx4MGEtXFxcXHgxZlwiXFxcXFxcXFxdfFxcXFxcXFxcKD86W1wiL1xcXFxcXFxcYmZucnRdfHVbMC05QS1GYS1mXXs0fSkpJzt2YXIgaT0nKD86XCInK2orJypcIiknO3ZhciBkPW5ldyBSZWdFeHAoXCIoPzpmYWxzZXx0cnVlfG51bGx8W1xcXFx7XFxcXH1cXFxcW1xcXFxdXXxcIitlK1wifFwiK2krXCIpXCIsXCJnXCIpO3ZhciBrPW5ldyBSZWdFeHAoXCJcXFxcXFxcXCg/OihbXnVdKXx1KC57NH0pKVwiLFwiZ1wiKTt2YXIgZz17J1wiJzonXCInLFwiL1wiOlwiL1wiLFwiXFxcXFwiOlwiXFxcXFwiLGI6XCJcXGJcIixmOlwiXFxmXCIsbjpcIlxcblwiLHI6XCJcXHJcIix0OlwiXFx0XCJ9O2Z1bmN0aW9uIGgobCxtLG4pe3JldHVybiBtP2dbbV06U3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludChuLDE2KSl9dmFyIGM9bmV3IFN0cmluZyhcIlwiKTt2YXIgYT1cIlxcXFxcIjt2YXIgZj17XCJ7XCI6T2JqZWN0LFwiW1wiOkFycmF5fTt2YXIgYj1PYmplY3QuaGFzT3duUHJvcGVydHk7cmV0dXJuIGZ1bmN0aW9uKHUscSl7dmFyIHA9dS5tYXRjaChkKTt2YXIgeDt2YXIgdj1wWzBdO3ZhciBsPWZhbHNlO2lmKFwie1wiPT09dil7eD17fX1lbHNle2lmKFwiW1wiPT09dil7eD1bXX1lbHNle3g9W107bD10cnVlfX12YXIgdDt2YXIgcj1beF07Zm9yKHZhciBvPTEtbCxtPXAubGVuZ3RoO288bTsrK28pe3Y9cFtvXTt2YXIgdztzd2l0Y2godi5jaGFyQ29kZUF0KDApKXtkZWZhdWx0Onc9clswXTt3W3R8fHcubGVuZ3RoXT0rKHYpO3Q9dm9pZCAwO2JyZWFrO2Nhc2UgMzQ6dj12LnN1YnN0cmluZygxLHYubGVuZ3RoLTEpO2lmKHYuaW5kZXhPZihhKSE9PS0xKXt2PXYucmVwbGFjZShrLGgpfXc9clswXTtpZighdCl7aWYodyBpbnN0YW5jZW9mIEFycmF5KXt0PXcubGVuZ3RofWVsc2V7dD12fHxjO2JyZWFrfX13W3RdPXY7dD12b2lkIDA7YnJlYWs7Y2FzZSA5MTp3PXJbMF07ci51bnNoaWZ0KHdbdHx8dy5sZW5ndGhdPVtdKTt0PXZvaWQgMDticmVhaztjYXNlIDkzOnIuc2hpZnQoKTticmVhaztjYXNlIDEwMjp3PXJbMF07d1t0fHx3Lmxlbmd0aF09ZmFsc2U7dD12b2lkIDA7YnJlYWs7Y2FzZSAxMTA6dz1yWzBdO3dbdHx8dy5sZW5ndGhdPW51bGw7dD12b2lkIDA7YnJlYWs7Y2FzZSAxMTY6dz1yWzBdO3dbdHx8dy5sZW5ndGhdPXRydWU7dD12b2lkIDA7YnJlYWs7Y2FzZSAxMjM6dz1yWzBdO3IudW5zaGlmdCh3W3R8fHcubGVuZ3RoXT17fSk7dD12b2lkIDA7YnJlYWs7Y2FzZSAxMjU6ci5zaGlmdCgpO2JyZWFrfX1pZihsKXtpZihyLmxlbmd0aCE9PTEpe3Rocm93IG5ldyBFcnJvcigpfXg9eFswXX1lbHNle2lmKHIubGVuZ3RoKXt0aHJvdyBuZXcgRXJyb3IoKX19aWYocSl7dmFyIHM9ZnVuY3Rpb24oQyxCKXt2YXIgRD1DW0JdO2lmKEQmJnR5cGVvZiBEPT09XCJvYmplY3RcIil7dmFyIG49bnVsbDtmb3IodmFyIHogaW4gRCl7aWYoYi5jYWxsKEQseikmJkQhPT1DKXt2YXIgeT1zKEQseik7aWYoeSE9PXZvaWQgMCl7RFt6XT15fWVsc2V7aWYoIW4pe249W119bi5wdXNoKHopfX19aWYobil7Zm9yKHZhciBBPW4ubGVuZ3RoOy0tQT49MDspe2RlbGV0ZSBEW25bQV1dfX19cmV0dXJuIHEuY2FsbChDLEIsRCl9O3g9cyh7XCJcIjp4fSxcIlwiKX1yZXR1cm4geH19KSgpO1xuaWYodHlwZW9mIEtKVVI9PVwidW5kZWZpbmVkXCJ8fCFLSlVSKXtLSlVSPXt9fWlmKHR5cGVvZiBLSlVSLmFzbjE9PVwidW5kZWZpbmVkXCJ8fCFLSlVSLmFzbjEpe0tKVVIuYXNuMT17fX1LSlVSLmFzbjEuQVNOMVV0aWw9bmV3IGZ1bmN0aW9uKCl7dGhpcy5pbnRlZ2VyVG9CeXRlSGV4PWZ1bmN0aW9uKGEpe3ZhciBiPWEudG9TdHJpbmcoMTYpO2lmKChiLmxlbmd0aCUyKT09MSl7Yj1cIjBcIitifXJldHVybiBifTt0aGlzLmJpZ0ludFRvTWluVHdvc0NvbXBsZW1lbnRzSGV4PWZ1bmN0aW9uKGope3ZhciBmPWoudG9TdHJpbmcoMTYpO2lmKGYuc3Vic3RyKDAsMSkhPVwiLVwiKXtpZihmLmxlbmd0aCUyPT0xKXtmPVwiMFwiK2Z9ZWxzZXtpZighZi5tYXRjaCgvXlswLTddLykpe2Y9XCIwMFwiK2Z9fX1lbHNle3ZhciBhPWYuc3Vic3RyKDEpO3ZhciBlPWEubGVuZ3RoO2lmKGUlMj09MSl7ZSs9MX1lbHNle2lmKCFmLm1hdGNoKC9eWzAtN10vKSl7ZSs9Mn19dmFyIGc9XCJcIjtmb3IodmFyIGQ9MDtkPGU7ZCsrKXtnKz1cImZcIn12YXIgYz1uZXcgQmlnSW50ZWdlcihnLDE2KTt2YXIgYj1jLnhvcihqKS5hZGQoQmlnSW50ZWdlci5PTkUpO2Y9Yi50b1N0cmluZygxNikucmVwbGFjZSgvXi0vLFwiXCIpfXJldHVybiBmfTt0aGlzLmdldFBFTVN0cmluZ0Zyb21IZXg9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gaGV4dG9wZW0oYSxiKX07dGhpcy5uZXdPYmplY3Q9ZnVuY3Rpb24oayl7dmFyIEY9S0pVUixvPUYuYXNuMSx2PW8uQVNOMU9iamVjdCxCPW8uREVSQm9vbGVhbixlPW8uREVSSW50ZWdlcix0PW8uREVSQml0U3RyaW5nLGg9by5ERVJPY3RldFN0cmluZyx4PW8uREVSTnVsbCx5PW8uREVST2JqZWN0SWRlbnRpZmllcixtPW8uREVSRW51bWVyYXRlZCxnPW8uREVSVVRGOFN0cmluZyxmPW8uREVSTnVtZXJpY1N0cmluZyxBPW8uREVSUHJpbnRhYmxlU3RyaW5nLHc9by5ERVJUZWxldGV4U3RyaW5nLHE9by5ERVJJQTVTdHJpbmcsRT1vLkRFUlVUQ1RpbWUsaj1vLkRFUkdlbmVyYWxpemVkVGltZSxiPW8uREVSVmlzaWJsZVN0cmluZyxsPW8uREVSQk1QU3RyaW5nLG49by5ERVJTZXF1ZW5jZSxjPW8uREVSU2V0LHM9by5ERVJUYWdnZWRPYmplY3QscD1vLkFTTjFVdGlsLm5ld09iamVjdDtpZihrIGluc3RhbmNlb2Ygby5BU04xT2JqZWN0KXtyZXR1cm4ga312YXIgdT1PYmplY3Qua2V5cyhrKTtpZih1Lmxlbmd0aCE9MSl7dGhyb3cgbmV3IEVycm9yKFwia2V5IG9mIHBhcmFtIHNoYWxsIGJlIG9ubHkgb25lLlwiKX12YXIgSD11WzBdO2lmKFwiOmFzbjE6Ym9vbDppbnQ6Yml0c3RyOm9jdHN0cjpudWxsOm9pZDplbnVtOnV0ZjhzdHI6bnVtc3RyOnBybnN0cjp0ZWxzdHI6aWE1c3RyOnV0Y3RpbWU6Z2VudGltZTp2aXNzdHI6Ym1wc3RyOnNlcTpzZXQ6dGFnOlwiLmluZGV4T2YoXCI6XCIrSCtcIjpcIik9PS0xKXt0aHJvdyBuZXcgRXJyb3IoXCJ1bmRlZmluZWQga2V5OiBcIitIKX1pZihIPT1cImJvb2xcIil7cmV0dXJuIG5ldyBCKGtbSF0pfWlmKEg9PVwiaW50XCIpe3JldHVybiBuZXcgZShrW0hdKX1pZihIPT1cImJpdHN0clwiKXtyZXR1cm4gbmV3IHQoa1tIXSl9aWYoSD09XCJvY3RzdHJcIil7cmV0dXJuIG5ldyBoKGtbSF0pfWlmKEg9PVwibnVsbFwiKXtyZXR1cm4gbmV3IHgoa1tIXSl9aWYoSD09XCJvaWRcIil7cmV0dXJuIG5ldyB5KGtbSF0pfWlmKEg9PVwiZW51bVwiKXtyZXR1cm4gbmV3IG0oa1tIXSl9aWYoSD09XCJ1dGY4c3RyXCIpe3JldHVybiBuZXcgZyhrW0hdKX1pZihIPT1cIm51bXN0clwiKXtyZXR1cm4gbmV3IGYoa1tIXSl9aWYoSD09XCJwcm5zdHJcIil7cmV0dXJuIG5ldyBBKGtbSF0pfWlmKEg9PVwidGVsc3RyXCIpe3JldHVybiBuZXcgdyhrW0hdKX1pZihIPT1cImlhNXN0clwiKXtyZXR1cm4gbmV3IHEoa1tIXSl9aWYoSD09XCJ1dGN0aW1lXCIpe3JldHVybiBuZXcgRShrW0hdKX1pZihIPT1cImdlbnRpbWVcIil7cmV0dXJuIG5ldyBqKGtbSF0pfWlmKEg9PVwidmlzc3RyXCIpe3JldHVybiBuZXcgYihrW0hdKX1pZihIPT1cImJtcHN0clwiKXtyZXR1cm4gbmV3IGwoa1tIXSl9aWYoSD09XCJhc24xXCIpe3JldHVybiBuZXcgdihrW0hdKX1pZihIPT1cInNlcVwiKXt2YXIgZD1rW0hdO3ZhciBHPVtdO2Zvcih2YXIgej0wO3o8ZC5sZW5ndGg7eisrKXt2YXIgRD1wKGRbel0pO0cucHVzaChEKX1yZXR1cm4gbmV3IG4oe2FycmF5Okd9KX1pZihIPT1cInNldFwiKXt2YXIgZD1rW0hdO3ZhciBHPVtdO2Zvcih2YXIgej0wO3o8ZC5sZW5ndGg7eisrKXt2YXIgRD1wKGRbel0pO0cucHVzaChEKX1yZXR1cm4gbmV3IGMoe2FycmF5Okd9KX1pZihIPT1cInRhZ1wiKXt2YXIgQz1rW0hdO2lmKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChDKT09PVwiW29iamVjdCBBcnJheV1cIiYmQy5sZW5ndGg9PTMpe3ZhciByPXAoQ1syXSk7cmV0dXJuIG5ldyBzKHt0YWc6Q1swXSxleHBsaWNpdDpDWzFdLG9iajpyfSl9ZWxzZXtyZXR1cm4gbmV3IHMoQyl9fX07dGhpcy5qc29uVG9BU04xSEVYPWZ1bmN0aW9uKGIpe3ZhciBhPXRoaXMubmV3T2JqZWN0KGIpO3JldHVybiBhLmdldEVuY29kZWRIZXgoKX19O0tKVVIuYXNuMS5BU04xVXRpbC5vaWRIZXhUb0ludD1mdW5jdGlvbihhKXt2YXIgaj1cIlwiO3ZhciBrPXBhcnNlSW50KGEuc3Vic3RyKDAsMiksMTYpO3ZhciBkPU1hdGguZmxvb3Ioay80MCk7dmFyIGM9ayU0MDt2YXIgaj1kK1wiLlwiK2M7dmFyIGU9XCJcIjtmb3IodmFyIGY9MjtmPGEubGVuZ3RoO2YrPTIpe3ZhciBnPXBhcnNlSW50KGEuc3Vic3RyKGYsMiksMTYpO3ZhciBoPShcIjAwMDAwMDAwXCIrZy50b1N0cmluZygyKSkuc2xpY2UoLTgpO2U9ZStoLnN1YnN0cigxLDcpO2lmKGguc3Vic3RyKDAsMSk9PVwiMFwiKXt2YXIgYj1uZXcgQmlnSW50ZWdlcihlLDIpO2o9aitcIi5cIitiLnRvU3RyaW5nKDEwKTtlPVwiXCJ9fXJldHVybiBqfTtLSlVSLmFzbjEuQVNOMVV0aWwub2lkSW50VG9IZXg9ZnVuY3Rpb24oZil7dmFyIGU9ZnVuY3Rpb24oYSl7dmFyIGs9YS50b1N0cmluZygxNik7aWYoay5sZW5ndGg9PTEpe2s9XCIwXCIra31yZXR1cm4ga307dmFyIGQ9ZnVuY3Rpb24obyl7dmFyIG49XCJcIjt2YXIgaz1uZXcgQmlnSW50ZWdlcihvLDEwKTt2YXIgYT1rLnRvU3RyaW5nKDIpO3ZhciBsPTctYS5sZW5ndGglNztpZihsPT03KXtsPTB9dmFyIHE9XCJcIjtmb3IodmFyIG09MDttPGw7bSsrKXtxKz1cIjBcIn1hPXErYTtmb3IodmFyIG09MDttPGEubGVuZ3RoLTE7bSs9Nyl7dmFyIHA9YS5zdWJzdHIobSw3KTtpZihtIT1hLmxlbmd0aC03KXtwPVwiMVwiK3B9bis9ZShwYXJzZUludChwLDIpKX1yZXR1cm4gbn07aWYoIWYubWF0Y2goL15bMC05Ll0rJC8pKXt0aHJvd1wibWFsZm9ybWVkIG9pZCBzdHJpbmc6IFwiK2Z9dmFyIGc9XCJcIjt2YXIgYj1mLnNwbGl0KFwiLlwiKTt2YXIgaj1wYXJzZUludChiWzBdKSo0MCtwYXJzZUludChiWzFdKTtnKz1lKGopO2Iuc3BsaWNlKDAsMik7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aDtjKyspe2crPWQoYltjXSl9cmV0dXJuIGd9O0tKVVIuYXNuMS5BU04xT2JqZWN0PWZ1bmN0aW9uKGUpe3ZhciBjPXRydWU7dmFyIGI9bnVsbDt2YXIgZD1cIjAwXCI7dmFyIGY9XCIwMFwiO3ZhciBhPVwiXCI7dGhpcy5wYXJhbXM9bnVsbDt0aGlzLmdldExlbmd0aEhleEZyb21WYWx1ZT1mdW5jdGlvbigpe2lmKHR5cGVvZiB0aGlzLmhWPT1cInVuZGVmaW5lZFwifHx0aGlzLmhWPT1udWxsKXt0aHJvdyBuZXcgRXJyb3IoXCJ0aGlzLmhWIGlzIG51bGwgb3IgdW5kZWZpbmVkXCIpfWlmKHRoaXMuaFYubGVuZ3RoJTI9PTEpe3Rocm93IG5ldyBFcnJvcihcInZhbHVlIGhleCBtdXN0IGJlIGV2ZW4gbGVuZ3RoOiBuPVwiK2EubGVuZ3RoK1wiLHY9XCIrdGhpcy5oVil9dmFyIGo9dGhpcy5oVi5sZW5ndGgvMjt2YXIgaT1qLnRvU3RyaW5nKDE2KTtpZihpLmxlbmd0aCUyPT0xKXtpPVwiMFwiK2l9aWYoajwxMjgpe3JldHVybiBpfWVsc2V7dmFyIGg9aS5sZW5ndGgvMjtpZihoPjE1KXt0aHJvd1wiQVNOLjEgbGVuZ3RoIHRvbyBsb25nIHRvIHJlcHJlc2VudCBieSA4eDogbiA9IFwiK2oudG9TdHJpbmcoMTYpfXZhciBnPTEyOCtoO3JldHVybiBnLnRvU3RyaW5nKDE2KStpfX07dGhpcy5nZXRFbmNvZGVkSGV4PWZ1bmN0aW9uKCl7aWYodGhpcy5oVExWPT1udWxsfHx0aGlzLmlzTW9kaWZpZWQpe3RoaXMuaFY9dGhpcy5nZXRGcmVzaFZhbHVlSGV4KCk7dGhpcy5oTD10aGlzLmdldExlbmd0aEhleEZyb21WYWx1ZSgpO3RoaXMuaFRMVj10aGlzLmhUK3RoaXMuaEwrdGhpcy5oVjt0aGlzLmlzTW9kaWZpZWQ9ZmFsc2V9cmV0dXJuIHRoaXMuaFRMVn07dGhpcy5nZXRWYWx1ZUhleD1mdW5jdGlvbigpe3RoaXMuZ2V0RW5jb2RlZEhleCgpO3JldHVybiB0aGlzLmhWfTt0aGlzLmdldEZyZXNoVmFsdWVIZXg9ZnVuY3Rpb24oKXtyZXR1cm5cIlwifTt0aGlzLnNldEJ5UGFyYW09ZnVuY3Rpb24oZyl7dGhpcy5wYXJhbXM9Z307aWYoZSE9dW5kZWZpbmVkKXtpZihlLnRsdiE9dW5kZWZpbmVkKXt0aGlzLmhUTFY9ZS50bHY7dGhpcy5pc01vZGlmaWVkPWZhbHNlfX19O0tKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cmluZz1mdW5jdGlvbihjKXtLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJpbmcuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3ZhciBiPW51bGw7dmFyIGE9bnVsbDt0aGlzLmdldFN0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnN9O3RoaXMuc2V0U3RyaW5nPWZ1bmN0aW9uKGQpe3RoaXMuaFRMVj1udWxsO3RoaXMuaXNNb2RpZmllZD10cnVlO3RoaXMucz1kO3RoaXMuaFY9dXRmOHRvaGV4KHRoaXMucykudG9Mb3dlckNhc2UoKX07dGhpcy5zZXRTdHJpbmdIZXg9ZnVuY3Rpb24oZCl7dGhpcy5oVExWPW51bGw7dGhpcy5pc01vZGlmaWVkPXRydWU7dGhpcy5zPW51bGw7dGhpcy5oVj1kfTt0aGlzLmdldEZyZXNoVmFsdWVIZXg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oVn07aWYodHlwZW9mIGMhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBjPT1cInN0cmluZ1wiKXt0aGlzLnNldFN0cmluZyhjKX1lbHNle2lmKHR5cGVvZiBjLnN0ciE9XCJ1bmRlZmluZWRcIil7dGhpcy5zZXRTdHJpbmcoYy5zdHIpfWVsc2V7aWYodHlwZW9mIGMuaGV4IT1cInVuZGVmaW5lZFwiKXt0aGlzLnNldFN0cmluZ0hleChjLmhleCl9fX19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJpbmcsS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS5ERVJBYnN0cmFjdFRpbWU9ZnVuY3Rpb24oYyl7S0pVUi5hc24xLkRFUkFic3RyYWN0VGltZS5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dmFyIGI9bnVsbDt2YXIgYT1udWxsO3RoaXMubG9jYWxEYXRlVG9VVEM9ZnVuY3Rpb24oZyl7dmFyIGU9Zy5nZXRUaW1lKCkrKGcuZ2V0VGltZXpvbmVPZmZzZXQoKSo2MDAwMCk7dmFyIGY9bmV3IERhdGUoZSk7cmV0dXJuIGZ9O3RoaXMuZm9ybWF0RGF0ZT1mdW5jdGlvbihtLG8sZSl7dmFyIGc9dGhpcy56ZXJvUGFkZGluZzt2YXIgbj10aGlzLmxvY2FsRGF0ZVRvVVRDKG0pO3ZhciBwPVN0cmluZyhuLmdldEZ1bGxZZWFyKCkpO2lmKG89PVwidXRjXCIpe3A9cC5zdWJzdHIoMiwyKX12YXIgbD1nKFN0cmluZyhuLmdldE1vbnRoKCkrMSksMik7dmFyIHE9ZyhTdHJpbmcobi5nZXREYXRlKCkpLDIpO3ZhciBoPWcoU3RyaW5nKG4uZ2V0SG91cnMoKSksMik7dmFyIGk9ZyhTdHJpbmcobi5nZXRNaW51dGVzKCkpLDIpO3ZhciBqPWcoU3RyaW5nKG4uZ2V0U2Vjb25kcygpKSwyKTt2YXIgcj1wK2wrcStoK2krajtpZihlPT09dHJ1ZSl7dmFyIGY9bi5nZXRNaWxsaXNlY29uZHMoKTtpZihmIT0wKXt2YXIgaz1nKFN0cmluZyhmKSwzKTtrPWsucmVwbGFjZSgvWzBdKyQvLFwiXCIpO3I9citcIi5cIitrfX1yZXR1cm4gcitcIlpcIn07dGhpcy56ZXJvUGFkZGluZz1mdW5jdGlvbihlLGQpe2lmKGUubGVuZ3RoPj1kKXtyZXR1cm4gZX1yZXR1cm4gbmV3IEFycmF5KGQtZS5sZW5ndGgrMSkuam9pbihcIjBcIikrZX07dGhpcy5nZXRTdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zfTt0aGlzLnNldFN0cmluZz1mdW5jdGlvbihkKXt0aGlzLmhUTFY9bnVsbDt0aGlzLmlzTW9kaWZpZWQ9dHJ1ZTt0aGlzLnM9ZDt0aGlzLmhWPXN0b2hleChkKX07dGhpcy5zZXRCeURhdGVWYWx1ZT1mdW5jdGlvbihoLGosZSxkLGYsZyl7dmFyIGk9bmV3IERhdGUoRGF0ZS5VVEMoaCxqLTEsZSxkLGYsZywwKSk7dGhpcy5zZXRCeURhdGUoaSl9O3RoaXMuZ2V0RnJlc2hWYWx1ZUhleD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmhWfX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUkFic3RyYWN0VGltZSxLSlVSLmFzbjEuQVNOMU9iamVjdCk7S0pVUi5hc24xLkRFUkFic3RyYWN0U3RydWN0dXJlZD1mdW5jdGlvbihiKXtLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJpbmcuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3ZhciBhPW51bGw7dGhpcy5zZXRCeUFTTjFPYmplY3RBcnJheT1mdW5jdGlvbihjKXt0aGlzLmhUTFY9bnVsbDt0aGlzLmlzTW9kaWZpZWQ9dHJ1ZTt0aGlzLmFzbjFBcnJheT1jfTt0aGlzLmFwcGVuZEFTTjFPYmplY3Q9ZnVuY3Rpb24oYyl7dGhpcy5oVExWPW51bGw7dGhpcy5pc01vZGlmaWVkPXRydWU7dGhpcy5hc24xQXJyYXkucHVzaChjKX07dGhpcy5hc24xQXJyYXk9bmV3IEFycmF5KCk7aWYodHlwZW9mIGIhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBiLmFycmF5IT1cInVuZGVmaW5lZFwiKXt0aGlzLmFzbjFBcnJheT1iLmFycmF5fX19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cnVjdHVyZWQsS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS5ERVJCb29sZWFuPWZ1bmN0aW9uKGEpe0tKVVIuYXNuMS5ERVJCb29sZWFuLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt0aGlzLmhUPVwiMDFcIjtpZihhPT1mYWxzZSl7dGhpcy5oVExWPVwiMDEwMTAwXCJ9ZWxzZXt0aGlzLmhUTFY9XCIwMTAxZmZcIn19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5ERVJCb29sZWFuLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEuREVSSW50ZWdlcj1mdW5jdGlvbihhKXtLSlVSLmFzbjEuREVSSW50ZWdlci5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dGhpcy5oVD1cIjAyXCI7dGhpcy5zZXRCeUJpZ0ludGVnZXI9ZnVuY3Rpb24oYil7dGhpcy5oVExWPW51bGw7dGhpcy5pc01vZGlmaWVkPXRydWU7dGhpcy5oVj1LSlVSLmFzbjEuQVNOMVV0aWwuYmlnSW50VG9NaW5Ud29zQ29tcGxlbWVudHNIZXgoYil9O3RoaXMuc2V0QnlJbnRlZ2VyPWZ1bmN0aW9uKGMpe3ZhciBiPW5ldyBCaWdJbnRlZ2VyKFN0cmluZyhjKSwxMCk7dGhpcy5zZXRCeUJpZ0ludGVnZXIoYil9O3RoaXMuc2V0VmFsdWVIZXg9ZnVuY3Rpb24oYil7dGhpcy5oVj1ifTt0aGlzLmdldEZyZXNoVmFsdWVIZXg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oVn07aWYodHlwZW9mIGEhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBhLmJpZ2ludCE9XCJ1bmRlZmluZWRcIil7dGhpcy5zZXRCeUJpZ0ludGVnZXIoYS5iaWdpbnQpfWVsc2V7aWYodHlwZW9mIGFbXCJpbnRcIl0hPVwidW5kZWZpbmVkXCIpe3RoaXMuc2V0QnlJbnRlZ2VyKGFbXCJpbnRcIl0pfWVsc2V7aWYodHlwZW9mIGE9PVwibnVtYmVyXCIpe3RoaXMuc2V0QnlJbnRlZ2VyKGEpfWVsc2V7aWYodHlwZW9mIGEuaGV4IT1cInVuZGVmaW5lZFwiKXt0aGlzLnNldFZhbHVlSGV4KGEuaGV4KX19fX19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuREVSSW50ZWdlcixLSlVSLmFzbjEuQVNOMU9iamVjdCk7S0pVUi5hc24xLkRFUkJpdFN0cmluZz1mdW5jdGlvbihiKXtpZihiIT09dW5kZWZpbmVkJiZ0eXBlb2YgYi5vYmohPT1cInVuZGVmaW5lZFwiKXt2YXIgYT1LSlVSLmFzbjEuQVNOMVV0aWwubmV3T2JqZWN0KGIub2JqKTtiLmhleD1cIjAwXCIrYS5nZXRFbmNvZGVkSGV4KCl9S0pVUi5hc24xLkRFUkJpdFN0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dGhpcy5oVD1cIjAzXCI7dGhpcy5zZXRIZXhWYWx1ZUluY2x1ZGluZ1VudXNlZEJpdHM9ZnVuY3Rpb24oYyl7dGhpcy5oVExWPW51bGw7dGhpcy5pc01vZGlmaWVkPXRydWU7dGhpcy5oVj1jfTt0aGlzLnNldFVudXNlZEJpdHNBbmRIZXhWYWx1ZT1mdW5jdGlvbihjLGUpe2lmKGM8MHx8NzxjKXt0aHJvd1widW51c2VkIGJpdHMgc2hhbGwgYmUgZnJvbSAwIHRvIDc6IHUgPSBcIitjfXZhciBkPVwiMFwiK2M7dGhpcy5oVExWPW51bGw7dGhpcy5pc01vZGlmaWVkPXRydWU7dGhpcy5oVj1kK2V9O3RoaXMuc2V0QnlCaW5hcnlTdHJpbmc9ZnVuY3Rpb24oZSl7ZT1lLnJlcGxhY2UoLzArJC8sXCJcIik7dmFyIGY9OC1lLmxlbmd0aCU4O2lmKGY9PTgpe2Y9MH1mb3IodmFyIGc9MDtnPD1mO2crKyl7ZSs9XCIwXCJ9dmFyIGo9XCJcIjtmb3IodmFyIGc9MDtnPGUubGVuZ3RoLTE7Zys9OCl7dmFyIGQ9ZS5zdWJzdHIoZyw4KTt2YXIgYz1wYXJzZUludChkLDIpLnRvU3RyaW5nKDE2KTtpZihjLmxlbmd0aD09MSl7Yz1cIjBcIitjfWorPWN9dGhpcy5oVExWPW51bGw7dGhpcy5pc01vZGlmaWVkPXRydWU7dGhpcy5oVj1cIjBcIitmK2p9O3RoaXMuc2V0QnlCb29sZWFuQXJyYXk9ZnVuY3Rpb24oZSl7dmFyIGQ9XCJcIjtmb3IodmFyIGM9MDtjPGUubGVuZ3RoO2MrKyl7aWYoZVtjXT09dHJ1ZSl7ZCs9XCIxXCJ9ZWxzZXtkKz1cIjBcIn19dGhpcy5zZXRCeUJpbmFyeVN0cmluZyhkKX07dGhpcy5uZXdGYWxzZUFycmF5PWZ1bmN0aW9uKGUpe3ZhciBjPW5ldyBBcnJheShlKTtmb3IodmFyIGQ9MDtkPGU7ZCsrKXtjW2RdPWZhbHNlfXJldHVybiBjfTt0aGlzLmdldEZyZXNoVmFsdWVIZXg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oVn07aWYodHlwZW9mIGIhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBiPT1cInN0cmluZ1wiJiZiLnRvTG93ZXJDYXNlKCkubWF0Y2goL15bMC05YS1mXSskLykpe3RoaXMuc2V0SGV4VmFsdWVJbmNsdWRpbmdVbnVzZWRCaXRzKGIpfWVsc2V7aWYodHlwZW9mIGIuaGV4IT1cInVuZGVmaW5lZFwiKXt0aGlzLnNldEhleFZhbHVlSW5jbHVkaW5nVW51c2VkQml0cyhiLmhleCl9ZWxzZXtpZih0eXBlb2YgYi5iaW4hPVwidW5kZWZpbmVkXCIpe3RoaXMuc2V0QnlCaW5hcnlTdHJpbmcoYi5iaW4pfWVsc2V7aWYodHlwZW9mIGIuYXJyYXkhPVwidW5kZWZpbmVkXCIpe3RoaXMuc2V0QnlCb29sZWFuQXJyYXkoYi5hcnJheSl9fX19fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUkJpdFN0cmluZyxLSlVSLmFzbjEuQVNOMU9iamVjdCk7S0pVUi5hc24xLkRFUk9jdGV0U3RyaW5nPWZ1bmN0aW9uKGIpe2lmKGIhPT11bmRlZmluZWQmJnR5cGVvZiBiLm9iaiE9PVwidW5kZWZpbmVkXCIpe3ZhciBhPUtKVVIuYXNuMS5BU04xVXRpbC5uZXdPYmplY3QoYi5vYmopO2IuaGV4PWEuZ2V0RW5jb2RlZEhleCgpfUtKVVIuYXNuMS5ERVJPY3RldFN0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyxiKTt0aGlzLmhUPVwiMDRcIn07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUk9jdGV0U3RyaW5nLEtKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cmluZyk7S0pVUi5hc24xLkRFUk51bGw9ZnVuY3Rpb24oKXtLSlVSLmFzbjEuREVSTnVsbC5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dGhpcy5oVD1cIjA1XCI7dGhpcy5oVExWPVwiMDUwMFwifTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuREVSTnVsbCxLSlVSLmFzbjEuQVNOMU9iamVjdCk7S0pVUi5hc24xLkRFUk9iamVjdElkZW50aWZpZXI9ZnVuY3Rpb24oYSl7S0pVUi5hc24xLkRFUk9iamVjdElkZW50aWZpZXIuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3RoaXMuaFQ9XCIwNlwiO3RoaXMuc2V0VmFsdWVIZXg9ZnVuY3Rpb24oYil7dGhpcy5oVExWPW51bGw7dGhpcy5pc01vZGlmaWVkPXRydWU7dGhpcy5zPW51bGw7dGhpcy5oVj1ifTt0aGlzLnNldFZhbHVlT2lkU3RyaW5nPWZ1bmN0aW9uKGIpe3ZhciBjPW9pZHRvaGV4KGIpO2lmKGM9PW51bGwpe3Rocm93IG5ldyBFcnJvcihcIm1hbGZvcm1lZCBvaWQgc3RyaW5nOiBcIitiKX10aGlzLmhUTFY9bnVsbDt0aGlzLmlzTW9kaWZpZWQ9dHJ1ZTt0aGlzLnM9bnVsbDt0aGlzLmhWPWN9O3RoaXMuc2V0VmFsdWVOYW1lPWZ1bmN0aW9uKGMpe3ZhciBiPUtKVVIuYXNuMS54NTA5Lk9JRC5uYW1lMm9pZChjKTtpZihiIT09XCJcIil7dGhpcy5zZXRWYWx1ZU9pZFN0cmluZyhiKX1lbHNle3Rocm93IG5ldyBFcnJvcihcIkRFUk9iamVjdElkZW50aWZpZXIgb2lkTmFtZSB1bmRlZmluZWQ6IFwiK2MpfX07dGhpcy5zZXRWYWx1ZU5hbWVPck9pZD1mdW5jdGlvbihiKXtpZihiLm1hdGNoKC9eWzAtMl0uWzAtOS5dKyQvKSl7dGhpcy5zZXRWYWx1ZU9pZFN0cmluZyhiKX1lbHNle3RoaXMuc2V0VmFsdWVOYW1lKGIpfX07dGhpcy5nZXRGcmVzaFZhbHVlSGV4PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaFZ9O3RoaXMuc2V0QnlQYXJhbT1mdW5jdGlvbihiKXtpZih0eXBlb2YgYj09PVwic3RyaW5nXCIpe3RoaXMuc2V0VmFsdWVOYW1lT3JPaWQoYil9ZWxzZXtpZihiLm9pZCE9PXVuZGVmaW5lZCl7dGhpcy5zZXRWYWx1ZU5hbWVPck9pZChiLm9pZCl9ZWxzZXtpZihiLm5hbWUhPT11bmRlZmluZWQpe3RoaXMuc2V0VmFsdWVOYW1lT3JPaWQoYi5uYW1lKX1lbHNle2lmKGIuaGV4IT09dW5kZWZpbmVkKXt0aGlzLnNldFZhbHVlSGV4KGIuaGV4KX19fX19O2lmKGEhPT11bmRlZmluZWQpe3RoaXMuc2V0QnlQYXJhbShhKX19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5ERVJPYmplY3RJZGVudGlmaWVyLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEuREVSRW51bWVyYXRlZD1mdW5jdGlvbihhKXtLSlVSLmFzbjEuREVSRW51bWVyYXRlZC5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dGhpcy5oVD1cIjBhXCI7dGhpcy5zZXRCeUJpZ0ludGVnZXI9ZnVuY3Rpb24oYil7dGhpcy5oVExWPW51bGw7dGhpcy5pc01vZGlmaWVkPXRydWU7dGhpcy5oVj1LSlVSLmFzbjEuQVNOMVV0aWwuYmlnSW50VG9NaW5Ud29zQ29tcGxlbWVudHNIZXgoYil9O3RoaXMuc2V0QnlJbnRlZ2VyPWZ1bmN0aW9uKGMpe3ZhciBiPW5ldyBCaWdJbnRlZ2VyKFN0cmluZyhjKSwxMCk7dGhpcy5zZXRCeUJpZ0ludGVnZXIoYil9O3RoaXMuc2V0VmFsdWVIZXg9ZnVuY3Rpb24oYil7dGhpcy5oVj1ifTt0aGlzLmdldEZyZXNoVmFsdWVIZXg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oVn07aWYodHlwZW9mIGEhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBhW1wiaW50XCJdIT1cInVuZGVmaW5lZFwiKXt0aGlzLnNldEJ5SW50ZWdlcihhW1wiaW50XCJdKX1lbHNle2lmKHR5cGVvZiBhPT1cIm51bWJlclwiKXt0aGlzLnNldEJ5SW50ZWdlcihhKX1lbHNle2lmKHR5cGVvZiBhLmhleCE9XCJ1bmRlZmluZWRcIil7dGhpcy5zZXRWYWx1ZUhleChhLmhleCl9fX19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuREVSRW51bWVyYXRlZCxLSlVSLmFzbjEuQVNOMU9iamVjdCk7S0pVUi5hc24xLkRFUlVURjhTdHJpbmc9ZnVuY3Rpb24oYSl7S0pVUi5hc24xLkRFUlVURjhTdHJpbmcuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsYSk7dGhpcy5oVD1cIjBjXCJ9O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5ERVJVVEY4U3RyaW5nLEtKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cmluZyk7S0pVUi5hc24xLkRFUk51bWVyaWNTdHJpbmc9ZnVuY3Rpb24oYSl7S0pVUi5hc24xLkRFUk51bWVyaWNTdHJpbmcuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsYSk7dGhpcy5oVD1cIjEyXCJ9O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5ERVJOdW1lcmljU3RyaW5nLEtKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cmluZyk7S0pVUi5hc24xLkRFUlByaW50YWJsZVN0cmluZz1mdW5jdGlvbihhKXtLSlVSLmFzbjEuREVSUHJpbnRhYmxlU3RyaW5nLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLGEpO3RoaXMuaFQ9XCIxM1wifTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuREVSUHJpbnRhYmxlU3RyaW5nLEtKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cmluZyk7S0pVUi5hc24xLkRFUlRlbGV0ZXhTdHJpbmc9ZnVuY3Rpb24oYSl7S0pVUi5hc24xLkRFUlRlbGV0ZXhTdHJpbmcuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsYSk7dGhpcy5oVD1cIjE0XCJ9O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5ERVJUZWxldGV4U3RyaW5nLEtKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cmluZyk7S0pVUi5hc24xLkRFUklBNVN0cmluZz1mdW5jdGlvbihhKXtLSlVSLmFzbjEuREVSSUE1U3RyaW5nLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLGEpO3RoaXMuaFQ9XCIxNlwifTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuREVSSUE1U3RyaW5nLEtKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cmluZyk7S0pVUi5hc24xLkRFUlZpc2libGVTdHJpbmc9ZnVuY3Rpb24oYSl7S0pVUi5hc24xLkRFUklBNVN0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyxhKTt0aGlzLmhUPVwiMWFcIn07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUlZpc2libGVTdHJpbmcsS0pVUi5hc24xLkRFUkFic3RyYWN0U3RyaW5nKTtLSlVSLmFzbjEuREVSQk1QU3RyaW5nPWZ1bmN0aW9uKGEpe0tKVVIuYXNuMS5ERVJCTVBTdHJpbmcuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsYSk7dGhpcy5oVD1cIjFlXCJ9O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5ERVJCTVBTdHJpbmcsS0pVUi5hc24xLkRFUkFic3RyYWN0U3RyaW5nKTtLSlVSLmFzbjEuREVSVVRDVGltZT1mdW5jdGlvbihhKXtLSlVSLmFzbjEuREVSVVRDVGltZS5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyxhKTt0aGlzLmhUPVwiMTdcIjt0aGlzLnNldEJ5RGF0ZT1mdW5jdGlvbihiKXt0aGlzLmhUTFY9bnVsbDt0aGlzLmlzTW9kaWZpZWQ9dHJ1ZTt0aGlzLmRhdGU9Yjt0aGlzLnM9dGhpcy5mb3JtYXREYXRlKHRoaXMuZGF0ZSxcInV0Y1wiKTt0aGlzLmhWPXN0b2hleCh0aGlzLnMpfTt0aGlzLmdldEZyZXNoVmFsdWVIZXg9ZnVuY3Rpb24oKXtpZih0eXBlb2YgdGhpcy5kYXRlPT1cInVuZGVmaW5lZFwiJiZ0eXBlb2YgdGhpcy5zPT1cInVuZGVmaW5lZFwiKXt0aGlzLmRhdGU9bmV3IERhdGUoKTt0aGlzLnM9dGhpcy5mb3JtYXREYXRlKHRoaXMuZGF0ZSxcInV0Y1wiKTt0aGlzLmhWPXN0b2hleCh0aGlzLnMpfXJldHVybiB0aGlzLmhWfTtpZihhIT09dW5kZWZpbmVkKXtpZihhLnN0ciE9PXVuZGVmaW5lZCl7dGhpcy5zZXRTdHJpbmcoYS5zdHIpfWVsc2V7aWYodHlwZW9mIGE9PVwic3RyaW5nXCImJmEubWF0Y2goL15bMC05XXsxMn1aJC8pKXt0aGlzLnNldFN0cmluZyhhKX1lbHNle2lmKGEuaGV4IT09dW5kZWZpbmVkKXt0aGlzLnNldFN0cmluZ0hleChhLmhleCl9ZWxzZXtpZihhLmRhdGUhPT11bmRlZmluZWQpe3RoaXMuc2V0QnlEYXRlKGEuZGF0ZSl9fX19fX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUlVUQ1RpbWUsS0pVUi5hc24xLkRFUkFic3RyYWN0VGltZSk7S0pVUi5hc24xLkRFUkdlbmVyYWxpemVkVGltZT1mdW5jdGlvbihhKXtLSlVSLmFzbjEuREVSR2VuZXJhbGl6ZWRUaW1lLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLGEpO3RoaXMuaFQ9XCIxOFwiO3RoaXMud2l0aE1pbGxpcz1mYWxzZTt0aGlzLnNldEJ5RGF0ZT1mdW5jdGlvbihiKXt0aGlzLmhUTFY9bnVsbDt0aGlzLmlzTW9kaWZpZWQ9dHJ1ZTt0aGlzLmRhdGU9Yjt0aGlzLnM9dGhpcy5mb3JtYXREYXRlKHRoaXMuZGF0ZSxcImdlblwiLHRoaXMud2l0aE1pbGxpcyk7dGhpcy5oVj1zdG9oZXgodGhpcy5zKX07dGhpcy5nZXRGcmVzaFZhbHVlSGV4PWZ1bmN0aW9uKCl7aWYodGhpcy5kYXRlPT09dW5kZWZpbmVkJiZ0aGlzLnM9PT11bmRlZmluZWQpe3RoaXMuZGF0ZT1uZXcgRGF0ZSgpO3RoaXMucz10aGlzLmZvcm1hdERhdGUodGhpcy5kYXRlLFwiZ2VuXCIsdGhpcy53aXRoTWlsbGlzKTt0aGlzLmhWPXN0b2hleCh0aGlzLnMpfXJldHVybiB0aGlzLmhWfTtpZihhIT09dW5kZWZpbmVkKXtpZihhLnN0ciE9PXVuZGVmaW5lZCl7dGhpcy5zZXRTdHJpbmcoYS5zdHIpfWVsc2V7aWYodHlwZW9mIGE9PVwic3RyaW5nXCImJmEubWF0Y2goL15bMC05XXsxNH1aJC8pKXt0aGlzLnNldFN0cmluZyhhKX1lbHNle2lmKGEuaGV4IT09dW5kZWZpbmVkKXt0aGlzLnNldFN0cmluZ0hleChhLmhleCl9ZWxzZXtpZihhLmRhdGUhPT11bmRlZmluZWQpe3RoaXMuc2V0QnlEYXRlKGEuZGF0ZSl9fX19aWYoYS5taWxsaXM9PT10cnVlKXt0aGlzLndpdGhNaWxsaXM9dHJ1ZX19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuREVSR2VuZXJhbGl6ZWRUaW1lLEtKVVIuYXNuMS5ERVJBYnN0cmFjdFRpbWUpO0tKVVIuYXNuMS5ERVJTZXF1ZW5jZT1mdW5jdGlvbihhKXtLSlVSLmFzbjEuREVSU2VxdWVuY2Uuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsYSk7dGhpcy5oVD1cIjMwXCI7dGhpcy5nZXRGcmVzaFZhbHVlSGV4PWZ1bmN0aW9uKCl7dmFyIGM9XCJcIjtmb3IodmFyIGI9MDtiPHRoaXMuYXNuMUFycmF5Lmxlbmd0aDtiKyspe3ZhciBkPXRoaXMuYXNuMUFycmF5W2JdO2MrPWQuZ2V0RW5jb2RlZEhleCgpfXRoaXMuaFY9YztyZXR1cm4gdGhpcy5oVn19O1lBSE9PLmxhbmcuZXh0ZW5kKEtKVVIuYXNuMS5ERVJTZXF1ZW5jZSxLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJ1Y3R1cmVkKTtLSlVSLmFzbjEuREVSU2V0PWZ1bmN0aW9uKGEpe0tKVVIuYXNuMS5ERVJTZXQuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsYSk7dGhpcy5oVD1cIjMxXCI7dGhpcy5zb3J0RmxhZz10cnVlO3RoaXMuZ2V0RnJlc2hWYWx1ZUhleD1mdW5jdGlvbigpe3ZhciBiPW5ldyBBcnJheSgpO2Zvcih2YXIgYz0wO2M8dGhpcy5hc24xQXJyYXkubGVuZ3RoO2MrKyl7dmFyIGQ9dGhpcy5hc24xQXJyYXlbY107Yi5wdXNoKGQuZ2V0RW5jb2RlZEhleCgpKX1pZih0aGlzLnNvcnRGbGFnPT10cnVlKXtiLnNvcnQoKX10aGlzLmhWPWIuam9pbihcIlwiKTtyZXR1cm4gdGhpcy5oVn07aWYodHlwZW9mIGEhPVwidW5kZWZpbmVkXCIpe2lmKHR5cGVvZiBhLnNvcnRmbGFnIT1cInVuZGVmaW5lZFwiJiZhLnNvcnRmbGFnPT1mYWxzZSl7dGhpcy5zb3J0RmxhZz1mYWxzZX19fTtZQUhPTy5sYW5nLmV4dGVuZChLSlVSLmFzbjEuREVSU2V0LEtKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cnVjdHVyZWQpO0tKVVIuYXNuMS5ERVJUYWdnZWRPYmplY3Q9ZnVuY3Rpb24oYil7S0pVUi5hc24xLkRFUlRhZ2dlZE9iamVjdC5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dmFyIGE9S0pVUi5hc24xO3RoaXMuaFQ9XCJhMFwiO3RoaXMuaFY9XCJcIjt0aGlzLmlzRXhwbGljaXQ9dHJ1ZTt0aGlzLmFzbjFPYmplY3Q9bnVsbDt0aGlzLnNldEFTTjFPYmplY3Q9ZnVuY3Rpb24oYyxkLGUpe3RoaXMuaFQ9ZDt0aGlzLmlzRXhwbGljaXQ9Yzt0aGlzLmFzbjFPYmplY3Q9ZTtpZih0aGlzLmlzRXhwbGljaXQpe3RoaXMuaFY9dGhpcy5hc24xT2JqZWN0LmdldEVuY29kZWRIZXgoKTt0aGlzLmhUTFY9bnVsbDt0aGlzLmlzTW9kaWZpZWQ9dHJ1ZX1lbHNle3RoaXMuaFY9bnVsbDt0aGlzLmhUTFY9ZS5nZXRFbmNvZGVkSGV4KCk7dGhpcy5oVExWPXRoaXMuaFRMVi5yZXBsYWNlKC9eLi4vLGQpO3RoaXMuaXNNb2RpZmllZD1mYWxzZX19O3RoaXMuZ2V0RnJlc2hWYWx1ZUhleD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmhWfTt0aGlzLnNldEJ5UGFyYW09ZnVuY3Rpb24oYyl7aWYoYy50YWchPXVuZGVmaW5lZCl7dGhpcy5oVD1jLnRhZ31pZihjLmV4cGxpY2l0IT11bmRlZmluZWQpe3RoaXMuaXNFeHBsaWNpdD1jLmV4cGxpY2l0fWlmKGMudGFnZSE9dW5kZWZpbmVkKXt0aGlzLmhUPWMudGFnZTt0aGlzLmlzRXhwbGljaXQ9dHJ1ZX1pZihjLnRhZ2khPXVuZGVmaW5lZCl7dGhpcy5oVD1jLnRhZ2k7dGhpcy5pc0V4cGxpY2l0PWZhbHNlfWlmKGMub2JqIT11bmRlZmluZWQpe2lmKGMub2JqIGluc3RhbmNlb2YgYS5BU04xT2JqZWN0KXt0aGlzLmFzbjFPYmplY3Q9Yy5vYmo7dGhpcy5zZXRBU04xT2JqZWN0KHRoaXMuaXNFeHBsaWNpdCx0aGlzLmhULHRoaXMuYXNuMU9iamVjdCl9ZWxzZXtpZih0eXBlb2YgYy5vYmo9PVwib2JqZWN0XCIpe3RoaXMuYXNuMU9iamVjdD1hLkFTTjFVdGlsLm5ld09iamVjdChjLm9iaik7dGhpcy5zZXRBU04xT2JqZWN0KHRoaXMuaXNFeHBsaWNpdCx0aGlzLmhULHRoaXMuYXNuMU9iamVjdCl9fX19O2lmKGIhPXVuZGVmaW5lZCl7dGhpcy5zZXRCeVBhcmFtKGIpfX07WUFIT08ubGFuZy5leHRlbmQoS0pVUi5hc24xLkRFUlRhZ2dlZE9iamVjdCxLSlVSLmFzbjEuQVNOMU9iamVjdCk7XG52YXIgQVNOMUhFWD1uZXcgZnVuY3Rpb24oKXt9O0FTTjFIRVguZ2V0TGJsZW49ZnVuY3Rpb24oYyxhKXtpZihjLnN1YnN0cihhKzIsMSkhPVwiOFwiKXtyZXR1cm4gMX12YXIgYj1wYXJzZUludChjLnN1YnN0cihhKzMsMSkpO2lmKGI9PTApe3JldHVybiAtMX1pZigwPGImJmI8MTApe3JldHVybiBiKzF9cmV0dXJuIC0yfTtBU04xSEVYLmdldEw9ZnVuY3Rpb24oYyxiKXt2YXIgYT1BU04xSEVYLmdldExibGVuKGMsYik7aWYoYTwxKXtyZXR1cm5cIlwifXJldHVybiBjLnN1YnN0cihiKzIsYSoyKX07QVNOMUhFWC5nZXRWYmxlbj1mdW5jdGlvbihkLGEpe3ZhciBjLGI7Yz1BU04xSEVYLmdldEwoZCxhKTtpZihjPT1cIlwiKXtyZXR1cm4gLTF9aWYoYy5zdWJzdHIoMCwxKT09PVwiOFwiKXtiPW5ldyBCaWdJbnRlZ2VyKGMuc3Vic3RyKDIpLDE2KX1lbHNle2I9bmV3IEJpZ0ludGVnZXIoYywxNil9cmV0dXJuIGIuaW50VmFsdWUoKX07QVNOMUhFWC5nZXRWaWR4PWZ1bmN0aW9uKGMsYil7dmFyIGE9QVNOMUhFWC5nZXRMYmxlbihjLGIpO2lmKGE8MCl7cmV0dXJuIGF9cmV0dXJuIGIrKGErMSkqMn07QVNOMUhFWC5nZXRWPWZ1bmN0aW9uKGQsYSl7dmFyIGM9QVNOMUhFWC5nZXRWaWR4KGQsYSk7dmFyIGI9QVNOMUhFWC5nZXRWYmxlbihkLGEpO3JldHVybiBkLnN1YnN0cihjLGIqMil9O0FTTjFIRVguZ2V0VExWPWZ1bmN0aW9uKGIsYSl7cmV0dXJuIGIuc3Vic3RyKGEsMikrQVNOMUhFWC5nZXRMKGIsYSkrQVNOMUhFWC5nZXRWKGIsYSl9O0FTTjFIRVguZ2V0VExWYmxlbj1mdW5jdGlvbihiLGEpe3JldHVybiAyK0FTTjFIRVguZ2V0TGJsZW4oYixhKSoyK0FTTjFIRVguZ2V0VmJsZW4oYixhKSoyfTtBU04xSEVYLmdldE5leHRTaWJsaW5nSWR4PWZ1bmN0aW9uKGQsYSl7dmFyIGM9QVNOMUhFWC5nZXRWaWR4KGQsYSk7dmFyIGI9QVNOMUhFWC5nZXRWYmxlbihkLGEpO3JldHVybiBjK2IqMn07QVNOMUhFWC5nZXRDaGlsZElkeD1mdW5jdGlvbihlLGspe3ZhciBsPUFTTjFIRVg7dmFyIGo9W107dmFyIGMsZixnO2M9bC5nZXRWaWR4KGUsayk7Zj1sLmdldFZibGVuKGUsaykqMjtpZihlLnN1YnN0cihrLDIpPT1cIjAzXCIpe2MrPTI7Zi09Mn1nPTA7dmFyIGQ9Yzt3aGlsZShnPD1mKXt2YXIgYj1sLmdldFRMVmJsZW4oZSxkKTtnKz1iO2lmKGc8PWYpe2oucHVzaChkKX1kKz1iO2lmKGc+PWYpe2JyZWFrfX1yZXR1cm4gan07QVNOMUhFWC5nZXROdGhDaGlsZElkeD1mdW5jdGlvbihkLGIsZSl7dmFyIGM9QVNOMUhFWC5nZXRDaGlsZElkeChkLGIpO3JldHVybiBjW2VdfTtBU04xSEVYLmdldElkeGJ5TGlzdD1mdW5jdGlvbihlLGQsYyxpKXt2YXIgZz1BU04xSEVYO3ZhciBmLGI7aWYoYy5sZW5ndGg9PTApe2lmKGkhPT11bmRlZmluZWQpe2lmKGUuc3Vic3RyKGQsMikhPT1pKXtyZXR1cm4gLTF9fXJldHVybiBkfWY9Yy5zaGlmdCgpO2I9Zy5nZXRDaGlsZElkeChlLGQpO2lmKGY+PWIubGVuZ3RoKXtyZXR1cm4gLTF9cmV0dXJuIGcuZ2V0SWR4YnlMaXN0KGUsYltmXSxjLGkpfTtBU04xSEVYLmdldElkeGJ5TGlzdEV4PWZ1bmN0aW9uKGYsayxiLGcpe3ZhciBtPUFTTjFIRVg7dmFyIGQsbDtpZihiLmxlbmd0aD09MCl7aWYoZyE9PXVuZGVmaW5lZCl7aWYoZi5zdWJzdHIoaywyKSE9PWcpe3JldHVybiAtMX19cmV0dXJuIGt9ZD1iLnNoaWZ0KCk7bD1tLmdldENoaWxkSWR4KGYsayk7dmFyIGo9MDtmb3IodmFyIGU9MDtlPGwubGVuZ3RoO2UrKyl7dmFyIGM9Zi5zdWJzdHIobFtlXSwyKTtpZigodHlwZW9mIGQ9PVwibnVtYmVyXCImJighbS5pc0NvbnRleHRUYWcoYykpJiZqPT1kKXx8KHR5cGVvZiBkPT1cInN0cmluZ1wiJiZtLmlzQ29udGV4dFRhZyhjLGQpKSl7cmV0dXJuIG0uZ2V0SWR4YnlMaXN0RXgoZixsW2VdLGIsZyl9aWYoIW0uaXNDb250ZXh0VGFnKGMpKXtqKyt9fXJldHVybiAtMX07QVNOMUhFWC5nZXRUTFZieUxpc3Q9ZnVuY3Rpb24oZCxjLGIsZil7dmFyIGU9QVNOMUhFWDt2YXIgYT1lLmdldElkeGJ5TGlzdChkLGMsYixmKTtpZihhPT0tMSl7cmV0dXJuIG51bGx9aWYoYT49ZC5sZW5ndGgpe3JldHVybiBudWxsfXJldHVybiBlLmdldFRMVihkLGEpfTtBU04xSEVYLmdldFRMVmJ5TGlzdEV4PWZ1bmN0aW9uKGQsYyxiLGYpe3ZhciBlPUFTTjFIRVg7dmFyIGE9ZS5nZXRJZHhieUxpc3RFeChkLGMsYixmKTtpZihhPT0tMSl7cmV0dXJuIG51bGx9cmV0dXJuIGUuZ2V0VExWKGQsYSl9O0FTTjFIRVguZ2V0VmJ5TGlzdD1mdW5jdGlvbihlLGMsYixnLGkpe3ZhciBmPUFTTjFIRVg7dmFyIGEsZDthPWYuZ2V0SWR4YnlMaXN0KGUsYyxiLGcpO2lmKGE9PS0xKXtyZXR1cm4gbnVsbH1pZihhPj1lLmxlbmd0aCl7cmV0dXJuIG51bGx9ZD1mLmdldFYoZSxhKTtpZihpPT09dHJ1ZSl7ZD1kLnN1YnN0cigyKX1yZXR1cm4gZH07QVNOMUhFWC5nZXRWYnlMaXN0RXg9ZnVuY3Rpb24oYixlLGEsZCxmKXt2YXIgaj1BU04xSEVYO3ZhciBnLGMsaTtnPWouZ2V0SWR4YnlMaXN0RXgoYixlLGEsZCk7aWYoZz09LTEpe3JldHVybiBudWxsfWk9ai5nZXRWKGIsZyk7aWYoYi5zdWJzdHIoZywyKT09XCIwM1wiJiZmIT09ZmFsc2Upe2k9aS5zdWJzdHIoMil9cmV0dXJuIGl9O0FTTjFIRVguZ2V0SW50PWZ1bmN0aW9uKGUsYixmKXtpZihmPT11bmRlZmluZWQpe2Y9LTF9dHJ5e3ZhciBjPWUuc3Vic3RyKGIsMik7aWYoYyE9XCIwMlwiJiZjIT1cIjAzXCIpe3JldHVybiBmfXZhciBhPUFTTjFIRVguZ2V0VihlLGIpO2lmKGM9PVwiMDJcIil7cmV0dXJuIHBhcnNlSW50KGEsMTYpfWVsc2V7cmV0dXJuIGJpdHN0cnRvaW50KGEpfX1jYXRjaChkKXtyZXR1cm4gZn19O0FTTjFIRVguZ2V0T0lEPWZ1bmN0aW9uKGMsYSxkKXtpZihkPT11bmRlZmluZWQpe2Q9bnVsbH10cnl7aWYoYy5zdWJzdHIoYSwyKSE9XCIwNlwiKXtyZXR1cm4gZH12YXIgZT1BU04xSEVYLmdldFYoYyxhKTtyZXR1cm4gaGV4dG9vaWQoZSl9Y2F0Y2goYil7cmV0dXJuIGR9fTtBU04xSEVYLmdldE9JRE5hbWU9ZnVuY3Rpb24oZCxhLGYpe2lmKGY9PXVuZGVmaW5lZCl7Zj1udWxsfXRyeXt2YXIgZT1BU04xSEVYLmdldE9JRChkLGEsZik7aWYoZT09Zil7cmV0dXJuIGZ9dmFyIGI9S0pVUi5hc24xLng1MDkuT0lELm9pZDJuYW1lKGUpO2lmKGI9PVwiXCIpe3JldHVybiBlfXJldHVybiBifWNhdGNoKGMpe3JldHVybiBmfX07QVNOMUhFWC5nZXRTdHJpbmc9ZnVuY3Rpb24oZCxiLGUpe2lmKGU9PXVuZGVmaW5lZCl7ZT1udWxsfXRyeXt2YXIgYT1BU04xSEVYLmdldFYoZCxiKTtyZXR1cm4gaGV4dG9yc3RyKGEpfWNhdGNoKGMpe3JldHVybiBlfX07QVNOMUhFWC5oZXh0b29pZHN0cj1mdW5jdGlvbihlKXt2YXIgaD1mdW5jdGlvbihiLGEpe2lmKGIubGVuZ3RoPj1hKXtyZXR1cm4gYn1yZXR1cm4gbmV3IEFycmF5KGEtYi5sZW5ndGgrMSkuam9pbihcIjBcIikrYn07dmFyIGw9W107dmFyIG89ZS5zdWJzdHIoMCwyKTt2YXIgZj1wYXJzZUludChvLDE2KTtsWzBdPW5ldyBTdHJpbmcoTWF0aC5mbG9vcihmLzQwKSk7bFsxXT1uZXcgU3RyaW5nKGYlNDApO3ZhciBtPWUuc3Vic3RyKDIpO3ZhciBrPVtdO2Zvcih2YXIgZz0wO2c8bS5sZW5ndGgvMjtnKyspe2sucHVzaChwYXJzZUludChtLnN1YnN0cihnKjIsMiksMTYpKX12YXIgaj1bXTt2YXIgZD1cIlwiO2Zvcih2YXIgZz0wO2c8ay5sZW5ndGg7ZysrKXtpZihrW2ddJjEyOCl7ZD1kK2goKGtbZ10mMTI3KS50b1N0cmluZygyKSw3KX1lbHNle2Q9ZCtoKChrW2ddJjEyNykudG9TdHJpbmcoMiksNyk7ai5wdXNoKG5ldyBTdHJpbmcocGFyc2VJbnQoZCwyKSkpO2Q9XCJcIn19dmFyIG49bC5qb2luKFwiLlwiKTtpZihqLmxlbmd0aD4wKXtuPW4rXCIuXCIrai5qb2luKFwiLlwiKX1yZXR1cm4gbn07QVNOMUhFWC5kdW1wPWZ1bmN0aW9uKHQsYyxsLGcpe3ZhciBwPUFTTjFIRVg7dmFyIGo9cC5nZXRWO3ZhciB5PXAuZHVtcDt2YXIgdz1wLmdldENoaWxkSWR4O3ZhciBlPXQ7aWYodCBpbnN0YW5jZW9mIEtKVVIuYXNuMS5BU04xT2JqZWN0KXtlPXQuZ2V0RW5jb2RlZEhleCgpfXZhciBxPWZ1bmN0aW9uKEEsaSl7aWYoQS5sZW5ndGg8PWkqMil7cmV0dXJuIEF9ZWxzZXt2YXIgdj1BLnN1YnN0cigwLGkpK1wiLi4odG90YWwgXCIrQS5sZW5ndGgvMitcImJ5dGVzKS4uXCIrQS5zdWJzdHIoQS5sZW5ndGgtaSxpKTtyZXR1cm4gdn19O2lmKGM9PT11bmRlZmluZWQpe2M9e29tbWl0X2xvbmdfb2N0ZXQ6MzJ9fWlmKGw9PT11bmRlZmluZWQpe2w9MH1pZihnPT09dW5kZWZpbmVkKXtnPVwiXCJ9dmFyIHg9Yy5vbW1pdF9sb25nX29jdGV0O3ZhciB6PWUuc3Vic3RyKGwsMik7aWYoej09XCIwMVwiKXt2YXIgaD1qKGUsbCk7aWYoaD09XCIwMFwiKXtyZXR1cm4gZytcIkJPT0xFQU4gRkFMU0VcXG5cIn1lbHNle3JldHVybiBnK1wiQk9PTEVBTiBUUlVFXFxuXCJ9fWlmKHo9PVwiMDJcIil7dmFyIGg9aihlLGwpO3JldHVybiBnK1wiSU5URUdFUiBcIitxKGgseCkrXCJcXG5cIn1pZih6PT1cIjAzXCIpe3ZhciBoPWooZSxsKTtpZihwLmlzQVNOMUhFWChoLnN1YnN0cigyKSkpe3ZhciBrPWcrXCJCSVRTVFJJTkcsIGVuY2Fwc3VsYXRlc1xcblwiO2s9ayt5KGguc3Vic3RyKDIpLGMsMCxnK1wiICBcIik7cmV0dXJuIGt9ZWxzZXtyZXR1cm4gZytcIkJJVFNUUklORyBcIitxKGgseCkrXCJcXG5cIn19aWYoej09XCIwNFwiKXt2YXIgaD1qKGUsbCk7aWYocC5pc0FTTjFIRVgoaCkpe3ZhciBrPWcrXCJPQ1RFVFNUUklORywgZW5jYXBzdWxhdGVzXFxuXCI7az1rK3koaCxjLDAsZytcIiAgXCIpO3JldHVybiBrfWVsc2V7cmV0dXJuIGcrXCJPQ1RFVFNUUklORyBcIitxKGgseCkrXCJcXG5cIn19aWYoej09XCIwNVwiKXtyZXR1cm4gZytcIk5VTExcXG5cIn1pZih6PT1cIjA2XCIpe3ZhciBtPWooZSxsKTt2YXIgYj1LSlVSLmFzbjEuQVNOMVV0aWwub2lkSGV4VG9JbnQobSk7dmFyIG89S0pVUi5hc24xLng1MDkuT0lELm9pZDJuYW1lKGIpO3ZhciBhPWIucmVwbGFjZSgvXFwuL2csXCIgXCIpO2lmKG8hPVwiXCIpe3JldHVybiBnK1wiT2JqZWN0SWRlbnRpZmllciBcIitvK1wiIChcIithK1wiKVxcblwifWVsc2V7cmV0dXJuIGcrXCJPYmplY3RJZGVudGlmaWVyIChcIithK1wiKVxcblwifX1pZih6PT1cIjBhXCIpe3JldHVybiBnK1wiRU5VTUVSQVRFRCBcIitwYXJzZUludChqKGUsbCkpK1wiXFxuXCJ9aWYoej09XCIwY1wiKXtyZXR1cm4gZytcIlVURjhTdHJpbmcgJ1wiK2hleHRvdXRmOChqKGUsbCkpK1wiJ1xcblwifWlmKHo9PVwiMTNcIil7cmV0dXJuIGcrXCJQcmludGFibGVTdHJpbmcgJ1wiK2hleHRvdXRmOChqKGUsbCkpK1wiJ1xcblwifWlmKHo9PVwiMTRcIil7cmV0dXJuIGcrXCJUZWxldGV4U3RyaW5nICdcIitoZXh0b3V0ZjgoaihlLGwpKStcIidcXG5cIn1pZih6PT1cIjE2XCIpe3JldHVybiBnK1wiSUE1U3RyaW5nICdcIitoZXh0b3V0ZjgoaihlLGwpKStcIidcXG5cIn1pZih6PT1cIjE3XCIpe3JldHVybiBnK1wiVVRDVGltZSBcIitoZXh0b3V0ZjgoaihlLGwpKStcIlxcblwifWlmKHo9PVwiMThcIil7cmV0dXJuIGcrXCJHZW5lcmFsaXplZFRpbWUgXCIraGV4dG91dGY4KGooZSxsKSkrXCJcXG5cIn1pZih6PT1cIjFhXCIpe3JldHVybiBnK1wiVmlzdWFsU3RyaW5nICdcIitoZXh0b3V0ZjgoaihlLGwpKStcIidcXG5cIn1pZih6PT1cIjFlXCIpe3JldHVybiBnK1wiQk1QU3RyaW5nICdcIitoZXh0b3V0ZjgoaihlLGwpKStcIidcXG5cIn1pZih6PT1cIjMwXCIpe2lmKGUuc3Vic3RyKGwsNCk9PVwiMzAwMFwiKXtyZXR1cm4gZytcIlNFUVVFTkNFIHt9XFxuXCJ9dmFyIGs9ZytcIlNFUVVFTkNFXFxuXCI7dmFyIGQ9dyhlLGwpO3ZhciBmPWM7aWYoKGQubGVuZ3RoPT0yfHxkLmxlbmd0aD09MykmJmUuc3Vic3RyKGRbMF0sMik9PVwiMDZcIiYmZS5zdWJzdHIoZFtkLmxlbmd0aC0xXSwyKT09XCIwNFwiKXt2YXIgbz1wLm9pZG5hbWUoaihlLGRbMF0pKTt2YXIgcj1KU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGMpKTtyLng1MDlFeHROYW1lPW87Zj1yfWZvcih2YXIgdT0wO3U8ZC5sZW5ndGg7dSsrKXtrPWsreShlLGYsZFt1XSxnK1wiICBcIil9cmV0dXJuIGt9aWYoej09XCIzMVwiKXt2YXIgaz1nK1wiU0VUXFxuXCI7dmFyIGQ9dyhlLGwpO2Zvcih2YXIgdT0wO3U8ZC5sZW5ndGg7dSsrKXtrPWsreShlLGMsZFt1XSxnK1wiICBcIil9cmV0dXJuIGt9dmFyIHo9cGFyc2VJbnQoeiwxNik7aWYoKHomMTI4KSE9MCl7dmFyIG49eiYzMTtpZigoeiYzMikhPTApe3ZhciBrPWcrXCJbXCIrbitcIl1cXG5cIjt2YXIgZD13KGUsbCk7Zm9yKHZhciB1PTA7dTxkLmxlbmd0aDt1Kyspe2s9ayt5KGUsYyxkW3VdLGcrXCIgIFwiKX1yZXR1cm4ga31lbHNle3ZhciBoPWooZSxsKTtpZihBU04xSEVYLmlzQVNOMUhFWChoKSl7dmFyIGs9ZytcIltcIituK1wiXVxcblwiO2s9ayt5KGgsYywwLGcrXCIgIFwiKTtyZXR1cm4ga31lbHNle2lmKGguc3Vic3RyKDAsOCk9PVwiNjg3NDc0NzBcIil7aD1oZXh0b3V0ZjgoaCl9ZWxzZXtpZihjLng1MDlFeHROYW1lPT09XCJzdWJqZWN0QWx0TmFtZVwiJiZuPT0yKXtoPWhleHRvdXRmOChoKX19fXZhciBrPWcrXCJbXCIrbitcIl0gXCIraCtcIlxcblwiO3JldHVybiBrfX1yZXR1cm4gZytcIlVOS05PV04oXCIreitcIikgXCIraihlLGwpK1wiXFxuXCJ9O0FTTjFIRVguaXNDb250ZXh0VGFnPWZ1bmN0aW9uKGMsYil7Yz1jLnRvTG93ZXJDYXNlKCk7dmFyIGYsZTt0cnl7Zj1wYXJzZUludChjLDE2KX1jYXRjaChkKXtyZXR1cm4gLTF9aWYoYj09PXVuZGVmaW5lZCl7aWYoKGYmMTkyKT09MTI4KXtyZXR1cm4gdHJ1ZX1lbHNle3JldHVybiBmYWxzZX19dHJ5e3ZhciBhPWIubWF0Y2goL15cXFtbMC05XStcXF0kLyk7aWYoYT09bnVsbCl7cmV0dXJuIGZhbHNlfWU9cGFyc2VJbnQoYi5zdWJzdHIoMSxiLmxlbmd0aC0xKSwxMCk7aWYoZT4zMSl7cmV0dXJuIGZhbHNlfWlmKCgoZiYxOTIpPT0xMjgpJiYoKGYmMzEpPT1lKSl7cmV0dXJuIHRydWV9cmV0dXJuIGZhbHNlfWNhdGNoKGQpe3JldHVybiBmYWxzZX19O0FTTjFIRVguaXNBU04xSEVYPWZ1bmN0aW9uKGUpe3ZhciBkPUFTTjFIRVg7aWYoZS5sZW5ndGglMj09MSl7cmV0dXJuIGZhbHNlfXZhciBjPWQuZ2V0VmJsZW4oZSwwKTt2YXIgYj1lLnN1YnN0cigwLDIpO3ZhciBmPWQuZ2V0TChlLDApO3ZhciBhPWUubGVuZ3RoLWIubGVuZ3RoLWYubGVuZ3RoO2lmKGE9PWMqMil7cmV0dXJuIHRydWV9cmV0dXJuIGZhbHNlfTtBU04xSEVYLmNoZWNrU3RyaWN0REVSPWZ1bmN0aW9uKGcsbyxkLGMscil7dmFyIHM9QVNOMUhFWDtpZihkPT09dW5kZWZpbmVkKXtpZih0eXBlb2YgZyE9XCJzdHJpbmdcIil7dGhyb3cgbmV3IEVycm9yKFwibm90IGhleCBzdHJpbmdcIil9Zz1nLnRvTG93ZXJDYXNlKCk7aWYoIUtKVVIubGFuZy5TdHJpbmcuaXNIZXgoZykpe3Rocm93IG5ldyBFcnJvcihcIm5vdCBoZXggc3RyaW5nXCIpfWQ9Zy5sZW5ndGg7Yz1nLmxlbmd0aC8yO2lmKGM8MTI4KXtyPTF9ZWxzZXtyPU1hdGguY2VpbChjLnRvU3RyaW5nKDE2KSkrMX19dmFyIGs9cy5nZXRMKGcsbyk7aWYoay5sZW5ndGg+cioyKXt0aHJvdyBuZXcgRXJyb3IoXCJMIG9mIFRMViB0b28gbG9uZzogaWR4PVwiK28pfXZhciBuPXMuZ2V0VmJsZW4oZyxvKTtpZihuPmMpe3Rocm93IG5ldyBFcnJvcihcInZhbHVlIG9mIEwgdG9vIGxvbmcgdGhhbiBoZXg6IGlkeD1cIitvKX12YXIgcT1zLmdldFRMVihnLG8pO3ZhciBmPXEubGVuZ3RoLTItcy5nZXRMKGcsbykubGVuZ3RoO2lmKGYhPT0obioyKSl7dGhyb3cgbmV3IEVycm9yKFwiViBzdHJpbmcgbGVuZ3RoIGFuZCBMJ3MgdmFsdWUgbm90IHRoZSBzYW1lOlwiK2YrXCIvXCIrKG4qMikpfWlmKG89PT0wKXtpZihnLmxlbmd0aCE9cS5sZW5ndGgpe3Rocm93IG5ldyBFcnJvcihcInRvdGFsIGxlbmd0aCBhbmQgVExWIGxlbmd0aCB1bm1hdGNoOlwiK2cubGVuZ3RoK1wiIT1cIitxLmxlbmd0aCl9fXZhciBiPWcuc3Vic3RyKG8sMik7aWYoYj09PVwiMDJcIil7dmFyIGE9cy5nZXRWaWR4KGcsbyk7aWYoZy5zdWJzdHIoYSwyKT09XCIwMFwiJiZnLmNoYXJDb2RlQXQoYSsyKTw1Nil7dGhyb3cgbmV3IEVycm9yKFwibm90IGxlYXN0IHplcm9zIGZvciBERVIgSU5URUdFUlwiKX19aWYocGFyc2VJbnQoYiwxNikmMzIpe3ZhciBwPXMuZ2V0VmJsZW4oZyxvKTt2YXIgbT0wO3ZhciBsPXMuZ2V0Q2hpbGRJZHgoZyxvKTtmb3IodmFyIGU9MDtlPGwubGVuZ3RoO2UrKyl7dmFyIGo9cy5nZXRUTFYoZyxsW2VdKTttKz1qLmxlbmd0aDtzLmNoZWNrU3RyaWN0REVSKGcsbFtlXSxkLGMscil9aWYoKHAqMikhPW0pe3Rocm93IG5ldyBFcnJvcihcInN1bSBvZiBjaGlsZHJlbidzIFRMViBsZW5ndGggYW5kIEwgdW5tYXRjaDogXCIrKHAqMikrXCIhPVwiK20pfX19O0FTTjFIRVgub2lkbmFtZT1mdW5jdGlvbihhKXt2YXIgYz1LSlVSLmFzbjE7aWYoS0pVUi5sYW5nLlN0cmluZy5pc0hleChhKSl7YT1jLkFTTjFVdGlsLm9pZEhleFRvSW50KGEpfXZhciBiPWMueDUwOS5PSUQub2lkMm5hbWUoYSk7aWYoYj09PVwiXCIpe2I9YX1yZXR1cm4gYn07XG52YXIgS0pVUjtpZih0eXBlb2YgS0pVUj09XCJ1bmRlZmluZWRcInx8IUtKVVIpe0tKVVI9e319aWYodHlwZW9mIEtKVVIubGFuZz09XCJ1bmRlZmluZWRcInx8IUtKVVIubGFuZyl7S0pVUi5sYW5nPXt9fUtKVVIubGFuZy5TdHJpbmc9ZnVuY3Rpb24oKXt9O2Z1bmN0aW9uIEJhc2U2NHgoKXt9ZnVuY3Rpb24gc3RvQkEoZCl7dmFyIGI9bmV3IEFycmF5KCk7Zm9yKHZhciBjPTA7YzxkLmxlbmd0aDtjKyspe2JbY109ZC5jaGFyQ29kZUF0KGMpfXJldHVybiBifWZ1bmN0aW9uIEJBdG9zKGIpe3ZhciBkPVwiXCI7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aDtjKyspe2Q9ZCtTdHJpbmcuZnJvbUNoYXJDb2RlKGJbY10pfXJldHVybiBkfWZ1bmN0aW9uIEJBdG9oZXgoYil7dmFyIGU9XCJcIjtmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl7dmFyIGM9YltkXS50b1N0cmluZygxNik7aWYoYy5sZW5ndGg9PTEpe2M9XCIwXCIrY31lPWUrY31yZXR1cm4gZX1mdW5jdGlvbiBzdG9oZXgoYSl7cmV0dXJuIEJBdG9oZXgoc3RvQkEoYSkpfWZ1bmN0aW9uIHN0b2I2NChhKXtyZXR1cm4gaGV4MmI2NChzdG9oZXgoYSkpfWZ1bmN0aW9uIHN0b2I2NHUoYSl7cmV0dXJuIGI2NHRvYjY0dShoZXgyYjY0KHN0b2hleChhKSkpfWZ1bmN0aW9uIGI2NHV0b3MoYSl7cmV0dXJuIEJBdG9zKGI2NHRvQkEoYjY0dXRvYjY0KGEpKSl9ZnVuY3Rpb24gYjY0dG9iNjR1KGEpe2E9YS5yZXBsYWNlKC9cXD0vZyxcIlwiKTthPWEucmVwbGFjZSgvXFwrL2csXCItXCIpO2E9YS5yZXBsYWNlKC9cXC8vZyxcIl9cIik7cmV0dXJuIGF9ZnVuY3Rpb24gYjY0dXRvYjY0KGEpe2lmKGEubGVuZ3RoJTQ9PTIpe2E9YStcIj09XCJ9ZWxzZXtpZihhLmxlbmd0aCU0PT0zKXthPWErXCI9XCJ9fWE9YS5yZXBsYWNlKC8tL2csXCIrXCIpO2E9YS5yZXBsYWNlKC9fL2csXCIvXCIpO3JldHVybiBhfWZ1bmN0aW9uIGhleHRvYjY0dShhKXtpZihhLmxlbmd0aCUyPT0xKXthPVwiMFwiK2F9cmV0dXJuIGI2NHRvYjY0dShoZXgyYjY0KGEpKX1mdW5jdGlvbiBiNjR1dG9oZXgoYSl7cmV0dXJuIGI2NHRvaGV4KGI2NHV0b2I2NChhKSl9dmFyIHV0Zjh0b2I2NHUsYjY0dXRvdXRmODtpZih0eXBlb2YgQnVmZmVyPT09XCJmdW5jdGlvblwiKXt1dGY4dG9iNjR1PWZ1bmN0aW9uKGEpe3JldHVybiBiNjR0b2I2NHUoQnVmZmVyLmZyb20oYSxcInV0ZjhcIikudG9TdHJpbmcoXCJiYXNlNjRcIikpfTtiNjR1dG91dGY4PWZ1bmN0aW9uKGEpe3JldHVybiBCdWZmZXIuZnJvbShiNjR1dG9iNjQoYSksXCJiYXNlNjRcIikudG9TdHJpbmcoXCJ1dGY4XCIpfX1lbHNle3V0Zjh0b2I2NHU9ZnVuY3Rpb24oYSl7cmV0dXJuIGhleHRvYjY0dSh1cmljbXB0b2hleChlbmNvZGVVUklDb21wb25lbnRBbGwoYSkpKX07YjY0dXRvdXRmOD1mdW5jdGlvbihhKXtyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGhleHRvdXJpY21wKGI2NHV0b2hleChhKSkpfX1mdW5jdGlvbiB1dGY4dG9iNjQoYSl7cmV0dXJuIGhleDJiNjQodXJpY21wdG9oZXgoZW5jb2RlVVJJQ29tcG9uZW50QWxsKGEpKSl9ZnVuY3Rpb24gYjY0dG91dGY4KGEpe3JldHVybiBkZWNvZGVVUklDb21wb25lbnQoaGV4dG91cmljbXAoYjY0dG9oZXgoYSkpKX1mdW5jdGlvbiB1dGY4dG9oZXgoYSl7cmV0dXJuIHVyaWNtcHRvaGV4KGVuY29kZVVSSUNvbXBvbmVudEFsbChhKSl9ZnVuY3Rpb24gaGV4dG91dGY4KGEpe3JldHVybiBkZWNvZGVVUklDb21wb25lbnQoaGV4dG91cmljbXAoYSkpfWZ1bmN0aW9uIGhleHRvcnN0cihjKXt2YXIgYj1cIlwiO2Zvcih2YXIgYT0wO2E8Yy5sZW5ndGgtMTthKz0yKXtiKz1TdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KGMuc3Vic3RyKGEsMiksMTYpKX1yZXR1cm4gYn1mdW5jdGlvbiByc3RydG9oZXgoYyl7dmFyIGE9XCJcIjtmb3IodmFyIGI9MDtiPGMubGVuZ3RoO2IrKyl7YSs9KFwiMFwiK2MuY2hhckNvZGVBdChiKS50b1N0cmluZygxNikpLnNsaWNlKC0yKX1yZXR1cm4gYX1mdW5jdGlvbiBoZXh0b2I2NChhKXtyZXR1cm4gaGV4MmI2NChhKX1mdW5jdGlvbiBoZXh0b2I2NG5sKGIpe3ZhciBhPWhleHRvYjY0KGIpO3ZhciBjPWEucmVwbGFjZSgvKC57NjR9KS9nLFwiJDFcXHJcXG5cIik7Yz1jLnJlcGxhY2UoL1xcclxcbiQvLFwiXCIpO3JldHVybiBjfWZ1bmN0aW9uIGI2NG5sdG9oZXgoYil7dmFyIGE9Yi5yZXBsYWNlKC9bXjAtOUEtWmEtelxcLys9XSovZyxcIlwiKTt2YXIgYz1iNjR0b2hleChhKTtyZXR1cm4gY31mdW5jdGlvbiBoZXh0b3BlbShhLGIpe3ZhciBjPWhleHRvYjY0bmwoYSk7cmV0dXJuXCItLS0tLUJFR0lOIFwiK2IrXCItLS0tLVxcclxcblwiK2MrXCJcXHJcXG4tLS0tLUVORCBcIitiK1wiLS0tLS1cXHJcXG5cIn1mdW5jdGlvbiBwZW10b2hleChhLGIpe2lmKGEuaW5kZXhPZihcIi0tLS0tQkVHSU4gXCIpPT0tMSl7dGhyb3dcImNhbid0IGZpbmQgUEVNIGhlYWRlcjogXCIrYn1pZihiIT09dW5kZWZpbmVkKXthPWEucmVwbGFjZShuZXcgUmVnRXhwKFwiXlteXSotLS0tLUJFR0lOIFwiK2IrXCItLS0tLVwiKSxcIlwiKTthPWEucmVwbGFjZShuZXcgUmVnRXhwKFwiLS0tLS1FTkQgXCIrYitcIi0tLS0tW15dKiRcIiksXCJcIil9ZWxzZXthPWEucmVwbGFjZSgvXlteXSotLS0tLUJFR0lOIFteLV0rLS0tLS0vLFwiXCIpO2E9YS5yZXBsYWNlKC8tLS0tLUVORCBbXi1dKy0tLS0tW15dKiQvLFwiXCIpfXJldHVybiBiNjRubHRvaGV4KGEpfWZ1bmN0aW9uIGhleHRvQXJyYXlCdWZmZXIoZCl7aWYoZC5sZW5ndGglMiE9MCl7dGhyb3dcImlucHV0IGlzIG5vdCBldmVuIGxlbmd0aFwifWlmKGQubWF0Y2goL15bMC05QS1GYS1mXSskLyk9PW51bGwpe3Rocm93XCJpbnB1dCBpcyBub3QgaGV4YWRlY2ltYWxcIn12YXIgYj1uZXcgQXJyYXlCdWZmZXIoZC5sZW5ndGgvMik7dmFyIGE9bmV3IERhdGFWaWV3KGIpO2Zvcih2YXIgYz0wO2M8ZC5sZW5ndGgvMjtjKyspe2Euc2V0VWludDgoYyxwYXJzZUludChkLnN1YnN0cihjKjIsMiksMTYpKX1yZXR1cm4gYn1mdW5jdGlvbiBBcnJheUJ1ZmZlcnRvaGV4KGIpe3ZhciBkPVwiXCI7dmFyIGE9bmV3IERhdGFWaWV3KGIpO2Zvcih2YXIgYz0wO2M8Yi5ieXRlTGVuZ3RoO2MrKyl7ZCs9KFwiMDBcIithLmdldFVpbnQ4KGMpLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpfXJldHVybiBkfWZ1bmN0aW9uIHp1bHV0b21zZWMobil7dmFyIGwsaixtLGUsZixpLGIsazt2YXIgYSxoLGcsYztjPW4ubWF0Y2goL14oXFxkezJ9fFxcZHs0fSkoXFxkXFxkKShcXGRcXGQpKFxcZFxcZCkoXFxkXFxkKShcXGRcXGQpKHxcXC5cXGQrKVokLyk7aWYoYyl7YT1jWzFdO2w9cGFyc2VJbnQoYSk7aWYoYS5sZW5ndGg9PT0yKXtpZig1MDw9bCYmbDwxMDApe2w9MTkwMCtsfWVsc2V7aWYoMDw9bCYmbDw1MCl7bD0yMDAwK2x9fX1qPXBhcnNlSW50KGNbMl0pLTE7bT1wYXJzZUludChjWzNdKTtlPXBhcnNlSW50KGNbNF0pO2Y9cGFyc2VJbnQoY1s1XSk7aT1wYXJzZUludChjWzZdKTtiPTA7aD1jWzddO2lmKGghPT1cIlwiKXtnPShoLnN1YnN0cigxKStcIjAwXCIpLnN1YnN0cigwLDMpO2I9cGFyc2VJbnQoZyl9cmV0dXJuIERhdGUuVVRDKGwsaixtLGUsZixpLGIpfXRocm93XCJ1bnN1cHBvcnRlZCB6dWx1IGZvcm1hdDogXCIrbn1mdW5jdGlvbiB6dWx1dG9zZWMoYSl7dmFyIGI9enVsdXRvbXNlYyhhKTtyZXR1cm4gfn4oYi8xMDAwKX1mdW5jdGlvbiB6dWx1dG9kYXRlKGEpe3JldHVybiBuZXcgRGF0ZSh6dWx1dG9tc2VjKGEpKX1mdW5jdGlvbiBkYXRldG96dWx1KGcsZSxmKXt2YXIgYjt2YXIgYT1nLmdldFVUQ0Z1bGxZZWFyKCk7aWYoZSl7aWYoYTwxOTUwfHwyMDQ5PGEpe3Rocm93XCJub3QgcHJvcGVyIHllYXIgZm9yIFVUQ1RpbWU6IFwiK2F9Yj0oXCJcIithKS5zbGljZSgtMil9ZWxzZXtiPShcIjAwMFwiK2EpLnNsaWNlKC00KX1iKz0oXCIwXCIrKGcuZ2V0VVRDTW9udGgoKSsxKSkuc2xpY2UoLTIpO2IrPShcIjBcIitnLmdldFVUQ0RhdGUoKSkuc2xpY2UoLTIpO2IrPShcIjBcIitnLmdldFVUQ0hvdXJzKCkpLnNsaWNlKC0yKTtiKz0oXCIwXCIrZy5nZXRVVENNaW51dGVzKCkpLnNsaWNlKC0yKTtiKz0oXCIwXCIrZy5nZXRVVENTZWNvbmRzKCkpLnNsaWNlKC0yKTtpZihmKXt2YXIgYz1nLmdldFVUQ01pbGxpc2Vjb25kcygpO2lmKGMhPT0wKXtjPShcIjAwXCIrYykuc2xpY2UoLTMpO2M9Yy5yZXBsYWNlKC8wKyQvZyxcIlwiKTtiKz1cIi5cIitjfX1iKz1cIlpcIjtyZXR1cm4gYn1mdW5jdGlvbiB1cmljbXB0b2hleChhKXtyZXR1cm4gYS5yZXBsYWNlKC8lL2csXCJcIil9ZnVuY3Rpb24gaGV4dG91cmljbXAoYSl7cmV0dXJuIGEucmVwbGFjZSgvKC4uKS9nLFwiJSQxXCIpfWZ1bmN0aW9uIGlwdjZ0b2hleChnKXt2YXIgYj1cIm1hbGZvcm1lZCBJUHY2IGFkZHJlc3NcIjtpZighZy5tYXRjaCgvXlswLTlBLUZhLWY6XSskLykpe3Rocm93IGJ9Zz1nLnRvTG93ZXJDYXNlKCk7dmFyIGQ9Zy5zcGxpdChcIjpcIikubGVuZ3RoLTE7aWYoZDwyKXt0aHJvdyBifXZhciBlPVwiOlwiLnJlcGVhdCg3LWQrMik7Zz1nLnJlcGxhY2UoXCI6OlwiLGUpO3ZhciBjPWcuc3BsaXQoXCI6XCIpO2lmKGMubGVuZ3RoIT04KXt0aHJvdyBifWZvcih2YXIgZj0wO2Y8ODtmKyspe2NbZl09KFwiMDAwMFwiK2NbZl0pLnNsaWNlKC00KX1yZXR1cm4gYy5qb2luKFwiXCIpfWZ1bmN0aW9uIGhleHRvaXB2NihlKXtpZighZS5tYXRjaCgvXlswLTlBLUZhLWZdezMyfSQvKSl7dGhyb3dcIm1hbGZvcm1lZCBJUHY2IGFkZHJlc3Mgb2N0ZXRcIn1lPWUudG9Mb3dlckNhc2UoKTt2YXIgYj1lLm1hdGNoKC8uezEsNH0vZyk7Zm9yKHZhciBkPTA7ZDw4O2QrKyl7YltkXT1iW2RdLnJlcGxhY2UoL14wKy8sXCJcIik7aWYoYltkXT09XCJcIil7YltkXT1cIjBcIn19ZT1cIjpcIitiLmpvaW4oXCI6XCIpK1wiOlwiO3ZhciBjPWUubWF0Y2goLzooMDopezIsfS9nKTtpZihjPT09bnVsbCl7cmV0dXJuIGUuc2xpY2UoMSwtMSl9dmFyIGY9XCJcIjtmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrKyl7aWYoY1tkXS5sZW5ndGg+Zi5sZW5ndGgpe2Y9Y1tkXX19ZT1lLnJlcGxhY2UoZixcIjo6XCIpO3JldHVybiBlLnNsaWNlKDEsLTEpfWZ1bmN0aW9uIGhleHRvaXAoYil7dmFyIGQ9XCJtYWxmb3JtZWQgaGV4IHZhbHVlXCI7aWYoIWIubWF0Y2goL14oWzAtOUEtRmEtZl1bMC05QS1GYS1mXSl7MSx9JC8pKXt0aHJvdyBkfWlmKGIubGVuZ3RoPT04KXt2YXIgYzt0cnl7Yz1wYXJzZUludChiLnN1YnN0cigwLDIpLDE2KStcIi5cIitwYXJzZUludChiLnN1YnN0cigyLDIpLDE2KStcIi5cIitwYXJzZUludChiLnN1YnN0cig0LDIpLDE2KStcIi5cIitwYXJzZUludChiLnN1YnN0cig2LDIpLDE2KTtyZXR1cm4gY31jYXRjaChhKXt0aHJvdyBkfX1lbHNle2lmKGIubGVuZ3RoPT0zMil7cmV0dXJuIGhleHRvaXB2NihiKX1lbHNle3JldHVybiBifX19ZnVuY3Rpb24gaXB0b2hleChmKXt2YXIgaj1cIm1hbGZvcm1lZCBJUCBhZGRyZXNzXCI7Zj1mLnRvTG93ZXJDYXNlKGYpO2lmKGYubWF0Y2goL15bMC05Ll0rJC8pKXt2YXIgYj1mLnNwbGl0KFwiLlwiKTtpZihiLmxlbmd0aCE9PTQpe3Rocm93IGp9dmFyIGc9XCJcIjt0cnl7Zm9yKHZhciBlPTA7ZTw0O2UrKyl7dmFyIGg9cGFyc2VJbnQoYltlXSk7Zys9KFwiMFwiK2gudG9TdHJpbmcoMTYpKS5zbGljZSgtMil9cmV0dXJuIGd9Y2F0Y2goYyl7dGhyb3cgan19ZWxzZXtpZihmLm1hdGNoKC9eWzAtOWEtZjpdKyQvKSYmZi5pbmRleE9mKFwiOlwiKSE9PS0xKXtyZXR1cm4gaXB2NnRvaGV4KGYpfWVsc2V7dGhyb3cgan19fWZ1bmN0aW9uIGVuY29kZVVSSUNvbXBvbmVudEFsbChhKXt2YXIgZD1lbmNvZGVVUklDb21wb25lbnQoYSk7dmFyIGI9XCJcIjtmb3IodmFyIGM9MDtjPGQubGVuZ3RoO2MrKyl7aWYoZFtjXT09XCIlXCIpe2I9YitkLnN1YnN0cihjLDMpO2M9YysyfWVsc2V7Yj1iK1wiJVwiK3N0b2hleChkW2NdKX19cmV0dXJuIGJ9ZnVuY3Rpb24gbmV3bGluZV90b1VuaXgoYSl7YT1hLnJlcGxhY2UoL1xcclxcbi9tZyxcIlxcblwiKTtyZXR1cm4gYX1mdW5jdGlvbiBuZXdsaW5lX3RvRG9zKGEpe2E9YS5yZXBsYWNlKC9cXHJcXG4vbWcsXCJcXG5cIik7YT1hLnJlcGxhY2UoL1xcbi9tZyxcIlxcclxcblwiKTtyZXR1cm4gYX1LSlVSLmxhbmcuU3RyaW5nLmlzSW50ZWdlcj1mdW5jdGlvbihhKXtpZihhLm1hdGNoKC9eWzAtOV0rJC8pKXtyZXR1cm4gdHJ1ZX1lbHNle2lmKGEubWF0Y2goL14tWzAtOV0rJC8pKXtyZXR1cm4gdHJ1ZX1lbHNle3JldHVybiBmYWxzZX19fTtLSlVSLmxhbmcuU3RyaW5nLmlzSGV4PWZ1bmN0aW9uKGEpe3JldHVybiBpc2hleChhKX07ZnVuY3Rpb24gaXNoZXgoYSl7aWYoYS5sZW5ndGglMj09MCYmKGEubWF0Y2goL15bMC05YS1mXSskLyl8fGEubWF0Y2goL15bMC05QS1GXSskLykpKXtyZXR1cm4gdHJ1ZX1lbHNle3JldHVybiBmYWxzZX19S0pVUi5sYW5nLlN0cmluZy5pc0Jhc2U2ND1mdW5jdGlvbihhKXthPWEucmVwbGFjZSgvXFxzKy9nLFwiXCIpO2lmKGEubWF0Y2goL15bMC05QS1aYS16K1xcL10rPXswLDN9JC8pJiZhLmxlbmd0aCU0PT0wKXtyZXR1cm4gdHJ1ZX1lbHNle3JldHVybiBmYWxzZX19O0tKVVIubGFuZy5TdHJpbmcuaXNCYXNlNjRVUkw9ZnVuY3Rpb24oYSl7aWYoYS5tYXRjaCgvWysvPV0vKSl7cmV0dXJuIGZhbHNlfWE9YjY0dXRvYjY0KGEpO3JldHVybiBLSlVSLmxhbmcuU3RyaW5nLmlzQmFzZTY0KGEpfTtLSlVSLmxhbmcuU3RyaW5nLmlzSW50ZWdlckFycmF5PWZ1bmN0aW9uKGEpe2E9YS5yZXBsYWNlKC9cXHMrL2csXCJcIik7aWYoYS5tYXRjaCgvXlxcW1swLTksXStcXF0kLykpe3JldHVybiB0cnVlfWVsc2V7cmV0dXJuIGZhbHNlfX07S0pVUi5sYW5nLlN0cmluZy5pc1ByaW50YWJsZT1mdW5jdGlvbihhKXtpZihhLm1hdGNoKC9eWzAtOUEtWmEteiAnKCkrLC0uLzo9P10qJC8pIT09bnVsbCl7cmV0dXJuIHRydWV9cmV0dXJuIGZhbHNlfTtLSlVSLmxhbmcuU3RyaW5nLmlzSUE1PWZ1bmN0aW9uKGEpe2lmKGEubWF0Y2goL15bXFx4MjAtXFx4MjFcXHgyMy1cXHg3Zl0qJC8pIT09bnVsbCl7cmV0dXJuIHRydWV9cmV0dXJuIGZhbHNlfTtLSlVSLmxhbmcuU3RyaW5nLmlzTWFpbD1mdW5jdGlvbihhKXtpZihhLm1hdGNoKC9eW0EtWmEtejAtOV17MX1bQS1aYS16MC05Xy4tXSpAezF9W0EtWmEtejAtOV8uLV17MSx9XFwuW0EtWmEtejAtOV17MSx9JC8pIT09bnVsbCl7cmV0dXJuIHRydWV9cmV0dXJuIGZhbHNlfTtmdW5jdGlvbiBoZXh0b3Bvc2hleChhKXtpZihhLmxlbmd0aCUyPT0xKXtyZXR1cm5cIjBcIithfWlmKGEuc3Vic3RyKDAsMSk+XCI3XCIpe3JldHVyblwiMDBcIithfXJldHVybiBhfWZ1bmN0aW9uIGludGFyeXN0cnRvaGV4KGIpe2I9Yi5yZXBsYWNlKC9eXFxzKlxcW1xccyovLFwiXCIpO2I9Yi5yZXBsYWNlKC9cXHMqXFxdXFxzKiQvLFwiXCIpO2I9Yi5yZXBsYWNlKC9cXHMqL2csXCJcIik7dHJ5e3ZhciBjPWIuc3BsaXQoLywvKS5tYXAoZnVuY3Rpb24oZyxlLGgpe3ZhciBmPXBhcnNlSW50KGcpO2lmKGY8MHx8MjU1PGYpe3Rocm93XCJpbnRlZ2VyIG5vdCBpbiByYW5nZSAwLTI1NVwifXZhciBkPShcIjAwXCIrZi50b1N0cmluZygxNikpLnNsaWNlKC0yKTtyZXR1cm4gZH0pLmpvaW4oXCJcIik7cmV0dXJuIGN9Y2F0Y2goYSl7dGhyb3dcIm1hbGZvcm1lZCBpbnRlZ2VyIGFycmF5IHN0cmluZzogXCIrYX19dmFyIHN0cmRpZmZpZHg9ZnVuY3Rpb24oYyxhKXt2YXIgZD1jLmxlbmd0aDtpZihjLmxlbmd0aD5hLmxlbmd0aCl7ZD1hLmxlbmd0aH1mb3IodmFyIGI9MDtiPGQ7YisrKXtpZihjLmNoYXJDb2RlQXQoYikhPWEuY2hhckNvZGVBdChiKSl7cmV0dXJuIGJ9fWlmKGMubGVuZ3RoIT1hLmxlbmd0aCl7cmV0dXJuIGR9cmV0dXJuIC0xfTtmdW5jdGlvbiBvaWR0b2hleChnKXt2YXIgZj1mdW5jdGlvbihhKXt2YXIgbD1hLnRvU3RyaW5nKDE2KTtpZihsLmxlbmd0aD09MSl7bD1cIjBcIitsfXJldHVybiBsfTt2YXIgZT1mdW5jdGlvbihwKXt2YXIgbz1cIlwiO3ZhciBsPXBhcnNlSW50KHAsMTApO3ZhciBhPWwudG9TdHJpbmcoMik7dmFyIG09Ny1hLmxlbmd0aCU3O2lmKG09PTcpe209MH12YXIgcj1cIlwiO2Zvcih2YXIgbj0wO248bTtuKyspe3IrPVwiMFwifWE9cithO2Zvcih2YXIgbj0wO248YS5sZW5ndGgtMTtuKz03KXt2YXIgcT1hLnN1YnN0cihuLDcpO2lmKG4hPWEubGVuZ3RoLTcpe3E9XCIxXCIrcX1vKz1mKHBhcnNlSW50KHEsMikpfXJldHVybiBvfTt0cnl7aWYoIWcubWF0Y2goL15bMC05Ll0rJC8pKXtyZXR1cm4gbnVsbH12YXIgaj1cIlwiO3ZhciBiPWcuc3BsaXQoXCIuXCIpO3ZhciBrPXBhcnNlSW50KGJbMF0sMTApKjQwK3BhcnNlSW50KGJbMV0sMTApO2orPWYoayk7Yi5zcGxpY2UoMCwyKTtmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl7ais9ZShiW2RdKX1yZXR1cm4gan1jYXRjaChjKXtyZXR1cm4gbnVsbH19ZnVuY3Rpb24gaGV4dG9vaWQoZyl7aWYoIWlzaGV4KGcpKXtyZXR1cm4gbnVsbH10cnl7dmFyIG09W107dmFyIHA9Zy5zdWJzdHIoMCwyKTt2YXIgZT1wYXJzZUludChwLDE2KTttWzBdPW5ldyBTdHJpbmcoTWF0aC5mbG9vcihlLzQwKSk7bVsxXT1uZXcgU3RyaW5nKGUlNDApO3ZhciBuPWcuc3Vic3RyKDIpO3ZhciBsPVtdO2Zvcih2YXIgZj0wO2Y8bi5sZW5ndGgvMjtmKyspe2wucHVzaChwYXJzZUludChuLnN1YnN0cihmKjIsMiksMTYpKX12YXIgaz1bXTt2YXIgZD1cIlwiO2Zvcih2YXIgZj0wO2Y8bC5sZW5ndGg7ZisrKXtpZihsW2ZdJjEyOCl7ZD1kK3N0cnBhZCgobFtmXSYxMjcpLnRvU3RyaW5nKDIpLDcpfWVsc2V7ZD1kK3N0cnBhZCgobFtmXSYxMjcpLnRvU3RyaW5nKDIpLDcpO2sucHVzaChuZXcgU3RyaW5nKHBhcnNlSW50KGQsMikpKTtkPVwiXCJ9fXZhciBvPW0uam9pbihcIi5cIik7aWYoay5sZW5ndGg+MCl7bz1vK1wiLlwiK2suam9pbihcIi5cIil9cmV0dXJuIG99Y2F0Y2goail7cmV0dXJuIG51bGx9fXZhciBzdHJwYWQ9ZnVuY3Rpb24oYyxiLGEpe2lmKGE9PXVuZGVmaW5lZCl7YT1cIjBcIn1pZihjLmxlbmd0aD49Yil7cmV0dXJuIGN9cmV0dXJuIG5ldyBBcnJheShiLWMubGVuZ3RoKzEpLmpvaW4oYSkrY307ZnVuY3Rpb24gYml0c3RydG9pbnQoZSl7dHJ5e3ZhciBhPWUuc3Vic3RyKDAsMik7aWYoYT09XCIwMFwiKXtyZXR1cm4gcGFyc2VJbnQoZS5zdWJzdHIoMiksMTYpfXZhciBiPXBhcnNlSW50KGEsMTYpO3ZhciBmPWUuc3Vic3RyKDIpO3ZhciBkPXBhcnNlSW50KGYsMTYpLnRvU3RyaW5nKDIpO2lmKGQ9PVwiMFwiKXtkPVwiMDAwMDAwMDBcIn1kPWQuc2xpY2UoMCwwLWIpO3JldHVybiBwYXJzZUludChkLDIpfWNhdGNoKGMpe3JldHVybiAtMX19ZnVuY3Rpb24gaW50dG9iaXRzdHIoZSl7dmFyIGM9TnVtYmVyKGUpLnRvU3RyaW5nKDIpO3ZhciBiPTgtYy5sZW5ndGglODtpZihiPT04KXtiPTB9Yz1jK3N0cnBhZChcIlwiLGIsXCIwXCIpO3ZhciBkPXBhcnNlSW50KGMsMikudG9TdHJpbmcoMTYpO2lmKGQubGVuZ3RoJTI9PTEpe2Q9XCIwXCIrZH12YXIgYT1cIjBcIitiO3JldHVybiBhK2R9O1xuaWYodHlwZW9mIEtKVVI9PVwidW5kZWZpbmVkXCJ8fCFLSlVSKXtLSlVSPXt9fWlmKHR5cGVvZiBLSlVSLmNyeXB0bz09XCJ1bmRlZmluZWRcInx8IUtKVVIuY3J5cHRvKXtLSlVSLmNyeXB0bz17fX1LSlVSLmNyeXB0by5VdGlsPW5ldyBmdW5jdGlvbigpe3RoaXMuRElHRVNUSU5GT0hFQUQ9e3NoYTE6XCIzMDIxMzAwOTA2MDUyYjBlMDMwMjFhMDUwMDA0MTRcIixzaGEyMjQ6XCIzMDJkMzAwZDA2MDk2MDg2NDgwMTY1MDMwNDAyMDQwNTAwMDQxY1wiLHNoYTI1NjpcIjMwMzEzMDBkMDYwOTYwODY0ODAxNjUwMzA0MDIwMTA1MDAwNDIwXCIsc2hhMzg0OlwiMzA0MTMwMGQwNjA5NjA4NjQ4MDE2NTAzMDQwMjAyMDUwMDA0MzBcIixzaGE1MTI6XCIzMDUxMzAwZDA2MDk2MDg2NDgwMTY1MDMwNDAyMDMwNTAwMDQ0MFwiLG1kMjpcIjMwMjAzMDBjMDYwODJhODY0ODg2ZjcwZDAyMDIwNTAwMDQxMFwiLG1kNTpcIjMwMjAzMDBjMDYwODJhODY0ODg2ZjcwZDAyMDUwNTAwMDQxMFwiLHJpcGVtZDE2MDpcIjMwMjEzMDA5MDYwNTJiMjQwMzAyMDEwNTAwMDQxNFwiLH07dGhpcy5ERUZBVUxUUFJPVklERVI9e21kNTpcImNyeXB0b2pzXCIsc2hhMTpcImNyeXB0b2pzXCIsc2hhMjI0OlwiY3J5cHRvanNcIixzaGEyNTY6XCJjcnlwdG9qc1wiLHNoYTM4NDpcImNyeXB0b2pzXCIsc2hhNTEyOlwiY3J5cHRvanNcIixyaXBlbWQxNjA6XCJjcnlwdG9qc1wiLGhtYWNtZDU6XCJjcnlwdG9qc1wiLGhtYWNzaGExOlwiY3J5cHRvanNcIixobWFjc2hhMjI0OlwiY3J5cHRvanNcIixobWFjc2hhMjU2OlwiY3J5cHRvanNcIixobWFjc2hhMzg0OlwiY3J5cHRvanNcIixobWFjc2hhNTEyOlwiY3J5cHRvanNcIixobWFjcmlwZW1kMTYwOlwiY3J5cHRvanNcIixNRDV3aXRoUlNBOlwiY3J5cHRvanMvanNyc2FcIixTSEExd2l0aFJTQTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBMjI0d2l0aFJTQTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBMjU2d2l0aFJTQTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBMzg0d2l0aFJTQTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBNTEyd2l0aFJTQTpcImNyeXB0b2pzL2pzcnNhXCIsUklQRU1EMTYwd2l0aFJTQTpcImNyeXB0b2pzL2pzcnNhXCIsTUQ1d2l0aEVDRFNBOlwiY3J5cHRvanMvanNyc2FcIixTSEExd2l0aEVDRFNBOlwiY3J5cHRvanMvanNyc2FcIixTSEEyMjR3aXRoRUNEU0E6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTI1NndpdGhFQ0RTQTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBMzg0d2l0aEVDRFNBOlwiY3J5cHRvanMvanNyc2FcIixTSEE1MTJ3aXRoRUNEU0E6XCJjcnlwdG9qcy9qc3JzYVwiLFJJUEVNRDE2MHdpdGhFQ0RTQTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBMXdpdGhEU0E6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTIyNHdpdGhEU0E6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTI1NndpdGhEU0E6XCJjcnlwdG9qcy9qc3JzYVwiLE1ENXdpdGhSU0FhbmRNR0YxOlwiY3J5cHRvanMvanNyc2FcIixTSEF3aXRoUlNBYW5kTUdGMTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBMXdpdGhSU0FhbmRNR0YxOlwiY3J5cHRvanMvanNyc2FcIixTSEEyMjR3aXRoUlNBYW5kTUdGMTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBMjU2d2l0aFJTQWFuZE1HRjE6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTM4NHdpdGhSU0FhbmRNR0YxOlwiY3J5cHRvanMvanNyc2FcIixTSEE1MTJ3aXRoUlNBYW5kTUdGMTpcImNyeXB0b2pzL2pzcnNhXCIsUklQRU1EMTYwd2l0aFJTQWFuZE1HRjE6XCJjcnlwdG9qcy9qc3JzYVwiLH07dGhpcy5DUllQVE9KU01FU1NBR0VESUdFU1ROQU1FPXttZDU6Q3J5cHRvSlMuYWxnby5NRDUsc2hhMTpDcnlwdG9KUy5hbGdvLlNIQTEsc2hhMjI0OkNyeXB0b0pTLmFsZ28uU0hBMjI0LHNoYTI1NjpDcnlwdG9KUy5hbGdvLlNIQTI1NixzaGEzODQ6Q3J5cHRvSlMuYWxnby5TSEEzODQsc2hhNTEyOkNyeXB0b0pTLmFsZ28uU0hBNTEyLHJpcGVtZDE2MDpDcnlwdG9KUy5hbGdvLlJJUEVNRDE2MH07dGhpcy5nZXREaWdlc3RJbmZvSGV4PWZ1bmN0aW9uKGEsYil7aWYodHlwZW9mIHRoaXMuRElHRVNUSU5GT0hFQURbYl09PVwidW5kZWZpbmVkXCIpe3Rocm93XCJhbGcgbm90IHN1cHBvcnRlZCBpbiBVdGlsLkRJR0VTVElORk9IRUFEOiBcIitifXJldHVybiB0aGlzLkRJR0VTVElORk9IRUFEW2JdK2F9O3RoaXMuZ2V0UGFkZGVkRGlnZXN0SW5mb0hleD1mdW5jdGlvbihoLGEsail7dmFyIGM9dGhpcy5nZXREaWdlc3RJbmZvSGV4KGgsYSk7dmFyIGQ9ai80O2lmKGMubGVuZ3RoKzIyPmQpe3Rocm93XCJrZXkgaXMgdG9vIHNob3J0IGZvciBTaWdBbGc6IGtleWxlbj1cIitqK1wiLFwiK2F9dmFyIGI9XCIwMDAxXCI7dmFyIGs9XCIwMFwiK2M7dmFyIGc9XCJcIjt2YXIgbD1kLWIubGVuZ3RoLWsubGVuZ3RoO2Zvcih2YXIgZj0wO2Y8bDtmKz0yKXtnKz1cImZmXCJ9dmFyIGU9YitnK2s7cmV0dXJuIGV9O3RoaXMuaGFzaFN0cmluZz1mdW5jdGlvbihhLGMpe3ZhciBiPW5ldyBLSlVSLmNyeXB0by5NZXNzYWdlRGlnZXN0KHthbGc6Y30pO3JldHVybiBiLmRpZ2VzdFN0cmluZyhhKX07dGhpcy5oYXNoSGV4PWZ1bmN0aW9uKGIsYyl7dmFyIGE9bmV3IEtKVVIuY3J5cHRvLk1lc3NhZ2VEaWdlc3Qoe2FsZzpjfSk7cmV0dXJuIGEuZGlnZXN0SGV4KGIpfTt0aGlzLnNoYTE9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuaGFzaFN0cmluZyhhLFwic2hhMVwiKX07dGhpcy5zaGEyNTY9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuaGFzaFN0cmluZyhhLFwic2hhMjU2XCIpfTt0aGlzLnNoYTI1NkhleD1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5oYXNoSGV4KGEsXCJzaGEyNTZcIil9O3RoaXMuc2hhNTEyPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmhhc2hTdHJpbmcoYSxcInNoYTUxMlwiKX07dGhpcy5zaGE1MTJIZXg9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuaGFzaEhleChhLFwic2hhNTEyXCIpfTt0aGlzLmlzS2V5PWZ1bmN0aW9uKGEpe2lmKGEgaW5zdGFuY2VvZiBSU0FLZXl8fGEgaW5zdGFuY2VvZiBLSlVSLmNyeXB0by5EU0F8fGEgaW5zdGFuY2VvZiBLSlVSLmNyeXB0by5FQ0RTQSl7cmV0dXJuIHRydWV9ZWxzZXtyZXR1cm4gZmFsc2V9fX07S0pVUi5jcnlwdG8uVXRpbC5tZDU9ZnVuY3Rpb24oYSl7dmFyIGI9bmV3IEtKVVIuY3J5cHRvLk1lc3NhZ2VEaWdlc3Qoe2FsZzpcIm1kNVwiLHByb3Y6XCJjcnlwdG9qc1wifSk7cmV0dXJuIGIuZGlnZXN0U3RyaW5nKGEpfTtLSlVSLmNyeXB0by5VdGlsLnJpcGVtZDE2MD1mdW5jdGlvbihhKXt2YXIgYj1uZXcgS0pVUi5jcnlwdG8uTWVzc2FnZURpZ2VzdCh7YWxnOlwicmlwZW1kMTYwXCIscHJvdjpcImNyeXB0b2pzXCJ9KTtyZXR1cm4gYi5kaWdlc3RTdHJpbmcoYSl9O0tKVVIuY3J5cHRvLlV0aWwuU0VDVVJFUkFORE9NR0VOPW5ldyBTZWN1cmVSYW5kb20oKTtLSlVSLmNyeXB0by5VdGlsLmdldFJhbmRvbUhleE9mTmJ5dGVzPWZ1bmN0aW9uKGIpe3ZhciBhPW5ldyBBcnJheShiKTtLSlVSLmNyeXB0by5VdGlsLlNFQ1VSRVJBTkRPTUdFTi5uZXh0Qnl0ZXMoYSk7cmV0dXJuIEJBdG9oZXgoYSl9O0tKVVIuY3J5cHRvLlV0aWwuZ2V0UmFuZG9tQmlnSW50ZWdlck9mTmJ5dGVzPWZ1bmN0aW9uKGEpe3JldHVybiBuZXcgQmlnSW50ZWdlcihLSlVSLmNyeXB0by5VdGlsLmdldFJhbmRvbUhleE9mTmJ5dGVzKGEpLDE2KX07S0pVUi5jcnlwdG8uVXRpbC5nZXRSYW5kb21IZXhPZk5iaXRzPWZ1bmN0aW9uKGQpe3ZhciBjPWQlODt2YXIgYT0oZC1jKS84O3ZhciBiPW5ldyBBcnJheShhKzEpO0tKVVIuY3J5cHRvLlV0aWwuU0VDVVJFUkFORE9NR0VOLm5leHRCeXRlcyhiKTtiWzBdPSgoKDI1NTw8YykmMjU1KV4yNTUpJmJbMF07cmV0dXJuIEJBdG9oZXgoYil9O0tKVVIuY3J5cHRvLlV0aWwuZ2V0UmFuZG9tQmlnSW50ZWdlck9mTmJpdHM9ZnVuY3Rpb24oYSl7cmV0dXJuIG5ldyBCaWdJbnRlZ2VyKEtKVVIuY3J5cHRvLlV0aWwuZ2V0UmFuZG9tSGV4T2ZOYml0cyhhKSwxNil9O0tKVVIuY3J5cHRvLlV0aWwuZ2V0UmFuZG9tQmlnSW50ZWdlclplcm9Ub01heD1mdW5jdGlvbihiKXt2YXIgYT1iLmJpdExlbmd0aCgpO3doaWxlKDEpe3ZhciBjPUtKVVIuY3J5cHRvLlV0aWwuZ2V0UmFuZG9tQmlnSW50ZWdlck9mTmJpdHMoYSk7aWYoYi5jb21wYXJlVG8oYykhPS0xKXtyZXR1cm4gY319fTtLSlVSLmNyeXB0by5VdGlsLmdldFJhbmRvbUJpZ0ludGVnZXJNaW5Ub01heD1mdW5jdGlvbihlLGIpe3ZhciBjPWUuY29tcGFyZVRvKGIpO2lmKGM9PTEpe3Rocm93XCJiaU1pbiBpcyBncmVhdGVyIHRoYW4gYmlNYXhcIn1pZihjPT0wKXtyZXR1cm4gZX12YXIgYT1iLnN1YnRyYWN0KGUpO3ZhciBkPUtKVVIuY3J5cHRvLlV0aWwuZ2V0UmFuZG9tQmlnSW50ZWdlclplcm9Ub01heChhKTtyZXR1cm4gZC5hZGQoZSl9O0tKVVIuY3J5cHRvLk1lc3NhZ2VEaWdlc3Q9ZnVuY3Rpb24oYyl7dmFyIGI9bnVsbDt2YXIgYT1udWxsO3ZhciBkPW51bGw7dGhpcy5zZXRBbGdBbmRQcm92aWRlcj1mdW5jdGlvbihnLGYpe2c9S0pVUi5jcnlwdG8uTWVzc2FnZURpZ2VzdC5nZXRDYW5vbmljYWxBbGdOYW1lKGcpO2lmKGchPT1udWxsJiZmPT09dW5kZWZpbmVkKXtmPUtKVVIuY3J5cHRvLlV0aWwuREVGQVVMVFBST1ZJREVSW2ddfWlmKFwiOm1kNTpzaGExOnNoYTIyNDpzaGEyNTY6c2hhMzg0OnNoYTUxMjpyaXBlbWQxNjA6XCIuaW5kZXhPZihnKSE9LTEmJmY9PVwiY3J5cHRvanNcIil7dHJ5e3RoaXMubWQ9S0pVUi5jcnlwdG8uVXRpbC5DUllQVE9KU01FU1NBR0VESUdFU1ROQU1FW2ddLmNyZWF0ZSgpfWNhdGNoKGUpe3Rocm93XCJzZXRBbGdBbmRQcm92aWRlciBoYXNoIGFsZyBzZXQgZmFpbCBhbGc9XCIrZytcIi9cIitlfXRoaXMudXBkYXRlU3RyaW5nPWZ1bmN0aW9uKGgpe3RoaXMubWQudXBkYXRlKGgpfTt0aGlzLnVwZGF0ZUhleD1mdW5jdGlvbihoKXt2YXIgaT1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKGgpO3RoaXMubWQudXBkYXRlKGkpfTt0aGlzLmRpZ2VzdD1mdW5jdGlvbigpe3ZhciBoPXRoaXMubWQuZmluYWxpemUoKTtyZXR1cm4gaC50b1N0cmluZyhDcnlwdG9KUy5lbmMuSGV4KX07dGhpcy5kaWdlc3RTdHJpbmc9ZnVuY3Rpb24oaCl7dGhpcy51cGRhdGVTdHJpbmcoaCk7cmV0dXJuIHRoaXMuZGlnZXN0KCl9O3RoaXMuZGlnZXN0SGV4PWZ1bmN0aW9uKGgpe3RoaXMudXBkYXRlSGV4KGgpO3JldHVybiB0aGlzLmRpZ2VzdCgpfX1pZihcIjpzaGEyNTY6XCIuaW5kZXhPZihnKSE9LTEmJmY9PVwic2pjbFwiKXt0cnl7dGhpcy5tZD1uZXcgc2pjbC5oYXNoLnNoYTI1NigpfWNhdGNoKGUpe3Rocm93XCJzZXRBbGdBbmRQcm92aWRlciBoYXNoIGFsZyBzZXQgZmFpbCBhbGc9XCIrZytcIi9cIitlfXRoaXMudXBkYXRlU3RyaW5nPWZ1bmN0aW9uKGgpe3RoaXMubWQudXBkYXRlKGgpfTt0aGlzLnVwZGF0ZUhleD1mdW5jdGlvbihpKXt2YXIgaD1zamNsLmNvZGVjLmhleC50b0JpdHMoaSk7dGhpcy5tZC51cGRhdGUoaCl9O3RoaXMuZGlnZXN0PWZ1bmN0aW9uKCl7dmFyIGg9dGhpcy5tZC5maW5hbGl6ZSgpO3JldHVybiBzamNsLmNvZGVjLmhleC5mcm9tQml0cyhoKX07dGhpcy5kaWdlc3RTdHJpbmc9ZnVuY3Rpb24oaCl7dGhpcy51cGRhdGVTdHJpbmcoaCk7cmV0dXJuIHRoaXMuZGlnZXN0KCl9O3RoaXMuZGlnZXN0SGV4PWZ1bmN0aW9uKGgpe3RoaXMudXBkYXRlSGV4KGgpO3JldHVybiB0aGlzLmRpZ2VzdCgpfX19O3RoaXMudXBkYXRlU3RyaW5nPWZ1bmN0aW9uKGUpe3Rocm93XCJ1cGRhdGVTdHJpbmcoc3RyKSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZy9wcm92OiBcIit0aGlzLmFsZ05hbWUrXCIvXCIrdGhpcy5wcm92TmFtZX07dGhpcy51cGRhdGVIZXg9ZnVuY3Rpb24oZSl7dGhyb3dcInVwZGF0ZUhleChoZXgpIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgYWxnL3Byb3Y6IFwiK3RoaXMuYWxnTmFtZStcIi9cIit0aGlzLnByb3ZOYW1lfTt0aGlzLmRpZ2VzdD1mdW5jdGlvbigpe3Rocm93XCJkaWdlc3QoKSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZy9wcm92OiBcIit0aGlzLmFsZ05hbWUrXCIvXCIrdGhpcy5wcm92TmFtZX07dGhpcy5kaWdlc3RTdHJpbmc9ZnVuY3Rpb24oZSl7dGhyb3dcImRpZ2VzdFN0cmluZyhzdHIpIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgYWxnL3Byb3Y6IFwiK3RoaXMuYWxnTmFtZStcIi9cIit0aGlzLnByb3ZOYW1lfTt0aGlzLmRpZ2VzdEhleD1mdW5jdGlvbihlKXt0aHJvd1wiZGlnZXN0SGV4KGhleCkgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBhbGcvcHJvdjogXCIrdGhpcy5hbGdOYW1lK1wiL1wiK3RoaXMucHJvdk5hbWV9O2lmKGMhPT11bmRlZmluZWQpe2lmKGMuYWxnIT09dW5kZWZpbmVkKXt0aGlzLmFsZ05hbWU9Yy5hbGc7aWYoYy5wcm92PT09dW5kZWZpbmVkKXt0aGlzLnByb3ZOYW1lPUtKVVIuY3J5cHRvLlV0aWwuREVGQVVMVFBST1ZJREVSW3RoaXMuYWxnTmFtZV19dGhpcy5zZXRBbGdBbmRQcm92aWRlcih0aGlzLmFsZ05hbWUsdGhpcy5wcm92TmFtZSl9fX07S0pVUi5jcnlwdG8uTWVzc2FnZURpZ2VzdC5nZXRDYW5vbmljYWxBbGdOYW1lPWZ1bmN0aW9uKGEpe2lmKHR5cGVvZiBhPT09XCJzdHJpbmdcIil7YT1hLnRvTG93ZXJDYXNlKCk7YT1hLnJlcGxhY2UoLy0vLFwiXCIpfXJldHVybiBhfTtLSlVSLmNyeXB0by5NZXNzYWdlRGlnZXN0LmdldEhhc2hMZW5ndGg9ZnVuY3Rpb24oYyl7dmFyIGI9S0pVUi5jcnlwdG8uTWVzc2FnZURpZ2VzdDt2YXIgYT1iLmdldENhbm9uaWNhbEFsZ05hbWUoYyk7aWYoYi5IQVNITEVOR1RIW2FdPT09dW5kZWZpbmVkKXt0aHJvd1wibm90IHN1cHBvcnRlZCBhbGdvcml0aG06IFwiK2N9cmV0dXJuIGIuSEFTSExFTkdUSFthXX07S0pVUi5jcnlwdG8uTWVzc2FnZURpZ2VzdC5IQVNITEVOR1RIPXttZDU6MTYsc2hhMToyMCxzaGEyMjQ6Mjgsc2hhMjU2OjMyLHNoYTM4NDo0OCxzaGE1MTI6NjQscmlwZW1kMTYwOjIwfTtLSlVSLmNyeXB0by5NYWM9ZnVuY3Rpb24oZCl7dmFyIGY9bnVsbDt2YXIgYz1udWxsO3ZhciBhPW51bGw7dmFyIGU9bnVsbDt2YXIgYj1udWxsO3RoaXMuc2V0QWxnQW5kUHJvdmlkZXI9ZnVuY3Rpb24oayxpKXtrPWsudG9Mb3dlckNhc2UoKTtpZihrPT1udWxsKXtrPVwiaG1hY3NoYTFcIn1rPWsudG9Mb3dlckNhc2UoKTtpZihrLnN1YnN0cigwLDQpIT1cImhtYWNcIil7dGhyb3dcInNldEFsZ0FuZFByb3ZpZGVyIHVuc3VwcG9ydGVkIEhNQUMgYWxnOiBcIitrfWlmKGk9PT11bmRlZmluZWQpe2k9S0pVUi5jcnlwdG8uVXRpbC5ERUZBVUxUUFJPVklERVJba119dGhpcy5hbGdQcm92PWsrXCIvXCIraTt2YXIgZz1rLnN1YnN0cig0KTtpZihcIjptZDU6c2hhMTpzaGEyMjQ6c2hhMjU2OnNoYTM4NDpzaGE1MTI6cmlwZW1kMTYwOlwiLmluZGV4T2YoZykhPS0xJiZpPT1cImNyeXB0b2pzXCIpe3RyeXt2YXIgaj1LSlVSLmNyeXB0by5VdGlsLkNSWVBUT0pTTUVTU0FHRURJR0VTVE5BTUVbZ107dGhpcy5tYWM9Q3J5cHRvSlMuYWxnby5ITUFDLmNyZWF0ZShqLHRoaXMucGFzcyl9Y2F0Y2goaCl7dGhyb3dcInNldEFsZ0FuZFByb3ZpZGVyIGhhc2ggYWxnIHNldCBmYWlsIGhhc2hBbGc9XCIrZytcIi9cIitofXRoaXMudXBkYXRlU3RyaW5nPWZ1bmN0aW9uKGwpe3RoaXMubWFjLnVwZGF0ZShsKX07dGhpcy51cGRhdGVIZXg9ZnVuY3Rpb24obCl7dmFyIG09Q3J5cHRvSlMuZW5jLkhleC5wYXJzZShsKTt0aGlzLm1hYy51cGRhdGUobSl9O3RoaXMuZG9GaW5hbD1mdW5jdGlvbigpe3ZhciBsPXRoaXMubWFjLmZpbmFsaXplKCk7cmV0dXJuIGwudG9TdHJpbmcoQ3J5cHRvSlMuZW5jLkhleCl9O3RoaXMuZG9GaW5hbFN0cmluZz1mdW5jdGlvbihsKXt0aGlzLnVwZGF0ZVN0cmluZyhsKTtyZXR1cm4gdGhpcy5kb0ZpbmFsKCl9O3RoaXMuZG9GaW5hbEhleD1mdW5jdGlvbihsKXt0aGlzLnVwZGF0ZUhleChsKTtyZXR1cm4gdGhpcy5kb0ZpbmFsKCl9fX07dGhpcy51cGRhdGVTdHJpbmc9ZnVuY3Rpb24oZyl7dGhyb3dcInVwZGF0ZVN0cmluZyhzdHIpIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgYWxnL3Byb3Y6IFwiK3RoaXMuYWxnUHJvdn07dGhpcy51cGRhdGVIZXg9ZnVuY3Rpb24oZyl7dGhyb3dcInVwZGF0ZUhleChoZXgpIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgYWxnL3Byb3Y6IFwiK3RoaXMuYWxnUHJvdn07dGhpcy5kb0ZpbmFsPWZ1bmN0aW9uKCl7dGhyb3dcImRpZ2VzdCgpIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgYWxnL3Byb3Y6IFwiK3RoaXMuYWxnUHJvdn07dGhpcy5kb0ZpbmFsU3RyaW5nPWZ1bmN0aW9uKGcpe3Rocm93XCJkaWdlc3RTdHJpbmcoc3RyKSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZy9wcm92OiBcIit0aGlzLmFsZ1Byb3Z9O3RoaXMuZG9GaW5hbEhleD1mdW5jdGlvbihnKXt0aHJvd1wiZGlnZXN0SGV4KGhleCkgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBhbGcvcHJvdjogXCIrdGhpcy5hbGdQcm92fTt0aGlzLnNldFBhc3N3b3JkPWZ1bmN0aW9uKGgpe2lmKHR5cGVvZiBoPT1cInN0cmluZ1wiKXt2YXIgZz1oO2lmKGgubGVuZ3RoJTI9PTF8fCFoLm1hdGNoKC9eWzAtOUEtRmEtZl0rJC8pKXtnPXJzdHJ0b2hleChoKX10aGlzLnBhc3M9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZShnKTtyZXR1cm59aWYodHlwZW9mIGghPVwib2JqZWN0XCIpe3Rocm93XCJLSlVSLmNyeXB0by5NYWMgdW5zdXBwb3J0ZWQgcGFzc3dvcmQgdHlwZTogXCIraH12YXIgZz1udWxsO2lmKGguaGV4IT09dW5kZWZpbmVkKXtpZihoLmhleC5sZW5ndGglMiE9MHx8IWguaGV4Lm1hdGNoKC9eWzAtOUEtRmEtZl0rJC8pKXt0aHJvd1wiTWFjOiB3cm9uZyBoZXggcGFzc3dvcmQ6IFwiK2guaGV4fWc9aC5oZXh9aWYoaC51dGY4IT09dW5kZWZpbmVkKXtnPXV0Zjh0b2hleChoLnV0ZjgpfWlmKGgucnN0ciE9PXVuZGVmaW5lZCl7Zz1yc3RydG9oZXgoaC5yc3RyKX1pZihoLmI2NCE9PXVuZGVmaW5lZCl7Zz1iNjR0b2hleChoLmI2NCl9aWYoaC5iNjR1IT09dW5kZWZpbmVkKXtnPWI2NHV0b2hleChoLmI2NHUpfWlmKGc9PW51bGwpe3Rocm93XCJLSlVSLmNyeXB0by5NYWMgdW5zdXBwb3J0ZWQgcGFzc3dvcmQgdHlwZTogXCIraH10aGlzLnBhc3M9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZShnKX07aWYoZCE9PXVuZGVmaW5lZCl7aWYoZC5wYXNzIT09dW5kZWZpbmVkKXt0aGlzLnNldFBhc3N3b3JkKGQucGFzcyl9aWYoZC5hbGchPT11bmRlZmluZWQpe3RoaXMuYWxnTmFtZT1kLmFsZztpZihkLnByb3Y9PT11bmRlZmluZWQpe3RoaXMucHJvdk5hbWU9S0pVUi5jcnlwdG8uVXRpbC5ERUZBVUxUUFJPVklERVJbdGhpcy5hbGdOYW1lXX10aGlzLnNldEFsZ0FuZFByb3ZpZGVyKHRoaXMuYWxnTmFtZSx0aGlzLnByb3ZOYW1lKX19fTtLSlVSLmNyeXB0by5TaWduYXR1cmU9ZnVuY3Rpb24obyl7dmFyIHE9bnVsbDt2YXIgbj1udWxsO3ZhciByPW51bGw7dmFyIGM9bnVsbDt2YXIgbD1udWxsO3ZhciBkPW51bGw7dmFyIGs9bnVsbDt2YXIgaD1udWxsO3ZhciBwPW51bGw7dmFyIGU9bnVsbDt2YXIgYj0tMTt2YXIgZz1udWxsO3ZhciBqPW51bGw7dmFyIGE9bnVsbDt2YXIgaT1udWxsO3ZhciBmPW51bGw7dGhpcy5fc2V0QWxnTmFtZXM9ZnVuY3Rpb24oKXt2YXIgcz10aGlzLmFsZ05hbWUubWF0Y2goL14oLispd2l0aCguKykkLyk7aWYocyl7dGhpcy5tZEFsZ05hbWU9c1sxXS50b0xvd2VyQ2FzZSgpO3RoaXMucHVia2V5QWxnTmFtZT1zWzJdLnRvTG93ZXJDYXNlKCk7aWYodGhpcy5wdWJrZXlBbGdOYW1lPT1cInJzYWFuZG1nZjFcIiYmdGhpcy5tZEFsZ05hbWU9PVwic2hhXCIpe3RoaXMubWRBbGdOYW1lPVwic2hhMVwifX19O3RoaXMuX3plcm9QYWRkaW5nT2ZTaWduYXR1cmU9ZnVuY3Rpb24oeCx3KXt2YXIgdj1cIlwiO3ZhciB0PXcvNC14Lmxlbmd0aDtmb3IodmFyIHU9MDt1PHQ7dSsrKXt2PXYrXCIwXCJ9cmV0dXJuIHYreH07dGhpcy5zZXRBbGdBbmRQcm92aWRlcj1mdW5jdGlvbih1LHQpe3RoaXMuX3NldEFsZ05hbWVzKCk7aWYodCE9XCJjcnlwdG9qcy9qc3JzYVwiKXt0aHJvdyBuZXcgRXJyb3IoXCJwcm92aWRlciBub3Qgc3VwcG9ydGVkOiBcIit0KX1pZihcIjptZDU6c2hhMTpzaGEyMjQ6c2hhMjU2OnNoYTM4NDpzaGE1MTI6cmlwZW1kMTYwOlwiLmluZGV4T2YodGhpcy5tZEFsZ05hbWUpIT0tMSl7dHJ5e3RoaXMubWQ9bmV3IEtKVVIuY3J5cHRvLk1lc3NhZ2VEaWdlc3Qoe2FsZzp0aGlzLm1kQWxnTmFtZX0pfWNhdGNoKHMpe3Rocm93IG5ldyBFcnJvcihcInNldEFsZ0FuZFByb3ZpZGVyIGhhc2ggYWxnIHNldCBmYWlsIGFsZz1cIit0aGlzLm1kQWxnTmFtZStcIi9cIitzKX10aGlzLmluaXQ9ZnVuY3Rpb24odyx4KXt2YXIgeT1udWxsO3RyeXtpZih4PT09dW5kZWZpbmVkKXt5PUtFWVVUSUwuZ2V0S2V5KHcpfWVsc2V7eT1LRVlVVElMLmdldEtleSh3LHgpfX1jYXRjaCh2KXt0aHJvd1wiaW5pdCBmYWlsZWQ6XCIrdn1pZih5LmlzUHJpdmF0ZT09PXRydWUpe3RoaXMucHJ2S2V5PXk7dGhpcy5zdGF0ZT1cIlNJR05cIn1lbHNle2lmKHkuaXNQdWJsaWM9PT10cnVlKXt0aGlzLnB1YktleT15O3RoaXMuc3RhdGU9XCJWRVJJRllcIn1lbHNle3Rocm93XCJpbml0IGZhaWxlZC46XCIreX19fTt0aGlzLnVwZGF0ZVN0cmluZz1mdW5jdGlvbih2KXt0aGlzLm1kLnVwZGF0ZVN0cmluZyh2KX07dGhpcy51cGRhdGVIZXg9ZnVuY3Rpb24odil7dGhpcy5tZC51cGRhdGVIZXgodil9O3RoaXMuc2lnbj1mdW5jdGlvbigpe3RoaXMuc0hhc2hIZXg9dGhpcy5tZC5kaWdlc3QoKTtpZih0aGlzLnBydktleT09PXVuZGVmaW5lZCYmdGhpcy5lY3BydmhleCE9PXVuZGVmaW5lZCYmdGhpcy5lY2N1cnZlbmFtZSE9PXVuZGVmaW5lZCYmS0pVUi5jcnlwdG8uRUNEU0EhPT11bmRlZmluZWQpe3RoaXMucHJ2S2V5PW5ldyBLSlVSLmNyeXB0by5FQ0RTQSh7Y3VydmU6dGhpcy5lY2N1cnZlbmFtZSxwcnY6dGhpcy5lY3BydmhleH0pfWlmKHRoaXMucHJ2S2V5IGluc3RhbmNlb2YgUlNBS2V5JiZ0aGlzLnB1YmtleUFsZ05hbWU9PT1cInJzYWFuZG1nZjFcIil7dGhpcy5oU2lnbj10aGlzLnBydktleS5zaWduV2l0aE1lc3NhZ2VIYXNoUFNTKHRoaXMuc0hhc2hIZXgsdGhpcy5tZEFsZ05hbWUsdGhpcy5wc3NTYWx0TGVuKX1lbHNle2lmKHRoaXMucHJ2S2V5IGluc3RhbmNlb2YgUlNBS2V5JiZ0aGlzLnB1YmtleUFsZ05hbWU9PT1cInJzYVwiKXt0aGlzLmhTaWduPXRoaXMucHJ2S2V5LnNpZ25XaXRoTWVzc2FnZUhhc2godGhpcy5zSGFzaEhleCx0aGlzLm1kQWxnTmFtZSl9ZWxzZXtpZih0aGlzLnBydktleSBpbnN0YW5jZW9mIEtKVVIuY3J5cHRvLkVDRFNBKXt0aGlzLmhTaWduPXRoaXMucHJ2S2V5LnNpZ25XaXRoTWVzc2FnZUhhc2godGhpcy5zSGFzaEhleCl9ZWxzZXtpZih0aGlzLnBydktleSBpbnN0YW5jZW9mIEtKVVIuY3J5cHRvLkRTQSl7dGhpcy5oU2lnbj10aGlzLnBydktleS5zaWduV2l0aE1lc3NhZ2VIYXNoKHRoaXMuc0hhc2hIZXgpfWVsc2V7dGhyb3dcIlNpZ25hdHVyZTogdW5zdXBwb3J0ZWQgcHJpdmF0ZSBrZXkgYWxnOiBcIit0aGlzLnB1YmtleUFsZ05hbWV9fX19cmV0dXJuIHRoaXMuaFNpZ259O3RoaXMuc2lnblN0cmluZz1mdW5jdGlvbih2KXt0aGlzLnVwZGF0ZVN0cmluZyh2KTtyZXR1cm4gdGhpcy5zaWduKCl9O3RoaXMuc2lnbkhleD1mdW5jdGlvbih2KXt0aGlzLnVwZGF0ZUhleCh2KTtyZXR1cm4gdGhpcy5zaWduKCl9O3RoaXMudmVyaWZ5PWZ1bmN0aW9uKHYpe3RoaXMuc0hhc2hIZXg9dGhpcy5tZC5kaWdlc3QoKTtpZih0aGlzLnB1YktleT09PXVuZGVmaW5lZCYmdGhpcy5lY3B1YmhleCE9PXVuZGVmaW5lZCYmdGhpcy5lY2N1cnZlbmFtZSE9PXVuZGVmaW5lZCYmS0pVUi5jcnlwdG8uRUNEU0EhPT11bmRlZmluZWQpe3RoaXMucHViS2V5PW5ldyBLSlVSLmNyeXB0by5FQ0RTQSh7Y3VydmU6dGhpcy5lY2N1cnZlbmFtZSxwdWI6dGhpcy5lY3B1YmhleH0pfWlmKHRoaXMucHViS2V5IGluc3RhbmNlb2YgUlNBS2V5JiZ0aGlzLnB1YmtleUFsZ05hbWU9PT1cInJzYWFuZG1nZjFcIil7cmV0dXJuIHRoaXMucHViS2V5LnZlcmlmeVdpdGhNZXNzYWdlSGFzaFBTUyh0aGlzLnNIYXNoSGV4LHYsdGhpcy5tZEFsZ05hbWUsdGhpcy5wc3NTYWx0TGVuKX1lbHNle2lmKHRoaXMucHViS2V5IGluc3RhbmNlb2YgUlNBS2V5JiZ0aGlzLnB1YmtleUFsZ05hbWU9PT1cInJzYVwiKXtyZXR1cm4gdGhpcy5wdWJLZXkudmVyaWZ5V2l0aE1lc3NhZ2VIYXNoKHRoaXMuc0hhc2hIZXgsdil9ZWxzZXtpZihLSlVSLmNyeXB0by5FQ0RTQSE9PXVuZGVmaW5lZCYmdGhpcy5wdWJLZXkgaW5zdGFuY2VvZiBLSlVSLmNyeXB0by5FQ0RTQSl7cmV0dXJuIHRoaXMucHViS2V5LnZlcmlmeVdpdGhNZXNzYWdlSGFzaCh0aGlzLnNIYXNoSGV4LHYpfWVsc2V7aWYoS0pVUi5jcnlwdG8uRFNBIT09dW5kZWZpbmVkJiZ0aGlzLnB1YktleSBpbnN0YW5jZW9mIEtKVVIuY3J5cHRvLkRTQSl7cmV0dXJuIHRoaXMucHViS2V5LnZlcmlmeVdpdGhNZXNzYWdlSGFzaCh0aGlzLnNIYXNoSGV4LHYpfWVsc2V7dGhyb3dcIlNpZ25hdHVyZTogdW5zdXBwb3J0ZWQgcHVibGljIGtleSBhbGc6IFwiK3RoaXMucHVia2V5QWxnTmFtZX19fX19fX07dGhpcy5pbml0PWZ1bmN0aW9uKHMsdCl7dGhyb3dcImluaXQoa2V5LCBwYXNzKSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZzpwcm92PVwiK3RoaXMuYWxnUHJvdk5hbWV9O3RoaXMudXBkYXRlU3RyaW5nPWZ1bmN0aW9uKHMpe3Rocm93XCJ1cGRhdGVTdHJpbmcoc3RyKSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZzpwcm92PVwiK3RoaXMuYWxnUHJvdk5hbWV9O3RoaXMudXBkYXRlSGV4PWZ1bmN0aW9uKHMpe3Rocm93XCJ1cGRhdGVIZXgoaGV4KSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZzpwcm92PVwiK3RoaXMuYWxnUHJvdk5hbWV9O3RoaXMuc2lnbj1mdW5jdGlvbigpe3Rocm93XCJzaWduKCkgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBhbGc6cHJvdj1cIit0aGlzLmFsZ1Byb3ZOYW1lfTt0aGlzLnNpZ25TdHJpbmc9ZnVuY3Rpb24ocyl7dGhyb3dcImRpZ2VzdFN0cmluZyhzdHIpIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgYWxnOnByb3Y9XCIrdGhpcy5hbGdQcm92TmFtZX07dGhpcy5zaWduSGV4PWZ1bmN0aW9uKHMpe3Rocm93XCJkaWdlc3RIZXgoaGV4KSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZzpwcm92PVwiK3RoaXMuYWxnUHJvdk5hbWV9O3RoaXMudmVyaWZ5PWZ1bmN0aW9uKHMpe3Rocm93XCJ2ZXJpZnkoaFNpZ1ZhbCkgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBhbGc6cHJvdj1cIit0aGlzLmFsZ1Byb3ZOYW1lfTt0aGlzLmluaXRQYXJhbXM9bztpZihvIT09dW5kZWZpbmVkKXtpZihvLmFsZyE9PXVuZGVmaW5lZCl7dGhpcy5hbGdOYW1lPW8uYWxnO2lmKG8ucHJvdj09PXVuZGVmaW5lZCl7dGhpcy5wcm92TmFtZT1LSlVSLmNyeXB0by5VdGlsLkRFRkFVTFRQUk9WSURFUlt0aGlzLmFsZ05hbWVdfWVsc2V7dGhpcy5wcm92TmFtZT1vLnByb3Z9dGhpcy5hbGdQcm92TmFtZT10aGlzLmFsZ05hbWUrXCI6XCIrdGhpcy5wcm92TmFtZTt0aGlzLnNldEFsZ0FuZFByb3ZpZGVyKHRoaXMuYWxnTmFtZSx0aGlzLnByb3ZOYW1lKTt0aGlzLl9zZXRBbGdOYW1lcygpfWlmKG8ucHNzc2FsdGxlbiE9PXVuZGVmaW5lZCl7dGhpcy5wc3NTYWx0TGVuPW8ucHNzc2FsdGxlbn1pZihvLnBydmtleXBlbSE9PXVuZGVmaW5lZCl7aWYoby5wcnZrZXlwYXMhPT11bmRlZmluZWQpe3Rocm93XCJib3RoIHBydmtleXBlbSBhbmQgcHJ2a2V5cGFzIHBhcmFtZXRlcnMgbm90IHN1cHBvcnRlZFwifWVsc2V7dHJ5e3ZhciBxPUtFWVVUSUwuZ2V0S2V5KG8ucHJ2a2V5cGVtKTt0aGlzLmluaXQocSl9Y2F0Y2gobSl7dGhyb3dcImZhdGFsIGVycm9yIHRvIGxvYWQgcGVtIHByaXZhdGUga2V5OiBcIittfX19fX07S0pVUi5jcnlwdG8uQ2lwaGVyPWZ1bmN0aW9uKGEpe307S0pVUi5jcnlwdG8uQ2lwaGVyLmVuY3J5cHQ9ZnVuY3Rpb24oZSxmLGQpe2lmKGYgaW5zdGFuY2VvZiBSU0FLZXkmJmYuaXNQdWJsaWMpe3ZhciBjPUtKVVIuY3J5cHRvLkNpcGhlci5nZXRBbGdCeUtleUFuZE5hbWUoZixkKTtpZihjPT09XCJSU0FcIil7cmV0dXJuIGYuZW5jcnlwdChlKX1pZihjPT09XCJSU0FPQUVQXCIpe3JldHVybiBmLmVuY3J5cHRPQUVQKGUsXCJzaGExXCIpfXZhciBiPWMubWF0Y2goL15SU0FPQUVQKFxcZCspJC8pO2lmKGIhPT1udWxsKXtyZXR1cm4gZi5lbmNyeXB0T0FFUChlLFwic2hhXCIrYlsxXSl9dGhyb3dcIkNpcGhlci5lbmNyeXB0OiB1bnN1cHBvcnRlZCBhbGdvcml0aG0gZm9yIFJTQUtleTogXCIrZH1lbHNle3Rocm93XCJDaXBoZXIuZW5jcnlwdDogdW5zdXBwb3J0ZWQga2V5IG9yIGFsZ29yaXRobVwifX07S0pVUi5jcnlwdG8uQ2lwaGVyLmRlY3J5cHQ9ZnVuY3Rpb24oZSxmLGQpe2lmKGYgaW5zdGFuY2VvZiBSU0FLZXkmJmYuaXNQcml2YXRlKXt2YXIgYz1LSlVSLmNyeXB0by5DaXBoZXIuZ2V0QWxnQnlLZXlBbmROYW1lKGYsZCk7aWYoYz09PVwiUlNBXCIpe3JldHVybiBmLmRlY3J5cHQoZSl9aWYoYz09PVwiUlNBT0FFUFwiKXtyZXR1cm4gZi5kZWNyeXB0T0FFUChlLFwic2hhMVwiKX12YXIgYj1jLm1hdGNoKC9eUlNBT0FFUChcXGQrKSQvKTtpZihiIT09bnVsbCl7cmV0dXJuIGYuZGVjcnlwdE9BRVAoZSxcInNoYVwiK2JbMV0pfXRocm93XCJDaXBoZXIuZGVjcnlwdDogdW5zdXBwb3J0ZWQgYWxnb3JpdGhtIGZvciBSU0FLZXk6IFwiK2R9ZWxzZXt0aHJvd1wiQ2lwaGVyLmRlY3J5cHQ6IHVuc3VwcG9ydGVkIGtleSBvciBhbGdvcml0aG1cIn19O0tKVVIuY3J5cHRvLkNpcGhlci5nZXRBbGdCeUtleUFuZE5hbWU9ZnVuY3Rpb24oYixhKXtpZihiIGluc3RhbmNlb2YgUlNBS2V5KXtpZihcIjpSU0E6UlNBT0FFUDpSU0FPQUVQMjI0OlJTQU9BRVAyNTY6UlNBT0FFUDM4NDpSU0FPQUVQNTEyOlwiLmluZGV4T2YoYSkhPS0xKXtyZXR1cm4gYX1pZihhPT09bnVsbHx8YT09PXVuZGVmaW5lZCl7cmV0dXJuXCJSU0FcIn10aHJvd1wiZ2V0QWxnQnlLZXlBbmROYW1lOiBub3Qgc3VwcG9ydGVkIGFsZ29yaXRobSBuYW1lIGZvciBSU0FLZXk6IFwiK2F9dGhyb3dcImdldEFsZ0J5S2V5QW5kTmFtZTogbm90IHN1cHBvcnRlZCBhbGdvcml0aG0gbmFtZTogXCIrYX07S0pVUi5jcnlwdG8uT0lEPW5ldyBmdW5jdGlvbigpe3RoaXMub2lkaGV4Mm5hbWU9e1wiMmE4NjQ4ODZmNzBkMDEwMTAxXCI6XCJyc2FFbmNyeXB0aW9uXCIsXCIyYTg2NDhjZTNkMDIwMVwiOlwiZWNQdWJsaWNLZXlcIixcIjJhODY0OGNlMzgwNDAxXCI6XCJkc2FcIixcIjJhODY0OGNlM2QwMzAxMDdcIjpcInNlY3AyNTZyMVwiLFwiMmI4MTA0MDAxZlwiOlwic2VjcDE5MmsxXCIsXCIyYjgxMDQwMDIxXCI6XCJzZWNwMjI0cjFcIixcIjJiODEwNDAwMGFcIjpcInNlY3AyNTZrMVwiLFwiMmI4MTA0MDAyM1wiOlwic2VjcDUyMXIxXCIsXCIyYjgxMDQwMDIyXCI6XCJzZWNwMzg0cjFcIixcIjJhODY0OGNlMzgwNDAzXCI6XCJTSEExd2l0aERTQVwiLFwiNjA4NjQ4MDE2NTAzMDQwMzAxXCI6XCJTSEEyMjR3aXRoRFNBXCIsXCI2MDg2NDgwMTY1MDMwNDAzMDJcIjpcIlNIQTI1NndpdGhEU0FcIix9fTtcbmlmKHR5cGVvZiBLSlVSPT1cInVuZGVmaW5lZFwifHwhS0pVUil7S0pVUj17fX1pZih0eXBlb2YgS0pVUi5jcnlwdG89PVwidW5kZWZpbmVkXCJ8fCFLSlVSLmNyeXB0byl7S0pVUi5jcnlwdG89e319S0pVUi5jcnlwdG8uRUNEU0E9ZnVuY3Rpb24oZSl7dmFyIGc9XCJzZWNwMjU2cjFcIjt2YXIgcD1udWxsO3ZhciBiPW51bGw7dmFyIGk9bnVsbDt2YXIgaj1FcnJvcixmPUJpZ0ludGVnZXIsaD1FQ1BvaW50RnAsbT1LSlVSLmNyeXB0by5FQ0RTQSxjPUtKVVIuY3J5cHRvLkVDUGFyYW1ldGVyREIsZD1tLmdldE5hbWUscT1BU04xSEVYLG49cS5nZXRWYnlMaXN0RXgsaz1xLmlzQVNOMUhFWDt2YXIgYT1uZXcgU2VjdXJlUmFuZG9tKCk7dmFyIG89bnVsbDt0aGlzLnR5cGU9XCJFQ1wiO3RoaXMuaXNQcml2YXRlPWZhbHNlO3RoaXMuaXNQdWJsaWM9ZmFsc2U7ZnVuY3Rpb24gbCh4LHQsdyxzKXt2YXIgcj1NYXRoLm1heCh0LmJpdExlbmd0aCgpLHMuYml0TGVuZ3RoKCkpO3ZhciB5PXguYWRkMkQodyk7dmFyIHY9eC5jdXJ2ZS5nZXRJbmZpbml0eSgpO2Zvcih2YXIgdT1yLTE7dT49MDstLXUpe3Y9di50d2ljZTJEKCk7di56PWYuT05FO2lmKHQudGVzdEJpdCh1KSl7aWYocy50ZXN0Qml0KHUpKXt2PXYuYWRkMkQoeSl9ZWxzZXt2PXYuYWRkMkQoeCl9fWVsc2V7aWYocy50ZXN0Qml0KHUpKXt2PXYuYWRkMkQodyl9fX1yZXR1cm4gdn10aGlzLmdldEJpZ1JhbmRvbT1mdW5jdGlvbihyKXtyZXR1cm4gbmV3IGYoci5iaXRMZW5ndGgoKSxhKS5tb2Qoci5zdWJ0cmFjdChmLk9ORSkpLmFkZChmLk9ORSl9O3RoaXMuc2V0TmFtZWRDdXJ2ZT1mdW5jdGlvbihyKXt0aGlzLmVjcGFyYW1zPWMuZ2V0QnlOYW1lKHIpO3RoaXMucHJ2S2V5SGV4PW51bGw7dGhpcy5wdWJLZXlIZXg9bnVsbDt0aGlzLmN1cnZlTmFtZT1yfTt0aGlzLnNldFByaXZhdGVLZXlIZXg9ZnVuY3Rpb24ocil7dGhpcy5pc1ByaXZhdGU9dHJ1ZTt0aGlzLnBydktleUhleD1yfTt0aGlzLnNldFB1YmxpY0tleUhleD1mdW5jdGlvbihyKXt0aGlzLmlzUHVibGljPXRydWU7dGhpcy5wdWJLZXlIZXg9cn07dGhpcy5nZXRQdWJsaWNLZXlYWUhleD1mdW5jdGlvbigpe3ZhciB0PXRoaXMucHViS2V5SGV4O2lmKHQuc3Vic3RyKDAsMikhPT1cIjA0XCIpe3Rocm93XCJ0aGlzIG1ldGhvZCBzdXBwb3J0cyB1bmNvbXByZXNzZWQgZm9ybWF0KDA0KSBvbmx5XCJ9dmFyIHM9dGhpcy5lY3BhcmFtcy5rZXlsZW4vNDtpZih0Lmxlbmd0aCE9PTIrcyoyKXt0aHJvd1wibWFsZm9ybWVkIHB1YmxpYyBrZXkgaGV4IGxlbmd0aFwifXZhciByPXt9O3IueD10LnN1YnN0cigyLHMpO3IueT10LnN1YnN0cigyK3MpO3JldHVybiByfTt0aGlzLmdldFNob3J0TklTVFBDdXJ2ZU5hbWU9ZnVuY3Rpb24oKXt2YXIgcj10aGlzLmN1cnZlTmFtZTtpZihyPT09XCJzZWNwMjU2cjFcInx8cj09PVwiTklTVCBQLTI1NlwifHxyPT09XCJQLTI1NlwifHxyPT09XCJwcmltZTI1NnYxXCIpe3JldHVyblwiUC0yNTZcIn1pZihyPT09XCJzZWNwMzg0cjFcInx8cj09PVwiTklTVCBQLTM4NFwifHxyPT09XCJQLTM4NFwiKXtyZXR1cm5cIlAtMzg0XCJ9cmV0dXJuIG51bGx9O3RoaXMuZ2VuZXJhdGVLZXlQYWlySGV4PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5lY3BhcmFtcy5uO3ZhciB3PXRoaXMuZ2V0QmlnUmFuZG9tKHQpO3ZhciB1PXRoaXMuZWNwYXJhbXMuRy5tdWx0aXBseSh3KTt2YXIgej11LmdldFgoKS50b0JpZ0ludGVnZXIoKTt2YXIgeD11LmdldFkoKS50b0JpZ0ludGVnZXIoKTt2YXIgcj10aGlzLmVjcGFyYW1zLmtleWxlbi80O3ZhciB2PShcIjAwMDAwMDAwMDBcIit3LnRvU3RyaW5nKDE2KSkuc2xpY2UoLXIpO3ZhciBBPShcIjAwMDAwMDAwMDBcIit6LnRvU3RyaW5nKDE2KSkuc2xpY2UoLXIpO3ZhciB5PShcIjAwMDAwMDAwMDBcIit4LnRvU3RyaW5nKDE2KSkuc2xpY2UoLXIpO3ZhciBzPVwiMDRcIitBK3k7dGhpcy5zZXRQcml2YXRlS2V5SGV4KHYpO3RoaXMuc2V0UHVibGljS2V5SGV4KHMpO3JldHVybntlY3BydmhleDp2LGVjcHViaGV4OnN9fTt0aGlzLnNpZ25XaXRoTWVzc2FnZUhhc2g9ZnVuY3Rpb24ocil7cmV0dXJuIHRoaXMuc2lnbkhleChyLHRoaXMucHJ2S2V5SGV4KX07dGhpcy5zaWduSGV4PWZ1bmN0aW9uKHgsdSl7dmFyIEE9bmV3IGYodSwxNik7dmFyIHY9dGhpcy5lY3BhcmFtcy5uO3ZhciB6PW5ldyBmKHguc3Vic3RyaW5nKDAsdGhpcy5lY3BhcmFtcy5rZXlsZW4vNCksMTYpO2Rve3ZhciB3PXRoaXMuZ2V0QmlnUmFuZG9tKHYpO3ZhciBCPXRoaXMuZWNwYXJhbXMuRzt2YXIgeT1CLm11bHRpcGx5KHcpO3ZhciB0PXkuZ2V0WCgpLnRvQmlnSW50ZWdlcigpLm1vZCh2KX13aGlsZSh0LmNvbXBhcmVUbyhmLlpFUk8pPD0wKTt2YXIgQz13Lm1vZEludmVyc2UodikubXVsdGlwbHkoei5hZGQoQS5tdWx0aXBseSh0KSkpLm1vZCh2KTtyZXR1cm4gbS5iaVJTU2lnVG9BU04xU2lnKHQsQyl9O3RoaXMuc2lnbj1mdW5jdGlvbih3LEIpe3ZhciB6PUI7dmFyIHU9dGhpcy5lY3BhcmFtcy5uO3ZhciB5PWYuZnJvbUJ5dGVBcnJheVVuc2lnbmVkKHcpO2Rve3ZhciB2PXRoaXMuZ2V0QmlnUmFuZG9tKHUpO3ZhciBBPXRoaXMuZWNwYXJhbXMuRzt2YXIgeD1BLm11bHRpcGx5KHYpO3ZhciB0PXguZ2V0WCgpLnRvQmlnSW50ZWdlcigpLm1vZCh1KX13aGlsZSh0LmNvbXBhcmVUbyhCaWdJbnRlZ2VyLlpFUk8pPD0wKTt2YXIgQz12Lm1vZEludmVyc2UodSkubXVsdGlwbHkoeS5hZGQoei5tdWx0aXBseSh0KSkpLm1vZCh1KTtyZXR1cm4gdGhpcy5zZXJpYWxpemVTaWcodCxDKX07dGhpcy52ZXJpZnlXaXRoTWVzc2FnZUhhc2g9ZnVuY3Rpb24ocyxyKXtyZXR1cm4gdGhpcy52ZXJpZnlIZXgocyxyLHRoaXMucHViS2V5SGV4KX07dGhpcy52ZXJpZnlIZXg9ZnVuY3Rpb24odix5LHUpe3RyeXt2YXIgdCxCO3ZhciB3PW0ucGFyc2VTaWdIZXgoeSk7dD13LnI7Qj13LnM7dmFyIHg9aC5kZWNvZGVGcm9tSGV4KHRoaXMuZWNwYXJhbXMuY3VydmUsdSk7dmFyIHo9bmV3IGYodi5zdWJzdHJpbmcoMCx0aGlzLmVjcGFyYW1zLmtleWxlbi80KSwxNik7cmV0dXJuIHRoaXMudmVyaWZ5UmF3KHosdCxCLHgpfWNhdGNoKEEpe3JldHVybiBmYWxzZX19O3RoaXMudmVyaWZ5PWZ1bmN0aW9uKHosQSx1KXt2YXIgdyx0O2lmKEJpdGNvaW4uVXRpbC5pc0FycmF5KEEpKXt2YXIgeT10aGlzLnBhcnNlU2lnKEEpO3c9eS5yO3Q9eS5zfWVsc2V7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBBJiZBLnImJkEucyl7dz1BLnI7dD1BLnN9ZWxzZXt0aHJvd1wiSW52YWxpZCB2YWx1ZSBmb3Igc2lnbmF0dXJlXCJ9fXZhciB2O2lmKHUgaW5zdGFuY2VvZiBFQ1BvaW50RnApe3Y9dX1lbHNle2lmKEJpdGNvaW4uVXRpbC5pc0FycmF5KHUpKXt2PWguZGVjb2RlRnJvbSh0aGlzLmVjcGFyYW1zLmN1cnZlLHUpfWVsc2V7dGhyb3dcIkludmFsaWQgZm9ybWF0IGZvciBwdWJrZXkgdmFsdWUsIG11c3QgYmUgYnl0ZSBhcnJheSBvciBFQ1BvaW50RnBcIn19dmFyIHg9Zi5mcm9tQnl0ZUFycmF5VW5zaWduZWQoeik7cmV0dXJuIHRoaXMudmVyaWZ5UmF3KHgsdyx0LHYpfTt0aGlzLnZlcmlmeVJhdz1mdW5jdGlvbih6LHQsRSx5KXt2YXIgeD10aGlzLmVjcGFyYW1zLm47dmFyIEQ9dGhpcy5lY3BhcmFtcy5HO2lmKHQuY29tcGFyZVRvKGYuT05FKTwwfHx0LmNvbXBhcmVUbyh4KT49MCl7cmV0dXJuIGZhbHNlfWlmKEUuY29tcGFyZVRvKGYuT05FKTwwfHxFLmNvbXBhcmVUbyh4KT49MCl7cmV0dXJuIGZhbHNlfXZhciBBPUUubW9kSW52ZXJzZSh4KTt2YXIgdz16Lm11bHRpcGx5KEEpLm1vZCh4KTt2YXIgdT10Lm11bHRpcGx5KEEpLm1vZCh4KTt2YXIgQj1ELm11bHRpcGx5KHcpLmFkZCh5Lm11bHRpcGx5KHUpKTt2YXIgQz1CLmdldFgoKS50b0JpZ0ludGVnZXIoKS5tb2QoeCk7cmV0dXJuIEMuZXF1YWxzKHQpfTt0aGlzLnNlcmlhbGl6ZVNpZz1mdW5jdGlvbih2LHUpe3ZhciB3PXYudG9CeXRlQXJyYXlTaWduZWQoKTt2YXIgdD11LnRvQnl0ZUFycmF5U2lnbmVkKCk7dmFyIHg9W107eC5wdXNoKDIpO3gucHVzaCh3Lmxlbmd0aCk7eD14LmNvbmNhdCh3KTt4LnB1c2goMik7eC5wdXNoKHQubGVuZ3RoKTt4PXguY29uY2F0KHQpO3gudW5zaGlmdCh4Lmxlbmd0aCk7eC51bnNoaWZ0KDQ4KTtyZXR1cm4geH07dGhpcy5wYXJzZVNpZz1mdW5jdGlvbih5KXt2YXIgeDtpZih5WzBdIT00OCl7dGhyb3cgbmV3IEVycm9yKFwiU2lnbmF0dXJlIG5vdCBhIHZhbGlkIERFUlNlcXVlbmNlXCIpfXg9MjtpZih5W3hdIT0yKXt0aHJvdyBuZXcgRXJyb3IoXCJGaXJzdCBlbGVtZW50IGluIHNpZ25hdHVyZSBtdXN0IGJlIGEgREVSSW50ZWdlclwiKX12YXIgdz15LnNsaWNlKHgrMix4KzIreVt4KzFdKTt4Kz0yK3lbeCsxXTtpZih5W3hdIT0yKXt0aHJvdyBuZXcgRXJyb3IoXCJTZWNvbmQgZWxlbWVudCBpbiBzaWduYXR1cmUgbXVzdCBiZSBhIERFUkludGVnZXJcIil9dmFyIHQ9eS5zbGljZSh4KzIseCsyK3lbeCsxXSk7eCs9Mit5W3grMV07dmFyIHY9Zi5mcm9tQnl0ZUFycmF5VW5zaWduZWQodyk7dmFyIHU9Zi5mcm9tQnl0ZUFycmF5VW5zaWduZWQodCk7cmV0dXJue3I6dixzOnV9fTt0aGlzLnBhcnNlU2lnQ29tcGFjdD1mdW5jdGlvbih3KXtpZih3Lmxlbmd0aCE9PTY1KXt0aHJvd1wiU2lnbmF0dXJlIGhhcyB0aGUgd3JvbmcgbGVuZ3RoXCJ9dmFyIHQ9d1swXS0yNztpZih0PDB8fHQ+Nyl7dGhyb3dcIkludmFsaWQgc2lnbmF0dXJlIHR5cGVcIn12YXIgeD10aGlzLmVjcGFyYW1zLm47dmFyIHY9Zi5mcm9tQnl0ZUFycmF5VW5zaWduZWQody5zbGljZSgxLDMzKSkubW9kKHgpO3ZhciB1PWYuZnJvbUJ5dGVBcnJheVVuc2lnbmVkKHcuc2xpY2UoMzMsNjUpKS5tb2QoeCk7cmV0dXJue3I6dixzOnUsaTp0fX07dGhpcy5yZWFkUEtDUzVQcnZLZXlIZXg9ZnVuY3Rpb24odSl7aWYoayh1KT09PWZhbHNlKXt0aHJvdyBuZXcgRXJyb3IoXCJub3QgQVNOLjEgaGV4IHN0cmluZ1wiKX12YXIgcix0LHY7dHJ5e3I9bih1LDAsW1wiWzBdXCIsMF0sXCIwNlwiKTt0PW4odSwwLFsxXSxcIjA0XCIpO3RyeXt2PW4odSwwLFtcIlsxXVwiLDBdLFwiMDNcIil9Y2F0Y2gocyl7fX1jYXRjaChzKXt0aHJvdyBuZXcgRXJyb3IoXCJtYWxmb3JtZWQgUEtDUyMxLzUgcGxhaW4gRUNDIHByaXZhdGUga2V5XCIpfXRoaXMuY3VydmVOYW1lPWQocik7aWYodGhpcy5jdXJ2ZU5hbWU9PT11bmRlZmluZWQpe3Rocm93XCJ1bnN1cHBvcnRlZCBjdXJ2ZSBuYW1lXCJ9dGhpcy5zZXROYW1lZEN1cnZlKHRoaXMuY3VydmVOYW1lKTt0aGlzLnNldFB1YmxpY0tleUhleCh2KTt0aGlzLnNldFByaXZhdGVLZXlIZXgodCk7dGhpcy5pc1B1YmxpYz1mYWxzZX07dGhpcy5yZWFkUEtDUzhQcnZLZXlIZXg9ZnVuY3Rpb24odil7aWYoayh2KT09PWZhbHNlKXt0aHJvdyBuZXcgaihcIm5vdCBBU04uMSBoZXggc3RyaW5nXCIpfXZhciB0LHIsdSx3O3RyeXt0PW4odiwwLFsxLDBdLFwiMDZcIik7cj1uKHYsMCxbMSwxXSxcIjA2XCIpO3U9bih2LDAsWzIsMCwxXSxcIjA0XCIpO3RyeXt3PW4odiwwLFsyLDAsXCJbMV1cIiwwXSxcIjAzXCIpfWNhdGNoKHMpe319Y2F0Y2gocyl7dGhyb3cgbmV3IGooXCJtYWxmb3JtZWQgUEtDUyM4IHBsYWluIEVDQyBwcml2YXRlIGtleVwiKX10aGlzLmN1cnZlTmFtZT1kKHIpO2lmKHRoaXMuY3VydmVOYW1lPT09dW5kZWZpbmVkKXt0aHJvdyBuZXcgaihcInVuc3VwcG9ydGVkIGN1cnZlIG5hbWVcIil9dGhpcy5zZXROYW1lZEN1cnZlKHRoaXMuY3VydmVOYW1lKTt0aGlzLnNldFB1YmxpY0tleUhleCh3KTt0aGlzLnNldFByaXZhdGVLZXlIZXgodSk7dGhpcy5pc1B1YmxpYz1mYWxzZX07dGhpcy5yZWFkUEtDUzhQdWJLZXlIZXg9ZnVuY3Rpb24odSl7aWYoayh1KT09PWZhbHNlKXt0aHJvdyBuZXcgaihcIm5vdCBBU04uMSBoZXggc3RyaW5nXCIpfXZhciB0LHIsdjt0cnl7dD1uKHUsMCxbMCwwXSxcIjA2XCIpO3I9bih1LDAsWzAsMV0sXCIwNlwiKTt2PW4odSwwLFsxXSxcIjAzXCIpfWNhdGNoKHMpe3Rocm93IG5ldyBqKFwibWFsZm9ybWVkIFBLQ1MjOCBFQ0MgcHVibGljIGtleVwiKX10aGlzLmN1cnZlTmFtZT1kKHIpO2lmKHRoaXMuY3VydmVOYW1lPT09bnVsbCl7dGhyb3cgbmV3IGooXCJ1bnN1cHBvcnRlZCBjdXJ2ZSBuYW1lXCIpfXRoaXMuc2V0TmFtZWRDdXJ2ZSh0aGlzLmN1cnZlTmFtZSk7dGhpcy5zZXRQdWJsaWNLZXlIZXgodil9O3RoaXMucmVhZENlcnRQdWJLZXlIZXg9ZnVuY3Rpb24odCx2KXtpZihrKHQpPT09ZmFsc2Upe3Rocm93IG5ldyBqKFwibm90IEFTTi4xIGhleCBzdHJpbmdcIil9dmFyIHIsdTt0cnl7cj1uKHQsMCxbMCw1LDAsMV0sXCIwNlwiKTt1PW4odCwwLFswLDUsMV0sXCIwM1wiKX1jYXRjaChzKXt0aHJvdyBuZXcgaihcIm1hbGZvcm1lZCBYLjUwOSBjZXJ0aWZpY2F0ZSBFQ0MgcHVibGljIGtleVwiKX10aGlzLmN1cnZlTmFtZT1kKHIpO2lmKHRoaXMuY3VydmVOYW1lPT09bnVsbCl7dGhyb3cgbmV3IGooXCJ1bnN1cHBvcnRlZCBjdXJ2ZSBuYW1lXCIpfXRoaXMuc2V0TmFtZWRDdXJ2ZSh0aGlzLmN1cnZlTmFtZSk7dGhpcy5zZXRQdWJsaWNLZXlIZXgodSl9O2lmKGUhPT11bmRlZmluZWQpe2lmKGUuY3VydmUhPT11bmRlZmluZWQpe3RoaXMuY3VydmVOYW1lPWUuY3VydmV9fWlmKHRoaXMuY3VydmVOYW1lPT09dW5kZWZpbmVkKXt0aGlzLmN1cnZlTmFtZT1nfXRoaXMuc2V0TmFtZWRDdXJ2ZSh0aGlzLmN1cnZlTmFtZSk7aWYoZSE9PXVuZGVmaW5lZCl7aWYoZS5wcnYhPT11bmRlZmluZWQpe3RoaXMuc2V0UHJpdmF0ZUtleUhleChlLnBydil9aWYoZS5wdWIhPT11bmRlZmluZWQpe3RoaXMuc2V0UHVibGljS2V5SGV4KGUucHViKX19fTtLSlVSLmNyeXB0by5FQ0RTQS5wYXJzZVNpZ0hleD1mdW5jdGlvbihhKXt2YXIgYj1LSlVSLmNyeXB0by5FQ0RTQS5wYXJzZVNpZ0hleEluSGV4UlMoYSk7dmFyIGQ9bmV3IEJpZ0ludGVnZXIoYi5yLDE2KTt2YXIgYz1uZXcgQmlnSW50ZWdlcihiLnMsMTYpO3JldHVybntyOmQsczpjfX07S0pVUi5jcnlwdG8uRUNEU0EucGFyc2VTaWdIZXhJbkhleFJTPWZ1bmN0aW9uKGYpe3ZhciBqPUFTTjFIRVgsaT1qLmdldENoaWxkSWR4LGc9ai5nZXRWO2ouY2hlY2tTdHJpY3RERVIoZiwwKTtpZihmLnN1YnN0cigwLDIpIT1cIjMwXCIpe3Rocm93IG5ldyBFcnJvcihcInNpZ25hdHVyZSBpcyBub3QgYSBBU04uMSBzZXF1ZW5jZVwiKX12YXIgaD1pKGYsMCk7aWYoaC5sZW5ndGghPTIpe3Rocm93IG5ldyBFcnJvcihcInNpZ25hdHVyZSBzaGFsbCBoYXZlIHR3byBlbGVtZW50c1wiKX12YXIgZT1oWzBdO3ZhciBkPWhbMV07aWYoZi5zdWJzdHIoZSwyKSE9XCIwMlwiKXt0aHJvdyBuZXcgRXJyb3IoXCIxc3QgaXRlbSBub3QgQVNOLjEgaW50ZWdlclwiKX1pZihmLnN1YnN0cihkLDIpIT1cIjAyXCIpe3Rocm93IG5ldyBFcnJvcihcIjJuZCBpdGVtIG5vdCBBU04uMSBpbnRlZ2VyXCIpfXZhciBjPWcoZixlKTt2YXIgYj1nKGYsZCk7cmV0dXJue3I6YyxzOmJ9fTtLSlVSLmNyeXB0by5FQ0RTQS5hc24xU2lnVG9Db25jYXRTaWc9ZnVuY3Rpb24oYyl7dmFyIGQ9S0pVUi5jcnlwdG8uRUNEU0EucGFyc2VTaWdIZXhJbkhleFJTKGMpO3ZhciBiPWQucjt2YXIgYT1kLnM7aWYoYi5zdWJzdHIoMCwyKT09XCIwMFwiJiYoYi5sZW5ndGglMzIpPT0yKXtiPWIuc3Vic3RyKDIpfWlmKGEuc3Vic3RyKDAsMik9PVwiMDBcIiYmKGEubGVuZ3RoJTMyKT09Mil7YT1hLnN1YnN0cigyKX1pZigoYi5sZW5ndGglMzIpPT0zMCl7Yj1cIjAwXCIrYn1pZigoYS5sZW5ndGglMzIpPT0zMCl7YT1cIjAwXCIrYX1pZihiLmxlbmd0aCUzMiE9MCl7dGhyb3dcInVua25vd24gRUNEU0Egc2lnIHIgbGVuZ3RoIGVycm9yXCJ9aWYoYS5sZW5ndGglMzIhPTApe3Rocm93XCJ1bmtub3duIEVDRFNBIHNpZyBzIGxlbmd0aCBlcnJvclwifXJldHVybiBiK2F9O0tKVVIuY3J5cHRvLkVDRFNBLmNvbmNhdFNpZ1RvQVNOMVNpZz1mdW5jdGlvbihhKXtpZigoKChhLmxlbmd0aC8yKSo4KSUoMTYqOCkpIT0wKXt0aHJvd1widW5rbm93biBFQ0RTQSBjb25jYXRpbmF0ZWQgci1zIHNpZyAgbGVuZ3RoIGVycm9yXCJ9dmFyIGM9YS5zdWJzdHIoMCxhLmxlbmd0aC8yKTt2YXIgYj1hLnN1YnN0cihhLmxlbmd0aC8yKTtyZXR1cm4gS0pVUi5jcnlwdG8uRUNEU0EuaGV4UlNTaWdUb0FTTjFTaWcoYyxiKX07S0pVUi5jcnlwdG8uRUNEU0EuaGV4UlNTaWdUb0FTTjFTaWc9ZnVuY3Rpb24oYixhKXt2YXIgZD1uZXcgQmlnSW50ZWdlcihiLDE2KTt2YXIgYz1uZXcgQmlnSW50ZWdlcihhLDE2KTtyZXR1cm4gS0pVUi5jcnlwdG8uRUNEU0EuYmlSU1NpZ1RvQVNOMVNpZyhkLGMpfTtLSlVSLmNyeXB0by5FQ0RTQS5iaVJTU2lnVG9BU04xU2lnPWZ1bmN0aW9uKGYsZCl7dmFyIGM9S0pVUi5hc24xO3ZhciBiPW5ldyBjLkRFUkludGVnZXIoe2JpZ2ludDpmfSk7dmFyIGE9bmV3IGMuREVSSW50ZWdlcih7YmlnaW50OmR9KTt2YXIgZT1uZXcgYy5ERVJTZXF1ZW5jZSh7YXJyYXk6W2IsYV19KTtyZXR1cm4gZS5nZXRFbmNvZGVkSGV4KCl9O0tKVVIuY3J5cHRvLkVDRFNBLmdldE5hbWU9ZnVuY3Rpb24oYSl7aWYoYT09PVwiMmI4MTA0MDAxZlwiKXtyZXR1cm5cInNlY3AxOTJrMVwifWlmKGE9PT1cIjJhODY0OGNlM2QwMzAxMDdcIil7cmV0dXJuXCJzZWNwMjU2cjFcIn1pZihhPT09XCIyYjgxMDQwMDBhXCIpe3JldHVyblwic2VjcDI1NmsxXCJ9aWYoYT09PVwiMmI4MTA0MDAyMVwiKXtyZXR1cm5cInNlY3AyMjRyMVwifWlmKGE9PT1cIjJiODEwNDAwMjJcIil7cmV0dXJuXCJzZWNwMzg0cjFcIn1pZihcInxzZWNwMjU2cjF8TklTVCBQLTI1NnxQLTI1NnxwcmltZTI1NnYxfFwiLmluZGV4T2YoYSkhPT0tMSl7cmV0dXJuXCJzZWNwMjU2cjFcIn1pZihcInxzZWNwMjU2azF8XCIuaW5kZXhPZihhKSE9PS0xKXtyZXR1cm5cInNlY3AyNTZrMVwifWlmKFwifHNlY3AyMjRyMXxOSVNUIFAtMjI0fFAtMjI0fFwiLmluZGV4T2YoYSkhPT0tMSl7cmV0dXJuXCJzZWNwMjI0cjFcIn1pZihcInxzZWNwMzg0cjF8TklTVCBQLTM4NHxQLTM4NHxcIi5pbmRleE9mKGEpIT09LTEpe3JldHVyblwic2VjcDM4NHIxXCJ9cmV0dXJuIG51bGx9O1xuaWYodHlwZW9mIEtKVVI9PVwidW5kZWZpbmVkXCJ8fCFLSlVSKXtLSlVSPXt9fWlmKHR5cGVvZiBLSlVSLmNyeXB0bz09XCJ1bmRlZmluZWRcInx8IUtKVVIuY3J5cHRvKXtLSlVSLmNyeXB0bz17fX1LSlVSLmNyeXB0by5FQ1BhcmFtZXRlckRCPW5ldyBmdW5jdGlvbigpe3ZhciBiPXt9O3ZhciBjPXt9O2Z1bmN0aW9uIGEoZCl7cmV0dXJuIG5ldyBCaWdJbnRlZ2VyKGQsMTYpfXRoaXMuZ2V0QnlOYW1lPWZ1bmN0aW9uKGUpe3ZhciBkPWU7aWYodHlwZW9mIGNbZF0hPVwidW5kZWZpbmVkXCIpe2Q9Y1tlXX1pZih0eXBlb2YgYltkXSE9XCJ1bmRlZmluZWRcIil7cmV0dXJuIGJbZF19dGhyb3dcInVucmVnaXN0ZXJlZCBFQyBjdXJ2ZSBuYW1lOiBcIitkfTt0aGlzLnJlZ2lzdD1mdW5jdGlvbihBLGwsbyxnLG0sZSxqLGYsayx1LGQseCl7YltBXT17fTt2YXIgcz1hKG8pO3ZhciB6PWEoZyk7dmFyIHk9YShtKTt2YXIgdD1hKGUpO3ZhciB3PWEoaik7dmFyIHI9bmV3IEVDQ3VydmVGcChzLHoseSk7dmFyIHE9ci5kZWNvZGVQb2ludEhleChcIjA0XCIrZitrKTtiW0FdW1wibmFtZVwiXT1BO2JbQV1bXCJrZXlsZW5cIl09bDtiW0FdW1wiY3VydmVcIl09cjtiW0FdW1wiR1wiXT1xO2JbQV1bXCJuXCJdPXQ7YltBXVtcImhcIl09dztiW0FdW1wib2lkXCJdPWQ7YltBXVtcImluZm9cIl09eDtmb3IodmFyIHY9MDt2PHUubGVuZ3RoO3YrKyl7Y1t1W3ZdXT1BfX19O0tKVVIuY3J5cHRvLkVDUGFyYW1ldGVyREIucmVnaXN0KFwic2VjcDEyOHIxXCIsMTI4LFwiRkZGRkZGRkRGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZcIixcIkZGRkZGRkZERkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZDXCIsXCJFODc1NzlDMTEwNzlGNDNERDgyNDk5M0MyQ0VFNUVEM1wiLFwiRkZGRkZGRkUwMDAwMDAwMDc1QTMwRDFCOTAzOEExMTVcIixcIjFcIixcIjE2MUZGNzUyOEI4OTlCMkQwQzI4NjA3Q0E1MkM1Qjg2XCIsXCJDRjVBQzgzOTVCQUZFQjEzQzAyREEyOTJEREVEN0E4M1wiLFtdLFwiXCIsXCJzZWNwMTI4cjEgOiBTRUNHIGN1cnZlIG92ZXIgYSAxMjggYml0IHByaW1lIGZpZWxkXCIpO0tKVVIuY3J5cHRvLkVDUGFyYW1ldGVyREIucmVnaXN0KFwic2VjcDE2MGsxXCIsMTYwLFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkVGRkZGQUM3M1wiLFwiMFwiLFwiN1wiLFwiMDEwMDAwMDAwMDAwMDAwMDAwMDAwMUI4RkExNkRGQUI5QUNBMTZCNkIzXCIsXCIxXCIsXCIzQjRDMzgyQ0UzN0FBMTkyQTQwMTlFNzYzMDM2RjRGNURENEQ3RUJCXCIsXCI5MzhDRjkzNTMxOEZEQ0VENkJDMjgyODY1MzE3MzNDM0YwM0M0RkVFXCIsW10sXCJcIixcInNlY3AxNjBrMSA6IFNFQ0cgY3VydmUgb3ZlciBhIDE2MCBiaXQgcHJpbWUgZmllbGRcIik7S0pVUi5jcnlwdG8uRUNQYXJhbWV0ZXJEQi5yZWdpc3QoXCJzZWNwMTYwcjFcIiwxNjAsXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRjdGRkZGRkZGXCIsXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRjdGRkZGRkZDXCIsXCIxQzk3QkVGQzU0QkQ3QThCNjVBQ0Y4OUY4MUQ0RDRBREM1NjVGQTQ1XCIsXCIwMTAwMDAwMDAwMDAwMDAwMDAwMDAxRjRDOEY5MjdBRUQzQ0E3NTIyNTdcIixcIjFcIixcIjRBOTZCNTY4OEVGNTczMjg0NjY0Njk4OTY4QzM4QkI5MTNDQkZDODJcIixcIjIzQTYyODU1MzE2ODk0N0Q1OURDQzkxMjA0MjM1MTM3N0FDNUZCMzJcIixbXSxcIlwiLFwic2VjcDE2MHIxIDogU0VDRyBjdXJ2ZSBvdmVyIGEgMTYwIGJpdCBwcmltZSBmaWVsZFwiKTtLSlVSLmNyeXB0by5FQ1BhcmFtZXRlckRCLnJlZ2lzdChcInNlY3AxOTJrMVwiLDE5MixcIkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkVGRkZGRUUzN1wiLFwiMFwiLFwiM1wiLFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZFMjZGMkZDMTcwRjY5NDY2QTc0REVGRDhEXCIsXCIxXCIsXCJEQjRGRjEwRUMwNTdFOUFFMjZCMDdEMDI4MEI3RjQzNDFEQTVEMUIxRUFFMDZDN0RcIixcIjlCMkYyRjZEOUM1NjI4QTc4NDQxNjNEMDE1QkU4NjM0NDA4MkFBODhEOTVFMkY5RFwiLFtdKTtLSlVSLmNyeXB0by5FQ1BhcmFtZXRlckRCLnJlZ2lzdChcInNlY3AxOTJyMVwiLDE5MixcIkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZFRkZGRkZGRkZGRkZGRkZGRlwiLFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkVGRkZGRkZGRkZGRkZGRkZDXCIsXCI2NDIxMDUxOUU1OUM4MEU3MEZBN0U5QUI3MjI0MzA0OUZFQjhERUVDQzE0NkI5QjFcIixcIkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRjk5REVGODM2MTQ2QkM5QjFCNEQyMjgzMVwiLFwiMVwiLFwiMTg4REE4MEVCMDMwOTBGNjdDQkYyMEVCNDNBMTg4MDBGNEZGMEFGRDgyRkYxMDEyXCIsXCIwNzE5MkI5NUZGQzhEQTc4NjMxMDExRUQ2QjI0Q0RENTczRjk3N0ExMUU3OTQ4MTFcIixbXSk7S0pVUi5jcnlwdG8uRUNQYXJhbWV0ZXJEQi5yZWdpc3QoXCJzZWNwMjI0cjFcIiwyMjQsXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMVwiLFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkVGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkVcIixcIkI0MDUwQTg1MEMwNEIzQUJGNTQxMzI1NjUwNDRCMEI3RDdCRkQ4QkEyNzBCMzk0MzIzNTVGRkI0XCIsXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGMTZBMkUwQjhGMDNFMTNERDI5NDU1QzVDMkEzRFwiLFwiMVwiLFwiQjcwRTBDQkQ2QkI0QkY3RjMyMTM5MEI5NEEwM0MxRDM1NkMyMTEyMjM0MzI4MEQ2MTE1QzFEMjFcIixcIkJEMzc2Mzg4QjVGNzIzRkI0QzIyREZFNkNENDM3NUEwNUEwNzQ3NjQ0NEQ1ODE5OTg1MDA3RTM0XCIsW10pO0tKVVIuY3J5cHRvLkVDUGFyYW1ldGVyREIucmVnaXN0KFwic2VjcDI1NmsxXCIsMjU2LFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkVGRkZGRkMyRlwiLFwiMFwiLFwiN1wiLFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkVCQUFFRENFNkFGNDhBMDNCQkZEMjVFOENEMDM2NDE0MVwiLFwiMVwiLFwiNzlCRTY2N0VGOURDQkJBQzU1QTA2Mjk1Q0U4NzBCMDcwMjlCRkNEQjJEQ0UyOEQ5NTlGMjgxNUIxNkY4MTc5OFwiLFwiNDgzQURBNzcyNkEzQzQ2NTVEQTRGQkZDMEUxMTA4QThGRDE3QjQ0OEE2ODU1NDE5OUM0N0QwOEZGQjEwRDRCOFwiLFtdKTtLSlVSLmNyeXB0by5FQ1BhcmFtZXRlckRCLnJlZ2lzdChcInNlY3AyNTZyMVwiLDI1NixcIkZGRkZGRkZGMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZcIixcIkZGRkZGRkZGMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkNcIixcIjVBQzYzNUQ4QUEzQTkzRTdCM0VCQkQ1NTc2OTg4NkJDNjUxRDA2QjBDQzUzQjBGNjNCQ0UzQzNFMjdEMjYwNEJcIixcIkZGRkZGRkZGMDAwMDAwMDBGRkZGRkZGRkZGRkZGRkZGQkNFNkZBQURBNzE3OUU4NEYzQjlDQUMyRkM2MzI1NTFcIixcIjFcIixcIjZCMTdEMUYyRTEyQzQyNDdGOEJDRTZFNTYzQTQ0MEYyNzcwMzdEODEyREVCMzNBMEY0QTEzOTQ1RDg5OEMyOTZcIixcIjRGRTM0MkUyRkUxQTdGOUI4RUU3RUI0QTdDMEY5RTE2MkJDRTMzNTc2QjMxNUVDRUNCQjY0MDY4MzdCRjUxRjVcIixbXCJOSVNUIFAtMjU2XCIsXCJQLTI1NlwiLFwicHJpbWUyNTZ2MVwiXSk7S0pVUi5jcnlwdG8uRUNQYXJhbWV0ZXJEQi5yZWdpc3QoXCJzZWNwMzg0cjFcIiwzODQsXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZFRkZGRkZGRkYwMDAwMDAwMDAwMDAwMDAwRkZGRkZGRkZcIixcIkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkVGRkZGRkZGRjAwMDAwMDAwMDAwMDAwMDBGRkZGRkZGQ1wiLFwiQjMzMTJGQTdFMjNFRTdFNDk4OEUwNTZCRTNGODJEMTkxODFEOUM2RUZFODE0MTEyMDMxNDA4OEY1MDEzODc1QUM2NTYzOThEOEEyRUQxOUQyQTg1QzhFREQzRUMyQUVGXCIsXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZDNzYzNEQ4MUY0MzcyRERGNTgxQTBEQjI0OEIwQTc3QUVDRUMxOTZBQ0NDNTI5NzNcIixcIjFcIixcIkFBODdDQTIyQkU4QjA1Mzc4RUIxQzcxRUYzMjBBRDc0NkUxRDNCNjI4QkE3OUI5ODU5Rjc0MUUwODI1NDJBMzg1NTAyRjI1REJGNTUyOTZDM0E1NDVFMzg3Mjc2MEFCN1wiLFwiMzYxN2RlNGE5NjI2MmM2ZjVkOWU5OGJmOTI5MmRjMjlmOGY0MWRiZDI4OWExNDdjZTlkYTMxMTNiNWYwYjhjMDBhNjBiMWNlMWQ3ZTgxOWQ3YTQzMWQ3YzkwZWEwZTVmXCIsW1wiTklTVCBQLTM4NFwiLFwiUC0zODRcIl0pO0tKVVIuY3J5cHRvLkVDUGFyYW1ldGVyREIucmVnaXN0KFwic2VjcDUyMXIxXCIsNTIxLFwiMUZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZcIixcIjFGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZDXCIsXCIwNTE5NTNFQjk2MThFMUM5QTFGOTI5QTIxQTBCNjg1NDBFRUEyREE3MjVCOTlCMzE1RjNCOEI0ODk5MThFRjEwOUUxNTYxOTM5NTFFQzdFOTM3QjE2NTJDMEJEM0JCMUJGMDczNTczREY4ODNEMkMzNEYxRUY0NTFGRDQ2QjUwM0YwMFwiLFwiMUZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGQTUxODY4NzgzQkYyRjk2NkI3RkNDMDE0OEY3MDlBNUQwM0JCNUM5Qjg4OTlDNDdBRUJCNkZCNzFFOTEzODY0MDlcIixcIjFcIixcIkM2ODU4RTA2QjcwNDA0RTlDRDlFM0VDQjY2MjM5NUI0NDI5QzY0ODEzOTA1M0ZCNTIxRjgyOEFGNjA2QjREM0RCQUExNEI1RTc3RUZFNzU5MjhGRTFEQzEyN0EyRkZBOERFMzM0OEIzQzE4NTZBNDI5QkY5N0U3RTMxQzJFNUJENjZcIixcIjAxMTgzOTI5NmE3ODlhM2JjMDA0NWM4YTVmYjQyYzdkMWJkOTk4ZjU0NDQ5NTc5YjQ0NjgxN2FmYmQxNzI3M2U2NjJjOTdlZTcyOTk1ZWY0MjY0MGM1NTBiOTAxM2ZhZDA3NjEzNTNjNzA4NmEyNzJjMjQwODhiZTk0NzY5ZmQxNjY1MFwiLFtcIk5JU1QgUC01MjFcIixcIlAtNTIxXCJdKTtcbnZhciBLRVlVVElMPWZ1bmN0aW9uKCl7dmFyIGQ9ZnVuY3Rpb24ocCxyLHEpe3JldHVybiBrKENyeXB0b0pTLkFFUyxwLHIscSl9O3ZhciBlPWZ1bmN0aW9uKHAscixxKXtyZXR1cm4gayhDcnlwdG9KUy5UcmlwbGVERVMscCxyLHEpfTt2YXIgYT1mdW5jdGlvbihwLHIscSl7cmV0dXJuIGsoQ3J5cHRvSlMuREVTLHAscixxKX07dmFyIGs9ZnVuY3Rpb24ocyx4LHUscSl7dmFyIHI9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZSh4KTt2YXIgdz1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKHUpO3ZhciBwPUNyeXB0b0pTLmVuYy5IZXgucGFyc2UocSk7dmFyIHQ9e307dC5rZXk9dzt0Lml2PXA7dC5jaXBoZXJ0ZXh0PXI7dmFyIHY9cy5kZWNyeXB0KHQsdyx7aXY6cH0pO3JldHVybiBDcnlwdG9KUy5lbmMuSGV4LnN0cmluZ2lmeSh2KX07dmFyIGw9ZnVuY3Rpb24ocCxyLHEpe3JldHVybiBnKENyeXB0b0pTLkFFUyxwLHIscSl9O3ZhciBvPWZ1bmN0aW9uKHAscixxKXtyZXR1cm4gZyhDcnlwdG9KUy5UcmlwbGVERVMscCxyLHEpfTt2YXIgZj1mdW5jdGlvbihwLHIscSl7cmV0dXJuIGcoQ3J5cHRvSlMuREVTLHAscixxKX07dmFyIGc9ZnVuY3Rpb24odCx5LHYscSl7dmFyIHM9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZSh5KTt2YXIgeD1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKHYpO3ZhciBwPUNyeXB0b0pTLmVuYy5IZXgucGFyc2UocSk7dmFyIHc9dC5lbmNyeXB0KHMseCx7aXY6cH0pO3ZhciByPUNyeXB0b0pTLmVuYy5IZXgucGFyc2Uody50b1N0cmluZygpKTt2YXIgdT1DcnlwdG9KUy5lbmMuQmFzZTY0LnN0cmluZ2lmeShyKTtyZXR1cm4gdX07dmFyIGk9e1wiQUVTLTI1Ni1DQkNcIjp7cHJvYzpkLGVwcm9jOmwsa2V5bGVuOjMyLGl2bGVuOjE2fSxcIkFFUy0xOTItQ0JDXCI6e3Byb2M6ZCxlcHJvYzpsLGtleWxlbjoyNCxpdmxlbjoxNn0sXCJBRVMtMTI4LUNCQ1wiOntwcm9jOmQsZXByb2M6bCxrZXlsZW46MTYsaXZsZW46MTZ9LFwiREVTLUVERTMtQ0JDXCI6e3Byb2M6ZSxlcHJvYzpvLGtleWxlbjoyNCxpdmxlbjo4fSxcIkRFUy1DQkNcIjp7cHJvYzphLGVwcm9jOmYsa2V5bGVuOjgsaXZsZW46OH19O3ZhciBjPWZ1bmN0aW9uKHApe3JldHVybiBpW3BdW1wicHJvY1wiXX07dmFyIG09ZnVuY3Rpb24ocCl7dmFyIHI9Q3J5cHRvSlMubGliLldvcmRBcnJheS5yYW5kb20ocCk7dmFyIHE9Q3J5cHRvSlMuZW5jLkhleC5zdHJpbmdpZnkocik7cmV0dXJuIHF9O3ZhciBuPWZ1bmN0aW9uKHYpe3ZhciB3PXt9O3ZhciBxPXYubWF0Y2gobmV3IFJlZ0V4cChcIkRFSy1JbmZvOiAoW14sXSspLChbMC05QS1GYS1mXSspXCIsXCJtXCIpKTtpZihxKXt3LmNpcGhlcj1xWzFdO3cuaXZzYWx0PXFbMl19dmFyIHA9di5tYXRjaChuZXcgUmVnRXhwKFwiLS0tLS1CRUdJTiAoW0EtWl0rKSBQUklWQVRFIEtFWS0tLS0tXCIpKTtpZihwKXt3LnR5cGU9cFsxXX12YXIgdT0tMTt2YXIgeD0wO2lmKHYuaW5kZXhPZihcIlxcclxcblxcclxcblwiKSE9LTEpe3U9di5pbmRleE9mKFwiXFxyXFxuXFxyXFxuXCIpO3g9Mn1pZih2LmluZGV4T2YoXCJcXG5cXG5cIikhPS0xKXt1PXYuaW5kZXhPZihcIlxcblxcblwiKTt4PTF9dmFyIHQ9di5pbmRleE9mKFwiLS0tLS1FTkRcIik7aWYodSE9LTEmJnQhPS0xKXt2YXIgcj12LnN1YnN0cmluZyh1K3gqMix0LXgpO3I9ci5yZXBsYWNlKC9cXHMrL2csXCJcIik7dy5kYXRhPXJ9cmV0dXJuIHd9O3ZhciBqPWZ1bmN0aW9uKHEseSxwKXt2YXIgdj1wLnN1YnN0cmluZygwLDE2KTt2YXIgdD1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKHYpO3ZhciByPUNyeXB0b0pTLmVuYy5VdGY4LnBhcnNlKHkpO3ZhciB1PWlbcV1bXCJrZXlsZW5cIl0raVtxXVtcIml2bGVuXCJdO3ZhciB4PVwiXCI7dmFyIHc9bnVsbDtmb3IoOzspe3ZhciBzPUNyeXB0b0pTLmFsZ28uTUQ1LmNyZWF0ZSgpO2lmKHchPW51bGwpe3MudXBkYXRlKHcpfXMudXBkYXRlKHIpO3MudXBkYXRlKHQpO3c9cy5maW5hbGl6ZSgpO3g9eCtDcnlwdG9KUy5lbmMuSGV4LnN0cmluZ2lmeSh3KTtpZih4Lmxlbmd0aD49dSoyKXticmVha319dmFyIHo9e307ei5rZXloZXg9eC5zdWJzdHIoMCxpW3FdW1wia2V5bGVuXCJdKjIpO3ouaXZoZXg9eC5zdWJzdHIoaVtxXVtcImtleWxlblwiXSoyLGlbcV1bXCJpdmxlblwiXSoyKTtyZXR1cm4gen07dmFyIGI9ZnVuY3Rpb24ocCx2LHIsdyl7dmFyIHM9Q3J5cHRvSlMuZW5jLkJhc2U2NC5wYXJzZShwKTt2YXIgcT1DcnlwdG9KUy5lbmMuSGV4LnN0cmluZ2lmeShzKTt2YXIgdT1pW3ZdW1wicHJvY1wiXTt2YXIgdD11KHEscix3KTtyZXR1cm4gdH07dmFyIGg9ZnVuY3Rpb24ocCxzLHEsdSl7dmFyIHI9aVtzXVtcImVwcm9jXCJdO3ZhciB0PXIocCxxLHUpO3JldHVybiB0fTtyZXR1cm57dmVyc2lvbjpcIjEuMC4wXCIscGFyc2VQS0NTNVBFTTpmdW5jdGlvbihwKXtyZXR1cm4gbihwKX0sZ2V0S2V5QW5kVW51c2VkSXZCeVBhc3Njb2RlQW5kSXZzYWx0OmZ1bmN0aW9uKHEscCxyKXtyZXR1cm4gaihxLHAscil9LGRlY3J5cHRLZXlCNjQ6ZnVuY3Rpb24ocCxyLHEscyl7cmV0dXJuIGIocCxyLHEscyl9LGdldERlY3J5cHRlZEtleUhleDpmdW5jdGlvbih5LHgpe3ZhciBxPW4oeSk7dmFyIHQ9cS50eXBlO3ZhciByPXEuY2lwaGVyO3ZhciBwPXEuaXZzYWx0O3ZhciBzPXEuZGF0YTt2YXIgdz1qKHIseCxwKTt2YXIgdj13LmtleWhleDt2YXIgdT1iKHMscix2LHApO3JldHVybiB1fSxnZXRFbmNyeXB0ZWRQS0NTNVBFTUZyb21QcnZLZXlIZXg6ZnVuY3Rpb24oeCxzLEEsdCxyKXt2YXIgcD1cIlwiO2lmKHR5cGVvZiB0PT1cInVuZGVmaW5lZFwifHx0PT1udWxsKXt0PVwiQUVTLTI1Ni1DQkNcIn1pZih0eXBlb2YgaVt0XT09XCJ1bmRlZmluZWRcIil7dGhyb3dcIktFWVVUSUwgdW5zdXBwb3J0ZWQgYWxnb3JpdGhtOiBcIit0fWlmKHR5cGVvZiByPT1cInVuZGVmaW5lZFwifHxyPT1udWxsKXt2YXIgdj1pW3RdW1wiaXZsZW5cIl07dmFyIHU9bSh2KTtyPXUudG9VcHBlckNhc2UoKX12YXIgej1qKHQsQSxyKTt2YXIgeT16LmtleWhleDt2YXIgdz1oKHMsdCx5LHIpO3ZhciBxPXcucmVwbGFjZSgvKC57NjR9KS9nLFwiJDFcXHJcXG5cIik7dmFyIHA9XCItLS0tLUJFR0lOIFwiK3grXCIgUFJJVkFURSBLRVktLS0tLVxcclxcblwiO3ArPVwiUHJvYy1UeXBlOiA0LEVOQ1JZUFRFRFxcclxcblwiO3ArPVwiREVLLUluZm86IFwiK3QrXCIsXCIrcitcIlxcclxcblwiO3ArPVwiXFxyXFxuXCI7cCs9cTtwKz1cIlxcclxcbi0tLS0tRU5EIFwiK3grXCIgUFJJVkFURSBLRVktLS0tLVxcclxcblwiO3JldHVybiBwfSxwYXJzZUhleE9mRW5jcnlwdGVkUEtDUzg6ZnVuY3Rpb24oeSl7dmFyIEI9QVNOMUhFWDt2YXIgej1CLmdldENoaWxkSWR4O3ZhciB3PUIuZ2V0Vjt2YXIgdD17fTt2YXIgcj16KHksMCk7aWYoci5sZW5ndGghPTIpe3Rocm93XCJtYWxmb3JtZWQgZm9ybWF0OiBTRVFVRU5DRSgwKS5pdGVtcyAhPSAyOiBcIityLmxlbmd0aH10LmNpcGhlcnRleHQ9dyh5LHJbMV0pO3ZhciBBPXooeSxyWzBdKTtpZihBLmxlbmd0aCE9Mil7dGhyb3dcIm1hbGZvcm1lZCBmb3JtYXQ6IFNFUVVFTkNFKDAuMCkuaXRlbXMgIT0gMjogXCIrQS5sZW5ndGh9aWYodyh5LEFbMF0pIT1cIjJhODY0ODg2ZjcwZDAxMDUwZFwiKXt0aHJvd1widGhpcyBvbmx5IHN1cHBvcnRzIHBrY3M1UEJFUzJcIn12YXIgcD16KHksQVsxXSk7aWYoQS5sZW5ndGghPTIpe3Rocm93XCJtYWxmb3JtZWQgZm9ybWF0OiBTRVFVRU5DRSgwLjAuMSkuaXRlbXMgIT0gMjogXCIrcC5sZW5ndGh9dmFyIHE9eih5LHBbMV0pO2lmKHEubGVuZ3RoIT0yKXt0aHJvd1wibWFsZm9ybWVkIGZvcm1hdDogU0VRVUVOQ0UoMC4wLjEuMSkuaXRlbXMgIT0gMjogXCIrcS5sZW5ndGh9aWYodyh5LHFbMF0pIT1cIjJhODY0ODg2ZjcwZDAzMDdcIil7dGhyb3dcInRoaXMgb25seSBzdXBwb3J0cyBUcmlwbGVERVNcIn10LmVuY3J5cHRpb25TY2hlbWVBbGc9XCJUcmlwbGVERVNcIjt0LmVuY3J5cHRpb25TY2hlbWVJVj13KHkscVsxXSk7dmFyIHM9eih5LHBbMF0pO2lmKHMubGVuZ3RoIT0yKXt0aHJvd1wibWFsZm9ybWVkIGZvcm1hdDogU0VRVUVOQ0UoMC4wLjEuMCkuaXRlbXMgIT0gMjogXCIrcy5sZW5ndGh9aWYodyh5LHNbMF0pIT1cIjJhODY0ODg2ZjcwZDAxMDUwY1wiKXt0aHJvd1widGhpcyBvbmx5IHN1cHBvcnRzIHBrY3M1UEJLREYyXCJ9dmFyIHg9eih5LHNbMV0pO2lmKHgubGVuZ3RoPDIpe3Rocm93XCJtYWxmb3JtZWQgZm9ybWF0OiBTRVFVRU5DRSgwLjAuMS4wLjEpLml0ZW1zIDwgMjogXCIreC5sZW5ndGh9dC5wYmtkZjJTYWx0PXcoeSx4WzBdKTt2YXIgdT13KHkseFsxXSk7dHJ5e3QucGJrZGYySXRlcj1wYXJzZUludCh1LDE2KX1jYXRjaCh2KXt0aHJvd1wibWFsZm9ybWVkIGZvcm1hdCBwYmtkZjJJdGVyOiBcIit1fXJldHVybiB0fSxnZXRQQktERjJLZXlIZXhGcm9tUGFyYW06ZnVuY3Rpb24odSxwKXt2YXIgdD1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKHUucGJrZGYyU2FsdCk7dmFyIHE9dS5wYmtkZjJJdGVyO3ZhciBzPUNyeXB0b0pTLlBCS0RGMihwLHQse2tleVNpemU6MTkyLzMyLGl0ZXJhdGlvbnM6cX0pO3ZhciByPUNyeXB0b0pTLmVuYy5IZXguc3RyaW5naWZ5KHMpO3JldHVybiByfSxfZ2V0UGxhaW5QS0NTOEhleEZyb21FbmNyeXB0ZWRQS0NTOFBFTTpmdW5jdGlvbih4LHkpe3ZhciByPXBlbXRvaGV4KHgsXCJFTkNSWVBURUQgUFJJVkFURSBLRVlcIik7dmFyIHA9dGhpcy5wYXJzZUhleE9mRW5jcnlwdGVkUEtDUzgocik7dmFyIHU9S0VZVVRJTC5nZXRQQktERjJLZXlIZXhGcm9tUGFyYW0ocCx5KTt2YXIgdj17fTt2LmNpcGhlcnRleHQ9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZShwLmNpcGhlcnRleHQpO3ZhciB0PUNyeXB0b0pTLmVuYy5IZXgucGFyc2UodSk7dmFyIHM9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZShwLmVuY3J5cHRpb25TY2hlbWVJVik7dmFyIHc9Q3J5cHRvSlMuVHJpcGxlREVTLmRlY3J5cHQodix0LHtpdjpzfSk7dmFyIHE9Q3J5cHRvSlMuZW5jLkhleC5zdHJpbmdpZnkodyk7cmV0dXJuIHF9LGdldEtleUZyb21FbmNyeXB0ZWRQS0NTOFBFTTpmdW5jdGlvbihzLHEpe3ZhciBwPXRoaXMuX2dldFBsYWluUEtDUzhIZXhGcm9tRW5jcnlwdGVkUEtDUzhQRU0ocyxxKTt2YXIgcj10aGlzLmdldEtleUZyb21QbGFpblByaXZhdGVQS0NTOEhleChwKTtyZXR1cm4gcn0scGFyc2VQbGFpblByaXZhdGVQS0NTOEhleDpmdW5jdGlvbihzKXt2YXIgdj1BU04xSEVYO3ZhciB1PXYuZ2V0Q2hpbGRJZHg7dmFyIHQ9di5nZXRWO3ZhciBxPXt9O3EuYWxncGFyYW09bnVsbDtpZihzLnN1YnN0cigwLDIpIT1cIjMwXCIpe3Rocm93XCJtYWxmb3JtZWQgcGxhaW4gUEtDUzggcHJpdmF0ZSBrZXkoY29kZTowMDEpXCJ9dmFyIHI9dShzLDApO2lmKHIubGVuZ3RoIT0zKXt0aHJvd1wibWFsZm9ybWVkIHBsYWluIFBLQ1M4IHByaXZhdGUga2V5KGNvZGU6MDAyKVwifWlmKHMuc3Vic3RyKHJbMV0sMikhPVwiMzBcIil7dGhyb3dcIm1hbGZvcm1lZCBQS0NTOCBwcml2YXRlIGtleShjb2RlOjAwMylcIn12YXIgcD11KHMsclsxXSk7aWYocC5sZW5ndGghPTIpe3Rocm93XCJtYWxmb3JtZWQgUEtDUzggcHJpdmF0ZSBrZXkoY29kZTowMDQpXCJ9aWYocy5zdWJzdHIocFswXSwyKSE9XCIwNlwiKXt0aHJvd1wibWFsZm9ybWVkIFBLQ1M4IHByaXZhdGUga2V5KGNvZGU6MDA1KVwifXEuYWxnb2lkPXQocyxwWzBdKTtpZihzLnN1YnN0cihwWzFdLDIpPT1cIjA2XCIpe3EuYWxncGFyYW09dChzLHBbMV0pfWlmKHMuc3Vic3RyKHJbMl0sMikhPVwiMDRcIil7dGhyb3dcIm1hbGZvcm1lZCBQS0NTOCBwcml2YXRlIGtleShjb2RlOjAwNilcIn1xLmtleWlkeD12LmdldFZpZHgocyxyWzJdKTtyZXR1cm4gcX0sZ2V0S2V5RnJvbVBsYWluUHJpdmF0ZVBLQ1M4UEVNOmZ1bmN0aW9uKHEpe3ZhciBwPXBlbXRvaGV4KHEsXCJQUklWQVRFIEtFWVwiKTt2YXIgcj10aGlzLmdldEtleUZyb21QbGFpblByaXZhdGVQS0NTOEhleChwKTtyZXR1cm4gcn0sZ2V0S2V5RnJvbVBsYWluUHJpdmF0ZVBLQ1M4SGV4OmZ1bmN0aW9uKHApe3ZhciBxPXRoaXMucGFyc2VQbGFpblByaXZhdGVQS0NTOEhleChwKTt2YXIgcjtpZihxLmFsZ29pZD09XCIyYTg2NDg4NmY3MGQwMTAxMDFcIil7cj1uZXcgUlNBS2V5KCl9ZWxzZXtpZihxLmFsZ29pZD09XCIyYTg2NDhjZTM4MDQwMVwiKXtyPW5ldyBLSlVSLmNyeXB0by5EU0EoKX1lbHNle2lmKHEuYWxnb2lkPT1cIjJhODY0OGNlM2QwMjAxXCIpe3I9bmV3IEtKVVIuY3J5cHRvLkVDRFNBKCl9ZWxzZXt0aHJvd1widW5zdXBwb3J0ZWQgcHJpdmF0ZSBrZXkgYWxnb3JpdGhtXCJ9fX1yLnJlYWRQS0NTOFBydktleUhleChwKTtyZXR1cm4gcn0sX2dldEtleUZyb21QdWJsaWNQS0NTOEhleDpmdW5jdGlvbihxKXt2YXIgcDt2YXIgcj1BU04xSEVYLmdldFZieUxpc3QocSwwLFswLDBdLFwiMDZcIik7aWYocj09PVwiMmE4NjQ4ODZmNzBkMDEwMTAxXCIpe3A9bmV3IFJTQUtleSgpfWVsc2V7aWYocj09PVwiMmE4NjQ4Y2UzODA0MDFcIil7cD1uZXcgS0pVUi5jcnlwdG8uRFNBKCl9ZWxzZXtpZihyPT09XCIyYTg2NDhjZTNkMDIwMVwiKXtwPW5ldyBLSlVSLmNyeXB0by5FQ0RTQSgpfWVsc2V7dGhyb3dcInVuc3VwcG9ydGVkIFBLQ1MjOCBwdWJsaWMga2V5IGhleFwifX19cC5yZWFkUEtDUzhQdWJLZXlIZXgocSk7cmV0dXJuIHB9LHBhcnNlUHVibGljUmF3UlNBS2V5SGV4OmZ1bmN0aW9uKHIpe3ZhciB1PUFTTjFIRVg7dmFyIHQ9dS5nZXRDaGlsZElkeDt2YXIgcz11LmdldFY7dmFyIHA9e307aWYoci5zdWJzdHIoMCwyKSE9XCIzMFwiKXt0aHJvd1wibWFsZm9ybWVkIFJTQSBrZXkoY29kZTowMDEpXCJ9dmFyIHE9dChyLDApO2lmKHEubGVuZ3RoIT0yKXt0aHJvd1wibWFsZm9ybWVkIFJTQSBrZXkoY29kZTowMDIpXCJ9aWYoci5zdWJzdHIocVswXSwyKSE9XCIwMlwiKXt0aHJvd1wibWFsZm9ybWVkIFJTQSBrZXkoY29kZTowMDMpXCJ9cC5uPXMocixxWzBdKTtpZihyLnN1YnN0cihxWzFdLDIpIT1cIjAyXCIpe3Rocm93XCJtYWxmb3JtZWQgUlNBIGtleShjb2RlOjAwNClcIn1wLmU9cyhyLHFbMV0pO3JldHVybiBwfSxwYXJzZVB1YmxpY1BLQ1M4SGV4OmZ1bmN0aW9uKHQpe3ZhciB2PUFTTjFIRVg7dmFyIHU9di5nZXRDaGlsZElkeDt2YXIgcz12LmdldFY7dmFyIHE9e307cS5hbGdwYXJhbT1udWxsO3ZhciByPXUodCwwKTtpZihyLmxlbmd0aCE9Mil7dGhyb3dcIm91dGVyIERFUlNlcXVlbmNlIHNoYWxsIGhhdmUgMiBlbGVtZW50czogXCIrci5sZW5ndGh9dmFyIHc9clswXTtpZih0LnN1YnN0cih3LDIpIT1cIjMwXCIpe3Rocm93XCJtYWxmb3JtZWQgUEtDUzggcHVibGljIGtleShjb2RlOjAwMSlcIn12YXIgcD11KHQsdyk7aWYocC5sZW5ndGghPTIpe3Rocm93XCJtYWxmb3JtZWQgUEtDUzggcHVibGljIGtleShjb2RlOjAwMilcIn1pZih0LnN1YnN0cihwWzBdLDIpIT1cIjA2XCIpe3Rocm93XCJtYWxmb3JtZWQgUEtDUzggcHVibGljIGtleShjb2RlOjAwMylcIn1xLmFsZ29pZD1zKHQscFswXSk7aWYodC5zdWJzdHIocFsxXSwyKT09XCIwNlwiKXtxLmFsZ3BhcmFtPXModCxwWzFdKX1lbHNle2lmKHQuc3Vic3RyKHBbMV0sMik9PVwiMzBcIil7cS5hbGdwYXJhbT17fTtxLmFsZ3BhcmFtLnA9di5nZXRWYnlMaXN0KHQscFsxXSxbMF0sXCIwMlwiKTtxLmFsZ3BhcmFtLnE9di5nZXRWYnlMaXN0KHQscFsxXSxbMV0sXCIwMlwiKTtxLmFsZ3BhcmFtLmc9di5nZXRWYnlMaXN0KHQscFsxXSxbMl0sXCIwMlwiKX19aWYodC5zdWJzdHIoclsxXSwyKSE9XCIwM1wiKXt0aHJvd1wibWFsZm9ybWVkIFBLQ1M4IHB1YmxpYyBrZXkoY29kZTowMDQpXCJ9cS5rZXk9cyh0LHJbMV0pLnN1YnN0cigyKTtyZXR1cm4gcX0sfX0oKTtLRVlVVElMLmdldEtleT1mdW5jdGlvbihsLGssbil7dmFyIEc9QVNOMUhFWCxMPUcuZ2V0Q2hpbGRJZHgsdj1HLmdldFYsZD1HLmdldFZieUxpc3QsYz1LSlVSLmNyeXB0byxpPWMuRUNEU0EsQz1jLkRTQSx3PVJTQUtleSxNPXBlbXRvaGV4LEY9S0VZVVRJTDtpZih0eXBlb2YgdyE9XCJ1bmRlZmluZWRcIiYmbCBpbnN0YW5jZW9mIHcpe3JldHVybiBsfWlmKHR5cGVvZiBpIT1cInVuZGVmaW5lZFwiJiZsIGluc3RhbmNlb2YgaSl7cmV0dXJuIGx9aWYodHlwZW9mIEMhPVwidW5kZWZpbmVkXCImJmwgaW5zdGFuY2VvZiBDKXtyZXR1cm4gbH1pZihsLmN1cnZlIT09dW5kZWZpbmVkJiZsLnh5IT09dW5kZWZpbmVkJiZsLmQ9PT11bmRlZmluZWQpe3JldHVybiBuZXcgaSh7cHViOmwueHksY3VydmU6bC5jdXJ2ZX0pfWlmKGwuY3VydmUhPT11bmRlZmluZWQmJmwuZCE9PXVuZGVmaW5lZCl7cmV0dXJuIG5ldyBpKHtwcnY6bC5kLGN1cnZlOmwuY3VydmV9KX1pZihsLmt0eT09PXVuZGVmaW5lZCYmbC5uIT09dW5kZWZpbmVkJiZsLmUhPT11bmRlZmluZWQmJmwuZD09PXVuZGVmaW5lZCl7dmFyIFA9bmV3IHcoKTtQLnNldFB1YmxpYyhsLm4sbC5lKTtyZXR1cm4gUH1pZihsLmt0eT09PXVuZGVmaW5lZCYmbC5uIT09dW5kZWZpbmVkJiZsLmUhPT11bmRlZmluZWQmJmwuZCE9PXVuZGVmaW5lZCYmbC5wIT09dW5kZWZpbmVkJiZsLnEhPT11bmRlZmluZWQmJmwuZHAhPT11bmRlZmluZWQmJmwuZHEhPT11bmRlZmluZWQmJmwuY28hPT11bmRlZmluZWQmJmwucWk9PT11bmRlZmluZWQpe3ZhciBQPW5ldyB3KCk7UC5zZXRQcml2YXRlRXgobC5uLGwuZSxsLmQsbC5wLGwucSxsLmRwLGwuZHEsbC5jbyk7cmV0dXJuIFB9aWYobC5rdHk9PT11bmRlZmluZWQmJmwubiE9PXVuZGVmaW5lZCYmbC5lIT09dW5kZWZpbmVkJiZsLmQhPT11bmRlZmluZWQmJmwucD09PXVuZGVmaW5lZCl7dmFyIFA9bmV3IHcoKTtQLnNldFByaXZhdGUobC5uLGwuZSxsLmQpO3JldHVybiBQfWlmKGwucCE9PXVuZGVmaW5lZCYmbC5xIT09dW5kZWZpbmVkJiZsLmchPT11bmRlZmluZWQmJmwueSE9PXVuZGVmaW5lZCYmbC54PT09dW5kZWZpbmVkKXt2YXIgUD1uZXcgQygpO1Auc2V0UHVibGljKGwucCxsLnEsbC5nLGwueSk7cmV0dXJuIFB9aWYobC5wIT09dW5kZWZpbmVkJiZsLnEhPT11bmRlZmluZWQmJmwuZyE9PXVuZGVmaW5lZCYmbC55IT09dW5kZWZpbmVkJiZsLnghPT11bmRlZmluZWQpe3ZhciBQPW5ldyBDKCk7UC5zZXRQcml2YXRlKGwucCxsLnEsbC5nLGwueSxsLngpO3JldHVybiBQfWlmKGwua3R5PT09XCJSU0FcIiYmbC5uIT09dW5kZWZpbmVkJiZsLmUhPT11bmRlZmluZWQmJmwuZD09PXVuZGVmaW5lZCl7dmFyIFA9bmV3IHcoKTtQLnNldFB1YmxpYyhiNjR1dG9oZXgobC5uKSxiNjR1dG9oZXgobC5lKSk7cmV0dXJuIFB9aWYobC5rdHk9PT1cIlJTQVwiJiZsLm4hPT11bmRlZmluZWQmJmwuZSE9PXVuZGVmaW5lZCYmbC5kIT09dW5kZWZpbmVkJiZsLnAhPT11bmRlZmluZWQmJmwucSE9PXVuZGVmaW5lZCYmbC5kcCE9PXVuZGVmaW5lZCYmbC5kcSE9PXVuZGVmaW5lZCYmbC5xaSE9PXVuZGVmaW5lZCl7dmFyIFA9bmV3IHcoKTtQLnNldFByaXZhdGVFeChiNjR1dG9oZXgobC5uKSxiNjR1dG9oZXgobC5lKSxiNjR1dG9oZXgobC5kKSxiNjR1dG9oZXgobC5wKSxiNjR1dG9oZXgobC5xKSxiNjR1dG9oZXgobC5kcCksYjY0dXRvaGV4KGwuZHEpLGI2NHV0b2hleChsLnFpKSk7cmV0dXJuIFB9aWYobC5rdHk9PT1cIlJTQVwiJiZsLm4hPT11bmRlZmluZWQmJmwuZSE9PXVuZGVmaW5lZCYmbC5kIT09dW5kZWZpbmVkKXt2YXIgUD1uZXcgdygpO1Auc2V0UHJpdmF0ZShiNjR1dG9oZXgobC5uKSxiNjR1dG9oZXgobC5lKSxiNjR1dG9oZXgobC5kKSk7cmV0dXJuIFB9aWYobC5rdHk9PT1cIkVDXCImJmwuY3J2IT09dW5kZWZpbmVkJiZsLnghPT11bmRlZmluZWQmJmwueSE9PXVuZGVmaW5lZCYmbC5kPT09dW5kZWZpbmVkKXt2YXIgaj1uZXcgaSh7Y3VydmU6bC5jcnZ9KTt2YXIgdD1qLmVjcGFyYW1zLmtleWxlbi80O3ZhciBCPShcIjAwMDAwMDAwMDBcIitiNjR1dG9oZXgobC54KSkuc2xpY2UoLXQpO3ZhciB6PShcIjAwMDAwMDAwMDBcIitiNjR1dG9oZXgobC55KSkuc2xpY2UoLXQpO3ZhciB1PVwiMDRcIitCK3o7ai5zZXRQdWJsaWNLZXlIZXgodSk7cmV0dXJuIGp9aWYobC5rdHk9PT1cIkVDXCImJmwuY3J2IT09dW5kZWZpbmVkJiZsLnghPT11bmRlZmluZWQmJmwueSE9PXVuZGVmaW5lZCYmbC5kIT09dW5kZWZpbmVkKXt2YXIgaj1uZXcgaSh7Y3VydmU6bC5jcnZ9KTt2YXIgdD1qLmVjcGFyYW1zLmtleWxlbi80O3ZhciBCPShcIjAwMDAwMDAwMDBcIitiNjR1dG9oZXgobC54KSkuc2xpY2UoLXQpO3ZhciB6PShcIjAwMDAwMDAwMDBcIitiNjR1dG9oZXgobC55KSkuc2xpY2UoLXQpO3ZhciB1PVwiMDRcIitCK3o7dmFyIGI9KFwiMDAwMDAwMDAwMFwiK2I2NHV0b2hleChsLmQpKS5zbGljZSgtdCk7ai5zZXRQdWJsaWNLZXlIZXgodSk7ai5zZXRQcml2YXRlS2V5SGV4KGIpO3JldHVybiBqfWlmKG49PT1cInBrY3M1cHJ2XCIpe3ZhciBKPWwsRz1BU04xSEVYLE4sUDtOPUwoSiwwKTtpZihOLmxlbmd0aD09PTkpe1A9bmV3IHcoKTtQLnJlYWRQS0NTNVBydktleUhleChKKX1lbHNle2lmKE4ubGVuZ3RoPT09Nil7UD1uZXcgQygpO1AucmVhZFBLQ1M1UHJ2S2V5SGV4KEopfWVsc2V7aWYoTi5sZW5ndGg+MiYmSi5zdWJzdHIoTlsxXSwyKT09PVwiMDRcIil7UD1uZXcgaSgpO1AucmVhZFBLQ1M1UHJ2S2V5SGV4KEopfWVsc2V7dGhyb3dcInVuc3VwcG9ydGVkIFBLQ1MjMS81IGhleGFkZWNpbWFsIGtleVwifX19cmV0dXJuIFB9aWYobj09PVwicGtjczhwcnZcIil7dmFyIFA9Ri5nZXRLZXlGcm9tUGxhaW5Qcml2YXRlUEtDUzhIZXgobCk7cmV0dXJuIFB9aWYobj09PVwicGtjczhwdWJcIil7cmV0dXJuIEYuX2dldEtleUZyb21QdWJsaWNQS0NTOEhleChsKX1pZihuPT09XCJ4NTA5cHViXCIpe3JldHVybiBYNTA5LmdldFB1YmxpY0tleUZyb21DZXJ0SGV4KGwpfWlmKGwuaW5kZXhPZihcIi1FTkQgQ0VSVElGSUNBVEUtXCIsMCkhPS0xfHxsLmluZGV4T2YoXCItRU5EIFg1MDkgQ0VSVElGSUNBVEUtXCIsMCkhPS0xfHxsLmluZGV4T2YoXCItRU5EIFRSVVNURUQgQ0VSVElGSUNBVEUtXCIsMCkhPS0xKXtyZXR1cm4gWDUwOS5nZXRQdWJsaWNLZXlGcm9tQ2VydFBFTShsKX1pZihsLmluZGV4T2YoXCItRU5EIFBVQkxJQyBLRVktXCIpIT0tMSl7dmFyIE89cGVtdG9oZXgobCxcIlBVQkxJQyBLRVlcIik7cmV0dXJuIEYuX2dldEtleUZyb21QdWJsaWNQS0NTOEhleChPKX1pZihsLmluZGV4T2YoXCItRU5EIFJTQSBQUklWQVRFIEtFWS1cIikhPS0xJiZsLmluZGV4T2YoXCI0LEVOQ1JZUFRFRFwiKT09LTEpe3ZhciBtPU0obCxcIlJTQSBQUklWQVRFIEtFWVwiKTtyZXR1cm4gRi5nZXRLZXkobSxudWxsLFwicGtjczVwcnZcIil9aWYobC5pbmRleE9mKFwiLUVORCBEU0EgUFJJVkFURSBLRVktXCIpIT0tMSYmbC5pbmRleE9mKFwiNCxFTkNSWVBURURcIik9PS0xKXt2YXIgST1NKGwsXCJEU0EgUFJJVkFURSBLRVlcIik7dmFyIEU9ZChJLDAsWzFdLFwiMDJcIik7dmFyIEQ9ZChJLDAsWzJdLFwiMDJcIik7dmFyIEs9ZChJLDAsWzNdLFwiMDJcIik7dmFyIHI9ZChJLDAsWzRdLFwiMDJcIik7dmFyIHM9ZChJLDAsWzVdLFwiMDJcIik7dmFyIFA9bmV3IEMoKTtQLnNldFByaXZhdGUobmV3IEJpZ0ludGVnZXIoRSwxNiksbmV3IEJpZ0ludGVnZXIoRCwxNiksbmV3IEJpZ0ludGVnZXIoSywxNiksbmV3IEJpZ0ludGVnZXIociwxNiksbmV3IEJpZ0ludGVnZXIocywxNikpO3JldHVybiBQfWlmKGwuaW5kZXhPZihcIi1FTkQgRUMgUFJJVkFURSBLRVktXCIpIT0tMSYmbC5pbmRleE9mKFwiNCxFTkNSWVBURURcIik9PS0xKXt2YXIgbT1NKGwsXCJFQyBQUklWQVRFIEtFWVwiKTtyZXR1cm4gRi5nZXRLZXkobSxudWxsLFwicGtjczVwcnZcIil9aWYobC5pbmRleE9mKFwiLUVORCBQUklWQVRFIEtFWS1cIikhPS0xKXtyZXR1cm4gRi5nZXRLZXlGcm9tUGxhaW5Qcml2YXRlUEtDUzhQRU0obCl9aWYobC5pbmRleE9mKFwiLUVORCBSU0EgUFJJVkFURSBLRVktXCIpIT0tMSYmbC5pbmRleE9mKFwiNCxFTkNSWVBURURcIikhPS0xKXt2YXIgbz1GLmdldERlY3J5cHRlZEtleUhleChsLGspO3ZhciBIPW5ldyBSU0FLZXkoKTtILnJlYWRQS0NTNVBydktleUhleChvKTtyZXR1cm4gSH1pZihsLmluZGV4T2YoXCItRU5EIEVDIFBSSVZBVEUgS0VZLVwiKSE9LTEmJmwuaW5kZXhPZihcIjQsRU5DUllQVEVEXCIpIT0tMSl7dmFyIEk9Ri5nZXREZWNyeXB0ZWRLZXlIZXgobCxrKTt2YXIgUD1kKEksMCxbMV0sXCIwNFwiKTt2YXIgZj1kKEksMCxbMiwwXSxcIjA2XCIpO3ZhciBBPWQoSSwwLFszLDBdLFwiMDNcIikuc3Vic3RyKDIpO3ZhciBlPVwiXCI7aWYoS0pVUi5jcnlwdG8uT0lELm9pZGhleDJuYW1lW2ZdIT09dW5kZWZpbmVkKXtlPUtKVVIuY3J5cHRvLk9JRC5vaWRoZXgybmFtZVtmXX1lbHNle3Rocm93XCJ1bmRlZmluZWQgT0lEKGhleCkgaW4gS0pVUi5jcnlwdG8uT0lEOiBcIitmfXZhciBqPW5ldyBpKHtjdXJ2ZTplfSk7ai5zZXRQdWJsaWNLZXlIZXgoQSk7ai5zZXRQcml2YXRlS2V5SGV4KFApO2ouaXNQdWJsaWM9ZmFsc2U7cmV0dXJuIGp9aWYobC5pbmRleE9mKFwiLUVORCBEU0EgUFJJVkFURSBLRVktXCIpIT0tMSYmbC5pbmRleE9mKFwiNCxFTkNSWVBURURcIikhPS0xKXt2YXIgST1GLmdldERlY3J5cHRlZEtleUhleChsLGspO3ZhciBFPWQoSSwwLFsxXSxcIjAyXCIpO3ZhciBEPWQoSSwwLFsyXSxcIjAyXCIpO3ZhciBLPWQoSSwwLFszXSxcIjAyXCIpO3ZhciByPWQoSSwwLFs0XSxcIjAyXCIpO3ZhciBzPWQoSSwwLFs1XSxcIjAyXCIpO3ZhciBQPW5ldyBDKCk7UC5zZXRQcml2YXRlKG5ldyBCaWdJbnRlZ2VyKEUsMTYpLG5ldyBCaWdJbnRlZ2VyKEQsMTYpLG5ldyBCaWdJbnRlZ2VyKEssMTYpLG5ldyBCaWdJbnRlZ2VyKHIsMTYpLG5ldyBCaWdJbnRlZ2VyKHMsMTYpKTtyZXR1cm4gUH1pZihsLmluZGV4T2YoXCItRU5EIEVOQ1JZUFRFRCBQUklWQVRFIEtFWS1cIikhPS0xKXtyZXR1cm4gRi5nZXRLZXlGcm9tRW5jcnlwdGVkUEtDUzhQRU0obCxrKX10aHJvdyBuZXcgRXJyb3IoXCJub3Qgc3VwcG9ydGVkIGFyZ3VtZW50XCIpfTtLRVlVVElMLmdlbmVyYXRlS2V5cGFpcj1mdW5jdGlvbihhLGMpe2lmKGE9PVwiUlNBXCIpe3ZhciBiPWM7dmFyIGg9bmV3IFJTQUtleSgpO2guZ2VuZXJhdGUoYixcIjEwMDAxXCIpO2guaXNQcml2YXRlPXRydWU7aC5pc1B1YmxpYz10cnVlO3ZhciBmPW5ldyBSU0FLZXkoKTt2YXIgZT1oLm4udG9TdHJpbmcoMTYpO3ZhciBpPWguZS50b1N0cmluZygxNik7Zi5zZXRQdWJsaWMoZSxpKTtmLmlzUHJpdmF0ZT1mYWxzZTtmLmlzUHVibGljPXRydWU7dmFyIGs9e307ay5wcnZLZXlPYmo9aDtrLnB1YktleU9iaj1mO3JldHVybiBrfWVsc2V7aWYoYT09XCJFQ1wiKXt2YXIgZD1jO3ZhciBnPW5ldyBLSlVSLmNyeXB0by5FQ0RTQSh7Y3VydmU6ZH0pO3ZhciBqPWcuZ2VuZXJhdGVLZXlQYWlySGV4KCk7dmFyIGg9bmV3IEtKVVIuY3J5cHRvLkVDRFNBKHtjdXJ2ZTpkfSk7aC5zZXRQdWJsaWNLZXlIZXgoai5lY3B1YmhleCk7aC5zZXRQcml2YXRlS2V5SGV4KGouZWNwcnZoZXgpO2guaXNQcml2YXRlPXRydWU7aC5pc1B1YmxpYz1mYWxzZTt2YXIgZj1uZXcgS0pVUi5jcnlwdG8uRUNEU0Eoe2N1cnZlOmR9KTtmLnNldFB1YmxpY0tleUhleChqLmVjcHViaGV4KTtmLmlzUHJpdmF0ZT1mYWxzZTtmLmlzUHVibGljPXRydWU7dmFyIGs9e307ay5wcnZLZXlPYmo9aDtrLnB1YktleU9iaj1mO3JldHVybiBrfWVsc2V7dGhyb3dcInVua25vd24gYWxnb3JpdGhtOiBcIithfX19O0tFWVVUSUwuZ2V0UEVNPWZ1bmN0aW9uKGIsRCx5LG0scSxqKXt2YXIgRj1LSlVSLGs9Ri5hc24xLHo9ay5ERVJPYmplY3RJZGVudGlmaWVyLGY9ay5ERVJJbnRlZ2VyLGw9ay5BU04xVXRpbC5uZXdPYmplY3QsYT1rLng1MDksQz1hLlN1YmplY3RQdWJsaWNLZXlJbmZvLGU9Ri5jcnlwdG8sdT1lLkRTQSxyPWUuRUNEU0Esbj1SU0FLZXk7ZnVuY3Rpb24gQShzKXt2YXIgRz1sKHtzZXE6W3tcImludFwiOjB9LHtcImludFwiOntiaWdpbnQ6cy5ufX0se1wiaW50XCI6cy5lfSx7XCJpbnRcIjp7YmlnaW50OnMuZH19LHtcImludFwiOntiaWdpbnQ6cy5wfX0se1wiaW50XCI6e2JpZ2ludDpzLnF9fSx7XCJpbnRcIjp7YmlnaW50OnMuZG1wMX19LHtcImludFwiOntiaWdpbnQ6cy5kbXExfX0se1wiaW50XCI6e2JpZ2ludDpzLmNvZWZmfX1dfSk7cmV0dXJuIEd9ZnVuY3Rpb24gQihHKXt2YXIgcz1sKHtzZXE6W3tcImludFwiOjF9LHtvY3RzdHI6e2hleDpHLnBydktleUhleH19LHt0YWc6W1wiYTBcIix0cnVlLHtvaWQ6e25hbWU6Ry5jdXJ2ZU5hbWV9fV19LHt0YWc6W1wiYTFcIix0cnVlLHtiaXRzdHI6e2hleDpcIjAwXCIrRy5wdWJLZXlIZXh9fV19XX0pO3JldHVybiBzfWZ1bmN0aW9uIHgocyl7dmFyIEc9bCh7c2VxOlt7XCJpbnRcIjowfSx7XCJpbnRcIjp7YmlnaW50OnMucH19LHtcImludFwiOntiaWdpbnQ6cy5xfX0se1wiaW50XCI6e2JpZ2ludDpzLmd9fSx7XCJpbnRcIjp7YmlnaW50OnMueX19LHtcImludFwiOntiaWdpbnQ6cy54fX1dfSk7cmV0dXJuIEd9aWYoKChuIT09dW5kZWZpbmVkJiZiIGluc3RhbmNlb2Ygbil8fCh1IT09dW5kZWZpbmVkJiZiIGluc3RhbmNlb2YgdSl8fChyIT09dW5kZWZpbmVkJiZiIGluc3RhbmNlb2YgcikpJiZiLmlzUHVibGljPT10cnVlJiYoRD09PXVuZGVmaW5lZHx8RD09XCJQS0NTOFBVQlwiKSl7dmFyIEU9bmV3IEMoYik7dmFyIHc9RS5nZXRFbmNvZGVkSGV4KCk7cmV0dXJuIGhleHRvcGVtKHcsXCJQVUJMSUMgS0VZXCIpfWlmKEQ9PVwiUEtDUzFQUlZcIiYmbiE9PXVuZGVmaW5lZCYmYiBpbnN0YW5jZW9mIG4mJih5PT09dW5kZWZpbmVkfHx5PT1udWxsKSYmYi5pc1ByaXZhdGU9PXRydWUpe3ZhciBFPUEoYik7dmFyIHc9RS5nZXRFbmNvZGVkSGV4KCk7cmV0dXJuIGhleHRvcGVtKHcsXCJSU0EgUFJJVkFURSBLRVlcIil9aWYoRD09XCJQS0NTMVBSVlwiJiZyIT09dW5kZWZpbmVkJiZiIGluc3RhbmNlb2YgciYmKHk9PT11bmRlZmluZWR8fHk9PW51bGwpJiZiLmlzUHJpdmF0ZT09dHJ1ZSl7dmFyIGk9bmV3IHooe25hbWU6Yi5jdXJ2ZU5hbWV9KTt2YXIgdj1pLmdldEVuY29kZWRIZXgoKTt2YXIgaD1CKGIpO3ZhciB0PWguZ2V0RW5jb2RlZEhleCgpO3ZhciBwPVwiXCI7cCs9aGV4dG9wZW0odixcIkVDIFBBUkFNRVRFUlNcIik7cCs9aGV4dG9wZW0odCxcIkVDIFBSSVZBVEUgS0VZXCIpO3JldHVybiBwfWlmKEQ9PVwiUEtDUzFQUlZcIiYmdSE9PXVuZGVmaW5lZCYmYiBpbnN0YW5jZW9mIHUmJih5PT09dW5kZWZpbmVkfHx5PT1udWxsKSYmYi5pc1ByaXZhdGU9PXRydWUpe3ZhciBFPXgoYik7dmFyIHc9RS5nZXRFbmNvZGVkSGV4KCk7cmV0dXJuIGhleHRvcGVtKHcsXCJEU0EgUFJJVkFURSBLRVlcIil9aWYoRD09XCJQS0NTNVBSVlwiJiZuIT09dW5kZWZpbmVkJiZiIGluc3RhbmNlb2YgbiYmKHkhPT11bmRlZmluZWQmJnkhPW51bGwpJiZiLmlzUHJpdmF0ZT09dHJ1ZSl7dmFyIEU9QShiKTt2YXIgdz1FLmdldEVuY29kZWRIZXgoKTtpZihtPT09dW5kZWZpbmVkKXttPVwiREVTLUVERTMtQ0JDXCJ9cmV0dXJuIHRoaXMuZ2V0RW5jcnlwdGVkUEtDUzVQRU1Gcm9tUHJ2S2V5SGV4KFwiUlNBXCIsdyx5LG0sail9aWYoRD09XCJQS0NTNVBSVlwiJiZyIT09dW5kZWZpbmVkJiZiIGluc3RhbmNlb2YgciYmKHkhPT11bmRlZmluZWQmJnkhPW51bGwpJiZiLmlzUHJpdmF0ZT09dHJ1ZSl7dmFyIEU9QihiKTt2YXIgdz1FLmdldEVuY29kZWRIZXgoKTtpZihtPT09dW5kZWZpbmVkKXttPVwiREVTLUVERTMtQ0JDXCJ9cmV0dXJuIHRoaXMuZ2V0RW5jcnlwdGVkUEtDUzVQRU1Gcm9tUHJ2S2V5SGV4KFwiRUNcIix3LHksbSxqKX1pZihEPT1cIlBLQ1M1UFJWXCImJnUhPT11bmRlZmluZWQmJmIgaW5zdGFuY2VvZiB1JiYoeSE9PXVuZGVmaW5lZCYmeSE9bnVsbCkmJmIuaXNQcml2YXRlPT10cnVlKXt2YXIgRT14KGIpO3ZhciB3PUUuZ2V0RW5jb2RlZEhleCgpO2lmKG09PT11bmRlZmluZWQpe209XCJERVMtRURFMy1DQkNcIn1yZXR1cm4gdGhpcy5nZXRFbmNyeXB0ZWRQS0NTNVBFTUZyb21QcnZLZXlIZXgoXCJEU0FcIix3LHksbSxqKX12YXIgbz1mdW5jdGlvbihHLHMpe3ZhciBJPWMoRyxzKTt2YXIgSD1uZXcgbCh7c2VxOlt7c2VxOlt7b2lkOntuYW1lOlwicGtjczVQQkVTMlwifX0se3NlcTpbe3NlcTpbe29pZDp7bmFtZTpcInBrY3M1UEJLREYyXCJ9fSx7c2VxOlt7b2N0c3RyOntoZXg6SS5wYmtkZjJTYWx0fX0se1wiaW50XCI6SS5wYmtkZjJJdGVyfV19XX0se3NlcTpbe29pZDp7bmFtZTpcImRlcy1FREUzLUNCQ1wifX0se29jdHN0cjp7aGV4OkkuZW5jcnlwdGlvblNjaGVtZUlWfX1dfV19XX0se29jdHN0cjp7aGV4OkkuY2lwaGVydGV4dH19XX0pO3JldHVybiBILmdldEVuY29kZWRIZXgoKX07dmFyIGM9ZnVuY3Rpb24oTixPKXt2YXIgSD0xMDA7dmFyIE09Q3J5cHRvSlMubGliLldvcmRBcnJheS5yYW5kb20oOCk7dmFyIEw9XCJERVMtRURFMy1DQkNcIjt2YXIgcz1DcnlwdG9KUy5saWIuV29yZEFycmF5LnJhbmRvbSg4KTt2YXIgST1DcnlwdG9KUy5QQktERjIoTyxNLHtrZXlTaXplOjE5Mi8zMixpdGVyYXRpb25zOkh9KTt2YXIgSj1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKE4pO3ZhciBLPUNyeXB0b0pTLlRyaXBsZURFUy5lbmNyeXB0KEosSSx7aXY6c30pK1wiXCI7dmFyIEc9e307Ry5jaXBoZXJ0ZXh0PUs7Ry5wYmtkZjJTYWx0PUNyeXB0b0pTLmVuYy5IZXguc3RyaW5naWZ5KE0pO0cucGJrZGYySXRlcj1IO0cuZW5jcnlwdGlvblNjaGVtZUFsZz1MO0cuZW5jcnlwdGlvblNjaGVtZUlWPUNyeXB0b0pTLmVuYy5IZXguc3RyaW5naWZ5KHMpO3JldHVybiBHfTtpZihEPT1cIlBLQ1M4UFJWXCImJm4hPXVuZGVmaW5lZCYmYiBpbnN0YW5jZW9mIG4mJmIuaXNQcml2YXRlPT10cnVlKXt2YXIgZz1BKGIpO3ZhciBkPWcuZ2V0RW5jb2RlZEhleCgpO3ZhciBFPWwoe3NlcTpbe1wiaW50XCI6MH0se3NlcTpbe29pZDp7bmFtZTpcInJzYUVuY3J5cHRpb25cIn19LHtcIm51bGxcIjp0cnVlfV19LHtvY3RzdHI6e2hleDpkfX1dfSk7dmFyIHc9RS5nZXRFbmNvZGVkSGV4KCk7aWYoeT09PXVuZGVmaW5lZHx8eT09bnVsbCl7cmV0dXJuIGhleHRvcGVtKHcsXCJQUklWQVRFIEtFWVwiKX1lbHNle3ZhciB0PW8odyx5KTtyZXR1cm4gaGV4dG9wZW0odCxcIkVOQ1JZUFRFRCBQUklWQVRFIEtFWVwiKX19aWYoRD09XCJQS0NTOFBSVlwiJiZyIT09dW5kZWZpbmVkJiZiIGluc3RhbmNlb2YgciYmYi5pc1ByaXZhdGU9PXRydWUpe3ZhciBnPW5ldyBsKHtzZXE6W3tcImludFwiOjF9LHtvY3RzdHI6e2hleDpiLnBydktleUhleH19LHt0YWc6W1wiYTFcIix0cnVlLHtiaXRzdHI6e2hleDpcIjAwXCIrYi5wdWJLZXlIZXh9fV19XX0pO3ZhciBkPWcuZ2V0RW5jb2RlZEhleCgpO3ZhciBFPWwoe3NlcTpbe1wiaW50XCI6MH0se3NlcTpbe29pZDp7bmFtZTpcImVjUHVibGljS2V5XCJ9fSx7b2lkOntuYW1lOmIuY3VydmVOYW1lfX1dfSx7b2N0c3RyOntoZXg6ZH19XX0pO3ZhciB3PUUuZ2V0RW5jb2RlZEhleCgpO2lmKHk9PT11bmRlZmluZWR8fHk9PW51bGwpe3JldHVybiBoZXh0b3BlbSh3LFwiUFJJVkFURSBLRVlcIil9ZWxzZXt2YXIgdD1vKHcseSk7cmV0dXJuIGhleHRvcGVtKHQsXCJFTkNSWVBURUQgUFJJVkFURSBLRVlcIil9fWlmKEQ9PVwiUEtDUzhQUlZcIiYmdSE9PXVuZGVmaW5lZCYmYiBpbnN0YW5jZW9mIHUmJmIuaXNQcml2YXRlPT10cnVlKXt2YXIgZz1uZXcgZih7YmlnaW50OmIueH0pO3ZhciBkPWcuZ2V0RW5jb2RlZEhleCgpO3ZhciBFPWwoe3NlcTpbe1wiaW50XCI6MH0se3NlcTpbe29pZDp7bmFtZTpcImRzYVwifX0se3NlcTpbe1wiaW50XCI6e2JpZ2ludDpiLnB9fSx7XCJpbnRcIjp7YmlnaW50OmIucX19LHtcImludFwiOntiaWdpbnQ6Yi5nfX1dfV19LHtvY3RzdHI6e2hleDpkfX1dfSk7dmFyIHc9RS5nZXRFbmNvZGVkSGV4KCk7aWYoeT09PXVuZGVmaW5lZHx8eT09bnVsbCl7cmV0dXJuIGhleHRvcGVtKHcsXCJQUklWQVRFIEtFWVwiKX1lbHNle3ZhciB0PW8odyx5KTtyZXR1cm4gaGV4dG9wZW0odCxcIkVOQ1JZUFRFRCBQUklWQVRFIEtFWVwiKX19dGhyb3cgbmV3IEVycm9yKFwidW5zdXBwb3J0ZWQgb2JqZWN0IG5vciBmb3JtYXRcIil9O0tFWVVUSUwuZ2V0S2V5RnJvbUNTUlBFTT1mdW5jdGlvbihiKXt2YXIgYT1wZW10b2hleChiLFwiQ0VSVElGSUNBVEUgUkVRVUVTVFwiKTt2YXIgYz1LRVlVVElMLmdldEtleUZyb21DU1JIZXgoYSk7cmV0dXJuIGN9O0tFWVVUSUwuZ2V0S2V5RnJvbUNTUkhleD1mdW5jdGlvbihhKXt2YXIgYz1LRVlVVElMLnBhcnNlQ1NSSGV4KGEpO3ZhciBiPUtFWVVUSUwuZ2V0S2V5KGMucDhwdWJrZXloZXgsbnVsbCxcInBrY3M4cHViXCIpO3JldHVybiBifTtLRVlVVElMLnBhcnNlQ1NSSGV4PWZ1bmN0aW9uKGQpe3ZhciBpPUFTTjFIRVg7dmFyIGY9aS5nZXRDaGlsZElkeDt2YXIgYz1pLmdldFRMVjt2YXIgYj17fTt2YXIgZz1kO2lmKGcuc3Vic3RyKDAsMikhPVwiMzBcIil7dGhyb3dcIm1hbGZvcm1lZCBDU1IoY29kZTowMDEpXCJ9dmFyIGU9ZihnLDApO2lmKGUubGVuZ3RoPDEpe3Rocm93XCJtYWxmb3JtZWQgQ1NSKGNvZGU6MDAyKVwifWlmKGcuc3Vic3RyKGVbMF0sMikhPVwiMzBcIil7dGhyb3dcIm1hbGZvcm1lZCBDU1IoY29kZTowMDMpXCJ9dmFyIGE9ZihnLGVbMF0pO2lmKGEubGVuZ3RoPDMpe3Rocm93XCJtYWxmb3JtZWQgQ1NSKGNvZGU6MDA0KVwifWIucDhwdWJrZXloZXg9YyhnLGFbMl0pO3JldHVybiBifTtLRVlVVElMLmdldEtleUlEPWZ1bmN0aW9uKGYpe3ZhciBjPUtFWVVUSUw7dmFyIGU9QVNOMUhFWDtpZih0eXBlb2YgZj09PVwic3RyaW5nXCImJmYuaW5kZXhPZihcIkJFR0lOIFwiKSE9LTEpe2Y9Yy5nZXRLZXkoZil9dmFyIGQ9cGVtdG9oZXgoYy5nZXRQRU0oZikpO3ZhciBiPWUuZ2V0SWR4YnlMaXN0KGQsMCxbMV0pO3ZhciBhPWUuZ2V0VihkLGIpLnN1YnN0cmluZygyKTtyZXR1cm4gS0pVUi5jcnlwdG8uVXRpbC5oYXNoSGV4KGEsXCJzaGExXCIpfTtLRVlVVElMLmdldEpXS0Zyb21LZXk9ZnVuY3Rpb24oZCl7dmFyIGI9e307aWYoZCBpbnN0YW5jZW9mIFJTQUtleSYmZC5pc1ByaXZhdGUpe2Iua3R5PVwiUlNBXCI7Yi5uPWhleHRvYjY0dShkLm4udG9TdHJpbmcoMTYpKTtiLmU9aGV4dG9iNjR1KGQuZS50b1N0cmluZygxNikpO2IuZD1oZXh0b2I2NHUoZC5kLnRvU3RyaW5nKDE2KSk7Yi5wPWhleHRvYjY0dShkLnAudG9TdHJpbmcoMTYpKTtiLnE9aGV4dG9iNjR1KGQucS50b1N0cmluZygxNikpO2IuZHA9aGV4dG9iNjR1KGQuZG1wMS50b1N0cmluZygxNikpO2IuZHE9aGV4dG9iNjR1KGQuZG1xMS50b1N0cmluZygxNikpO2IucWk9aGV4dG9iNjR1KGQuY29lZmYudG9TdHJpbmcoMTYpKTtyZXR1cm4gYn1lbHNle2lmKGQgaW5zdGFuY2VvZiBSU0FLZXkmJmQuaXNQdWJsaWMpe2Iua3R5PVwiUlNBXCI7Yi5uPWhleHRvYjY0dShkLm4udG9TdHJpbmcoMTYpKTtiLmU9aGV4dG9iNjR1KGQuZS50b1N0cmluZygxNikpO3JldHVybiBifWVsc2V7aWYoZCBpbnN0YW5jZW9mIEtKVVIuY3J5cHRvLkVDRFNBJiZkLmlzUHJpdmF0ZSl7dmFyIGE9ZC5nZXRTaG9ydE5JU1RQQ3VydmVOYW1lKCk7aWYoYSE9PVwiUC0yNTZcIiYmYSE9PVwiUC0zODRcIil7dGhyb3dcInVuc3VwcG9ydGVkIGN1cnZlIG5hbWUgZm9yIEpXVDogXCIrYX12YXIgYz1kLmdldFB1YmxpY0tleVhZSGV4KCk7Yi5rdHk9XCJFQ1wiO2IuY3J2PWE7Yi54PWhleHRvYjY0dShjLngpO2IueT1oZXh0b2I2NHUoYy55KTtiLmQ9aGV4dG9iNjR1KGQucHJ2S2V5SGV4KTtyZXR1cm4gYn1lbHNle2lmKGQgaW5zdGFuY2VvZiBLSlVSLmNyeXB0by5FQ0RTQSYmZC5pc1B1YmxpYyl7dmFyIGE9ZC5nZXRTaG9ydE5JU1RQQ3VydmVOYW1lKCk7aWYoYSE9PVwiUC0yNTZcIiYmYSE9PVwiUC0zODRcIil7dGhyb3dcInVuc3VwcG9ydGVkIGN1cnZlIG5hbWUgZm9yIEpXVDogXCIrYX12YXIgYz1kLmdldFB1YmxpY0tleVhZSGV4KCk7Yi5rdHk9XCJFQ1wiO2IuY3J2PWE7Yi54PWhleHRvYjY0dShjLngpO2IueT1oZXh0b2I2NHUoYy55KTtyZXR1cm4gYn19fX10aHJvd1wibm90IHN1cHBvcnRlZCBrZXkgb2JqZWN0XCJ9O1xuUlNBS2V5LmdldFBvc0FycmF5T2ZDaGlsZHJlbkZyb21IZXg9ZnVuY3Rpb24oYSl7cmV0dXJuIEFTTjFIRVguZ2V0Q2hpbGRJZHgoYSwwKX07UlNBS2V5LmdldEhleFZhbHVlQXJyYXlPZkNoaWxkcmVuRnJvbUhleD1mdW5jdGlvbihmKXt2YXIgbj1BU04xSEVYO3ZhciBpPW4uZ2V0Vjt2YXIgaz1SU0FLZXkuZ2V0UG9zQXJyYXlPZkNoaWxkcmVuRnJvbUhleChmKTt2YXIgZT1pKGYsa1swXSk7dmFyIGo9aShmLGtbMV0pO3ZhciBiPWkoZixrWzJdKTt2YXIgYz1pKGYsa1szXSk7dmFyIGg9aShmLGtbNF0pO3ZhciBnPWkoZixrWzVdKTt2YXIgbT1pKGYsa1s2XSk7dmFyIGw9aShmLGtbN10pO3ZhciBkPWkoZixrWzhdKTt2YXIgaz1uZXcgQXJyYXkoKTtrLnB1c2goZSxqLGIsYyxoLGcsbSxsLGQpO3JldHVybiBrfTtSU0FLZXkucHJvdG90eXBlLnJlYWRQcml2YXRlS2V5RnJvbVBFTVN0cmluZz1mdW5jdGlvbihkKXt2YXIgYz1wZW10b2hleChkKTt2YXIgYj1SU0FLZXkuZ2V0SGV4VmFsdWVBcnJheU9mQ2hpbGRyZW5Gcm9tSGV4KGMpO3RoaXMuc2V0UHJpdmF0ZUV4KGJbMV0sYlsyXSxiWzNdLGJbNF0sYls1XSxiWzZdLGJbN10sYls4XSl9O1JTQUtleS5wcm90b3R5cGUucmVhZFBLQ1M1UHJ2S2V5SGV4PWZ1bmN0aW9uKGMpe3ZhciBiPVJTQUtleS5nZXRIZXhWYWx1ZUFycmF5T2ZDaGlsZHJlbkZyb21IZXgoYyk7dGhpcy5zZXRQcml2YXRlRXgoYlsxXSxiWzJdLGJbM10sYls0XSxiWzVdLGJbNl0sYls3XSxiWzhdKX07UlNBS2V5LnByb3RvdHlwZS5yZWFkUEtDUzhQcnZLZXlIZXg9ZnVuY3Rpb24oZSl7dmFyIGMsaSxrLGIsYSxmLGQsajt2YXIgbT1BU04xSEVYO3ZhciBsPW0uZ2V0VmJ5TGlzdEV4O2lmKG0uaXNBU04xSEVYKGUpPT09ZmFsc2Upe3Rocm93IG5ldyBFcnJvcihcIm5vdCBBU04uMSBoZXggc3RyaW5nXCIpfXRyeXtjPWwoZSwwLFsyLDAsMV0sXCIwMlwiKTtpPWwoZSwwLFsyLDAsMl0sXCIwMlwiKTtrPWwoZSwwLFsyLDAsM10sXCIwMlwiKTtiPWwoZSwwLFsyLDAsNF0sXCIwMlwiKTthPWwoZSwwLFsyLDAsNV0sXCIwMlwiKTtmPWwoZSwwLFsyLDAsNl0sXCIwMlwiKTtkPWwoZSwwLFsyLDAsN10sXCIwMlwiKTtqPWwoZSwwLFsyLDAsOF0sXCIwMlwiKX1jYXRjaChnKXt0aHJvdyBuZXcgRXJyb3IoXCJtYWxmb3JtZWQgUEtDUyM4IHBsYWluIFJTQSBwcml2YXRlIGtleVwiKX10aGlzLnNldFByaXZhdGVFeChjLGksayxiLGEsZixkLGopfTtSU0FLZXkucHJvdG90eXBlLnJlYWRQS0NTNVB1YktleUhleD1mdW5jdGlvbihjKXt2YXIgZT1BU04xSEVYO3ZhciBiPWUuZ2V0VjtpZihlLmlzQVNOMUhFWChjKT09PWZhbHNlKXt0aHJvdyBuZXcgRXJyb3IoXCJrZXlIZXggaXMgbm90IEFTTi4xIGhleCBzdHJpbmdcIil9dmFyIGE9ZS5nZXRDaGlsZElkeChjLDApO2lmKGEubGVuZ3RoIT09Mnx8Yy5zdWJzdHIoYVswXSwyKSE9PVwiMDJcInx8Yy5zdWJzdHIoYVsxXSwyKSE9PVwiMDJcIil7dGhyb3cgbmV3IEVycm9yKFwid3JvbmcgaGV4IGZvciBQS0NTIzUgcHVibGljIGtleVwiKX12YXIgZj1iKGMsYVswXSk7dmFyIGQ9YihjLGFbMV0pO3RoaXMuc2V0UHVibGljKGYsZCl9O1JTQUtleS5wcm90b3R5cGUucmVhZFBLQ1M4UHViS2V5SGV4PWZ1bmN0aW9uKGIpe3ZhciBjPUFTTjFIRVg7aWYoYy5pc0FTTjFIRVgoYik9PT1mYWxzZSl7dGhyb3cgbmV3IEVycm9yKFwibm90IEFTTi4xIGhleCBzdHJpbmdcIil9aWYoYy5nZXRUTFZieUxpc3RFeChiLDAsWzAsMF0pIT09XCIwNjA5MmE4NjQ4ODZmNzBkMDEwMTAxXCIpe3Rocm93IG5ldyBFcnJvcihcIm5vdCBQS0NTOCBSU0EgcHVibGljIGtleVwiKX12YXIgYT1jLmdldFRMVmJ5TGlzdEV4KGIsMCxbMSwwXSk7dGhpcy5yZWFkUEtDUzVQdWJLZXlIZXgoYSl9O1JTQUtleS5wcm90b3R5cGUucmVhZENlcnRQdWJLZXlIZXg9ZnVuY3Rpb24oYixkKXt2YXIgYSxjO2E9bmV3IFg1MDkoKTthLnJlYWRDZXJ0SGV4KGIpO2M9YS5nZXRQdWJsaWNLZXlIZXgoKTt0aGlzLnJlYWRQS0NTOFB1YktleUhleChjKX07XG52YXIgX1JFX0hFWERFQ09OTFk9bmV3IFJlZ0V4cChcIlteMC05YS1mXVwiLFwiZ2lcIik7ZnVuY3Rpb24gX3JzYXNpZ25fZ2V0SGV4UGFkZGVkRGlnZXN0SW5mb0ZvclN0cmluZyhkLGUsYSl7dmFyIGI9ZnVuY3Rpb24oZil7cmV0dXJuIEtKVVIuY3J5cHRvLlV0aWwuaGFzaFN0cmluZyhmLGEpfTt2YXIgYz1iKGQpO3JldHVybiBLSlVSLmNyeXB0by5VdGlsLmdldFBhZGRlZERpZ2VzdEluZm9IZXgoYyxhLGUpfWZ1bmN0aW9uIF96ZXJvUGFkZGluZ09mU2lnbmF0dXJlKGUsZCl7dmFyIGM9XCJcIjt2YXIgYT1kLzQtZS5sZW5ndGg7Zm9yKHZhciBiPTA7YjxhO2IrKyl7Yz1jK1wiMFwifXJldHVybiBjK2V9UlNBS2V5LnByb3RvdHlwZS5zaWduPWZ1bmN0aW9uKGQsYSl7dmFyIGI9ZnVuY3Rpb24oZSl7cmV0dXJuIEtKVVIuY3J5cHRvLlV0aWwuaGFzaFN0cmluZyhlLGEpfTt2YXIgYz1iKGQpO3JldHVybiB0aGlzLnNpZ25XaXRoTWVzc2FnZUhhc2goYyxhKX07UlNBS2V5LnByb3RvdHlwZS5zaWduV2l0aE1lc3NhZ2VIYXNoPWZ1bmN0aW9uKGUsYyl7dmFyIGY9S0pVUi5jcnlwdG8uVXRpbC5nZXRQYWRkZWREaWdlc3RJbmZvSGV4KGUsYyx0aGlzLm4uYml0TGVuZ3RoKCkpO3ZhciBiPXBhcnNlQmlnSW50KGYsMTYpO3ZhciBkPXRoaXMuZG9Qcml2YXRlKGIpO3ZhciBhPWQudG9TdHJpbmcoMTYpO3JldHVybiBfemVyb1BhZGRpbmdPZlNpZ25hdHVyZShhLHRoaXMubi5iaXRMZW5ndGgoKSl9O2Z1bmN0aW9uIHBzc19tZ2YxX3N0cihjLGEsZSl7dmFyIGI9XCJcIixkPTA7d2hpbGUoYi5sZW5ndGg8YSl7Yis9aGV4dG9yc3RyKGUocnN0cnRvaGV4KGMrU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsWyhkJjQyNzgxOTAwODApPj4yNCwoZCYxNjcxMTY4MCk+PjE2LChkJjY1MjgwKT4+OCxkJjI1NV0pKSkpO2QrPTF9cmV0dXJuIGJ9UlNBS2V5LnByb3RvdHlwZS5zaWduUFNTPWZ1bmN0aW9uKGUsYSxkKXt2YXIgYz1mdW5jdGlvbihmKXtyZXR1cm4gS0pVUi5jcnlwdG8uVXRpbC5oYXNoSGV4KGYsYSl9O3ZhciBiPWMocnN0cnRvaGV4KGUpKTtpZihkPT09dW5kZWZpbmVkKXtkPS0xfXJldHVybiB0aGlzLnNpZ25XaXRoTWVzc2FnZUhhc2hQU1MoYixhLGQpfTtSU0FLZXkucHJvdG90eXBlLnNpZ25XaXRoTWVzc2FnZUhhc2hQU1M9ZnVuY3Rpb24obCxhLGspe3ZhciBiPWhleHRvcnN0cihsKTt2YXIgZz1iLmxlbmd0aDt2YXIgbT10aGlzLm4uYml0TGVuZ3RoKCktMTt2YXIgYz1NYXRoLmNlaWwobS84KTt2YXIgZDt2YXIgbz1mdW5jdGlvbihpKXtyZXR1cm4gS0pVUi5jcnlwdG8uVXRpbC5oYXNoSGV4KGksYSl9O2lmKGs9PT0tMXx8az09PXVuZGVmaW5lZCl7az1nfWVsc2V7aWYoaz09PS0yKXtrPWMtZy0yfWVsc2V7aWYoazwtMil7dGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBzYWx0IGxlbmd0aFwiKX19fWlmKGM8KGcraysyKSl7dGhyb3cgbmV3IEVycm9yKFwiZGF0YSB0b28gbG9uZ1wiKX12YXIgZj1cIlwiO2lmKGs+MCl7Zj1uZXcgQXJyYXkoayk7bmV3IFNlY3VyZVJhbmRvbSgpLm5leHRCeXRlcyhmKTtmPVN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLGYpfXZhciBuPWhleHRvcnN0cihvKHJzdHJ0b2hleChcIlxceDAwXFx4MDBcXHgwMFxceDAwXFx4MDBcXHgwMFxceDAwXFx4MDBcIitiK2YpKSk7dmFyIGo9W107Zm9yKGQ9MDtkPGMtay1nLTI7ZCs9MSl7altkXT0wfXZhciBlPVN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLGopK1wiXFx4MDFcIitmO3ZhciBoPXBzc19tZ2YxX3N0cihuLGUubGVuZ3RoLG8pO3ZhciBxPVtdO2ZvcihkPTA7ZDxlLmxlbmd0aDtkKz0xKXtxW2RdPWUuY2hhckNvZGVBdChkKV5oLmNoYXJDb2RlQXQoZCl9dmFyIHA9KDY1MjgwPj4oOCpjLW0pKSYyNTU7cVswXSY9fnA7Zm9yKGQ9MDtkPGc7ZCsrKXtxLnB1c2gobi5jaGFyQ29kZUF0KGQpKX1xLnB1c2goMTg4KTtyZXR1cm4gX3plcm9QYWRkaW5nT2ZTaWduYXR1cmUodGhpcy5kb1ByaXZhdGUobmV3IEJpZ0ludGVnZXIocSkpLnRvU3RyaW5nKDE2KSx0aGlzLm4uYml0TGVuZ3RoKCkpfTtmdW5jdGlvbiBfcnNhc2lnbl9nZXREZWNyeXB0U2lnbmF0dXJlQkkoYSxkLGMpe3ZhciBiPW5ldyBSU0FLZXkoKTtiLnNldFB1YmxpYyhkLGMpO3ZhciBlPWIuZG9QdWJsaWMoYSk7cmV0dXJuIGV9ZnVuY3Rpb24gX3JzYXNpZ25fZ2V0SGV4RGlnZXN0SW5mb0Zyb21TaWcoYSxjLGIpe3ZhciBlPV9yc2FzaWduX2dldERlY3J5cHRTaWduYXR1cmVCSShhLGMsYik7dmFyIGQ9ZS50b1N0cmluZygxNikucmVwbGFjZSgvXjFmKzAwLyxcIlwiKTtyZXR1cm4gZH1mdW5jdGlvbiBfcnNhc2lnbl9nZXRBbGdOYW1lQW5kSGFzaEZyb21IZXhEaXNnZXN0SW5mbyhmKXtmb3IodmFyIGUgaW4gS0pVUi5jcnlwdG8uVXRpbC5ESUdFU1RJTkZPSEVBRCl7dmFyIGQ9S0pVUi5jcnlwdG8uVXRpbC5ESUdFU1RJTkZPSEVBRFtlXTt2YXIgYj1kLmxlbmd0aDtpZihmLnN1YnN0cmluZygwLGIpPT1kKXt2YXIgYz1bZSxmLnN1YnN0cmluZyhiKV07cmV0dXJuIGN9fXJldHVybltdfVJTQUtleS5wcm90b3R5cGUudmVyaWZ5PWZ1bmN0aW9uKGYsail7aj1qLnJlcGxhY2UoX1JFX0hFWERFQ09OTFksXCJcIik7aj1qLnJlcGxhY2UoL1sgXFxuXSsvZyxcIlwiKTt2YXIgYj1wYXJzZUJpZ0ludChqLDE2KTtpZihiLmJpdExlbmd0aCgpPnRoaXMubi5iaXRMZW5ndGgoKSl7cmV0dXJuIDB9dmFyIGk9dGhpcy5kb1B1YmxpYyhiKTt2YXIgZT1pLnRvU3RyaW5nKDE2KS5yZXBsYWNlKC9eMWYrMDAvLFwiXCIpO3ZhciBnPV9yc2FzaWduX2dldEFsZ05hbWVBbmRIYXNoRnJvbUhleERpc2dlc3RJbmZvKGUpO2lmKGcubGVuZ3RoPT0wKXtyZXR1cm4gZmFsc2V9dmFyIGQ9Z1swXTt2YXIgaD1nWzFdO3ZhciBhPWZ1bmN0aW9uKGspe3JldHVybiBLSlVSLmNyeXB0by5VdGlsLmhhc2hTdHJpbmcoayxkKX07dmFyIGM9YShmKTtyZXR1cm4oaD09Yyl9O1JTQUtleS5wcm90b3R5cGUudmVyaWZ5V2l0aE1lc3NhZ2VIYXNoPWZ1bmN0aW9uKGUsYSl7aWYoYS5sZW5ndGghPU1hdGguY2VpbCh0aGlzLm4uYml0TGVuZ3RoKCkvNCkpe3JldHVybiBmYWxzZX12YXIgYj1wYXJzZUJpZ0ludChhLDE2KTtpZihiLmJpdExlbmd0aCgpPnRoaXMubi5iaXRMZW5ndGgoKSl7cmV0dXJuIDB9dmFyIGg9dGhpcy5kb1B1YmxpYyhiKTt2YXIgZz1oLnRvU3RyaW5nKDE2KS5yZXBsYWNlKC9eMWYrMDAvLFwiXCIpO3ZhciBjPV9yc2FzaWduX2dldEFsZ05hbWVBbmRIYXNoRnJvbUhleERpc2dlc3RJbmZvKGcpO2lmKGMubGVuZ3RoPT0wKXtyZXR1cm4gZmFsc2V9dmFyIGQ9Y1swXTt2YXIgZj1jWzFdO3JldHVybihmPT1lKX07UlNBS2V5LnByb3RvdHlwZS52ZXJpZnlQU1M9ZnVuY3Rpb24oYyxiLGEsZil7dmFyIGU9ZnVuY3Rpb24oZyl7cmV0dXJuIEtKVVIuY3J5cHRvLlV0aWwuaGFzaEhleChnLGEpfTt2YXIgZD1lKHJzdHJ0b2hleChjKSk7aWYoZj09PXVuZGVmaW5lZCl7Zj0tMX1yZXR1cm4gdGhpcy52ZXJpZnlXaXRoTWVzc2FnZUhhc2hQU1MoZCxiLGEsZil9O1JTQUtleS5wcm90b3R5cGUudmVyaWZ5V2l0aE1lc3NhZ2VIYXNoUFNTPWZ1bmN0aW9uKGYscyxsLGMpe2lmKHMubGVuZ3RoIT1NYXRoLmNlaWwodGhpcy5uLmJpdExlbmd0aCgpLzQpKXtyZXR1cm4gZmFsc2V9dmFyIGs9bmV3IEJpZ0ludGVnZXIocywxNik7dmFyIHI9ZnVuY3Rpb24oaSl7cmV0dXJuIEtKVVIuY3J5cHRvLlV0aWwuaGFzaEhleChpLGwpfTt2YXIgaj1oZXh0b3JzdHIoZik7dmFyIGg9ai5sZW5ndGg7dmFyIGc9dGhpcy5uLmJpdExlbmd0aCgpLTE7dmFyIG09TWF0aC5jZWlsKGcvOCk7dmFyIHE7aWYoYz09PS0xfHxjPT09dW5kZWZpbmVkKXtjPWh9ZWxzZXtpZihjPT09LTIpe2M9bS1oLTJ9ZWxzZXtpZihjPC0yKXt0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHNhbHQgbGVuZ3RoXCIpfX19aWYobTwoaCtjKzIpKXt0aHJvdyBuZXcgRXJyb3IoXCJkYXRhIHRvbyBsb25nXCIpfXZhciBhPXRoaXMuZG9QdWJsaWMoaykudG9CeXRlQXJyYXkoKTtmb3IocT0wO3E8YS5sZW5ndGg7cSs9MSl7YVtxXSY9MjU1fXdoaWxlKGEubGVuZ3RoPG0pe2EudW5zaGlmdCgwKX1pZihhW20tMV0hPT0xODgpe3Rocm93IG5ldyBFcnJvcihcImVuY29kZWQgbWVzc2FnZSBkb2VzIG5vdCBlbmQgaW4gMHhiY1wiKX1hPVN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLGEpO3ZhciBkPWEuc3Vic3RyKDAsbS1oLTEpO3ZhciBlPWEuc3Vic3RyKGQubGVuZ3RoLGgpO3ZhciBwPSg2NTI4MD4+KDgqbS1nKSkmMjU1O2lmKChkLmNoYXJDb2RlQXQoMCkmcCkhPT0wKXt0aHJvdyBuZXcgRXJyb3IoXCJiaXRzIGJleW9uZCBrZXlzaXplIG5vdCB6ZXJvXCIpfXZhciBuPXBzc19tZ2YxX3N0cihlLGQubGVuZ3RoLHIpO3ZhciBvPVtdO2ZvcihxPTA7cTxkLmxlbmd0aDtxKz0xKXtvW3FdPWQuY2hhckNvZGVBdChxKV5uLmNoYXJDb2RlQXQocSl9b1swXSY9fnA7dmFyIGI9bS1oLWMtMjtmb3IocT0wO3E8YjtxKz0xKXtpZihvW3FdIT09MCl7dGhyb3cgbmV3IEVycm9yKFwibGVmdG1vc3Qgb2N0ZXRzIG5vdCB6ZXJvXCIpfX1pZihvW2JdIT09MSl7dGhyb3cgbmV3IEVycm9yKFwiMHgwMSBtYXJrZXIgbm90IGZvdW5kXCIpfXJldHVybiBlPT09aGV4dG9yc3RyKHIocnN0cnRvaGV4KFwiXFx4MDBcXHgwMFxceDAwXFx4MDBcXHgwMFxceDAwXFx4MDBcXHgwMFwiK2orU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsby5zbGljZSgtYykpKSkpfTtSU0FLZXkuU0FMVF9MRU5fSExFTj0tMTtSU0FLZXkuU0FMVF9MRU5fTUFYPS0yO1JTQUtleS5TQUxUX0xFTl9SRUNPVkVSPS0yO1xuZnVuY3Rpb24gWDUwOShxKXt2YXIgaj1BU04xSEVYLG49ai5nZXRDaGlsZElkeCxnPWouZ2V0VixiPWouZ2V0VExWLGM9ai5nZXRWYnlMaXN0LGs9ai5nZXRWYnlMaXN0RXgsYT1qLmdldFRMVmJ5TGlzdCxsPWouZ2V0VExWYnlMaXN0RXgsaD1qLmdldElkeGJ5TGlzdCxlPWouZ2V0SWR4YnlMaXN0RXgsaT1qLmdldFZpZHgscD1qLm9pZG5hbWUsbT1qLmhleHRvb2lkc3RyLGQ9WDUwOSxyPXBlbXRvaGV4LGY7dHJ5e2Y9S0pVUi5hc24xLng1MDkuQWxnb3JpdGhtSWRlbnRpZmllci5QU1NOQU1FMkFTTjFUTFZ9Y2F0Y2gobyl7fXRoaXMuSEVYMlNUQUc9e1wiMGNcIjpcInV0ZjhcIixcIjEzXCI6XCJwcm5cIixcIjE2XCI6XCJpYTVcIixcIjFhXCI6XCJ2aXNcIixcIjFlXCI6XCJibXBcIn07dGhpcy5oZXg9bnVsbDt0aGlzLnZlcnNpb249MDt0aGlzLmZvZmZzZXQ9MDt0aGlzLmFFeHRJbmZvPW51bGw7dGhpcy5nZXRWZXJzaW9uPWZ1bmN0aW9uKCl7aWYodGhpcy5oZXg9PT1udWxsfHx0aGlzLnZlcnNpb24hPT0wKXtyZXR1cm4gdGhpcy52ZXJzaW9ufWlmKGEodGhpcy5oZXgsMCxbMCwwXSkhPT1cImEwMDMwMjAxMDJcIil7dGhpcy52ZXJzaW9uPTE7dGhpcy5mb2Zmc2V0PS0xO3JldHVybiAxfXRoaXMudmVyc2lvbj0zO3JldHVybiAzfTt0aGlzLmdldFNlcmlhbE51bWJlckhleD1mdW5jdGlvbigpe3JldHVybiBrKHRoaXMuaGV4LDAsWzAsMF0sXCIwMlwiKX07dGhpcy5nZXRTaWduYXR1cmVBbGdvcml0aG1GaWVsZD1mdW5jdGlvbigpe3ZhciBzPWwodGhpcy5oZXgsMCxbMCwxXSk7cmV0dXJuIHRoaXMuZ2V0QWxnb3JpdGhtSWRlbnRpZmllck5hbWUocyl9O3RoaXMuZ2V0QWxnb3JpdGhtSWRlbnRpZmllck5hbWU9ZnVuY3Rpb24ocyl7Zm9yKHZhciB0IGluIGYpe2lmKHM9PT1mW3RdKXtyZXR1cm4gdH19cmV0dXJuIHAoayhzLDAsWzBdLFwiMDZcIikpfTt0aGlzLmdldElzc3Vlcj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmdldFg1MDBOYW1lKHRoaXMuZ2V0SXNzdWVySGV4KCkpfTt0aGlzLmdldElzc3VlckhleD1mdW5jdGlvbigpe3JldHVybiBhKHRoaXMuaGV4LDAsWzAsMyt0aGlzLmZvZmZzZXRdLFwiMzBcIil9O3RoaXMuZ2V0SXNzdWVyU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIGQuaGV4MmRuKHRoaXMuZ2V0SXNzdWVySGV4KCkpfTt0aGlzLmdldFN1YmplY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nZXRYNTAwTmFtZSh0aGlzLmdldFN1YmplY3RIZXgoKSl9O3RoaXMuZ2V0U3ViamVjdEhleD1mdW5jdGlvbigpe3JldHVybiBhKHRoaXMuaGV4LDAsWzAsNSt0aGlzLmZvZmZzZXRdLFwiMzBcIil9O3RoaXMuZ2V0U3ViamVjdFN0cmluZz1mdW5jdGlvbigpe3JldHVybiBkLmhleDJkbih0aGlzLmdldFN1YmplY3RIZXgoKSl9O3RoaXMuZ2V0Tm90QmVmb3JlPWZ1bmN0aW9uKCl7dmFyIHQ9Yyh0aGlzLmhleCwwLFswLDQrdGhpcy5mb2Zmc2V0LDBdKTt0PXQucmVwbGFjZSgvKC4uKS9nLFwiJSQxXCIpO3Q9ZGVjb2RlVVJJQ29tcG9uZW50KHQpO3JldHVybiB0fTt0aGlzLmdldE5vdEFmdGVyPWZ1bmN0aW9uKCl7dmFyIHQ9Yyh0aGlzLmhleCwwLFswLDQrdGhpcy5mb2Zmc2V0LDFdKTt0PXQucmVwbGFjZSgvKC4uKS9nLFwiJSQxXCIpO3Q9ZGVjb2RlVVJJQ29tcG9uZW50KHQpO3JldHVybiB0fTt0aGlzLmdldFB1YmxpY0tleUhleD1mdW5jdGlvbigpe3JldHVybiBqLmdldFRMVmJ5TGlzdCh0aGlzLmhleCwwLFswLDYrdGhpcy5mb2Zmc2V0XSxcIjMwXCIpfTt0aGlzLmdldFB1YmxpY0tleUlkeD1mdW5jdGlvbigpe3JldHVybiBoKHRoaXMuaGV4LDAsWzAsNit0aGlzLmZvZmZzZXRdLFwiMzBcIil9O3RoaXMuZ2V0UHVibGljS2V5Q29udGVudElkeD1mdW5jdGlvbigpe3ZhciBzPXRoaXMuZ2V0UHVibGljS2V5SWR4KCk7cmV0dXJuIGgodGhpcy5oZXgscyxbMSwwXSxcIjMwXCIpfTt0aGlzLmdldFB1YmxpY0tleT1mdW5jdGlvbigpe3JldHVybiBLRVlVVElMLmdldEtleSh0aGlzLmdldFB1YmxpY0tleUhleCgpLG51bGwsXCJwa2NzOHB1YlwiKX07dGhpcy5nZXRTaWduYXR1cmVBbGdvcml0aG1OYW1lPWZ1bmN0aW9uKCl7dmFyIHM9YSh0aGlzLmhleCwwLFsxXSxcIjMwXCIpO3JldHVybiB0aGlzLmdldEFsZ29yaXRobUlkZW50aWZpZXJOYW1lKHMpfTt0aGlzLmdldFNpZ25hdHVyZVZhbHVlSGV4PWZ1bmN0aW9uKCl7cmV0dXJuIGModGhpcy5oZXgsMCxbMl0sXCIwM1wiLHRydWUpfTt0aGlzLnZlcmlmeVNpZ25hdHVyZT1mdW5jdGlvbih1KXt2YXIgdj10aGlzLmdldFNpZ25hdHVyZUFsZ29yaXRobUZpZWxkKCk7dmFyIHM9dGhpcy5nZXRTaWduYXR1cmVWYWx1ZUhleCgpO3ZhciB0PWEodGhpcy5oZXgsMCxbMF0sXCIzMFwiKTt2YXIgdz1uZXcgS0pVUi5jcnlwdG8uU2lnbmF0dXJlKHthbGc6dn0pO3cuaW5pdCh1KTt3LnVwZGF0ZUhleCh0KTtyZXR1cm4gdy52ZXJpZnkocyl9O3RoaXMucGFyc2VFeHQ9ZnVuY3Rpb24oQil7dmFyIHUscyx3O2lmKEI9PT11bmRlZmluZWQpe3c9dGhpcy5oZXg7aWYodGhpcy52ZXJzaW9uIT09Myl7cmV0dXJuIC0xfXU9aCh3LDAsWzAsNywwXSxcIjMwXCIpO3M9bih3LHUpfWVsc2V7dz1wZW10b2hleChCKTt2YXIgeD1oKHcsMCxbMCwzLDAsMF0sXCIwNlwiKTtpZihnKHcseCkhPVwiMmE4NjQ4ODZmNzBkMDEwOTBlXCIpe3RoaXMuYUV4dEluZm89bmV3IEFycmF5KCk7cmV0dXJufXU9aCh3LDAsWzAsMywwLDEsMF0sXCIzMFwiKTtzPW4odyx1KTt0aGlzLmhleD13fXRoaXMuYUV4dEluZm89bmV3IEFycmF5KCk7Zm9yKHZhciB2PTA7djxzLmxlbmd0aDt2Kyspe3ZhciB6PXt9O3ouY3JpdGljYWw9ZmFsc2U7dmFyIHk9bih3LHNbdl0pO3ZhciB0PTA7aWYoeS5sZW5ndGg9PT0zKXt6LmNyaXRpY2FsPXRydWU7dD0xfXoub2lkPWouaGV4dG9vaWRzdHIoYyh3LHNbdl0sWzBdLFwiMDZcIikpO3ZhciBBPWgodyxzW3ZdLFsxK3RdKTt6LnZpZHg9aSh3LEEpO3RoaXMuYUV4dEluZm8ucHVzaCh6KX19O3RoaXMuZ2V0RXh0SW5mbz1mdW5jdGlvbih1KXt2YXIgcz10aGlzLmFFeHRJbmZvO3ZhciB2PXU7aWYoIXUubWF0Y2goL15bMC05Ll0rJC8pKXt2PUtKVVIuYXNuMS54NTA5Lk9JRC5uYW1lMm9pZCh1KX1pZih2PT09XCJcIil7cmV0dXJuIHVuZGVmaW5lZH1mb3IodmFyIHQ9MDt0PHMubGVuZ3RoO3QrKyl7aWYoc1t0XS5vaWQ9PT12KXtyZXR1cm4gc1t0XX19cmV0dXJuIHVuZGVmaW5lZH07dGhpcy5nZXRFeHRCYXNpY0NvbnN0cmFpbnRzPWZ1bmN0aW9uKHQseCl7aWYodD09PXVuZGVmaW5lZCYmeD09PXVuZGVmaW5lZCl7dmFyIHY9dGhpcy5nZXRFeHRJbmZvKFwiYmFzaWNDb25zdHJhaW50c1wiKTtpZih2PT09dW5kZWZpbmVkKXtyZXR1cm4gdW5kZWZpbmVkfXQ9Yih0aGlzLmhleCx2LnZpZHgpO3g9di5jcml0aWNhbH12YXIgcz17ZXh0bmFtZTpcImJhc2ljQ29uc3RyYWludHNcIn07aWYoeCl7cy5jcml0aWNhbD10cnVlfWlmKHQ9PT1cIjMwMDBcIil7cmV0dXJuIHN9aWYodD09PVwiMzAwMzAxMDFmZlwiKXtzLmNBPXRydWU7cmV0dXJuIHN9aWYodC5zdWJzdHIoMCwxMik9PT1cIjMwMDYwMTAxZmYwMlwiKXt2YXIgdz1nKHQsMTApO3ZhciB1PXBhcnNlSW50KHcsMTYpO3MuY0E9dHJ1ZTtzLnBhdGhMZW49dTtyZXR1cm4gc310aHJvdyBuZXcgRXJyb3IoXCJoRXh0ViBwYXJzZSBlcnJvcjogXCIrdCl9O3RoaXMuZ2V0RXh0S2V5VXNhZ2U9ZnVuY3Rpb24odCx2KXtpZih0PT09dW5kZWZpbmVkJiZ2PT09dW5kZWZpbmVkKXt2YXIgdT10aGlzLmdldEV4dEluZm8oXCJrZXlVc2FnZVwiKTtpZih1PT09dW5kZWZpbmVkKXtyZXR1cm4gdW5kZWZpbmVkfXQ9Yih0aGlzLmhleCx1LnZpZHgpO3Y9dS5jcml0aWNhbH12YXIgcz17ZXh0bmFtZTpcImtleVVzYWdlXCJ9O2lmKHYpe3MuY3JpdGljYWw9dHJ1ZX1zLm5hbWVzPXRoaXMuZ2V0RXh0S2V5VXNhZ2VTdHJpbmcodCkuc3BsaXQoXCIsXCIpO3JldHVybiBzfTt0aGlzLmdldEV4dEtleVVzYWdlQmluPWZ1bmN0aW9uKHUpe2lmKHU9PT11bmRlZmluZWQpe3ZhciB2PXRoaXMuZ2V0RXh0SW5mbyhcImtleVVzYWdlXCIpO2lmKHY9PT11bmRlZmluZWQpe3JldHVyblwiXCJ9dT1iKHRoaXMuaGV4LHYudmlkeCl9aWYodS5sZW5ndGghPTgmJnUubGVuZ3RoIT0xMCl7dGhyb3cgbmV3IEVycm9yKFwibWFsZm9ybWVkIGtleSB1c2FnZSB2YWx1ZTogXCIrdSl9dmFyIHQ9XCIwMDAwMDAwMDAwMDAwMDBcIitwYXJzZUludCh1LnN1YnN0cig2KSwxNikudG9TdHJpbmcoMik7aWYodS5sZW5ndGg9PTgpe3Q9dC5zbGljZSgtOCl9aWYodS5sZW5ndGg9PTEwKXt0PXQuc2xpY2UoLTE2KX10PXQucmVwbGFjZSgvMCskLyxcIlwiKTtpZih0PT1cIlwiKXt0PVwiMFwifXJldHVybiB0fTt0aGlzLmdldEV4dEtleVVzYWdlU3RyaW5nPWZ1bmN0aW9uKHUpe3ZhciB2PXRoaXMuZ2V0RXh0S2V5VXNhZ2VCaW4odSk7dmFyIHM9bmV3IEFycmF5KCk7Zm9yKHZhciB0PTA7dDx2Lmxlbmd0aDt0Kyspe2lmKHYuc3Vic3RyKHQsMSk9PVwiMVwiKXtzLnB1c2goWDUwOS5LRVlVU0FHRV9OQU1FW3RdKX19cmV0dXJuIHMuam9pbihcIixcIil9O3RoaXMuZ2V0RXh0U3ViamVjdEtleUlkZW50aWZpZXI9ZnVuY3Rpb24odSx3KXtpZih1PT09dW5kZWZpbmVkJiZ3PT09dW5kZWZpbmVkKXt2YXIgdj10aGlzLmdldEV4dEluZm8oXCJzdWJqZWN0S2V5SWRlbnRpZmllclwiKTtpZih2PT09dW5kZWZpbmVkKXtyZXR1cm4gdW5kZWZpbmVkfXU9Yih0aGlzLmhleCx2LnZpZHgpO3c9di5jcml0aWNhbH12YXIgcz17ZXh0bmFtZTpcInN1YmplY3RLZXlJZGVudGlmaWVyXCJ9O2lmKHcpe3MuY3JpdGljYWw9dHJ1ZX12YXIgdD1nKHUsMCk7cy5raWQ9e2hleDp0fTtyZXR1cm4gc307dGhpcy5nZXRFeHRBdXRob3JpdHlLZXlJZGVudGlmaWVyPWZ1bmN0aW9uKHksdyl7aWYoeT09PXVuZGVmaW5lZCYmdz09PXVuZGVmaW5lZCl7dmFyIHM9dGhpcy5nZXRFeHRJbmZvKFwiYXV0aG9yaXR5S2V5SWRlbnRpZmllclwiKTtpZihzPT09dW5kZWZpbmVkKXtyZXR1cm4gdW5kZWZpbmVkfXk9Yih0aGlzLmhleCxzLnZpZHgpO3c9cy5jcml0aWNhbH12YXIgej17ZXh0bmFtZTpcImF1dGhvcml0eUtleUlkZW50aWZpZXJcIn07aWYodyl7ei5jcml0aWNhbD10cnVlfXZhciB4PW4oeSwwKTtmb3IodmFyIHQ9MDt0PHgubGVuZ3RoO3QrKyl7dmFyIEE9eS5zdWJzdHIoeFt0XSwyKTtpZihBPT09XCI4MFwiKXt6LmtpZD17aGV4OmcoeSx4W3RdKX19aWYoQT09PVwiYTFcIil7dmFyIHY9Yih5LHhbdF0pO3ZhciB1PXRoaXMuZ2V0R2VuZXJhbE5hbWVzKHYpO3ouaXNzdWVyPXVbMF1bXCJkblwiXX1pZihBPT09XCI4MlwiKXt6LnNuPXtoZXg6Zyh5LHhbdF0pfX19cmV0dXJuIHp9O3RoaXMuZ2V0RXh0RXh0S2V5VXNhZ2U9ZnVuY3Rpb24odix4KXtpZih2PT09dW5kZWZpbmVkJiZ4PT09dW5kZWZpbmVkKXt2YXIgdz10aGlzLmdldEV4dEluZm8oXCJleHRLZXlVc2FnZVwiKTtpZih3PT09dW5kZWZpbmVkKXtyZXR1cm4gdW5kZWZpbmVkfXY9Yih0aGlzLmhleCx3LnZpZHgpO3g9dy5jcml0aWNhbH12YXIgcz17ZXh0bmFtZTpcImV4dEtleVVzYWdlXCIsYXJyYXk6W119O2lmKHgpe3MuY3JpdGljYWw9dHJ1ZX12YXIgdD1uKHYsMCk7Zm9yKHZhciB1PTA7dTx0Lmxlbmd0aDt1Kyspe3MuYXJyYXkucHVzaChwKGcodix0W3VdKSkpfXJldHVybiBzfTt0aGlzLmdldEV4dEV4dEtleVVzYWdlTmFtZT1mdW5jdGlvbigpe3ZhciB3PXRoaXMuZ2V0RXh0SW5mbyhcImV4dEtleVVzYWdlXCIpO2lmKHc9PT11bmRlZmluZWQpe3JldHVybiB3fXZhciBzPW5ldyBBcnJheSgpO3ZhciB2PWIodGhpcy5oZXgsdy52aWR4KTtpZih2PT09XCJcIil7cmV0dXJuIHN9dmFyIHQ9bih2LDApO2Zvcih2YXIgdT0wO3U8dC5sZW5ndGg7dSsrKXtzLnB1c2gocChnKHYsdFt1XSkpKX1yZXR1cm4gc307dGhpcy5nZXRFeHRTdWJqZWN0QWx0TmFtZT1mdW5jdGlvbih0LHYpe2lmKHQ9PT11bmRlZmluZWQmJnY9PT11bmRlZmluZWQpe3ZhciB1PXRoaXMuZ2V0RXh0SW5mbyhcInN1YmplY3RBbHROYW1lXCIpO2lmKHU9PT11bmRlZmluZWQpe3JldHVybiB1bmRlZmluZWR9dD1iKHRoaXMuaGV4LHUudmlkeCk7dj11LmNyaXRpY2FsfXZhciBzPXtleHRuYW1lOlwic3ViamVjdEFsdE5hbWVcIixhcnJheTpbXX07aWYodil7cy5jcml0aWNhbD10cnVlfXMuYXJyYXk9dGhpcy5nZXRHZW5lcmFsTmFtZXModCk7cmV0dXJuIHN9O3RoaXMuZ2V0RXh0SXNzdWVyQWx0TmFtZT1mdW5jdGlvbih0LHYpe2lmKHQ9PT11bmRlZmluZWQmJnY9PT11bmRlZmluZWQpe3ZhciB1PXRoaXMuZ2V0RXh0SW5mbyhcImlzc3VlckFsdE5hbWVcIik7aWYodT09PXVuZGVmaW5lZCl7cmV0dXJuIHVuZGVmaW5lZH10PWIodGhpcy5oZXgsdS52aWR4KTt2PXUuY3JpdGljYWx9dmFyIHM9e2V4dG5hbWU6XCJpc3N1ZXJBbHROYW1lXCIsYXJyYXk6W119O2lmKHYpe3MuY3JpdGljYWw9dHJ1ZX1zLmFycmF5PXRoaXMuZ2V0R2VuZXJhbE5hbWVzKHQpO3JldHVybiBzfTt0aGlzLmdldEdlbmVyYWxOYW1lcz1mdW5jdGlvbih3KXt2YXIgdT1uKHcsMCk7dmFyIHM9W107Zm9yKHZhciB2PTA7djx1Lmxlbmd0aDt2Kyspe3ZhciB0PXRoaXMuZ2V0R2VuZXJhbE5hbWUoYih3LHVbdl0pKTtpZih0IT09dW5kZWZpbmVkKXtzLnB1c2godCl9fXJldHVybiBzfTt0aGlzLmdldEdlbmVyYWxOYW1lPWZ1bmN0aW9uKHQpe3ZhciBzPXQuc3Vic3RyKDAsMik7dmFyIHY9Zyh0LDApO3ZhciB1PWhleHRvcnN0cih2KTtpZihzPT1cIjgxXCIpe3JldHVybntyZmM4MjI6dX19aWYocz09XCI4MlwiKXtyZXR1cm57ZG5zOnV9fWlmKHM9PVwiODZcIil7cmV0dXJue3VyaTp1fX1pZihzPT1cIjg3XCIpe3JldHVybntpcDpoZXh0b2lwKHYpfX1pZihzPT1cImE0XCIpe3JldHVybntkbjp0aGlzLmdldFg1MDBOYW1lKHYpfX1yZXR1cm4gdW5kZWZpbmVkfTt0aGlzLmdldEV4dFN1YmplY3RBbHROYW1lMj1mdW5jdGlvbigpe3ZhciB3LHoseTt2YXIgeD10aGlzLmdldEV4dEluZm8oXCJzdWJqZWN0QWx0TmFtZVwiKTtpZih4PT09dW5kZWZpbmVkKXtyZXR1cm4geH12YXIgcz1uZXcgQXJyYXkoKTt2YXIgdj1iKHRoaXMuaGV4LHgudmlkeCk7dmFyIHQ9bih2LDApO2Zvcih2YXIgdT0wO3U8dC5sZW5ndGg7dSsrKXt5PXYuc3Vic3RyKHRbdV0sMik7dz1nKHYsdFt1XSk7aWYoeT09PVwiODFcIil7ej1oZXh0b3V0Zjgodyk7cy5wdXNoKFtcIk1BSUxcIix6XSl9aWYoeT09PVwiODJcIil7ej1oZXh0b3V0Zjgodyk7cy5wdXNoKFtcIkROU1wiLHpdKX1pZih5PT09XCI4NFwiKXt6PVg1MDkuaGV4MmRuKHcsMCk7cy5wdXNoKFtcIkROXCIsel0pfWlmKHk9PT1cIjg2XCIpe3o9aGV4dG91dGY4KHcpO3MucHVzaChbXCJVUklcIix6XSl9aWYoeT09PVwiODdcIil7ej1oZXh0b2lwKHcpO3MucHVzaChbXCJJUFwiLHpdKX19cmV0dXJuIHN9O3RoaXMuZ2V0RXh0Q1JMRGlzdHJpYnV0aW9uUG9pbnRzPWZ1bmN0aW9uKHcseSl7aWYodz09PXVuZGVmaW5lZCYmeT09PXVuZGVmaW5lZCl7dmFyIHg9dGhpcy5nZXRFeHRJbmZvKFwiY1JMRGlzdHJpYnV0aW9uUG9pbnRzXCIpO2lmKHg9PT11bmRlZmluZWQpe3JldHVybiB1bmRlZmluZWR9dz1iKHRoaXMuaGV4LHgudmlkeCk7eT14LmNyaXRpY2FsfXZhciB0PXtleHRuYW1lOlwiY1JMRGlzdHJpYnV0aW9uUG9pbnRzXCIsYXJyYXk6W119O2lmKHkpe3QuY3JpdGljYWw9dHJ1ZX12YXIgdT1uKHcsMCk7Zm9yKHZhciB2PTA7djx1Lmxlbmd0aDt2Kyspe3ZhciBzPWIodyx1W3ZdKTt0LmFycmF5LnB1c2godGhpcy5nZXREaXN0cmlidXRpb25Qb2ludChzKSl9cmV0dXJuIHR9O3RoaXMuZ2V0RGlzdHJpYnV0aW9uUG9pbnQ9ZnVuY3Rpb24oeCl7dmFyIHU9e307dmFyIHY9bih4LDApO2Zvcih2YXIgdz0wO3c8di5sZW5ndGg7dysrKXt2YXIgdD14LnN1YnN0cih2W3ddLDIpO3ZhciBzPWIoeCx2W3ddKTtpZih0PT1cImEwXCIpe3UuZHBuYW1lPXRoaXMuZ2V0RGlzdHJpYnV0aW9uUG9pbnROYW1lKHMpfX1yZXR1cm4gdX07dGhpcy5nZXREaXN0cmlidXRpb25Qb2ludE5hbWU9ZnVuY3Rpb24oeCl7dmFyIHU9e307dmFyIHY9bih4LDApO2Zvcih2YXIgdz0wO3c8di5sZW5ndGg7dysrKXt2YXIgdD14LnN1YnN0cih2W3ddLDIpO3ZhciBzPWIoeCx2W3ddKTtpZih0PT1cImEwXCIpe3UuZnVsbD10aGlzLmdldEdlbmVyYWxOYW1lcyhzKX19cmV0dXJuIHV9O3RoaXMuZ2V0RXh0Q1JMRGlzdHJpYnV0aW9uUG9pbnRzVVJJPWZ1bmN0aW9uKCl7dmFyIHg9dGhpcy5nZXRFeHRJbmZvKFwiY1JMRGlzdHJpYnV0aW9uUG9pbnRzXCIpO2lmKHg9PT11bmRlZmluZWQpe3JldHVybiB4fXZhciBzPW5ldyBBcnJheSgpO3ZhciB0PW4odGhpcy5oZXgseC52aWR4KTtmb3IodmFyIHY9MDt2PHQubGVuZ3RoO3YrKyl7dHJ5e3ZhciB5PWModGhpcy5oZXgsdFt2XSxbMCwwLDBdLFwiODZcIik7dmFyIHc9aGV4dG91dGY4KHkpO3MucHVzaCh3KX1jYXRjaCh1KXt9fXJldHVybiBzfTt0aGlzLmdldEV4dEFJQUluZm89ZnVuY3Rpb24oKXt2YXIgdz10aGlzLmdldEV4dEluZm8oXCJhdXRob3JpdHlJbmZvQWNjZXNzXCIpO2lmKHc9PT11bmRlZmluZWQpe3JldHVybiB3fXZhciBzPXtvY3NwOltdLGNhaXNzdWVyOltdfTt2YXIgdD1uKHRoaXMuaGV4LHcudmlkeCk7Zm9yKHZhciB1PTA7dTx0Lmxlbmd0aDt1Kyspe3ZhciB4PWModGhpcy5oZXgsdFt1XSxbMF0sXCIwNlwiKTt2YXIgdj1jKHRoaXMuaGV4LHRbdV0sWzFdLFwiODZcIik7aWYoeD09PVwiMmIwNjAxMDUwNTA3MzAwMVwiKXtzLm9jc3AucHVzaChoZXh0b3V0ZjgodikpfWlmKHg9PT1cIjJiMDYwMTA1MDUwNzMwMDJcIil7cy5jYWlzc3Vlci5wdXNoKGhleHRvdXRmOCh2KSl9fXJldHVybiBzfTt0aGlzLmdldEV4dEF1dGhvcml0eUluZm9BY2Nlc3M9ZnVuY3Rpb24oeix4KXtpZih6PT09dW5kZWZpbmVkJiZ4PT09dW5kZWZpbmVkKXt2YXIgcz10aGlzLmdldEV4dEluZm8oXCJhdXRob3JpdHlJbmZvQWNjZXNzXCIpO2lmKHM9PT11bmRlZmluZWQpe3JldHVybiB1bmRlZmluZWR9ej1iKHRoaXMuaGV4LHMudmlkeCk7eD1zLmNyaXRpY2FsfXZhciBBPXtleHRuYW1lOlwiYXV0aG9yaXR5SW5mb0FjY2Vzc1wiLGFycmF5OltdfTtpZih4KXtBLmNyaXRpY2FsPXRydWV9dmFyIHk9bih6LDApO2Zvcih2YXIgdD0wO3Q8eS5sZW5ndGg7dCsrKXt2YXIgdz1rKHoseVt0XSxbMF0sXCIwNlwiKTt2YXIgdT1jKHoseVt0XSxbMV0sXCI4NlwiKTt2YXIgdj1oZXh0b3V0ZjgodSk7aWYodz09XCIyYjA2MDEwNTA1MDczMDAxXCIpe0EuYXJyYXkucHVzaCh7b2NzcDp2fSl9ZWxzZXtpZih3PT1cIjJiMDYwMTA1MDUwNzMwMDJcIil7QS5hcnJheS5wdXNoKHtjYWlzc3Vlcjp2fSl9ZWxzZXt0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIG1ldGhvZDogXCIrdyl9fX1yZXR1cm4gQX07dGhpcy5nZXRFeHRDZXJ0aWZpY2F0ZVBvbGljaWVzPWZ1bmN0aW9uKHcseil7aWYodz09PXVuZGVmaW5lZCYmej09PXVuZGVmaW5lZCl7dmFyIHk9dGhpcy5nZXRFeHRJbmZvKFwiY2VydGlmaWNhdGVQb2xpY2llc1wiKTtpZih5PT09dW5kZWZpbmVkKXtyZXR1cm4gdW5kZWZpbmVkfXc9Yih0aGlzLmhleCx5LnZpZHgpO3o9eS5jcml0aWNhbH12YXIgcz17ZXh0bmFtZTpcImNlcnRpZmljYXRlUG9saWNpZXNcIixhcnJheTpbXX07aWYoeil7cy5jcml0aWNhbD10cnVlfXZhciB0PW4odywwKTtmb3IodmFyIHU9MDt1PHQubGVuZ3RoO3UrKyl7dmFyIHg9Yih3LHRbdV0pO3ZhciB2PXRoaXMuZ2V0UG9saWN5SW5mb3JtYXRpb24oeCk7cy5hcnJheS5wdXNoKHYpfXJldHVybiBzfTt0aGlzLmdldFBvbGljeUluZm9ybWF0aW9uPWZ1bmN0aW9uKHcpe3ZhciBzPXt9O3ZhciB5PWModywwLFswXSxcIjA2XCIpO3MucG9saWN5b2lkPXAoeSk7dmFyIHo9ZSh3LDAsWzFdLFwiMzBcIik7aWYoeiE9LTEpe3MuYXJyYXk9W107dmFyIHQ9bih3LHopO2Zvcih2YXIgdT0wO3U8dC5sZW5ndGg7dSsrKXt2YXIgeD1iKHcsdFt1XSk7dmFyIHY9dGhpcy5nZXRQb2xpY3lRdWFsaWZpZXJJbmZvKHgpO3MuYXJyYXkucHVzaCh2KX19cmV0dXJuIHN9O3RoaXMuZ2V0UG9saWN5UXVhbGlmaWVySW5mbz1mdW5jdGlvbih0KXt2YXIgcz17fTt2YXIgdT1jKHQsMCxbMF0sXCIwNlwiKTtpZih1PT09XCIyYjA2MDEwNTA1MDcwMjAxXCIpe3ZhciB3PWsodCwwLFsxXSxcIjE2XCIpO3MuY3BzPWhleHRvcnN0cih3KX1lbHNle2lmKHU9PT1cIjJiMDYwMTA1MDUwNzAyMDJcIil7dmFyIHY9YSh0LDAsWzFdLFwiMzBcIik7cy51bm90aWNlPXRoaXMuZ2V0VXNlck5vdGljZSh2KX19cmV0dXJuIHN9O3RoaXMuZ2V0VXNlck5vdGljZT1mdW5jdGlvbih3KXt2YXIgdD17fTt2YXIgdT1uKHcsMCk7Zm9yKHZhciB2PTA7djx1Lmxlbmd0aDt2Kyspe3ZhciBzPWIodyx1W3ZdKTtpZihzLnN1YnN0cigwLDIpIT1cIjMwXCIpe3QuZXhwdGV4dD10aGlzLmdldERpc3BsYXlUZXh0KHMpfX1yZXR1cm4gdH07dGhpcy5nZXREaXNwbGF5VGV4dD1mdW5jdGlvbih0KXt2YXIgdT17XCIwY1wiOlwidXRmOFwiLFwiMTZcIjpcImlhNVwiLFwiMWFcIjpcInZpc1wiLFwiMWVcIjpcImJtcFwifTt2YXIgcz17fTtzLnR5cGU9dVt0LnN1YnN0cigwLDIpXTtzLnN0cj1oZXh0b3JzdHIoZyh0LDApKTtyZXR1cm4gc307dGhpcy5nZXRFeHRDUkxOdW1iZXI9ZnVuY3Rpb24odCx1KXt2YXIgcz17ZXh0bmFtZTpcImNSTE51bWJlclwifTtpZih1KXtzLmNyaXRpY2FsPXRydWV9aWYodC5zdWJzdHIoMCwyKT09XCIwMlwiKXtzLm51bT17aGV4OmcodCwwKX07cmV0dXJuIHN9dGhyb3cgbmV3IEVycm9yKFwiaEV4dFYgcGFyc2UgZXJyb3I6IFwiK3QpfTt0aGlzLmdldEV4dENSTFJlYXNvbj1mdW5jdGlvbih0LHUpe3ZhciBzPXtleHRuYW1lOlwiY1JMUmVhc29uXCJ9O2lmKHUpe3MuY3JpdGljYWw9dHJ1ZX1pZih0LnN1YnN0cigwLDIpPT1cIjBhXCIpe3MuY29kZT1wYXJzZUludChnKHQsMCksMTYpO3JldHVybiBzfXRocm93IG5ldyBFcnJvcihcImhFeHRWIHBhcnNlIGVycm9yOiBcIit0KX07dGhpcy5nZXRFeHRPY3NwTm9uY2U9ZnVuY3Rpb24odCx2KXt2YXIgcz17ZXh0bmFtZTpcIm9jc3BOb25jZVwifTtpZih2KXtzLmNyaXRpY2FsPXRydWV9dmFyIHU9Zyh0LDApO3MuaGV4PXU7cmV0dXJuIHN9O3RoaXMuZ2V0RXh0T2NzcE5vQ2hlY2s9ZnVuY3Rpb24odCx1KXt2YXIgcz17ZXh0bmFtZTpcIm9jc3BOb0NoZWNrXCJ9O2lmKHUpe3MuY3JpdGljYWw9dHJ1ZX1yZXR1cm4gc307dGhpcy5nZXRFeHRBZG9iZVRpbWVTdGFtcD1mdW5jdGlvbih2LHkpe2lmKHY9PT11bmRlZmluZWQmJnk9PT11bmRlZmluZWQpe3ZhciB4PXRoaXMuZ2V0RXh0SW5mbyhcImFkb2JlVGltZVN0YW1wXCIpO2lmKHg9PT11bmRlZmluZWQpe3JldHVybiB1bmRlZmluZWR9dj1iKHRoaXMuaGV4LHgudmlkeCk7eT14LmNyaXRpY2FsfXZhciBzPXtleHRuYW1lOlwiYWRvYmVUaW1lU3RhbXBcIn07aWYoeSl7cy5jcml0aWNhbD10cnVlfXZhciB1PW4odiwwKTtpZih1Lmxlbmd0aD4xKXt2YXIgej1iKHYsdVsxXSk7dmFyIHQ9dGhpcy5nZXRHZW5lcmFsTmFtZSh6KTtpZih0LnVyaSE9dW5kZWZpbmVkKXtzLnVyaT10LnVyaX19aWYodS5sZW5ndGg+Mil7dmFyIHc9Yih2LHVbMl0pO2lmKHc9PVwiMDEwMWZmXCIpe3MucmVxYXV0aD10cnVlfWlmKHc9PVwiMDEwMTAwXCIpe3MucmVxYXV0aD1mYWxzZX19cmV0dXJuIHN9O3RoaXMuZ2V0WDUwME5hbWVSdWxlPWZ1bmN0aW9uKHMpe3ZhciB6PXRydWU7dmFyIEQ9dHJ1ZTt2YXIgQz1mYWxzZTt2YXIgdD1cIlwiO3ZhciB3PVwiXCI7dmFyIEY9bnVsbDt2YXIgQT1bXTtmb3IodmFyIHY9MDt2PHMubGVuZ3RoO3YrKyl7dmFyIHg9c1t2XTtmb3IodmFyIHU9MDt1PHgubGVuZ3RoO3UrKyl7QS5wdXNoKHhbdV0pfX1mb3IodmFyIHY9MDt2PEEubGVuZ3RoO3YrKyl7dmFyIEU9QVt2XTt2YXIgRz1FLmRzO3ZhciBCPUUudmFsdWU7dmFyIHk9RS50eXBlO3QrPVwiOlwiK0c7aWYoRyE9XCJwcm5cIiYmRyE9XCJ1dGY4XCImJkchPVwiaWE1XCIpe3JldHVyblwibWl4ZWRcIn1pZihHPT1cImlhNVwiKXtpZih5IT1cIkNOXCIpe3JldHVyblwibWl4ZWRcIn1lbHNle2lmKCFLSlVSLmxhbmcuU3RyaW5nLmlzTWFpbChCKSl7cmV0dXJuXCJtaXhlZFwifWVsc2V7Y29udGludWV9fX1pZih5PT1cIkNcIil7aWYoRz09XCJwcm5cIil7Y29udGludWV9ZWxzZXtyZXR1cm5cIm1peGVkXCJ9fXcrPVwiOlwiK0c7aWYoRj09bnVsbCl7Rj1HfWVsc2V7aWYoRiE9PUcpe3JldHVyblwibWl4ZWRcIn19fWlmKEY9PW51bGwpe3JldHVyblwicHJuXCJ9ZWxzZXtyZXR1cm4gRn19O3RoaXMuZ2V0WDUwME5hbWU9ZnVuY3Rpb24odil7dmFyIHQ9dGhpcy5nZXRYNTAwTmFtZUFycmF5KHYpO3ZhciB1PXRoaXMuZG5hcnJheXRvc3RyKHQpO3JldHVybnthcnJheTp0LHN0cjp1fX07dGhpcy5nZXRYNTAwTmFtZUFycmF5PWZ1bmN0aW9uKHYpe3ZhciBzPVtdO3ZhciB0PW4odiwwKTtmb3IodmFyIHU9MDt1PHQubGVuZ3RoO3UrKyl7cy5wdXNoKHRoaXMuZ2V0UkROKGIodix0W3VdKSkpfXJldHVybiBzfTt0aGlzLmdldFJETj1mdW5jdGlvbih2KXt2YXIgcz1bXTt2YXIgdD1uKHYsMCk7Zm9yKHZhciB1PTA7dTx0Lmxlbmd0aDt1Kyspe3MucHVzaCh0aGlzLmdldEF0dHJUeXBlQW5kVmFsdWUoYih2LHRbdV0pKSl9cmV0dXJuIHN9O3RoaXMuZ2V0QXR0clR5cGVBbmRWYWx1ZT1mdW5jdGlvbih1KXt2YXIgcz17dHlwZTpudWxsLHZhbHVlOm51bGwsZHM6bnVsbH07dmFyIHQ9bih1LDApO3ZhciB4PWModSx0WzBdLFtdLFwiMDZcIik7dmFyIHc9Yyh1LHRbMV0sW10pO3ZhciB2PUtKVVIuYXNuMS5BU04xVXRpbC5vaWRIZXhUb0ludCh4KTtzLnR5cGU9S0pVUi5hc24xLng1MDkuT0lELm9pZDJhdHlwZSh2KTtzLnZhbHVlPWhleHRvcnN0cih3KTtzLmRzPXRoaXMuSEVYMlNUQUdbdS5zdWJzdHIodFsxXSwyKV07cmV0dXJuIHN9O3RoaXMucmVhZENlcnRQRU09ZnVuY3Rpb24ocyl7dGhpcy5yZWFkQ2VydEhleChyKHMpKX07dGhpcy5yZWFkQ2VydEhleD1mdW5jdGlvbihzKXt0aGlzLmhleD1zO3RoaXMuZ2V0VmVyc2lvbigpO3RyeXtoKHRoaXMuaGV4LDAsWzAsN10sXCJhM1wiKTt0aGlzLnBhcnNlRXh0KCl9Y2F0Y2godCl7fX07dGhpcy5nZXRQYXJhbT1mdW5jdGlvbigpe3ZhciBzPXt9O3MudmVyc2lvbj10aGlzLmdldFZlcnNpb24oKTtzLnNlcmlhbD17aGV4OnRoaXMuZ2V0U2VyaWFsTnVtYmVySGV4KCl9O3Muc2lnYWxnPXRoaXMuZ2V0U2lnbmF0dXJlQWxnb3JpdGhtRmllbGQoKTtzLmlzc3Vlcj10aGlzLmdldElzc3VlcigpO3Mubm90YmVmb3JlPXRoaXMuZ2V0Tm90QmVmb3JlKCk7cy5ub3RhZnRlcj10aGlzLmdldE5vdEFmdGVyKCk7cy5zdWJqZWN0PXRoaXMuZ2V0U3ViamVjdCgpO3Muc2JqcHVia2V5PWhleHRvcGVtKHRoaXMuZ2V0UHVibGljS2V5SGV4KCksXCJQVUJMSUMgS0VZXCIpO2lmKHRoaXMuYUV4dEluZm8ubGVuZ3RoPjApe3MuZXh0PXRoaXMuZ2V0RXh0UGFyYW1BcnJheSgpfXMuc2lnaGV4PXRoaXMuZ2V0U2lnbmF0dXJlVmFsdWVIZXgoKTtyZXR1cm4gc307dGhpcy5nZXRFeHRQYXJhbUFycmF5PWZ1bmN0aW9uKHQpe2lmKHQ9PXVuZGVmaW5lZCl7dmFyIHY9ZSh0aGlzLmhleCwwLFswLFwiWzNdXCJdKTtpZih2IT0tMSl7dD1sKHRoaXMuaGV4LDAsWzAsXCJbM11cIiwwXSxcIjMwXCIpfX12YXIgcz1bXTt2YXIgdT1uKHQsMCk7Zm9yKHZhciB3PTA7dzx1Lmxlbmd0aDt3Kyspe3ZhciB5PWIodCx1W3ddKTt2YXIgeD10aGlzLmdldEV4dFBhcmFtKHkpO2lmKHghPW51bGwpe3MucHVzaCh4KX19cmV0dXJuIHN9O3RoaXMuZ2V0RXh0UGFyYW09ZnVuY3Rpb24odCl7dmFyIEE9e307dmFyIHY9bih0LDApO3ZhciB3PXYubGVuZ3RoO2lmKHchPTImJnchPTMpe3Rocm93IG5ldyBFcnJvcihcIndyb25nIG51bWJlciBlbGVtZW50cyBpbiBFeHRlbnNpb246IFwiK3crXCIgXCIrdCl9dmFyIHU9bShjKHQsMCxbMF0sXCIwNlwiKSk7dmFyIHk9ZmFsc2U7aWYodz09MyYmYSh0LDAsWzFdKT09XCIwMTAxZmZcIil7eT10cnVlfXZhciB6PWEodCwwLFt3LTEsMF0pO3ZhciB4PXVuZGVmaW5lZDtpZih1PT1cIjIuNS4yOS4xNFwiKXt4PXRoaXMuZ2V0RXh0U3ViamVjdEtleUlkZW50aWZpZXIoeix5KX1lbHNle2lmKHU9PVwiMi41LjI5LjE1XCIpe3g9dGhpcy5nZXRFeHRLZXlVc2FnZSh6LHkpfWVsc2V7aWYodT09XCIyLjUuMjkuMTdcIil7eD10aGlzLmdldEV4dFN1YmplY3RBbHROYW1lKHoseSl9ZWxzZXtpZih1PT1cIjIuNS4yOS4xOFwiKXt4PXRoaXMuZ2V0RXh0SXNzdWVyQWx0TmFtZSh6LHkpfWVsc2V7aWYodT09XCIyLjUuMjkuMTlcIil7eD10aGlzLmdldEV4dEJhc2ljQ29uc3RyYWludHMoeix5KX1lbHNle2lmKHU9PVwiMi41LjI5LjMxXCIpe3g9dGhpcy5nZXRFeHRDUkxEaXN0cmlidXRpb25Qb2ludHMoeix5KX1lbHNle2lmKHU9PVwiMi41LjI5LjMyXCIpe3g9dGhpcy5nZXRFeHRDZXJ0aWZpY2F0ZVBvbGljaWVzKHoseSl9ZWxzZXtpZih1PT1cIjIuNS4yOS4zNVwiKXt4PXRoaXMuZ2V0RXh0QXV0aG9yaXR5S2V5SWRlbnRpZmllcih6LHkpfWVsc2V7aWYodT09XCIyLjUuMjkuMzdcIil7eD10aGlzLmdldEV4dEV4dEtleVVzYWdlKHoseSl9ZWxzZXtpZih1PT1cIjEuMy42LjEuNS41LjcuMS4xXCIpe3g9dGhpcy5nZXRFeHRBdXRob3JpdHlJbmZvQWNjZXNzKHoseSl9ZWxzZXtpZih1PT1cIjIuNS4yOS4yMFwiKXt4PXRoaXMuZ2V0RXh0Q1JMTnVtYmVyKHoseSl9ZWxzZXtpZih1PT1cIjIuNS4yOS4yMVwiKXt4PXRoaXMuZ2V0RXh0Q1JMUmVhc29uKHoseSl9ZWxzZXtpZih1PT1cIjEuMy42LjEuNS41LjcuNDguMS4yXCIpe3g9dGhpcy5nZXRFeHRPY3NwTm9uY2Uoeix5KX1lbHNle2lmKHU9PVwiMS4zLjYuMS41LjUuNy40OC4xLjVcIil7eD10aGlzLmdldEV4dE9jc3BOb0NoZWNrKHoseSl9ZWxzZXtpZih1PT1cIjEuMi44NDAuMTEzNTgzLjEuMS45LjFcIil7eD10aGlzLmdldEV4dEFkb2JlVGltZVN0YW1wKHoseSl9fX19fX19fX19fX19fX1pZih4IT11bmRlZmluZWQpe3JldHVybiB4fXZhciBzPXtleHRuYW1lOnUsZXh0bjp6fTtpZih5KXtzLmNyaXRpY2FsPXRydWV9cmV0dXJuIHN9O3RoaXMuZmluZEV4dD1mdW5jdGlvbih0LHUpe2Zvcih2YXIgcz0wO3M8dC5sZW5ndGg7cysrKXtpZih0W3NdLmV4dG5hbWU9PXUpe3JldHVybiB0W3NdfX1yZXR1cm4gbnVsbH07dGhpcy51cGRhdGVFeHRDRFBGdWxsVVJJPWZ1bmN0aW9uKHcscyl7dmFyIHY9dGhpcy5maW5kRXh0KHcsXCJjUkxEaXN0cmlidXRpb25Qb2ludHNcIik7aWYodj09bnVsbCl7cmV0dXJufWlmKHYuYXJyYXk9PXVuZGVmaW5lZCl7cmV0dXJufXZhciB5PXYuYXJyYXk7Zm9yKHZhciB1PTA7dTx5Lmxlbmd0aDt1Kyspe2lmKHlbdV0uZHBuYW1lPT11bmRlZmluZWQpe2NvbnRpbnVlfWlmKHlbdV0uZHBuYW1lLmZ1bGw9PXVuZGVmaW5lZCl7Y29udGludWV9dmFyIHo9eVt1XS5kcG5hbWUuZnVsbDtmb3IodmFyIHQ9MDt0PHoubGVuZ3RoO3QrKyl7dmFyIHg9elt1XTtpZih4LnVyaT09dW5kZWZpbmVkKXtjb250aW51ZX14LnVyaT1zfX19O3RoaXMudXBkYXRlRXh0QUlBT0NTUD1mdW5jdGlvbih3LHQpe3ZhciB2PXRoaXMuZmluZEV4dCh3LFwiYXV0aG9yaXR5SW5mb0FjY2Vzc1wiKTtpZih2PT1udWxsKXtyZXR1cm59aWYodi5hcnJheT09dW5kZWZpbmVkKXtyZXR1cm59dmFyIHM9di5hcnJheTtmb3IodmFyIHU9MDt1PHMubGVuZ3RoO3UrKyl7aWYoc1t1XS5vY3NwIT11bmRlZmluZWQpe3NbdV0ub2NzcD10fX19O3RoaXMudXBkYXRlRXh0QUlBQ0FJc3N1ZXI9ZnVuY3Rpb24odyx0KXt2YXIgdj10aGlzLmZpbmRFeHQodyxcImF1dGhvcml0eUluZm9BY2Nlc3NcIik7aWYodj09bnVsbCl7cmV0dXJufWlmKHYuYXJyYXk9PXVuZGVmaW5lZCl7cmV0dXJufXZhciBzPXYuYXJyYXk7Zm9yKHZhciB1PTA7dTxzLmxlbmd0aDt1Kyspe2lmKHNbdV0uY2Fpc3N1ZXIhPXVuZGVmaW5lZCl7c1t1XS5jYWlzc3Vlcj10fX19O3RoaXMuZG5hcnJheXRvc3RyPWZ1bmN0aW9uKHUpe2Z1bmN0aW9uIHModil7cmV0dXJuIHYubWFwKGZ1bmN0aW9uKHcpe3JldHVybiB0KHcpfSkuam9pbihcIitcIil9ZnVuY3Rpb24gdCh2KXtyZXR1cm4gdi50eXBlK1wiPVwiK3YudmFsdWV9cmV0dXJuXCIvXCIrdS5tYXAoZnVuY3Rpb24odil7cmV0dXJuIHModil9KS5qb2luKFwiL1wiKX07dGhpcy5nZXRJbmZvPWZ1bmN0aW9uKCl7dmFyIHU9ZnVuY3Rpb24oTSl7dmFyIEw9SlNPTi5zdHJpbmdpZnkoTS5hcnJheSkucmVwbGFjZSgvW1xcW1xcXVxce1xcfVxcXCJdL2csXCJcIik7cmV0dXJuIEx9O3ZhciBBPWZ1bmN0aW9uKFIpe3ZhciBQPVwiXCI7dmFyIEw9Ui5hcnJheTtmb3IodmFyIE89MDtPPEwubGVuZ3RoO08rKyl7dmFyIFE9TFtPXTtQKz1cIiAgICBwb2xpY3kgb2lkOiBcIitRLnBvbGljeW9pZCtcIlxcblwiO2lmKFEuYXJyYXk9PT11bmRlZmluZWQpe2NvbnRpbnVlfWZvcih2YXIgTj0wO048US5hcnJheS5sZW5ndGg7TisrKXt2YXIgTT1RLmFycmF5W05dO2lmKE0uY3BzIT09dW5kZWZpbmVkKXtQKz1cIiAgICBjcHM6IFwiK00uY3BzK1wiXFxuXCJ9fX1yZXR1cm4gUH07dmFyIEQ9ZnVuY3Rpb24oUCl7dmFyIE89XCJcIjt2YXIgTD1QLmFycmF5O2Zvcih2YXIgTj0wO048TC5sZW5ndGg7TisrKXt2YXIgUT1MW05dO3RyeXtpZihRLmRwbmFtZS5mdWxsWzBdLnVyaSE9PXVuZGVmaW5lZCl7Tys9XCIgICAgXCIrUS5kcG5hbWUuZnVsbFswXS51cmkrXCJcXG5cIn19Y2F0Y2goTSl7fXRyeXtpZihRLmRuYW1lLmZ1bGxbMF0uZG4uaGV4IT09dW5kZWZpbmVkKXtPKz1cIiAgICBcIitYNTA5LmhleDJkbihRLmRwbmFtZS5mdWxsWzBdLmRuLmhleCkrXCJcXG5cIn19Y2F0Y2goTSl7fX1yZXR1cm4gT307dmFyIEI9ZnVuY3Rpb24oUCl7dmFyIE89XCJcIjt2YXIgTD1QLmFycmF5O2Zvcih2YXIgTT0wO008TC5sZW5ndGg7TSsrKXt2YXIgTj1MW01dO2lmKE4uY2Fpc3N1ZXIhPT11bmRlZmluZWQpe08rPVwiICAgIGNhaXNzdWVyOiBcIitOLmNhaXNzdWVyK1wiXFxuXCJ9aWYoTi5vY3NwIT09dW5kZWZpbmVkKXtPKz1cIiAgICBvY3NwOiBcIitOLm9jc3ArXCJcXG5cIn19cmV0dXJuIE99O3ZhciB2PVg1MDk7dmFyIEYsRSxLO0Y9XCJCYXNpYyBGaWVsZHNcXG5cIjtGKz1cIiAgc2VyaWFsIG51bWJlcjogXCIrdGhpcy5nZXRTZXJpYWxOdW1iZXJIZXgoKStcIlxcblwiO0YrPVwiICBzaWduYXR1cmUgYWxnb3JpdGhtOiBcIit0aGlzLmdldFNpZ25hdHVyZUFsZ29yaXRobUZpZWxkKCkrXCJcXG5cIjtGKz1cIiAgaXNzdWVyOiBcIit0aGlzLmdldElzc3VlclN0cmluZygpK1wiXFxuXCI7Ris9XCIgIG5vdEJlZm9yZTogXCIrdGhpcy5nZXROb3RCZWZvcmUoKStcIlxcblwiO0YrPVwiICBub3RBZnRlcjogXCIrdGhpcy5nZXROb3RBZnRlcigpK1wiXFxuXCI7Ris9XCIgIHN1YmplY3Q6IFwiK3RoaXMuZ2V0U3ViamVjdFN0cmluZygpK1wiXFxuXCI7Ris9XCIgIHN1YmplY3QgcHVibGljIGtleSBpbmZvOiBcXG5cIjtFPXRoaXMuZ2V0UHVibGljS2V5KCk7Ris9XCIgICAga2V5IGFsZ29yaXRobTogXCIrRS50eXBlK1wiXFxuXCI7aWYoRS50eXBlPT09XCJSU0FcIil7Ris9XCIgICAgbj1cIitoZXh0b3Bvc2hleChFLm4udG9TdHJpbmcoMTYpKS5zdWJzdHIoMCwxNikrXCIuLi5cXG5cIjtGKz1cIiAgICBlPVwiK2hleHRvcG9zaGV4KEUuZS50b1N0cmluZygxNikpK1wiXFxuXCJ9Sz10aGlzLmFFeHRJbmZvO2lmKEshPT11bmRlZmluZWQmJkshPT1udWxsKXtGKz1cIlg1MDl2MyBFeHRlbnNpb25zOlxcblwiO2Zvcih2YXIgSD0wO0g8Sy5sZW5ndGg7SCsrKXt2YXIgSj1LW0hdO3ZhciB0PUtKVVIuYXNuMS54NTA5Lk9JRC5vaWQybmFtZShKLm9pZCk7aWYodD09PVwiXCIpe3Q9Si5vaWR9dmFyIEc9XCJcIjtpZihKLmNyaXRpY2FsPT09dHJ1ZSl7Rz1cIkNSSVRJQ0FMXCJ9Ris9XCIgIFwiK3QrXCIgXCIrRytcIjpcXG5cIjtpZih0PT09XCJiYXNpY0NvbnN0cmFpbnRzXCIpe3ZhciB3PXRoaXMuZ2V0RXh0QmFzaWNDb25zdHJhaW50cygpO2lmKHcuY0E9PT11bmRlZmluZWQpe0YrPVwiICAgIHt9XFxuXCJ9ZWxzZXtGKz1cIiAgICBjQT10cnVlXCI7aWYody5wYXRoTGVuIT09dW5kZWZpbmVkKXtGKz1cIiwgcGF0aExlbj1cIit3LnBhdGhMZW59Ris9XCJcXG5cIn19ZWxzZXtpZih0PT09XCJrZXlVc2FnZVwiKXtGKz1cIiAgICBcIit0aGlzLmdldEV4dEtleVVzYWdlU3RyaW5nKCkrXCJcXG5cIn1lbHNle2lmKHQ9PT1cInN1YmplY3RLZXlJZGVudGlmaWVyXCIpe0YrPVwiICAgIFwiK3RoaXMuZ2V0RXh0U3ViamVjdEtleUlkZW50aWZpZXIoKS5raWQuaGV4K1wiXFxuXCJ9ZWxzZXtpZih0PT09XCJhdXRob3JpdHlLZXlJZGVudGlmaWVyXCIpe3ZhciB4PXRoaXMuZ2V0RXh0QXV0aG9yaXR5S2V5SWRlbnRpZmllcigpO2lmKHgua2lkIT09dW5kZWZpbmVkKXtGKz1cIiAgICBraWQ9XCIreC5raWQuaGV4K1wiXFxuXCJ9fWVsc2V7aWYodD09PVwiZXh0S2V5VXNhZ2VcIil7dmFyIEk9dGhpcy5nZXRFeHRFeHRLZXlVc2FnZSgpLmFycmF5O0YrPVwiICAgIFwiK0kuam9pbihcIiwgXCIpK1wiXFxuXCJ9ZWxzZXtpZih0PT09XCJzdWJqZWN0QWx0TmFtZVwiKXt2YXIgeT11KHRoaXMuZ2V0RXh0U3ViamVjdEFsdE5hbWUoKSk7Ris9XCIgICAgXCIreStcIlxcblwifWVsc2V7aWYodD09PVwiY1JMRGlzdHJpYnV0aW9uUG9pbnRzXCIpe3ZhciBDPXRoaXMuZ2V0RXh0Q1JMRGlzdHJpYnV0aW9uUG9pbnRzKCk7Ris9RChDKX1lbHNle2lmKHQ9PT1cImF1dGhvcml0eUluZm9BY2Nlc3NcIil7dmFyIHo9dGhpcy5nZXRFeHRBdXRob3JpdHlJbmZvQWNjZXNzKCk7Ris9Qih6KX1lbHNle2lmKHQ9PT1cImNlcnRpZmljYXRlUG9saWNpZXNcIil7Ris9QSh0aGlzLmdldEV4dENlcnRpZmljYXRlUG9saWNpZXMoKSl9fX19fX19fX19fUYrPVwic2lnbmF0dXJlIGFsZ29yaXRobTogXCIrdGhpcy5nZXRTaWduYXR1cmVBbGdvcml0aG1OYW1lKCkrXCJcXG5cIjtGKz1cInNpZ25hdHVyZTogXCIrdGhpcy5nZXRTaWduYXR1cmVWYWx1ZUhleCgpLnN1YnN0cigwLDE2KStcIi4uLlxcblwiO3JldHVybiBGfTtpZih0eXBlb2YgcT09XCJzdHJpbmdcIil7aWYocS5pbmRleE9mKFwiLS0tLS1CRUdJTlwiKSE9LTEpe3RoaXMucmVhZENlcnRQRU0ocSl9ZWxzZXtpZihLSlVSLmxhbmcuU3RyaW5nLmlzSGV4KHEpKXt0aGlzLnJlYWRDZXJ0SGV4KHEpfX19fVg1MDkuaGV4MmRuPWZ1bmN0aW9uKGYsYil7aWYoYj09PXVuZGVmaW5lZCl7Yj0wfWlmKGYuc3Vic3RyKGIsMikhPT1cIjMwXCIpe3Rocm93IG5ldyBFcnJvcihcIm1hbGZvcm1lZCBETlwiKX12YXIgYz1uZXcgQXJyYXkoKTt2YXIgZD1BU04xSEVYLmdldENoaWxkSWR4KGYsYik7Zm9yKHZhciBlPTA7ZTxkLmxlbmd0aDtlKyspe2MucHVzaChYNTA5LmhleDJyZG4oZixkW2VdKSl9Yz1jLm1hcChmdW5jdGlvbihhKXtyZXR1cm4gYS5yZXBsYWNlKFwiL1wiLFwiXFxcXC9cIil9KTtyZXR1cm5cIi9cIitjLmpvaW4oXCIvXCIpfTtYNTA5LmhleDJyZG49ZnVuY3Rpb24oZixiKXtpZihiPT09dW5kZWZpbmVkKXtiPTB9aWYoZi5zdWJzdHIoYiwyKSE9PVwiMzFcIil7dGhyb3cgbmV3IEVycm9yKFwibWFsZm9ybWVkIFJETlwiKX12YXIgYz1uZXcgQXJyYXkoKTt2YXIgZD1BU04xSEVYLmdldENoaWxkSWR4KGYsYik7Zm9yKHZhciBlPTA7ZTxkLmxlbmd0aDtlKyspe2MucHVzaChYNTA5LmhleDJhdHRyVHlwZVZhbHVlKGYsZFtlXSkpfWM9Yy5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVwbGFjZShcIitcIixcIlxcXFwrXCIpfSk7cmV0dXJuIGMuam9pbihcIitcIil9O1g1MDkuaGV4MmF0dHJUeXBlVmFsdWU9ZnVuY3Rpb24oZCxpKXt2YXIgaj1BU04xSEVYO3ZhciBoPWouZ2V0VjtpZihpPT09dW5kZWZpbmVkKXtpPTB9aWYoZC5zdWJzdHIoaSwyKSE9PVwiMzBcIil7dGhyb3cgbmV3IEVycm9yKFwibWFsZm9ybWVkIGF0dHJpYnV0ZSB0eXBlIGFuZCB2YWx1ZVwiKX12YXIgZz1qLmdldENoaWxkSWR4KGQsaSk7aWYoZy5sZW5ndGghPT0yfHxkLnN1YnN0cihnWzBdLDIpIT09XCIwNlwiKXtcIm1hbGZvcm1lZCBhdHRyaWJ1dGUgdHlwZSBhbmQgdmFsdWVcIn12YXIgYj1oKGQsZ1swXSk7dmFyIGY9S0pVUi5hc24xLkFTTjFVdGlsLm9pZEhleFRvSW50KGIpO3ZhciBlPUtKVVIuYXNuMS54NTA5Lk9JRC5vaWQyYXR5cGUoZik7dmFyIGE9aChkLGdbMV0pO3ZhciBjPWhleHRvcnN0cihhKTtyZXR1cm4gZStcIj1cIitjfTtYNTA5LmdldFB1YmxpY0tleUZyb21DZXJ0SGV4PWZ1bmN0aW9uKGIpe3ZhciBhPW5ldyBYNTA5KCk7YS5yZWFkQ2VydEhleChiKTtyZXR1cm4gYS5nZXRQdWJsaWNLZXkoKX07WDUwOS5nZXRQdWJsaWNLZXlGcm9tQ2VydFBFTT1mdW5jdGlvbihiKXt2YXIgYT1uZXcgWDUwOSgpO2EucmVhZENlcnRQRU0oYik7cmV0dXJuIGEuZ2V0UHVibGljS2V5KCl9O1g1MDkuZ2V0UHVibGljS2V5SW5mb1Byb3BPZkNlcnRQRU09ZnVuY3Rpb24oYyl7dmFyIGU9QVNOMUhFWDt2YXIgZz1lLmdldFZieUxpc3Q7dmFyIGI9e307dmFyIGEsZixkO2IuYWxncGFyYW09bnVsbDthPW5ldyBYNTA5KCk7YS5yZWFkQ2VydFBFTShjKTtmPWEuZ2V0UHVibGljS2V5SGV4KCk7Yi5rZXloZXg9ZyhmLDAsWzFdLFwiMDNcIikuc3Vic3RyKDIpO2IuYWxnb2lkPWcoZiwwLFswLDBdLFwiMDZcIik7aWYoYi5hbGdvaWQ9PT1cIjJhODY0OGNlM2QwMjAxXCIpe2IuYWxncGFyYW09ZyhmLDAsWzAsMV0sXCIwNlwiKX1yZXR1cm4gYn07WDUwOS5LRVlVU0FHRV9OQU1FPVtcImRpZ2l0YWxTaWduYXR1cmVcIixcIm5vblJlcHVkaWF0aW9uXCIsXCJrZXlFbmNpcGhlcm1lbnRcIixcImRhdGFFbmNpcGhlcm1lbnRcIixcImtleUFncmVlbWVudFwiLFwia2V5Q2VydFNpZ25cIixcImNSTFNpZ25cIixcImVuY2lwaGVyT25seVwiLFwiZGVjaXBoZXJPbmx5XCJdO1xuaWYodHlwZW9mIEtKVVI9PVwidW5kZWZpbmVkXCJ8fCFLSlVSKXtLSlVSPXt9fWlmKHR5cGVvZiBLSlVSLmp3cz09XCJ1bmRlZmluZWRcInx8IUtKVVIuandzKXtLSlVSLmp3cz17fX1LSlVSLmp3cy5KV1M9ZnVuY3Rpb24oKXt2YXIgYj1LSlVSLGE9Yi5qd3MuSldTLGM9YS5pc1NhZmVKU09OU3RyaW5nO3RoaXMucGFyc2VKV1M9ZnVuY3Rpb24oZyxqKXtpZigodGhpcy5wYXJzZWRKV1MhPT11bmRlZmluZWQpJiYoanx8KHRoaXMucGFyc2VkSldTLnNpZ3ZhbEghPT11bmRlZmluZWQpKSl7cmV0dXJufXZhciBpPWcubWF0Y2goL14oW14uXSspXFwuKFteLl0rKVxcLihbXi5dKykkLyk7aWYoaT09bnVsbCl7dGhyb3dcIkpXUyBzaWduYXR1cmUgaXMgbm90IGEgZm9ybSBvZiAnSGVhZC5QYXlsb2FkLlNpZ1ZhbHVlJy5cIn12YXIgaz1pWzFdO3ZhciBlPWlbMl07dmFyIGw9aVszXTt2YXIgbj1rK1wiLlwiK2U7dGhpcy5wYXJzZWRKV1M9e307dGhpcy5wYXJzZWRKV1MuaGVhZEI2NFU9azt0aGlzLnBhcnNlZEpXUy5wYXlsb2FkQjY0VT1lO3RoaXMucGFyc2VkSldTLnNpZ3ZhbEI2NFU9bDt0aGlzLnBhcnNlZEpXUy5zaT1uO2lmKCFqKXt2YXIgaD1iNjR1dG9oZXgobCk7dmFyIGY9cGFyc2VCaWdJbnQoaCwxNik7dGhpcy5wYXJzZWRKV1Muc2lndmFsSD1oO3RoaXMucGFyc2VkSldTLnNpZ3ZhbEJJPWZ9dmFyIGQ9YjY0dXRvdXRmOChrKTt2YXIgbT1iNjR1dG91dGY4KGUpO3RoaXMucGFyc2VkSldTLmhlYWRTPWQ7dGhpcy5wYXJzZWRKV1MucGF5bG9hZFM9bTtpZighYyhkLHRoaXMucGFyc2VkSldTLFwiaGVhZFBcIikpe3Rocm93XCJtYWxmb3JtZWQgSlNPTiBzdHJpbmcgZm9yIEpXUyBIZWFkOiBcIitkfX19O0tKVVIuandzLkpXUy5zaWduPWZ1bmN0aW9uKGosdyx6LEEsYSl7dmFyIHg9S0pVUixuPXguandzLHI9bi5KV1MsaD1yLnJlYWRTYWZlSlNPTlN0cmluZyxxPXIuaXNTYWZlSlNPTlN0cmluZyxkPXguY3J5cHRvLGw9ZC5FQ0RTQSxwPWQuTWFjLGM9ZC5TaWduYXR1cmUsdT1KU09OO3ZhciB0LGssbztpZih0eXBlb2YgdyE9XCJzdHJpbmdcIiYmdHlwZW9mIHchPVwib2JqZWN0XCIpe3Rocm93XCJzcEhlYWRlciBtdXN0IGJlIEpTT04gc3RyaW5nIG9yIG9iamVjdDogXCIrd31pZih0eXBlb2Ygdz09XCJvYmplY3RcIil7az13O3Q9dS5zdHJpbmdpZnkoayl9aWYodHlwZW9mIHc9PVwic3RyaW5nXCIpe3Q9dztpZighcSh0KSl7dGhyb3dcIkpXUyBIZWFkIGlzIG5vdCBzYWZlIEpTT04gc3RyaW5nOiBcIit0fWs9aCh0KX1vPXo7aWYodHlwZW9mIHo9PVwib2JqZWN0XCIpe289dS5zdHJpbmdpZnkoeil9aWYoKGo9PVwiXCJ8fGo9PW51bGwpJiZrLmFsZyE9PXVuZGVmaW5lZCl7aj1rLmFsZ31pZigoaiE9XCJcIiYmaiE9bnVsbCkmJmsuYWxnPT09dW5kZWZpbmVkKXtrLmFsZz1qO3Q9dS5zdHJpbmdpZnkoayl9aWYoaiE9PWsuYWxnKXt0aHJvd1wiYWxnIGFuZCBzSGVhZGVyLmFsZyBkb2Vzbid0IG1hdGNoOiBcIitqK1wiIT1cIitrLmFsZ312YXIgcz1udWxsO2lmKHIuandzYWxnMnNpZ2FsZ1tqXT09PXVuZGVmaW5lZCl7dGhyb3dcInVuc3VwcG9ydGVkIGFsZyBuYW1lOiBcIitqfWVsc2V7cz1yLmp3c2FsZzJzaWdhbGdbal19dmFyIGU9dXRmOHRvYjY0dSh0KTt2YXIgbT11dGY4dG9iNjR1KG8pO3ZhciBiPWUrXCIuXCIrbTt2YXIgeT1cIlwiO2lmKHMuc3Vic3RyKDAsNCk9PVwiSG1hY1wiKXtpZihBPT09dW5kZWZpbmVkKXt0aHJvd1wibWFjIGtleSBzaGFsbCBiZSBzcGVjaWZpZWQgZm9yIEhTKiBhbGdcIn12YXIgaT1uZXcgcCh7YWxnOnMscHJvdjpcImNyeXB0b2pzXCIscGFzczpBfSk7aS51cGRhdGVTdHJpbmcoYik7eT1pLmRvRmluYWwoKX1lbHNle2lmKHMuaW5kZXhPZihcIndpdGhFQ0RTQVwiKSE9LTEpe3ZhciBmPW5ldyBjKHthbGc6c30pO2YuaW5pdChBLGEpO2YudXBkYXRlU3RyaW5nKGIpO3ZhciBnPWYuc2lnbigpO3k9S0pVUi5jcnlwdG8uRUNEU0EuYXNuMVNpZ1RvQ29uY2F0U2lnKGcpfWVsc2V7aWYocyE9XCJub25lXCIpe3ZhciBmPW5ldyBjKHthbGc6c30pO2YuaW5pdChBLGEpO2YudXBkYXRlU3RyaW5nKGIpO3k9Zi5zaWduKCl9fX12YXIgdj1oZXh0b2I2NHUoeSk7cmV0dXJuIGIrXCIuXCIrdn07S0pVUi5qd3MuSldTLnZlcmlmeT1mdW5jdGlvbih3LEIsbil7dmFyIHg9S0pVUixxPXguandzLHQ9cS5KV1MsaT10LnJlYWRTYWZlSlNPTlN0cmluZyxlPXguY3J5cHRvLHA9ZS5FQ0RTQSxzPWUuTWFjLGQ9ZS5TaWduYXR1cmUsbTtpZih0eXBlb2YgUlNBS2V5IT09dW5kZWZpbmVkKXttPVJTQUtleX12YXIgeT13LnNwbGl0KFwiLlwiKTtpZih5Lmxlbmd0aCE9PTMpe3JldHVybiBmYWxzZX12YXIgZj15WzBdO3ZhciByPXlbMV07dmFyIGM9ZitcIi5cIityO3ZhciBBPWI2NHV0b2hleCh5WzJdKTt2YXIgbD1pKGI2NHV0b3V0ZjgoeVswXSkpO3ZhciBrPW51bGw7dmFyIHo9bnVsbDtpZihsLmFsZz09PXVuZGVmaW5lZCl7dGhyb3dcImFsZ29yaXRobSBub3Qgc3BlY2lmaWVkIGluIGhlYWRlclwifWVsc2V7az1sLmFsZzt6PWsuc3Vic3RyKDAsMil9aWYobiE9bnVsbCYmT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG4pPT09XCJbb2JqZWN0IEFycmF5XVwiJiZuLmxlbmd0aD4wKXt2YXIgYj1cIjpcIituLmpvaW4oXCI6XCIpK1wiOlwiO2lmKGIuaW5kZXhPZihcIjpcIitrK1wiOlwiKT09LTEpe3Rocm93XCJhbGdvcml0aG0gJ1wiK2srXCInIG5vdCBhY2NlcHRlZCBpbiB0aGUgbGlzdFwifX1pZihrIT1cIm5vbmVcIiYmQj09PW51bGwpe3Rocm93XCJrZXkgc2hhbGwgYmUgc3BlY2lmaWVkIHRvIHZlcmlmeS5cIn1pZih0eXBlb2YgQj09XCJzdHJpbmdcIiYmQi5pbmRleE9mKFwiLS0tLS1CRUdJTiBcIikhPS0xKXtCPUtFWVVUSUwuZ2V0S2V5KEIpfWlmKHo9PVwiUlNcInx8ej09XCJQU1wiKXtpZighKEIgaW5zdGFuY2VvZiBtKSl7dGhyb3dcImtleSBzaGFsbCBiZSBhIFJTQUtleSBvYmogZm9yIFJTKiBhbmQgUFMqIGFsZ3NcIn19aWYoej09XCJFU1wiKXtpZighKEIgaW5zdGFuY2VvZiBwKSl7dGhyb3dcImtleSBzaGFsbCBiZSBhIEVDRFNBIG9iaiBmb3IgRVMqIGFsZ3NcIn19aWYoaz09XCJub25lXCIpe312YXIgdT1udWxsO2lmKHQuandzYWxnMnNpZ2FsZ1tsLmFsZ109PT11bmRlZmluZWQpe3Rocm93XCJ1bnN1cHBvcnRlZCBhbGcgbmFtZTogXCIra31lbHNle3U9dC5qd3NhbGcyc2lnYWxnW2tdfWlmKHU9PVwibm9uZVwiKXt0aHJvd1wibm90IHN1cHBvcnRlZFwifWVsc2V7aWYodS5zdWJzdHIoMCw0KT09XCJIbWFjXCIpe3ZhciBvPW51bGw7aWYoQj09PXVuZGVmaW5lZCl7dGhyb3dcImhleGFkZWNpbWFsIGtleSBzaGFsbCBiZSBzcGVjaWZpZWQgZm9yIEhNQUNcIn12YXIgaj1uZXcgcyh7YWxnOnUscGFzczpCfSk7ai51cGRhdGVTdHJpbmcoYyk7bz1qLmRvRmluYWwoKTtyZXR1cm4gQT09b31lbHNle2lmKHUuaW5kZXhPZihcIndpdGhFQ0RTQVwiKSE9LTEpe3ZhciBoPW51bGw7dHJ5e2g9cC5jb25jYXRTaWdUb0FTTjFTaWcoQSl9Y2F0Y2godil7cmV0dXJuIGZhbHNlfXZhciBnPW5ldyBkKHthbGc6dX0pO2cuaW5pdChCKTtnLnVwZGF0ZVN0cmluZyhjKTtyZXR1cm4gZy52ZXJpZnkoaCl9ZWxzZXt2YXIgZz1uZXcgZCh7YWxnOnV9KTtnLmluaXQoQik7Zy51cGRhdGVTdHJpbmcoYyk7cmV0dXJuIGcudmVyaWZ5KEEpfX19fTtLSlVSLmp3cy5KV1MucGFyc2U9ZnVuY3Rpb24oZyl7dmFyIGM9Zy5zcGxpdChcIi5cIik7dmFyIGI9e307dmFyIGYsZSxkO2lmKGMubGVuZ3RoIT0yJiZjLmxlbmd0aCE9Myl7dGhyb3dcIm1hbGZvcm1lZCBzSldTOiB3cm9uZyBudW1iZXIgb2YgJy4nIHNwbGl0dGVkIGVsZW1lbnRzXCJ9Zj1jWzBdO2U9Y1sxXTtpZihjLmxlbmd0aD09Myl7ZD1jWzJdfWIuaGVhZGVyT2JqPUtKVVIuandzLkpXUy5yZWFkU2FmZUpTT05TdHJpbmcoYjY0dXRvdXRmOChmKSk7Yi5wYXlsb2FkT2JqPUtKVVIuandzLkpXUy5yZWFkU2FmZUpTT05TdHJpbmcoYjY0dXRvdXRmOChlKSk7Yi5oZWFkZXJQUD1KU09OLnN0cmluZ2lmeShiLmhlYWRlck9iaixudWxsLFwiICBcIik7aWYoYi5wYXlsb2FkT2JqPT1udWxsKXtiLnBheWxvYWRQUD1iNjR1dG91dGY4KGUpfWVsc2V7Yi5wYXlsb2FkUFA9SlNPTi5zdHJpbmdpZnkoYi5wYXlsb2FkT2JqLG51bGwsXCIgIFwiKX1pZihkIT09dW5kZWZpbmVkKXtiLnNpZ0hleD1iNjR1dG9oZXgoZCl9cmV0dXJuIGJ9O0tKVVIuandzLkpXUy52ZXJpZnlKV1Q9ZnVuY3Rpb24oZSxsLHIpe3ZhciBkPUtKVVIsaj1kLmp3cyxvPWouSldTLG49by5yZWFkU2FmZUpTT05TdHJpbmcscD1vLmluQXJyYXksZj1vLmluY2x1ZGVkQXJyYXk7dmFyIGs9ZS5zcGxpdChcIi5cIik7dmFyIGM9a1swXTt2YXIgaT1rWzFdO3ZhciBxPWMrXCIuXCIraTt2YXIgbT1iNjR1dG9oZXgoa1syXSk7dmFyIGg9bihiNjR1dG91dGY4KGMpKTt2YXIgZz1uKGI2NHV0b3V0ZjgoaSkpO2lmKGguYWxnPT09dW5kZWZpbmVkKXtyZXR1cm4gZmFsc2V9aWYoci5hbGc9PT11bmRlZmluZWQpe3Rocm93XCJhY2NlcHRGaWVsZC5hbGcgc2hhbGwgYmUgc3BlY2lmaWVkXCJ9aWYoIXAoaC5hbGcsci5hbGcpKXtyZXR1cm4gZmFsc2V9aWYoZy5pc3MhPT11bmRlZmluZWQmJnR5cGVvZiByLmlzcz09PVwib2JqZWN0XCIpe2lmKCFwKGcuaXNzLHIuaXNzKSl7cmV0dXJuIGZhbHNlfX1pZihnLnN1YiE9PXVuZGVmaW5lZCYmdHlwZW9mIHIuc3ViPT09XCJvYmplY3RcIil7aWYoIXAoZy5zdWIsci5zdWIpKXtyZXR1cm4gZmFsc2V9fWlmKGcuYXVkIT09dW5kZWZpbmVkJiZ0eXBlb2Ygci5hdWQ9PT1cIm9iamVjdFwiKXtpZih0eXBlb2YgZy5hdWQ9PVwic3RyaW5nXCIpe2lmKCFwKGcuYXVkLHIuYXVkKSl7cmV0dXJuIGZhbHNlfX1lbHNle2lmKHR5cGVvZiBnLmF1ZD09XCJvYmplY3RcIil7aWYoIWYoZy5hdWQsci5hdWQpKXtyZXR1cm4gZmFsc2V9fX19dmFyIGI9ai5JbnREYXRlLmdldE5vdygpO2lmKHIudmVyaWZ5QXQhPT11bmRlZmluZWQmJnR5cGVvZiByLnZlcmlmeUF0PT09XCJudW1iZXJcIil7Yj1yLnZlcmlmeUF0fWlmKHIuZ3JhY2VQZXJpb2Q9PT11bmRlZmluZWR8fHR5cGVvZiByLmdyYWNlUGVyaW9kIT09XCJudW1iZXJcIil7ci5ncmFjZVBlcmlvZD0wfWlmKGcuZXhwIT09dW5kZWZpbmVkJiZ0eXBlb2YgZy5leHA9PVwibnVtYmVyXCIpe2lmKGcuZXhwK3IuZ3JhY2VQZXJpb2Q8Yil7cmV0dXJuIGZhbHNlfX1pZihnLm5iZiE9PXVuZGVmaW5lZCYmdHlwZW9mIGcubmJmPT1cIm51bWJlclwiKXtpZihiPGcubmJmLXIuZ3JhY2VQZXJpb2Qpe3JldHVybiBmYWxzZX19aWYoZy5pYXQhPT11bmRlZmluZWQmJnR5cGVvZiBnLmlhdD09XCJudW1iZXJcIil7aWYoYjxnLmlhdC1yLmdyYWNlUGVyaW9kKXtyZXR1cm4gZmFsc2V9fWlmKGcuanRpIT09dW5kZWZpbmVkJiZyLmp0aSE9PXVuZGVmaW5lZCl7aWYoZy5qdGkhPT1yLmp0aSl7cmV0dXJuIGZhbHNlfX1pZighby52ZXJpZnkoZSxsLHIuYWxnKSl7cmV0dXJuIGZhbHNlfXJldHVybiB0cnVlfTtLSlVSLmp3cy5KV1MuaW5jbHVkZWRBcnJheT1mdW5jdGlvbihiLGEpe3ZhciBjPUtKVVIuandzLkpXUy5pbkFycmF5O2lmKGI9PT1udWxsKXtyZXR1cm4gZmFsc2V9aWYodHlwZW9mIGIhPT1cIm9iamVjdFwiKXtyZXR1cm4gZmFsc2V9aWYodHlwZW9mIGIubGVuZ3RoIT09XCJudW1iZXJcIil7cmV0dXJuIGZhbHNlfWZvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXtpZighYyhiW2RdLGEpKXtyZXR1cm4gZmFsc2V9fXJldHVybiB0cnVlfTtLSlVSLmp3cy5KV1MuaW5BcnJheT1mdW5jdGlvbihkLGIpe2lmKGI9PT1udWxsKXtyZXR1cm4gZmFsc2V9aWYodHlwZW9mIGIhPT1cIm9iamVjdFwiKXtyZXR1cm4gZmFsc2V9aWYodHlwZW9mIGIubGVuZ3RoIT09XCJudW1iZXJcIil7cmV0dXJuIGZhbHNlfWZvcih2YXIgYz0wO2M8Yi5sZW5ndGg7YysrKXtpZihiW2NdPT1kKXtyZXR1cm4gdHJ1ZX19cmV0dXJuIGZhbHNlfTtLSlVSLmp3cy5KV1MuandzYWxnMnNpZ2FsZz17SFMyNTY6XCJIbWFjU0hBMjU2XCIsSFMzODQ6XCJIbWFjU0hBMzg0XCIsSFM1MTI6XCJIbWFjU0hBNTEyXCIsUlMyNTY6XCJTSEEyNTZ3aXRoUlNBXCIsUlMzODQ6XCJTSEEzODR3aXRoUlNBXCIsUlM1MTI6XCJTSEE1MTJ3aXRoUlNBXCIsRVMyNTY6XCJTSEEyNTZ3aXRoRUNEU0FcIixFUzM4NDpcIlNIQTM4NHdpdGhFQ0RTQVwiLFBTMjU2OlwiU0hBMjU2d2l0aFJTQWFuZE1HRjFcIixQUzM4NDpcIlNIQTM4NHdpdGhSU0FhbmRNR0YxXCIsUFM1MTI6XCJTSEE1MTJ3aXRoUlNBYW5kTUdGMVwiLG5vbmU6XCJub25lXCIsfTtLSlVSLmp3cy5KV1MuaXNTYWZlSlNPTlN0cmluZz1mdW5jdGlvbihjLGIsZCl7dmFyIGU9bnVsbDt0cnl7ZT1qc29uUGFyc2UoYyk7aWYodHlwZW9mIGUhPVwib2JqZWN0XCIpe3JldHVybiAwfWlmKGUuY29uc3RydWN0b3I9PT1BcnJheSl7cmV0dXJuIDB9aWYoYil7YltkXT1lfXJldHVybiAxfWNhdGNoKGEpe3JldHVybiAwfX07S0pVUi5qd3MuSldTLnJlYWRTYWZlSlNPTlN0cmluZz1mdW5jdGlvbihiKXt2YXIgYz1udWxsO3RyeXtjPWpzb25QYXJzZShiKTtpZih0eXBlb2YgYyE9XCJvYmplY3RcIil7cmV0dXJuIG51bGx9aWYoYy5jb25zdHJ1Y3Rvcj09PUFycmF5KXtyZXR1cm4gbnVsbH1yZXR1cm4gY31jYXRjaChhKXtyZXR1cm4gbnVsbH19O0tKVVIuandzLkpXUy5nZXRFbmNvZGVkU2lnbmF0dXJlVmFsdWVGcm9tSldTPWZ1bmN0aW9uKGIpe3ZhciBhPWIubWF0Y2goL15bXi5dK1xcLlteLl0rXFwuKFteLl0rKSQvKTtpZihhPT1udWxsKXt0aHJvd1wiSldTIHNpZ25hdHVyZSBpcyBub3QgYSBmb3JtIG9mICdIZWFkLlBheWxvYWQuU2lnVmFsdWUnLlwifXJldHVybiBhWzFdfTtLSlVSLmp3cy5KV1MuZ2V0SldLdGh1bWJwcmludD1mdW5jdGlvbihkKXtpZihkLmt0eSE9PVwiUlNBXCImJmQua3R5IT09XCJFQ1wiJiZkLmt0eSE9PVwib2N0XCIpe3Rocm93XCJ1bnN1cHBvcnRlZCBhbGdvcml0aG0gZm9yIEpXSyBUaHVtcHJpbnRcIn12YXIgYT1cIntcIjtpZihkLmt0eT09PVwiUlNBXCIpe2lmKHR5cGVvZiBkLm4hPVwic3RyaW5nXCJ8fHR5cGVvZiBkLmUhPVwic3RyaW5nXCIpe3Rocm93XCJ3cm9uZyBuIGFuZCBlIHZhbHVlIGZvciBSU0Ega2V5XCJ9YSs9J1wiZVwiOlwiJytkLmUrJ1wiLCc7YSs9J1wia3R5XCI6XCInK2Qua3R5KydcIiwnO2ErPSdcIm5cIjpcIicrZC5uKydcIn0nfWVsc2V7aWYoZC5rdHk9PT1cIkVDXCIpe2lmKHR5cGVvZiBkLmNydiE9XCJzdHJpbmdcInx8dHlwZW9mIGQueCE9XCJzdHJpbmdcInx8dHlwZW9mIGQueSE9XCJzdHJpbmdcIil7dGhyb3dcIndyb25nIGNydiwgeCBhbmQgeSB2YWx1ZSBmb3IgRUMga2V5XCJ9YSs9J1wiY3J2XCI6XCInK2QuY3J2KydcIiwnO2ErPSdcImt0eVwiOlwiJytkLmt0eSsnXCIsJzthKz0nXCJ4XCI6XCInK2QueCsnXCIsJzthKz0nXCJ5XCI6XCInK2QueSsnXCJ9J31lbHNle2lmKGQua3R5PT09XCJvY3RcIil7aWYodHlwZW9mIGQuayE9XCJzdHJpbmdcIil7dGhyb3dcIndyb25nIGsgdmFsdWUgZm9yIG9jdChzeW1tZXRyaWMpIGtleVwifWErPSdcImt0eVwiOlwiJytkLmt0eSsnXCIsJzthKz0nXCJrXCI6XCInK2QuaysnXCJ9J319fXZhciBiPXJzdHJ0b2hleChhKTt2YXIgYz1LSlVSLmNyeXB0by5VdGlsLmhhc2hIZXgoYixcInNoYTI1NlwiKTt2YXIgZT1oZXh0b2I2NHUoYyk7cmV0dXJuIGV9O0tKVVIuandzLkludERhdGU9e307S0pVUi5qd3MuSW50RGF0ZS5nZXQ9ZnVuY3Rpb24oYyl7dmFyIGI9S0pVUi5qd3MuSW50RGF0ZSxkPWIuZ2V0Tm93LGE9Yi5nZXRadWx1O2lmKGM9PVwibm93XCIpe3JldHVybiBkKCl9ZWxzZXtpZihjPT1cIm5vdyArIDFob3VyXCIpe3JldHVybiBkKCkrNjAqNjB9ZWxzZXtpZihjPT1cIm5vdyArIDFkYXlcIil7cmV0dXJuIGQoKSs2MCo2MCoyNH1lbHNle2lmKGM9PVwibm93ICsgMW1vbnRoXCIpe3JldHVybiBkKCkrNjAqNjAqMjQqMzB9ZWxzZXtpZihjPT1cIm5vdyArIDF5ZWFyXCIpe3JldHVybiBkKCkrNjAqNjAqMjQqMzY1fWVsc2V7aWYoYy5tYXRjaCgvWiQvKSl7cmV0dXJuIGEoYyl9ZWxzZXtpZihjLm1hdGNoKC9eWzAtOV0rJC8pKXtyZXR1cm4gcGFyc2VJbnQoYyl9fX19fX19dGhyb3dcInVuc3VwcG9ydGVkIGZvcm1hdDogXCIrY307S0pVUi5qd3MuSW50RGF0ZS5nZXRadWx1PWZ1bmN0aW9uKGEpe3JldHVybiB6dWx1dG9zZWMoYSl9O0tKVVIuandzLkludERhdGUuZ2V0Tm93PWZ1bmN0aW9uKCl7dmFyIGE9fn4obmV3IERhdGUoKS8xMDAwKTtyZXR1cm4gYX07S0pVUi5qd3MuSW50RGF0ZS5pbnREYXRlMlVUQ1N0cmluZz1mdW5jdGlvbihhKXt2YXIgYj1uZXcgRGF0ZShhKjEwMDApO3JldHVybiBiLnRvVVRDU3RyaW5nKCl9O0tKVVIuandzLkludERhdGUuaW50RGF0ZTJadWx1PWZ1bmN0aW9uKGUpe3ZhciBpPW5ldyBEYXRlKGUqMTAwMCksaD0oXCIwMDAwXCIraS5nZXRVVENGdWxsWWVhcigpKS5zbGljZSgtNCksZz0oXCIwMFwiKyhpLmdldFVUQ01vbnRoKCkrMSkpLnNsaWNlKC0yKSxiPShcIjAwXCIraS5nZXRVVENEYXRlKCkpLnNsaWNlKC0yKSxhPShcIjAwXCIraS5nZXRVVENIb3VycygpKS5zbGljZSgtMiksYz0oXCIwMFwiK2kuZ2V0VVRDTWludXRlcygpKS5zbGljZSgtMiksZj0oXCIwMFwiK2kuZ2V0VVRDU2Vjb25kcygpKS5zbGljZSgtMik7cmV0dXJuIGgrZytiK2ErYytmK1wiWlwifTtcbmV4cG9ydCB7IFNlY3VyZVJhbmRvbSB9O1xuZXhwb3J0IHsgcm5nX3NlZWRfdGltZSB9O1xuXG5leHBvcnQgeyBCaWdJbnRlZ2VyIH07XG5leHBvcnQgeyBSU0FLZXkgfTtcbmV4cG9ydCBjb25zdCB7IEVEU0EgfSA9IEtKVVIuY3J5cHRvO1xuZXhwb3J0IGNvbnN0IHsgRFNBIH0gPSBLSlVSLmNyeXB0bztcbmV4cG9ydCBjb25zdCB7IFNpZ25hdHVyZSB9ID0gS0pVUi5jcnlwdG87XG5leHBvcnQgY29uc3QgeyBNZXNzYWdlRGlnZXN0IH0gPSAgS0pVUi5jcnlwdG87XG5leHBvcnQgY29uc3QgeyBNYWMgfSA9IEtKVVIuY3J5cHRvO1xuZXhwb3J0IGNvbnN0IHsgQ2lwaGVyIH0gPSAgS0pVUi5jcnlwdG87XG5leHBvcnQgeyBLRVlVVElMIH07XG5leHBvcnQgeyBBU04xSEVYIH07XG5leHBvcnQgeyBYNTA5IH07XG5leHBvcnQgeyBDcnlwdG9KUyB9O1xuXG4vLyBleHQvYmFzZTY0LmpzXG5leHBvcnQgeyBiNjR0b2hleCB9O1xuZXhwb3J0IHsgYjY0dG9CQSB9O1xuXG4vLyBiYXNlNjR4LmpzXG5leHBvcnQgeyBzdG9CQSB9O1xuZXhwb3J0IHsgQkF0b3MgfTtcbmV4cG9ydCB7IEJBdG9oZXggfTtcbmV4cG9ydCB7IHN0b2hleCB9O1xuZXhwb3J0IHsgc3RvYjY0IH07XG5leHBvcnQgeyBzdG9iNjR1IH07XG5leHBvcnQgeyBiNjR1dG9zIH07XG5leHBvcnQgeyBiNjR0b2I2NHUgfTtcbmV4cG9ydCB7IGI2NHV0b2I2NCB9O1xuZXhwb3J0IHsgaGV4MmI2NCB9O1xuZXhwb3J0IHsgaGV4dG9iNjR1IH07XG5leHBvcnQgeyBiNjR1dG9oZXggfTtcbmV4cG9ydCB7IHV0Zjh0b2I2NHUgfTtcbmV4cG9ydCB7IGI2NHV0b3V0ZjggfTtcbmV4cG9ydCB7IHV0Zjh0b2I2NCB9O1xuZXhwb3J0IHsgYjY0dG91dGY4IH07XG5leHBvcnQgeyB1dGY4dG9oZXggfTtcbmV4cG9ydCB7IGhleHRvdXRmOCB9O1xuZXhwb3J0IHsgaGV4dG9yc3RyIH07XG5leHBvcnQgeyByc3RydG9oZXggfTtcbmV4cG9ydCB7IGhleHRvYjY0IH07XG5leHBvcnQgeyBoZXh0b2I2NG5sIH07XG5leHBvcnQgeyBiNjRubHRvaGV4IH07XG5leHBvcnQgeyBoZXh0b3BlbSB9O1xuZXhwb3J0IHsgcGVtdG9oZXggfTtcbmV4cG9ydCB7IGhleHRvQXJyYXlCdWZmZXIgfTtcbmV4cG9ydCB7IEFycmF5QnVmZmVydG9oZXggfTtcbmV4cG9ydCB7IHp1bHV0b21zZWMgfTtcbmV4cG9ydCB7IHp1bHV0b3NlYyB9O1xuZXhwb3J0IHsgenVsdXRvZGF0ZSB9O1xuZXhwb3J0IHsgZGF0ZXRvenVsdSB9O1xuZXhwb3J0IHsgdXJpY21wdG9oZXggfTtcbmV4cG9ydCB7IGhleHRvdXJpY21wIH07XG5leHBvcnQgeyBpcHY2dG9oZXggfTtcbmV4cG9ydCB7IGhleHRvaXB2NiB9O1xuZXhwb3J0IHsgaGV4dG9pcCB9O1xuZXhwb3J0IHsgaXB0b2hleCB9O1xuZXhwb3J0IHsgZW5jb2RlVVJJQ29tcG9uZW50QWxsIH07XG5leHBvcnQgeyBuZXdsaW5lX3RvVW5peCB9O1xuZXhwb3J0IHsgbmV3bGluZV90b0RvcyB9O1xuZXhwb3J0IHsgaGV4dG9wb3NoZXggfTtcbmV4cG9ydCB7IGludGFyeXN0cnRvaGV4IH07XG5leHBvcnQgeyBzdHJkaWZmaWR4IH07XG5cbi8vIG5hbWUgc3BhY2VzXG5leHBvcnQgeyBLSlVSIH07XG5jb25zdCBfY3J5cHRvID0gIEtKVVIuY3J5cHRvO1xuZXhwb3J0IHsgX2NyeXB0byBhcyBjcnlwdG8gfTtcbmV4cG9ydCBjb25zdCB7IGFzbjEgfSA9IEtKVVI7XG5leHBvcnQgY29uc3QgeyBqd3MgfSA9IEtKVVI7XG5leHBvcnQgY29uc3QgeyBsYW5nIH0gPSBLSlVSO1xuXG5cbiIsIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5leHBvcnRzLnRvQnl0ZUFycmF5ID0gdG9CeXRlQXJyYXlcbmV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXlcblxudmFyIGxvb2t1cCA9IFtdXG52YXIgcmV2TG9va3VwID0gW11cbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcblxudmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLydcbmZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gIGxvb2t1cFtpXSA9IGNvZGVbaV1cbiAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpXG59XG5cbi8vIFN1cHBvcnQgZGVjb2RpbmcgVVJMLXNhZmUgYmFzZTY0IHN0cmluZ3MsIGFzIE5vZGUuanMgZG9lcy5cbi8vIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0I1VSTF9hcHBsaWNhdGlvbnNcbnJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MlxucmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzXG5cbmZ1bmN0aW9uIGdldExlbnMgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXG4gIGlmIChsZW4gJSA0ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG4gIH1cblxuICAvLyBUcmltIG9mZiBleHRyYSBieXRlcyBhZnRlciBwbGFjZWhvbGRlciBieXRlcyBhcmUgZm91bmRcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYmVhdGdhbW1pdC9iYXNlNjQtanMvaXNzdWVzLzQyXG4gIHZhciB2YWxpZExlbiA9IGI2NC5pbmRleE9mKCc9JylcbiAgaWYgKHZhbGlkTGVuID09PSAtMSkgdmFsaWRMZW4gPSBsZW5cblxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gdmFsaWRMZW4gPT09IGxlblxuICAgID8gMFxuICAgIDogNCAtICh2YWxpZExlbiAlIDQpXG5cbiAgcmV0dXJuIFt2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuXVxufVxuXG4vLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKGI2NCkge1xuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiBfYnl0ZUxlbmd0aCAoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSB7XG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuXG4gIHZhciBhcnIgPSBuZXcgQXJyKF9ieXRlTGVuZ3RoKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikpXG5cbiAgdmFyIGN1ckJ5dGUgPSAwXG5cbiAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuICB2YXIgbGVuID0gcGxhY2VIb2xkZXJzTGVuID4gMFxuICAgID8gdmFsaWRMZW4gLSA0XG4gICAgOiB2YWxpZExlblxuXG4gIHZhciBpXG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfFxuICAgICAgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDIpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAxKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID1cbiAgICAgICgodWludDhbaV0gPDwgMTYpICYgMHhGRjAwMDApICtcbiAgICAgICgodWludDhbaSArIDFdIDw8IDgpICYgMHhGRjAwKSArXG4gICAgICAodWludDhbaSArIDJdICYgMHhGRilcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayh1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDJdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl0gK1xuICAgICAgJz09J1xuICAgIClcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAxMF0gK1xuICAgICAgbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdICtcbiAgICAgICc9J1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuIiwiLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5cbid1c2Ugc3RyaWN0J1xuXG52YXIgYmFzZTY0ID0gcmVxdWlyZSgnYmFzZTY0LWpzJylcbnZhciBpZWVlNzU0ID0gcmVxdWlyZSgnaWVlZTc1NCcpXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG5leHBvcnRzLkJ1ZmZlciA9IEJ1ZmZlclxuZXhwb3J0cy5TbG93QnVmZmVyID0gU2xvd0J1ZmZlclxuZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFUyA9IDUwXG5cbi8qKlxuICogSWYgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYDpcbiAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpXG4gKiAgID09PSBmYWxzZSAgIFVzZSBPYmplY3QgaW1wbGVtZW50YXRpb24gKG1vc3QgY29tcGF0aWJsZSwgZXZlbiBJRTYpXG4gKlxuICogQnJvd3NlcnMgdGhhdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLCBDaHJvbWUgNyssIFNhZmFyaSA1LjErLFxuICogT3BlcmEgMTEuNissIGlPUyA0LjIrLlxuICpcbiAqIER1ZSB0byB2YXJpb3VzIGJyb3dzZXIgYnVncywgc29tZXRpbWVzIHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24gd2lsbCBiZSB1c2VkIGV2ZW5cbiAqIHdoZW4gdGhlIGJyb3dzZXIgc3VwcG9ydHMgdHlwZWQgYXJyYXlzLlxuICpcbiAqIE5vdGU6XG4gKlxuICogICAtIEZpcmVmb3ggNC0yOSBsYWNrcyBzdXBwb3J0IGZvciBhZGRpbmcgbmV3IHByb3BlcnRpZXMgdG8gYFVpbnQ4QXJyYXlgIGluc3RhbmNlcyxcbiAqICAgICBTZWU6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5NTQzOC5cbiAqXG4gKiAgIC0gQ2hyb21lIDktMTAgaXMgbWlzc2luZyB0aGUgYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbi5cbiAqXG4gKiAgIC0gSUUxMCBoYXMgYSBicm9rZW4gYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFycmF5cyBvZlxuICogICAgIGluY29ycmVjdCBsZW5ndGggaW4gc29tZSBzaXR1YXRpb25zLlxuXG4gKiBXZSBkZXRlY3QgdGhlc2UgYnVnZ3kgYnJvd3NlcnMgYW5kIHNldCBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgIHRvIGBmYWxzZWAgc28gdGhleVxuICogZ2V0IHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24sIHdoaWNoIGlzIHNsb3dlciBidXQgYmVoYXZlcyBjb3JyZWN0bHkuXG4gKi9cbkJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUID0gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlQgIT09IHVuZGVmaW5lZFxuICA/IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gIDogdHlwZWRBcnJheVN1cHBvcnQoKVxuXG4vKlxuICogRXhwb3J0IGtNYXhMZW5ndGggYWZ0ZXIgdHlwZWQgYXJyYXkgc3VwcG9ydCBpcyBkZXRlcm1pbmVkLlxuICovXG5leHBvcnRzLmtNYXhMZW5ndGggPSBrTWF4TGVuZ3RoKClcblxuZnVuY3Rpb24gdHlwZWRBcnJheVN1cHBvcnQgKCkge1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheSgxKVxuICAgIGFyci5fX3Byb3RvX18gPSB7X19wcm90b19fOiBVaW50OEFycmF5LnByb3RvdHlwZSwgZm9vOiBmdW5jdGlvbiAoKSB7IHJldHVybiA0MiB9fVxuICAgIHJldHVybiBhcnIuZm9vKCkgPT09IDQyICYmIC8vIHR5cGVkIGFycmF5IGluc3RhbmNlcyBjYW4gYmUgYXVnbWVudGVkXG4gICAgICAgIHR5cGVvZiBhcnIuc3ViYXJyYXkgPT09ICdmdW5jdGlvbicgJiYgLy8gY2hyb21lIDktMTAgbGFjayBgc3ViYXJyYXlgXG4gICAgICAgIGFyci5zdWJhcnJheSgxLCAxKS5ieXRlTGVuZ3RoID09PSAwIC8vIGllMTAgaGFzIGJyb2tlbiBgc3ViYXJyYXlgXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5mdW5jdGlvbiBrTWF4TGVuZ3RoICgpIHtcbiAgcmV0dXJuIEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gICAgPyAweDdmZmZmZmZmXG4gICAgOiAweDNmZmZmZmZmXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciAodGhhdCwgbGVuZ3RoKSB7XG4gIGlmIChrTWF4TGVuZ3RoKCkgPCBsZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0eXBlZCBhcnJheSBsZW5ndGgnKVxuICB9XG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpXG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIGlmICh0aGF0ID09PSBudWxsKSB7XG4gICAgICB0aGF0ID0gbmV3IEJ1ZmZlcihsZW5ndGgpXG4gICAgfVxuICAgIHRoYXQubGVuZ3RoID0gbGVuZ3RoXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgaGF2ZSB0aGVpclxuICogcHJvdG90eXBlIGNoYW5nZWQgdG8gYEJ1ZmZlci5wcm90b3R5cGVgLiBGdXJ0aGVybW9yZSwgYEJ1ZmZlcmAgaXMgYSBzdWJjbGFzcyBvZlxuICogYFVpbnQ4QXJyYXlgLCBzbyB0aGUgcmV0dXJuZWQgaW5zdGFuY2VzIHdpbGwgaGF2ZSBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgbWV0aG9kc1xuICogYW5kIHRoZSBgVWludDhBcnJheWAgbWV0aG9kcy4gU3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXRcbiAqIHJldHVybnMgYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogVGhlIGBVaW50OEFycmF5YCBwcm90b3R5cGUgcmVtYWlucyB1bm1vZGlmaWVkLlxuICovXG5cbmZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiAhKHRoaXMgaW5zdGFuY2VvZiBCdWZmZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICAvLyBDb21tb24gY2FzZS5cbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZ09yT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnSWYgZW5jb2RpbmcgaXMgc3BlY2lmaWVkIHRoZW4gdGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcnXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiBhbGxvY1Vuc2FmZSh0aGlzLCBhcmcpXG4gIH1cbiAgcmV0dXJuIGZyb20odGhpcywgYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wb29sU2l6ZSA9IDgxOTIgLy8gbm90IHVzZWQgYnkgdGhpcyBpbXBsZW1lbnRhdGlvblxuXG4vLyBUT0RPOiBMZWdhY3ksIG5vdCBuZWVkZWQgYW55bW9yZS4gUmVtb3ZlIGluIG5leHQgbWFqb3IgdmVyc2lvbi5cbkJ1ZmZlci5fYXVnbWVudCA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgYXJyLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiBmcm9tICh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmcm9tU3RyaW5nKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0KVxuICB9XG5cbiAgcmV0dXJuIGZyb21PYmplY3QodGhhdCwgdmFsdWUpXG59XG5cbi8qKlxuICogRnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQgdG8gQnVmZmVyKGFyZywgZW5jb2RpbmcpIGJ1dCB0aHJvd3MgYSBUeXBlRXJyb3JcbiAqIGlmIHZhbHVlIGlzIGEgbnVtYmVyLlxuICogQnVmZmVyLmZyb20oc3RyWywgZW5jb2RpbmddKVxuICogQnVmZmVyLmZyb20oYXJyYXkpXG4gKiBCdWZmZXIuZnJvbShidWZmZXIpXG4gKiBCdWZmZXIuZnJvbShhcnJheUJ1ZmZlclssIGJ5dGVPZmZzZXRbLCBsZW5ndGhdXSlcbiAqKi9cbkJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGZyb20obnVsbCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gIEJ1ZmZlci5wcm90b3R5cGUuX19wcm90b19fID0gVWludDhBcnJheS5wcm90b3R5cGVcbiAgQnVmZmVyLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXlcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC5zcGVjaWVzICYmXG4gICAgICBCdWZmZXJbU3ltYm9sLnNwZWNpZXNdID09PSBCdWZmZXIpIHtcbiAgICAvLyBGaXggc3ViYXJyYXkoKSBpbiBFUzIwMTYuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC85N1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIsIFN5bWJvbC5zcGVjaWVzLCB7XG4gICAgICB2YWx1ZTogbnVsbCxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0U2l6ZSAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH0gZWxzZSBpZiAoc2l6ZSA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgbmVnYXRpdmUnKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFsbG9jICh0aGF0LCBzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIGlmIChzaXplIDw9IDApIHtcbiAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG4gIH1cbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9ubHkgcGF5IGF0dGVudGlvbiB0byBlbmNvZGluZyBpZiBpdCdzIGEgc3RyaW5nLiBUaGlzXG4gICAgLy8gcHJldmVudHMgYWNjaWRlbnRhbGx5IHNlbmRpbmcgaW4gYSBudW1iZXIgdGhhdCB3b3VsZFxuICAgIC8vIGJlIGludGVycHJldHRlZCBhcyBhIHN0YXJ0IG9mZnNldC5cbiAgICByZXR1cm4gdHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJ1xuICAgICAgPyBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICAgIDogY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbClcbiAgfVxuICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBmaWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogYWxsb2Moc2l6ZVssIGZpbGxbLCBlbmNvZGluZ11dKVxuICoqL1xuQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIHJldHVybiBhbGxvYyhudWxsLCBzaXplLCBmaWxsLCBlbmNvZGluZylcbn1cblxuZnVuY3Rpb24gYWxsb2NVbnNhZmUgKHRoYXQsIHNpemUpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUgPCAwID8gMCA6IGNoZWNrZWQoc2l6ZSkgfCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyArK2kpIHtcbiAgICAgIHRoYXRbaV0gPSAwXG4gICAgfVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogRXF1aXZhbGVudCB0byBCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqICovXG5CdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cbi8qKlxuICogRXF1aXZhbGVudCB0byBTbG93QnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyAodGhhdCwgc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJyB8fCBlbmNvZGluZyA9PT0gJycpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICB9XG5cbiAgaWYgKCFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImVuY29kaW5nXCIgbXVzdCBiZSBhIHZhbGlkIHN0cmluZyBlbmNvZGluZycpXG4gIH1cblxuICB2YXIgbGVuZ3RoID0gYnl0ZUxlbmd0aChzdHJpbmcsIGVuY29kaW5nKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG5cbiAgdmFyIGFjdHVhbCA9IHRoYXQud3JpdGUoc3RyaW5nLCBlbmNvZGluZylcblxuICBpZiAoYWN0dWFsICE9PSBsZW5ndGgpIHtcbiAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGxcbiAgICAvLyBjYXVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCBpbnZhbGlkIGNoYXJhY3RlciB0byBiZSBpZ25vcmVkLiAoZS5nLlxuICAgIC8vICdhYnh4Y2QnIHdpbGwgYmUgdHJlYXRlZCBhcyAnYWInKVxuICAgIHRoYXQgPSB0aGF0LnNsaWNlKDAsIGFjdHVhbClcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUxpa2UgKHRoYXQsIGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGggPCAwID8gMCA6IGNoZWNrZWQoYXJyYXkubGVuZ3RoKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGF0W2ldID0gYXJyYXlbaV0gJiAyNTVcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXIgKHRoYXQsIGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgYXJyYXkuYnl0ZUxlbmd0aCAvLyB0aGlzIHRocm93cyBpZiBgYXJyYXlgIGlzIG5vdCBhIHZhbGlkIEFycmF5QnVmZmVyXG5cbiAgaWYgKGJ5dGVPZmZzZXQgPCAwIHx8IGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0KSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ29mZnNldFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCArIChsZW5ndGggfHwgMCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnbGVuZ3RoXFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGJ5dGVPZmZzZXQgPT09IHVuZGVmaW5lZCAmJiBsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXkpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KVxuICB9IGVsc2Uge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBhcnJheVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICB0aGF0ID0gZnJvbUFycmF5TGlrZSh0aGF0LCBhcnJheSlcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tT2JqZWN0ICh0aGF0LCBvYmopIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB7XG4gICAgdmFyIGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwXG4gICAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW4pXG5cbiAgICBpZiAodGhhdC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGF0XG4gICAgfVxuXG4gICAgb2JqLmNvcHkodGhhdCwgMCwgMCwgbGVuKVxuICAgIHJldHVybiB0aGF0XG4gIH1cblxuICBpZiAob2JqKSB7XG4gICAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIG9iai5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgfHwgJ2xlbmd0aCcgaW4gb2JqKSB7XG4gICAgICBpZiAodHlwZW9mIG9iai5sZW5ndGggIT09ICdudW1iZXInIHx8IGlzbmFuKG9iai5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgMClcbiAgICAgIH1cbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iailcbiAgICB9XG5cbiAgICBpZiAob2JqLnR5cGUgPT09ICdCdWZmZXInICYmIGlzQXJyYXkob2JqLmRhdGEpKSB7XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmouZGF0YSlcbiAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgb3IgYXJyYXktbGlrZSBvYmplY3QuJylcbn1cblxuZnVuY3Rpb24gY2hlY2tlZCAobGVuZ3RoKSB7XG4gIC8vIE5vdGU6IGNhbm5vdCB1c2UgYGxlbmd0aCA8IGtNYXhMZW5ndGgoKWAgaGVyZSBiZWNhdXNlIHRoYXQgZmFpbHMgd2hlblxuICAvLyBsZW5ndGggaXMgTmFOICh3aGljaCBpcyBvdGhlcndpc2UgY29lcmNlZCB0byB6ZXJvLilcbiAgaWYgKGxlbmd0aCA+PSBrTWF4TGVuZ3RoKCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZTogMHgnICsga01heExlbmd0aCgpLnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnKVxuICB9XG4gIHJldHVybiBsZW5ndGggfCAwXG59XG5cbmZ1bmN0aW9uIFNsb3dCdWZmZXIgKGxlbmd0aCkge1xuICBpZiAoK2xlbmd0aCAhPSBsZW5ndGgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICBsZW5ndGggPSAwXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5hbGxvYygrbGVuZ3RoKVxufVxuXG5CdWZmZXIuaXNCdWZmZXIgPSBmdW5jdGlvbiBpc0J1ZmZlciAoYikge1xuICByZXR1cm4gISEoYiAhPSBudWxsICYmIGIuX2lzQnVmZmVyKVxufVxuXG5CdWZmZXIuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKGEsIGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyBtdXN0IGJlIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGEgPT09IGIpIHJldHVybiAwXG5cbiAgdmFyIHggPSBhLmxlbmd0aFxuICB2YXIgeSA9IGIubGVuZ3RoXG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV1cbiAgICAgIHkgPSBiW2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuQnVmZmVyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiBpc0VuY29kaW5nIChlbmNvZGluZykge1xuICBzd2l0Y2ggKFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICBjYXNlICdsYXRpbjEnOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0dXJuIHRydWVcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdCAobGlzdCwgbGVuZ3RoKSB7XG4gIGlmICghaXNBcnJheShsaXN0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gIH1cblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gQnVmZmVyLmFsbG9jKDApXG4gIH1cblxuICB2YXIgaVxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBsZW5ndGggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxlbmd0aCArPSBsaXN0W2ldLmxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoKVxuICB2YXIgcG9zID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgIHZhciBidWYgPSBsaXN0W2ldXG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgICB9XG4gICAgYnVmLmNvcHkoYnVmZmVyLCBwb3MpXG4gICAgcG9zICs9IGJ1Zi5sZW5ndGhcbiAgfVxuICByZXR1cm4gYnVmZmVyXG59XG5cbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihzdHJpbmcpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5sZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAoQXJyYXlCdWZmZXIuaXNWaWV3KHN0cmluZykgfHwgc3RyaW5nIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5ieXRlTGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgc3RyaW5nID0gJycgKyBzdHJpbmdcbiAgfVxuXG4gIHZhciBsZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChsZW4gPT09IDApIHJldHVybiAwXG5cbiAgLy8gVXNlIGEgZm9yIGxvb3AgdG8gYXZvaWQgcmVjdXJzaW9uXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxlblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gbGVuICogMlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGxlbiA+Pj4gMVxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoIC8vIGFzc3VtZSB1dGY4XG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5CdWZmZXIuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcblxuZnVuY3Rpb24gc2xvd1RvU3RyaW5nIChlbmNvZGluZywgc3RhcnQsIGVuZCkge1xuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuXG4gIC8vIE5vIG5lZWQgdG8gdmVyaWZ5IHRoYXQgXCJ0aGlzLmxlbmd0aCA8PSBNQVhfVUlOVDMyXCIgc2luY2UgaXQncyBhIHJlYWQtb25seVxuICAvLyBwcm9wZXJ0eSBvZiBhIHR5cGVkIGFycmF5LlxuXG4gIC8vIFRoaXMgYmVoYXZlcyBuZWl0aGVyIGxpa2UgU3RyaW5nIG5vciBVaW50OEFycmF5IGluIHRoYXQgd2Ugc2V0IHN0YXJ0L2VuZFxuICAvLyB0byB0aGVpciB1cHBlci9sb3dlciBib3VuZHMgaWYgdGhlIHZhbHVlIHBhc3NlZCBpcyBvdXQgb2YgcmFuZ2UuXG4gIC8vIHVuZGVmaW5lZCBpcyBoYW5kbGVkIHNwZWNpYWxseSBhcyBwZXIgRUNNQS0yNjIgNnRoIEVkaXRpb24sXG4gIC8vIFNlY3Rpb24gMTMuMy4zLjcgUnVudGltZSBTZW1hbnRpY3M6IEtleWVkQmluZGluZ0luaXRpYWxpemF0aW9uLlxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCB8fCBzdGFydCA8IDApIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICAvLyBSZXR1cm4gZWFybHkgaWYgc3RhcnQgPiB0aGlzLmxlbmd0aC4gRG9uZSBoZXJlIHRvIHByZXZlbnQgcG90ZW50aWFsIHVpbnQzMlxuICAvLyBjb2VyY2lvbiBmYWlsIGJlbG93LlxuICBpZiAoc3RhcnQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChlbmQgPD0gMCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgLy8gRm9yY2UgY29lcnNpb24gdG8gdWludDMyLiBUaGlzIHdpbGwgYWxzbyBjb2VyY2UgZmFsc2V5L05hTiB2YWx1ZXMgdG8gMC5cbiAgZW5kID4+Pj0gMFxuICBzdGFydCA+Pj49IDBcblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHV0ZjE2bGVTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuLy8gVGhlIHByb3BlcnR5IGlzIHVzZWQgYnkgYEJ1ZmZlci5pc0J1ZmZlcmAgYW5kIGBpcy1idWZmZXJgIChpbiBTYWZhcmkgNS03KSB0byBkZXRlY3Rcbi8vIEJ1ZmZlciBpbnN0YW5jZXMuXG5CdWZmZXIucHJvdG90eXBlLl9pc0J1ZmZlciA9IHRydWVcblxuZnVuY3Rpb24gc3dhcCAoYiwgbiwgbSkge1xuICB2YXIgaSA9IGJbbl1cbiAgYltuXSA9IGJbbV1cbiAgYlttXSA9IGlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMTYgPSBmdW5jdGlvbiBzd2FwMTYgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDIgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAxKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDMyID0gZnVuY3Rpb24gc3dhcDMyICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA0ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzMi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgMilcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXA2NCA9IGZ1bmN0aW9uIHN3YXA2NCAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgOCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gOCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDcpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDYpXG4gICAgc3dhcCh0aGlzLCBpICsgMiwgaSArIDUpXG4gICAgc3dhcCh0aGlzLCBpICsgMywgaSArIDQpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoIHwgMFxuICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gJydcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB1dGY4U2xpY2UodGhpcywgMCwgbGVuZ3RoKVxuICByZXR1cm4gc2xvd1RvU3RyaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMgKGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICBpZiAodGhpcyA9PT0gYikgcmV0dXJuIHRydWVcbiAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKHRoaXMsIGIpID09PSAwXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QgKCkge1xuICB2YXIgc3RyID0gJydcbiAgdmFyIG1heCA9IGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVNcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkubWF0Y2goLy57Mn0vZykuam9pbignICcpXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KSBzdHIgKz0gJyAuLi4gJ1xuICB9XG4gIHJldHVybiAnPEJ1ZmZlciAnICsgc3RyICsgJz4nXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgfVxuXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kID0gdGFyZ2V0ID8gdGFyZ2V0Lmxlbmd0aCA6IDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzU3RhcnQgPSAwXG4gIH1cbiAgaWYgKHRoaXNFbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNFbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKHN0YXJ0IDwgMCB8fCBlbmQgPiB0YXJnZXQubGVuZ3RoIHx8IHRoaXNTdGFydCA8IDAgfHwgdGhpc0VuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ291dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQgJiYgc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxuICBpZiAoc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIHN0YXJ0ID4+Pj0gMFxuICBlbmQgPj4+PSAwXG4gIHRoaXNTdGFydCA+Pj49IDBcbiAgdGhpc0VuZCA+Pj49IDBcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0KSByZXR1cm4gMFxuXG4gIHZhciB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydFxuICB2YXIgeSA9IGVuZCAtIHN0YXJ0XG4gIHZhciBsZW4gPSBNYXRoLm1pbih4LCB5KVxuXG4gIHZhciB0aGlzQ29weSA9IHRoaXMuc2xpY2UodGhpc1N0YXJ0LCB0aGlzRW5kKVxuICB2YXIgdGFyZ2V0Q29weSA9IHRhcmdldC5zbGljZShzdGFydCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAodGhpc0NvcHlbaV0gIT09IHRhcmdldENvcHlbaV0pIHtcbiAgICAgIHggPSB0aGlzQ29weVtpXVxuICAgICAgeSA9IHRhcmdldENvcHlbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG4vLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsXG4vLyBPUiB0aGUgbGFzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPD0gYGJ5dGVPZmZzZXRgLlxuLy9cbi8vIEFyZ3VtZW50czpcbi8vIC0gYnVmZmVyIC0gYSBCdWZmZXIgdG8gc2VhcmNoXG4vLyAtIHZhbCAtIGEgc3RyaW5nLCBCdWZmZXIsIG9yIG51bWJlclxuLy8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyXG4vLyAtIGVuY29kaW5nIC0gYW4gb3B0aW9uYWwgZW5jb2RpbmcsIHJlbGV2YW50IGlzIHZhbCBpcyBhIHN0cmluZ1xuLy8gLSBkaXIgLSB0cnVlIGZvciBpbmRleE9mLCBmYWxzZSBmb3IgbGFzdEluZGV4T2ZcbmZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mIChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICAvLyBFbXB0eSBidWZmZXIgbWVhbnMgbm8gbWF0Y2hcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHJldHVybiAtMVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0XG4gIGlmICh0eXBlb2YgYnl0ZU9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IGJ5dGVPZmZzZXRcbiAgICBieXRlT2Zmc2V0ID0gMFxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPiAweDdmZmZmZmZmKSB7XG4gICAgYnl0ZU9mZnNldCA9IDB4N2ZmZmZmZmZcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgLTB4ODAwMDAwMDApIHtcbiAgICBieXRlT2Zmc2V0ID0gLTB4ODAwMDAwMDBcbiAgfVxuICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQgIC8vIENvZXJjZSB0byBOdW1iZXIuXG4gIGlmIChpc05hTihieXRlT2Zmc2V0KSkge1xuICAgIC8vIGJ5dGVPZmZzZXQ6IGl0IGl0J3MgdW5kZWZpbmVkLCBudWxsLCBOYU4sIFwiZm9vXCIsIGV0Yywgc2VhcmNoIHdob2xlIGJ1ZmZlclxuICAgIGJ5dGVPZmZzZXQgPSBkaXIgPyAwIDogKGJ1ZmZlci5sZW5ndGggLSAxKVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXQ6IG5lZ2F0aXZlIG9mZnNldHMgc3RhcnQgZnJvbSB0aGUgZW5kIG9mIHRoZSBidWZmZXJcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCArIGJ5dGVPZmZzZXRcbiAgaWYgKGJ5dGVPZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkge1xuICAgIGlmIChkaXIpIHJldHVybiAtMVxuICAgIGVsc2UgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggLSAxXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IDApIHtcbiAgICBpZiAoZGlyKSBieXRlT2Zmc2V0ID0gMFxuICAgIGVsc2UgcmV0dXJuIC0xXG4gIH1cblxuICAvLyBOb3JtYWxpemUgdmFsXG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHZhbCA9IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gIH1cblxuICAvLyBGaW5hbGx5LCBzZWFyY2ggZWl0aGVyIGluZGV4T2YgKGlmIGRpciBpcyB0cnVlKSBvciBsYXN0SW5kZXhPZlxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbCkpIHtcbiAgICAvLyBTcGVjaWFsIGNhc2U6IGxvb2tpbmcgZm9yIGVtcHR5IHN0cmluZy9idWZmZXIgYWx3YXlzIGZhaWxzXG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAtMVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMHhGRiAvLyBTZWFyY2ggZm9yIGEgYnl0ZSB2YWx1ZSBbMC0yNTVdXG4gICAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmXG4gICAgICAgIHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoZGlyKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIFsgdmFsIF0sIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKVxufVxuXG5mdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIHZhciBpbmRleFNpemUgPSAxXG4gIHZhciBhcnJMZW5ndGggPSBhcnIubGVuZ3RoXG4gIHZhciB2YWxMZW5ndGggPSB2YWwubGVuZ3RoXG5cbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgIGlmIChlbmNvZGluZyA9PT0gJ3VjczInIHx8IGVuY29kaW5nID09PSAndWNzLTInIHx8XG4gICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHtcbiAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH1cbiAgICAgIGluZGV4U2l6ZSA9IDJcbiAgICAgIGFyckxlbmd0aCAvPSAyXG4gICAgICB2YWxMZW5ndGggLz0gMlxuICAgICAgYnl0ZU9mZnNldCAvPSAyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZCAoYnVmLCBpKSB7XG4gICAgaWYgKGluZGV4U2l6ZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGJ1ZltpXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZCRShpICogaW5kZXhTaXplKVxuICAgIH1cbiAgfVxuXG4gIHZhciBpXG4gIGlmIChkaXIpIHtcbiAgICB2YXIgZm91bmRJbmRleCA9IC0xXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGlcbiAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4XG4gICAgICAgIGZvdW5kSW5kZXggPSAtMVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aFxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgZm91bmQgPSB0cnVlXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHtcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSAhPT0gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgdHJ1ZSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSlcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIHZhciByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cblxuICAvLyBtdXN0IGJlIGFuIGV2ZW4gbnVtYmVyIG9mIGRpZ2l0c1xuICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAoc3RyTGVuICUgMiAhPT0gMCkgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBoZXggc3RyaW5nJylcblxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDJcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgdmFyIHBhcnNlZCA9IHBhcnNlSW50KHN0cmluZy5zdWJzdHIoaSAqIDIsIDIpLCAxNilcbiAgICBpZiAoaXNOYU4ocGFyc2VkKSkgcmV0dXJuIGlcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSBwYXJzZWRcbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiB1dGY4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBhc2NpaVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGxhdGluMVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGFzY2lpV3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKVxuICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBlbmNvZGluZylcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pXG4gIH0gZWxzZSBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgICBpZiAoaXNGaW5pdGUobGVuZ3RoKSkge1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoIHwgMFxuICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQpIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgfSBlbHNlIHtcbiAgICAgIGVuY29kaW5nID0gbGVuZ3RoXG4gICAgICBsZW5ndGggPSB1bmRlZmluZWRcbiAgICB9XG4gIC8vIGxlZ2FjeSB3cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXQsIGxlbmd0aCkgLSByZW1vdmUgaW4gdjAuMTNcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnQnVmZmVyLndyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldFssIGxlbmd0aF0pIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQnXG4gICAgKVxuICB9XG5cbiAgdmFyIHJlbWFpbmluZyA9IHRoaXMubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCB8fCBsZW5ndGggPiByZW1haW5pbmcpIGxlbmd0aCA9IHJlbWFpbmluZ1xuXG4gIGlmICgoc3RyaW5nLmxlbmd0aCA+IDAgJiYgKGxlbmd0aCA8IDAgfHwgb2Zmc2V0IDwgMCkpIHx8IG9mZnNldCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgLy8gV2FybmluZzogbWF4TGVuZ3RoIG5vdCB0YWtlbiBpbnRvIGFjY291bnQgaW4gYmFzZTY0V3JpdGVcbiAgICAgICAgcmV0dXJuIGJhc2U2NFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1Y3MyV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQnVmZmVyJyxcbiAgICBkYXRhOiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnIgfHwgdGhpcywgMClcbiAgfVxufVxuXG5mdW5jdGlvbiBiYXNlNjRTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGlmIChzdGFydCA9PT0gMCAmJiBlbmQgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYuc2xpY2Uoc3RhcnQsIGVuZCkpXG4gIH1cbn1cblxuZnVuY3Rpb24gdXRmOFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuICB2YXIgcmVzID0gW11cblxuICB2YXIgaSA9IHN0YXJ0XG4gIHdoaWxlIChpIDwgZW5kKSB7XG4gICAgdmFyIGZpcnN0Qnl0ZSA9IGJ1ZltpXVxuICAgIHZhciBjb2RlUG9pbnQgPSBudWxsXG4gICAgdmFyIGJ5dGVzUGVyU2VxdWVuY2UgPSAoZmlyc3RCeXRlID4gMHhFRikgPyA0XG4gICAgICA6IChmaXJzdEJ5dGUgPiAweERGKSA/IDNcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4QkYpID8gMlxuICAgICAgOiAxXG5cbiAgICBpZiAoaSArIGJ5dGVzUGVyU2VxdWVuY2UgPD0gZW5kKSB7XG4gICAgICB2YXIgc2Vjb25kQnl0ZSwgdGhpcmRCeXRlLCBmb3VydGhCeXRlLCB0ZW1wQ29kZVBvaW50XG5cbiAgICAgIHN3aXRjaCAoYnl0ZXNQZXJTZXF1ZW5jZSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaWYgKGZpcnN0Qnl0ZSA8IDB4ODApIHtcbiAgICAgICAgICAgIGNvZGVQb2ludCA9IGZpcnN0Qnl0ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweDFGKSA8PCAweDYgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0YpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHhDIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAodGhpcmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3RkYgJiYgKHRlbXBDb2RlUG9pbnQgPCAweEQ4MDAgfHwgdGVtcENvZGVQb2ludCA+IDB4REZGRikpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgZm91cnRoQnl0ZSA9IGJ1ZltpICsgM11cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKGZvdXJ0aEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4MTIgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4QyB8ICh0aGlyZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAoZm91cnRoQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4RkZGRiAmJiB0ZW1wQ29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29kZVBvaW50ID09PSBudWxsKSB7XG4gICAgICAvLyB3ZSBkaWQgbm90IGdlbmVyYXRlIGEgdmFsaWQgY29kZVBvaW50IHNvIGluc2VydCBhXG4gICAgICAvLyByZXBsYWNlbWVudCBjaGFyIChVK0ZGRkQpIGFuZCBhZHZhbmNlIG9ubHkgMSBieXRlXG4gICAgICBjb2RlUG9pbnQgPSAweEZGRkRcbiAgICAgIGJ5dGVzUGVyU2VxdWVuY2UgPSAxXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPiAweEZGRkYpIHtcbiAgICAgIC8vIGVuY29kZSB0byB1dGYxNiAoc3Vycm9nYXRlIHBhaXIgZGFuY2UpXG4gICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMFxuICAgICAgcmVzLnB1c2goY29kZVBvaW50ID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKVxuICAgICAgY29kZVBvaW50ID0gMHhEQzAwIHwgY29kZVBvaW50ICYgMHgzRkZcbiAgICB9XG5cbiAgICByZXMucHVzaChjb2RlUG9pbnQpXG4gICAgaSArPSBieXRlc1BlclNlcXVlbmNlXG4gIH1cblxuICByZXR1cm4gZGVjb2RlQ29kZVBvaW50c0FycmF5KHJlcylcbn1cblxuLy8gQmFzZWQgb24gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjI3NDcyNzIvNjgwNzQyLCB0aGUgYnJvd3NlciB3aXRoXG4vLyB0aGUgbG93ZXN0IGxpbWl0IGlzIENocm9tZSwgd2l0aCAweDEwMDAwIGFyZ3MuXG4vLyBXZSBnbyAxIG1hZ25pdHVkZSBsZXNzLCBmb3Igc2FmZXR5XG52YXIgTUFYX0FSR1VNRU5UU19MRU5HVEggPSAweDEwMDBcblxuZnVuY3Rpb24gZGVjb2RlQ29kZVBvaW50c0FycmF5IChjb2RlUG9pbnRzKSB7XG4gIHZhciBsZW4gPSBjb2RlUG9pbnRzLmxlbmd0aFxuICBpZiAobGVuIDw9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjb2RlUG9pbnRzKSAvLyBhdm9pZCBleHRyYSBzbGljZSgpXG4gIH1cblxuICAvLyBEZWNvZGUgaW4gY2h1bmtzIHRvIGF2b2lkIFwiY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCIuXG4gIHZhciByZXMgPSAnJ1xuICB2YXIgaSA9IDBcbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShcbiAgICAgIFN0cmluZyxcbiAgICAgIGNvZGVQb2ludHMuc2xpY2UoaSwgaSArPSBNQVhfQVJHVU1FTlRTX0xFTkdUSClcbiAgICApXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSAmIDB4N0YpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBsYXRpbjFTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBoZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA8IDApIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCB8fCBlbmQgPCAwIHx8IGVuZCA+IGxlbikgZW5kID0gbGVuXG5cbiAgdmFyIG91dCA9ICcnXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgb3V0ICs9IHRvSGV4KGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKVxuICB2YXIgcmVzID0gJydcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldICsgYnl0ZXNbaSArIDFdICogMjU2KVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBzdGFydCA9IH5+c3RhcnRcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB+fmVuZFxuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCArPSBsZW5cbiAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgfSBlbHNlIGlmIChzdGFydCA+IGxlbikge1xuICAgIHN0YXJ0ID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5cbiAgICBpZiAoZW5kIDwgMCkgZW5kID0gMFxuICB9IGVsc2UgaWYgKGVuZCA+IGxlbikge1xuICAgIGVuZCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIHZhciBuZXdCdWZcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgbmV3QnVmID0gdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKVxuICAgIG5ld0J1Zi5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgdmFyIHNsaWNlTGVuID0gZW5kIC0gc3RhcnRcbiAgICBuZXdCdWYgPSBuZXcgQnVmZmVyKHNsaWNlTGVuLCB1bmRlZmluZWQpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGljZUxlbjsgKytpKSB7XG4gICAgICBuZXdCdWZbaV0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3QnVmXG59XG5cbi8qXG4gKiBOZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGJ1ZmZlciBpc24ndCB0cnlpbmcgdG8gd3JpdGUgb3V0IG9mIGJvdW5kcy5cbiAqL1xuZnVuY3Rpb24gY2hlY2tPZmZzZXQgKG9mZnNldCwgZXh0LCBsZW5ndGgpIHtcbiAgaWYgKChvZmZzZXQgJSAxKSAhPT0gMCB8fCBvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb2Zmc2V0IGlzIG5vdCB1aW50JylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50TEUgPSBmdW5jdGlvbiByZWFkVUludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50QkUgPSBmdW5jdGlvbiByZWFkVUludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuICB9XG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXVxuICB2YXIgbXVsID0gMVxuICB3aGlsZSAoYnl0ZUxlbmd0aCA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24gcmVhZFVJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkJFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDgpIHwgdGhpc1tvZmZzZXQgKyAxXVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAoKHRoaXNbb2Zmc2V0XSkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArXG4gICAgICAodGhpc1tvZmZzZXQgKyAzXSAqIDB4MTAwMDAwMClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiByZWFkVUludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSAqIDB4MTAwMDAwMCkgK1xuICAgICgodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICB0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRMRSA9IGZ1bmN0aW9uIHJlYWRJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRCRSA9IGZ1bmN0aW9uIHJlYWRJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aFxuICB2YXIgbXVsID0gMVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWldXG4gIHdoaWxlIChpID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0taV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQ4ID0gZnVuY3Rpb24gcmVhZEludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiAodGhpc1tvZmZzZXRdKVxuICByZXR1cm4gKCgweGZmIC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2QkUgPSBmdW5jdGlvbiByZWFkSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8ICh0aGlzW29mZnNldF0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkxFID0gZnVuY3Rpb24gcmVhZEludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gcmVhZEludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCAyNCkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdExFID0gZnVuY3Rpb24gcmVhZEZsb2F0TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gcmVhZEZsb2F0QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiByZWFkRG91YmxlTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDUyLCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVCRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDUyLCA4KVxufVxuXG5mdW5jdGlvbiBjaGVja0ludCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmZmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpXG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludEJFID0gZnVuY3Rpb24gd3JpdGVVSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiB3cml0ZVVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MTYgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgMik7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgJiAoMHhmZiA8PCAoOCAqIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpKSkpID4+PlxuICAgICAgKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkgKiA4XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MzIgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDQpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlID4+PiAobGl0dGxlRW5kaWFuID8gaSA6IDMgLSBpKSAqIDgpICYgMHhmZlxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludExFID0gZnVuY3Rpb24gd3JpdGVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IDBcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpIC0gMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludEJFID0gZnVuY3Rpb24gd3JpdGVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpICsgMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiB3cml0ZUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbmZ1bmN0aW9uIGNoZWNrSUVFRTc1NCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5mdW5jdGlvbiB3cml0ZUZsb2F0IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDQsIDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgsIC0zLjQwMjgyMzQ2NjM4NTI4ODZlKzM4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdEJFID0gZnVuY3Rpb24gd3JpdGVGbG9hdEJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRG91YmxlIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDgsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAodGFyZ2V0LCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCkge1xuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoXG4gIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMFxuICBpZiAoZW5kID4gMCAmJiBlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVybiAwXG4gIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgaWYgKHRhcmdldFN0YXJ0IDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgfVxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlU3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChlbmQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlRW5kIG91dCBvZiBib3VuZHMnKVxuXG4gIC8vIEFyZSB3ZSBvb2I/XG4gIGlmIChlbmQgPiB0aGlzLmxlbmd0aCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCA8IGVuZCAtIHN0YXJ0KSB7XG4gICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0ICsgc3RhcnRcbiAgfVxuXG4gIHZhciBsZW4gPSBlbmQgLSBzdGFydFxuICB2YXIgaVxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQgJiYgc3RhcnQgPCB0YXJnZXRTdGFydCAmJiB0YXJnZXRTdGFydCA8IGVuZCkge1xuICAgIC8vIGRlc2NlbmRpbmcgY29weSBmcm9tIGVuZFxuICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIGlmIChsZW4gPCAxMDAwIHx8ICFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIGFzY2VuZGluZyBjb3B5IGZyb20gc3RhcnRcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgc3RhcnQgKyBsZW4pLFxuICAgICAgdGFyZ2V0U3RhcnRcbiAgICApXG4gIH1cblxuICByZXR1cm4gbGVuXG59XG5cbi8vIFVzYWdlOlxuLy8gICAgYnVmZmVyLmZpbGwobnVtYmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChidWZmZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKHN0cmluZ1ssIG9mZnNldFssIGVuZF1dWywgZW5jb2RpbmddKVxuQnVmZmVyLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gZmlsbCAodmFsLCBzdGFydCwgZW5kLCBlbmNvZGluZykge1xuICAvLyBIYW5kbGUgc3RyaW5nIGNhc2VzOlxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBzdGFydFxuICAgICAgc3RhcnQgPSAwXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVuZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gZW5kXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH1cbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdmFyIGNvZGUgPSB2YWwuY2hhckNvZGVBdCgwKVxuICAgICAgaWYgKGNvZGUgPCAyNTYpIHtcbiAgICAgICAgdmFsID0gY29kZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nJylcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycgJiYgIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDI1NVxuICB9XG5cbiAgLy8gSW52YWxpZCByYW5nZXMgYXJlIG5vdCBzZXQgdG8gYSBkZWZhdWx0LCBzbyBjYW4gcmFuZ2UgY2hlY2sgZWFybHkuXG4gIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5sZW5ndGggOiBlbmQgPj4+IDBcblxuICBpZiAoIXZhbCkgdmFsID0gMFxuXG4gIHZhciBpXG4gIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgIHRoaXNbaV0gPSB2YWxcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGJ5dGVzID0gQnVmZmVyLmlzQnVmZmVyKHZhbClcbiAgICAgID8gdmFsXG4gICAgICA6IHV0ZjhUb0J5dGVzKG5ldyBCdWZmZXIodmFsLCBlbmNvZGluZykudG9TdHJpbmcoKSlcbiAgICB2YXIgbGVuID0gYnl0ZXMubGVuZ3RoXG4gICAgZm9yIChpID0gMDsgaSA8IGVuZCAtIHN0YXJ0OyArK2kpIHtcbiAgICAgIHRoaXNbaSArIHN0YXJ0XSA9IGJ5dGVzW2kgJSBsZW5dXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gSEVMUEVSIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09PVxuXG52YXIgSU5WQUxJRF9CQVNFNjRfUkUgPSAvW14rXFwvMC05QS1aYS16LV9dL2dcblxuZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikge1xuICAvLyBOb2RlIHN0cmlwcyBvdXQgaW52YWxpZCBjaGFyYWN0ZXJzIGxpa2UgXFxuIGFuZCBcXHQgZnJvbSB0aGUgc3RyaW5nLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgc3RyID0gc3RyaW5ndHJpbShzdHIpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKVxuICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnXG4gIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnXG4gIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdFxuICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICBzdHIgPSBzdHIgKyAnPSdcbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHN0cmluZ3RyaW0gKHN0cikge1xuICBpZiAoc3RyLnRyaW0pIHJldHVybiBzdHIudHJpbSgpXG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpXG59XG5cbmZ1bmN0aW9uIHRvSGV4IChuKSB7XG4gIGlmIChuIDwgMTYpIHJldHVybiAnMCcgKyBuLnRvU3RyaW5nKDE2KVxuICByZXR1cm4gbi50b1N0cmluZygxNilcbn1cblxuZnVuY3Rpb24gdXRmOFRvQnl0ZXMgKHN0cmluZywgdW5pdHMpIHtcbiAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eVxuICB2YXIgY29kZVBvaW50XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoXG4gIHZhciBsZWFkU3Vycm9nYXRlID0gbnVsbFxuICB2YXIgYnl0ZXMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb2RlUG9pbnQgPSBzdHJpbmcuY2hhckNvZGVBdChpKVxuXG4gICAgLy8gaXMgc3Vycm9nYXRlIGNvbXBvbmVudFxuICAgIGlmIChjb2RlUG9pbnQgPiAweEQ3RkYgJiYgY29kZVBvaW50IDwgMHhFMDAwKSB7XG4gICAgICAvLyBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCFsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAgIC8vIG5vIGxlYWQgeWV0XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPiAweERCRkYpIHtcbiAgICAgICAgICAvLyB1bmV4cGVjdGVkIHRyYWlsXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgLy8gdW5wYWlyZWQgbGVhZFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyB2YWxpZCBsZWFkXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyAyIGxlYWRzIGluIGEgcm93XG4gICAgICBpZiAoY29kZVBvaW50IDwgMHhEQzAwKSB7XG4gICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIHZhbGlkIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICBjb2RlUG9pbnQgPSAobGVhZFN1cnJvZ2F0ZSAtIDB4RDgwMCA8PCAxMCB8IGNvZGVQb2ludCAtIDB4REMwMCkgKyAweDEwMDAwXG4gICAgfSBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAvLyB2YWxpZCBibXAgY2hhciwgYnV0IGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICB9XG5cbiAgICBsZWFkU3Vycm9nYXRlID0gbnVsbFxuXG4gICAgLy8gZW5jb2RlIHV0ZjhcbiAgICBpZiAoY29kZVBvaW50IDwgMHg4MCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKGNvZGVQb2ludClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4ODAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgfCAweEMwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDIHwgMHhFMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gNCkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4MTIgfCAweEYwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBieXRlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVRvQnl0ZXMgKHN0cikge1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICAvLyBOb2RlJ3MgY29kZSBzZWVtcyB0byBiZSBkb2luZyB0aGlzIGFuZCBub3QgJiAweDdGLi5cbiAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSAmIDB4RkYpXG4gIH1cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiB1dGYxNmxlVG9CeXRlcyAoc3RyLCB1bml0cykge1xuICB2YXIgYywgaGksIGxvXG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuXG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaGkgPSBjID4+IDhcbiAgICBsbyA9IGMgJSAyNTZcbiAgICBieXRlQXJyYXkucHVzaChsbylcbiAgICBieXRlQXJyYXkucHVzaChoaSlcbiAgfVxuXG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7XG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSlcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpIGJyZWFrXG4gICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gaXNuYW4gKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSB2YWwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbn1cbiIsIi8qISBpZWVlNzU0LiBCU0QtMy1DbGF1c2UgTGljZW5zZS4gRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnL29wZW5zb3VyY2U+ICovXG5leHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbVxuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgbkJpdHMgPSAtN1xuICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwXG4gIHZhciBkID0gaXNMRSA/IC0xIDogMVxuICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXVxuXG4gIGkgKz0gZFxuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIHMgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IGVMZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IChlICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIG0gPSBlICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIGUgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IG1MZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IChtICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhc1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSlcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pXG4gICAgZSA9IGUgLSBlQmlhc1xuICB9XG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pXG59XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGNcbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKVxuICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpXG4gIHZhciBkID0gaXNMRSA/IDEgOiAtMVxuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMFxuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpXG5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDBcbiAgICBlID0gZU1heFxuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKVxuICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLVxuICAgICAgYyAqPSAyXG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrK1xuICAgICAgYyAvPSAyXG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMFxuICAgICAgZSA9IGVNYXhcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKCh2YWx1ZSAqIGMpIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IGUgKyBlQmlhc1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygyLCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSAwXG4gICAgfVxuICB9XG5cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCkge31cblxuICBlID0gKGUgPDwgbUxlbikgfCBtXG4gIGVMZW4gKz0gbUxlblxuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGUgJiAweGZmLCBpICs9IGQsIGUgLz0gMjU2LCBlTGVuIC09IDgpIHt9XG5cbiAgYnVmZmVyW29mZnNldCArIGkgLSBkXSB8PSBzICogMTI4XG59XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nLmpzJztcbmltcG9ydCB7IFRpbWVyIH0gZnJvbSAnLi9UaW1lci5qcyc7XG5cbmNvbnN0IERlZmF1bHRBY2Nlc3NUb2tlbkV4cGlyaW5nTm90aWZpY2F0aW9uVGltZSA9IDYwOyAvLyBzZWNvbmRzXG5cbmV4cG9ydCBjbGFzcyBBY2Nlc3NUb2tlbkV2ZW50cyB7XG5cbiAgICBjb25zdHJ1Y3Rvcih7XG4gICAgICAgIGFjY2Vzc1Rva2VuRXhwaXJpbmdOb3RpZmljYXRpb25UaW1lID0gRGVmYXVsdEFjY2Vzc1Rva2VuRXhwaXJpbmdOb3RpZmljYXRpb25UaW1lLFxuICAgICAgICBhY2Nlc3NUb2tlbkV4cGlyaW5nVGltZXIgPSBuZXcgVGltZXIoXCJBY2Nlc3MgdG9rZW4gZXhwaXJpbmdcIiksXG4gICAgICAgIGFjY2Vzc1Rva2VuRXhwaXJlZFRpbWVyID0gbmV3IFRpbWVyKFwiQWNjZXNzIHRva2VuIGV4cGlyZWRcIilcbiAgICB9ID0ge30pIHtcbiAgICAgICAgdGhpcy5fYWNjZXNzVG9rZW5FeHBpcmluZ05vdGlmaWNhdGlvblRpbWUgPSBhY2Nlc3NUb2tlbkV4cGlyaW5nTm90aWZpY2F0aW9uVGltZTtcblxuICAgICAgICB0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyaW5nID0gYWNjZXNzVG9rZW5FeHBpcmluZ1RpbWVyO1xuICAgICAgICB0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyZWQgPSBhY2Nlc3NUb2tlbkV4cGlyZWRUaW1lcjtcbiAgICB9XG5cbiAgICBsb2FkKGNvbnRhaW5lcikge1xuICAgICAgICAvLyBvbmx5IHJlZ2lzdGVyIGV2ZW50cyBpZiB0aGVyZSdzIGFuIGFjY2VzcyB0b2tlbiBhbmQgaXQgaGFzIGFuIGV4cGlyYXRpb25cbiAgICAgICAgaWYgKGNvbnRhaW5lci5hY2Nlc3NfdG9rZW4gJiYgY29udGFpbmVyLmV4cGlyZXNfaW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbGV0IGR1cmF0aW9uID0gY29udGFpbmVyLmV4cGlyZXNfaW47XG4gICAgICAgICAgICBMb2cuZGVidWcoXCJBY2Nlc3NUb2tlbkV2ZW50cy5sb2FkOiBhY2Nlc3MgdG9rZW4gcHJlc2VudCwgcmVtYWluaW5nIGR1cmF0aW9uOlwiLCBkdXJhdGlvbik7XG5cbiAgICAgICAgICAgIGlmIChkdXJhdGlvbiA+IDApIHtcbiAgICAgICAgICAgICAgICAvLyBvbmx5IHJlZ2lzdGVyIGV4cGlyaW5nIGlmIHdlIHN0aWxsIGhhdmUgdGltZVxuICAgICAgICAgICAgICAgIGxldCBleHBpcmluZyA9IGR1cmF0aW9uIC0gdGhpcy5fYWNjZXNzVG9rZW5FeHBpcmluZ05vdGlmaWNhdGlvblRpbWU7XG4gICAgICAgICAgICAgICAgaWYgKGV4cGlyaW5nIDw9IDApe1xuICAgICAgICAgICAgICAgICAgICBleHBpcmluZyA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIkFjY2Vzc1Rva2VuRXZlbnRzLmxvYWQ6IHJlZ2lzdGVyaW5nIGV4cGlyaW5nIHRpbWVyIGluOlwiLCBleHBpcmluZyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fYWNjZXNzVG9rZW5FeHBpcmluZy5pbml0KGV4cGlyaW5nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIkFjY2Vzc1Rva2VuRXZlbnRzLmxvYWQ6IGNhbmNlbGluZyBleGlzdGluZyBleHBpcmluZyB0aW1lciBiZWNhc2Ugd2UncmUgcGFzdCBleHBpcmF0aW9uLlwiKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyaW5nLmNhbmNlbCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBpZiBpdCdzIG5lZ2F0aXZlLCBpdCB3aWxsIHN0aWxsIGZpcmVcbiAgICAgICAgICAgIGxldCBleHBpcmVkID0gZHVyYXRpb24gKyAxO1xuICAgICAgICAgICAgTG9nLmRlYnVnKFwiQWNjZXNzVG9rZW5FdmVudHMubG9hZDogcmVnaXN0ZXJpbmcgZXhwaXJlZCB0aW1lciBpbjpcIiwgZXhwaXJlZCk7XG4gICAgICAgICAgICB0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyZWQuaW5pdChleHBpcmVkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2FjY2Vzc1Rva2VuRXhwaXJpbmcuY2FuY2VsKCk7XG4gICAgICAgICAgICB0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyZWQuY2FuY2VsKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1bmxvYWQoKSB7XG4gICAgICAgIExvZy5kZWJ1ZyhcIkFjY2Vzc1Rva2VuRXZlbnRzLnVubG9hZDogY2FuY2VsaW5nIGV4aXN0aW5nIGFjY2VzcyB0b2tlbiB0aW1lcnNcIik7XG4gICAgICAgIHRoaXMuX2FjY2Vzc1Rva2VuRXhwaXJpbmcuY2FuY2VsKCk7XG4gICAgICAgIHRoaXMuX2FjY2Vzc1Rva2VuRXhwaXJlZC5jYW5jZWwoKTtcbiAgICB9XG5cbiAgICBhZGRBY2Nlc3NUb2tlbkV4cGlyaW5nKGNiKSB7XG4gICAgICAgIHRoaXMuX2FjY2Vzc1Rva2VuRXhwaXJpbmcuYWRkSGFuZGxlcihjYik7XG4gICAgfVxuICAgIHJlbW92ZUFjY2Vzc1Rva2VuRXhwaXJpbmcoY2IpIHtcbiAgICAgICAgdGhpcy5fYWNjZXNzVG9rZW5FeHBpcmluZy5yZW1vdmVIYW5kbGVyKGNiKTtcbiAgICB9XG5cbiAgICBhZGRBY2Nlc3NUb2tlbkV4cGlyZWQoY2IpIHtcbiAgICAgICAgdGhpcy5fYWNjZXNzVG9rZW5FeHBpcmVkLmFkZEhhbmRsZXIoY2IpO1xuICAgIH1cbiAgICByZW1vdmVBY2Nlc3NUb2tlbkV4cGlyZWQoY2IpIHtcbiAgICAgICAgdGhpcy5fYWNjZXNzVG9rZW5FeHBpcmVkLnJlbW92ZUhhbmRsZXIoY2IpO1xuICAgIH1cbn1cbiIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nLmpzJztcblxuY29uc3QgRGVmYXVsdEludGVydmFsID0gMjAwMDtcblxuZXhwb3J0IGNsYXNzIENoZWNrU2Vzc2lvbklGcmFtZSB7XG4gICAgY29uc3RydWN0b3IoY2FsbGJhY2ssIGNsaWVudF9pZCwgdXJsLCBpbnRlcnZhbCwgc3RvcE9uRXJyb3IgPSB0cnVlKSB7XG4gICAgICAgIHRoaXMuX2NhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICAgIHRoaXMuX2NsaWVudF9pZCA9IGNsaWVudF9pZDtcbiAgICAgICAgdGhpcy5fdXJsID0gdXJsO1xuICAgICAgICB0aGlzLl9pbnRlcnZhbCA9IGludGVydmFsIHx8IERlZmF1bHRJbnRlcnZhbDtcbiAgICAgICAgdGhpcy5fc3RvcE9uRXJyb3IgPSBzdG9wT25FcnJvcjtcblxuICAgICAgICB2YXIgaWR4ID0gdXJsLmluZGV4T2YoXCIvXCIsIHVybC5pbmRleE9mKFwiLy9cIikgKyAyKTtcbiAgICAgICAgdGhpcy5fZnJhbWVfb3JpZ2luID0gdXJsLnN1YnN0cigwLCBpZHgpO1xuXG4gICAgICAgIHRoaXMuX2ZyYW1lID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpZnJhbWVcIik7XG5cbiAgICAgICAgLy8gc2hvdGd1biBhcHByb2FjaFxuICAgICAgICB0aGlzLl9mcmFtZS5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcbiAgICAgICAgdGhpcy5fZnJhbWUuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgICAgIHRoaXMuX2ZyYW1lLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgdGhpcy5fZnJhbWUud2lkdGggPSAwO1xuICAgICAgICB0aGlzLl9mcmFtZS5oZWlnaHQgPSAwO1xuXG4gICAgICAgIHRoaXMuX2ZyYW1lLnNyYyA9IHVybDtcbiAgICB9XG4gICAgbG9hZCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9mcmFtZS5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB3aW5kb3cuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLl9mcmFtZSk7XG4gICAgICAgICAgICB0aGlzLl9ib3VuZE1lc3NhZ2VFdmVudCA9IHRoaXMuX21lc3NhZ2UuYmluZCh0aGlzKTtcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCB0aGlzLl9ib3VuZE1lc3NhZ2VFdmVudCwgZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgX21lc3NhZ2UoZSkge1xuICAgICAgICBpZiAoZS5vcmlnaW4gPT09IHRoaXMuX2ZyYW1lX29yaWdpbiAmJlxuICAgICAgICAgICAgZS5zb3VyY2UgPT09IHRoaXMuX2ZyYW1lLmNvbnRlbnRXaW5kb3dcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBpZiAoZS5kYXRhID09PSBcImVycm9yXCIpIHtcbiAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJDaGVja1Nlc3Npb25JRnJhbWU6IGVycm9yIG1lc3NhZ2UgZnJvbSBjaGVjayBzZXNzaW9uIG9wIGlmcmFtZVwiKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fc3RvcE9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZS5kYXRhID09PSBcImNoYW5nZWRcIikge1xuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIkNoZWNrU2Vzc2lvbklGcmFtZTogY2hhbmdlZCBtZXNzYWdlIGZyb20gY2hlY2sgc2Vzc2lvbiBvcCBpZnJhbWVcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIkNoZWNrU2Vzc2lvbklGcmFtZTogXCIgKyBlLmRhdGEgKyBcIiBtZXNzYWdlIGZyb20gY2hlY2sgc2Vzc2lvbiBvcCBpZnJhbWVcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhcnQoc2Vzc2lvbl9zdGF0ZSkge1xuICAgICAgICBpZiAodGhpcy5fc2Vzc2lvbl9zdGF0ZSAhPT0gc2Vzc2lvbl9zdGF0ZSkge1xuICAgICAgICAgICAgTG9nLmRlYnVnKFwiQ2hlY2tTZXNzaW9uSUZyYW1lLnN0YXJ0XCIpO1xuXG4gICAgICAgICAgICB0aGlzLnN0b3AoKTtcblxuICAgICAgICAgICAgdGhpcy5fc2Vzc2lvbl9zdGF0ZSA9IHNlc3Npb25fc3RhdGU7XG5cbiAgICAgICAgICAgIGxldCBzZW5kID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZyYW1lLmNvbnRlbnRXaW5kb3cucG9zdE1lc3NhZ2UodGhpcy5fY2xpZW50X2lkICsgXCIgXCIgKyB0aGlzLl9zZXNzaW9uX3N0YXRlLCB0aGlzLl9mcmFtZV9vcmlnaW4pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gdHJpZ2dlciBub3dcbiAgICAgICAgICAgIHNlbmQoKTtcblxuICAgICAgICAgICAgLy8gYW5kIHNldHVwIHRpbWVyXG4gICAgICAgICAgICB0aGlzLl90aW1lciA9IHdpbmRvdy5zZXRJbnRlcnZhbChzZW5kLCB0aGlzLl9pbnRlcnZhbCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdG9wKCkge1xuICAgICAgICB0aGlzLl9zZXNzaW9uX3N0YXRlID0gbnVsbDtcblxuICAgICAgICBpZiAodGhpcy5fdGltZXIpIHtcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIkNoZWNrU2Vzc2lvbklGcmFtZS5zdG9wXCIpO1xuXG4gICAgICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aGlzLl90aW1lcik7XG4gICAgICAgICAgICB0aGlzLl90aW1lciA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJleHBvcnQgY2xhc3MgQ2xvY2tTZXJ2aWNlIHtcbiAgICBnZXRFcG9jaFRpbWUoKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoRGF0ZS5ub3coKSAvIDEwMDAgfCAwKTtcbiAgICB9XG59XG4iLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5pbXBvcnQgeyBDb3Jkb3ZhUG9wdXBXaW5kb3cgfSBmcm9tICcuL0NvcmRvdmFQb3B1cFdpbmRvdy5qcyc7XG5cbmV4cG9ydCBjbGFzcyBDb3Jkb3ZhSUZyYW1lTmF2aWdhdG9yIHtcblxuICAgIHByZXBhcmUocGFyYW1zKSB7XG4gICAgICAgIHBhcmFtcy5wb3B1cFdpbmRvd0ZlYXR1cmVzID0gJ2hpZGRlbj15ZXMnO1xuICAgICAgICBsZXQgcG9wdXAgPSBuZXcgQ29yZG92YVBvcHVwV2luZG93KHBhcmFtcyk7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocG9wdXApO1xuICAgIH1cbn1cbiIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCB7IENvcmRvdmFQb3B1cFdpbmRvdyB9IGZyb20gJy4vQ29yZG92YVBvcHVwV2luZG93LmpzJztcblxuZXhwb3J0IGNsYXNzIENvcmRvdmFQb3B1cE5hdmlnYXRvciB7XG5cbiAgICBwcmVwYXJlKHBhcmFtcykge1xuICAgICAgICBsZXQgcG9wdXAgPSBuZXcgQ29yZG92YVBvcHVwV2luZG93KHBhcmFtcyk7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocG9wdXApO1xuICAgIH1cbn1cbiIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nLmpzJztcblxuY29uc3QgRGVmYXVsdFBvcHVwRmVhdHVyZXMgPSAnbG9jYXRpb249bm8sdG9vbGJhcj1ubyx6b29tPW5vJztcbmNvbnN0IERlZmF1bHRQb3B1cFRhcmdldCA9IFwiX2JsYW5rXCI7XG5cbmV4cG9ydCBjbGFzcyBDb3Jkb3ZhUG9wdXBXaW5kb3cge1xuXG4gICAgY29uc3RydWN0b3IocGFyYW1zKSB7XG4gICAgICAgIHRoaXMuX3Byb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgICAgICAgIHRoaXMuX3JlamVjdCA9IHJlamVjdDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5mZWF0dXJlcyA9IHBhcmFtcy5wb3B1cFdpbmRvd0ZlYXR1cmVzIHx8IERlZmF1bHRQb3B1cEZlYXR1cmVzO1xuICAgICAgICB0aGlzLnRhcmdldCA9IHBhcmFtcy5wb3B1cFdpbmRvd1RhcmdldCB8fCBEZWZhdWx0UG9wdXBUYXJnZXQ7XG4gICAgICAgIFxuICAgICAgICB0aGlzLnJlZGlyZWN0X3VyaSA9IHBhcmFtcy5zdGFydFVybDtcbiAgICAgICAgTG9nLmRlYnVnKFwiQ29yZG92YVBvcHVwV2luZG93LmN0b3I6IHJlZGlyZWN0X3VyaTogXCIgKyB0aGlzLnJlZGlyZWN0X3VyaSk7XG4gICAgfVxuXG4gICAgX2lzSW5BcHBCcm93c2VySW5zdGFsbGVkKGNvcmRvdmFNZXRhZGF0YSkge1xuICAgICAgICByZXR1cm4gW1wiY29yZG92YS1wbHVnaW4taW5hcHBicm93c2VyXCIsIFwiY29yZG92YS1wbHVnaW4taW5hcHBicm93c2VyLmluYXBwYnJvd3NlclwiLCBcIm9yZy5hcGFjaGUuY29yZG92YS5pbmFwcGJyb3dzZXJcIl0uc29tZShmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvcmRvdmFNZXRhZGF0YS5oYXNPd25Qcm9wZXJ0eShuYW1lKVxuICAgICAgICB9KVxuICAgIH1cbiAgICBcbiAgICBuYXZpZ2F0ZShwYXJhbXMpIHtcbiAgICAgICAgaWYgKCFwYXJhbXMgfHwgIXBhcmFtcy51cmwpIHtcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yKFwiTm8gdXJsIHByb3ZpZGVkXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCF3aW5kb3cuY29yZG92YSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9lcnJvcihcImNvcmRvdmEgaXMgdW5kZWZpbmVkXCIpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBjb3Jkb3ZhTWV0YWRhdGEgPSB3aW5kb3cuY29yZG92YS5yZXF1aXJlKFwiY29yZG92YS9wbHVnaW5fbGlzdFwiKS5tZXRhZGF0YTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9pc0luQXBwQnJvd3Nlckluc3RhbGxlZChjb3Jkb3ZhTWV0YWRhdGEpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9lcnJvcihcIkluQXBwQnJvd3NlciBwbHVnaW4gbm90IGZvdW5kXCIpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9wb3B1cCA9IGNvcmRvdmEuSW5BcHBCcm93c2VyLm9wZW4ocGFyYW1zLnVybCwgdGhpcy50YXJnZXQsIHRoaXMuZmVhdHVyZXMpO1xuICAgICAgICAgICAgaWYgKHRoaXMuX3BvcHVwKSB7XG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiQ29yZG92YVBvcHVwV2luZG93Lm5hdmlnYXRlOiBwb3B1cCBzdWNjZXNzZnVsbHkgY3JlYXRlZFwiKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLl9leGl0Q2FsbGJhY2tFdmVudCA9IHRoaXMuX2V4aXRDYWxsYmFjay5iaW5kKHRoaXMpOyBcbiAgICAgICAgICAgICAgICB0aGlzLl9sb2FkU3RhcnRDYWxsYmFja0V2ZW50ID0gdGhpcy5fbG9hZFN0YXJ0Q2FsbGJhY2suYmluZCh0aGlzKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLl9wb3B1cC5hZGRFdmVudExpc3RlbmVyKFwiZXhpdFwiLCB0aGlzLl9leGl0Q2FsbGJhY2tFdmVudCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3BvcHVwLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2Fkc3RhcnRcIiwgdGhpcy5fbG9hZFN0YXJ0Q2FsbGJhY2tFdmVudCwgZmFsc2UpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnJvcihcIkVycm9yIG9wZW5pbmcgcG9wdXAgd2luZG93XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnByb21pc2U7XG4gICAgfVxuXG4gICAgZ2V0IHByb21pc2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcm9taXNlO1xuICAgIH1cblxuICAgIF9sb2FkU3RhcnRDYWxsYmFjayhldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQudXJsLmluZGV4T2YodGhpcy5yZWRpcmVjdF91cmkpID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLl9zdWNjZXNzKHsgdXJsOiBldmVudC51cmwgfSk7XG4gICAgICAgIH0gICAgXG4gICAgfVxuICAgIF9leGl0Q2FsbGJhY2sobWVzc2FnZSkge1xuICAgICAgICB0aGlzLl9lcnJvcihtZXNzYWdlKTsgICAgXG4gICAgfVxuICAgIFxuICAgIF9zdWNjZXNzKGRhdGEpIHtcbiAgICAgICAgdGhpcy5fY2xlYW51cCgpO1xuXG4gICAgICAgIExvZy5kZWJ1ZyhcIkNvcmRvdmFQb3B1cFdpbmRvdzogU3VjY2Vzc2Z1bCByZXNwb25zZSBmcm9tIGNvcmRvdmEgcG9wdXAgd2luZG93XCIpO1xuICAgICAgICB0aGlzLl9yZXNvbHZlKGRhdGEpO1xuICAgIH1cbiAgICBfZXJyb3IobWVzc2FnZSkge1xuICAgICAgICB0aGlzLl9jbGVhbnVwKCk7XG5cbiAgICAgICAgTG9nLmVycm9yKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLl9yZWplY3QobmV3IEVycm9yKG1lc3NhZ2UpKTtcbiAgICB9XG5cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgdGhpcy5fY2xlYW51cCgpO1xuICAgIH1cblxuICAgIF9jbGVhbnVwKCkge1xuICAgICAgICBpZiAodGhpcy5fcG9wdXApe1xuICAgICAgICAgICAgTG9nLmRlYnVnKFwiQ29yZG92YVBvcHVwV2luZG93OiBjbGVhbmluZyB1cCBwb3B1cFwiKTtcbiAgICAgICAgICAgIHRoaXMuX3BvcHVwLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJleGl0XCIsIHRoaXMuX2V4aXRDYWxsYmFja0V2ZW50LCBmYWxzZSk7XG4gICAgICAgICAgICB0aGlzLl9wb3B1cC5yZW1vdmVFdmVudExpc3RlbmVyKFwibG9hZHN0YXJ0XCIsIHRoaXMuX2xvYWRTdGFydENhbGxiYWNrRXZlbnQsIGZhbHNlKTtcbiAgICAgICAgICAgIHRoaXMuX3BvcHVwLmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcG9wdXAgPSBudWxsO1xuICAgIH1cbn1cbiIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nLmpzJztcblxuZXhwb3J0IGNsYXNzIEVycm9yUmVzcG9uc2UgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3Ioe2Vycm9yLCBlcnJvcl9kZXNjcmlwdGlvbiwgZXJyb3JfdXJpLCBzdGF0ZSwgc2Vzc2lvbl9zdGF0ZX09e31cbiAgICApIHtcbiAgICAgICAgIGlmICghZXJyb3Ipe1xuICAgICAgICAgICAgTG9nLmVycm9yKFwiTm8gZXJyb3IgcGFzc2VkIHRvIEVycm9yUmVzcG9uc2VcIik7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJlcnJvclwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN1cGVyKGVycm9yX2Rlc2NyaXB0aW9uIHx8IGVycm9yKTtcblxuICAgICAgICB0aGlzLm5hbWUgPSBcIkVycm9yUmVzcG9uc2VcIjtcblxuICAgICAgICB0aGlzLmVycm9yID0gZXJyb3I7XG4gICAgICAgIHRoaXMuZXJyb3JfZGVzY3JpcHRpb24gPSBlcnJvcl9kZXNjcmlwdGlvbjtcbiAgICAgICAgdGhpcy5lcnJvcl91cmkgPSBlcnJvcl91cmk7XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgICAgICB0aGlzLnNlc3Npb25fc3RhdGUgPSBzZXNzaW9uX3N0YXRlO1xuICAgIH1cbn1cbiIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nLmpzJztcblxuZXhwb3J0IGNsYXNzIEV2ZW50IHtcblxuICAgIGNvbnN0cnVjdG9yKG5hbWUpIHtcbiAgICAgICAgdGhpcy5fbmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuX2NhbGxiYWNrcyA9IFtdO1xuICAgIH1cblxuICAgIGFkZEhhbmRsZXIoY2IpIHtcbiAgICAgICAgdGhpcy5fY2FsbGJhY2tzLnB1c2goY2IpO1xuICAgIH1cblxuICAgIHJlbW92ZUhhbmRsZXIoY2IpIHtcbiAgICAgICAgdmFyIGlkeCA9IHRoaXMuX2NhbGxiYWNrcy5maW5kSW5kZXgoaXRlbSA9PiBpdGVtID09PSBjYik7XG4gICAgICAgIGlmIChpZHggPj0gMCkge1xuICAgICAgICAgICAgdGhpcy5fY2FsbGJhY2tzLnNwbGljZShpZHgsIDEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmFpc2UoLi4ucGFyYW1zKSB7XG4gICAgICAgIExvZy5kZWJ1ZyhcIkV2ZW50OiBSYWlzaW5nIGV2ZW50OiBcIiArIHRoaXMuX25hbWUpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2NhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5fY2FsbGJhY2tzW2ldKC4uLnBhcmFtcyk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5jb25zdCB0aW1lciA9IHtcbiAgICBzZXRJbnRlcnZhbDogZnVuY3Rpb24gKGNiLCBkdXJhdGlvbikge1xuICAgICAgICByZXR1cm4gc2V0SW50ZXJ2YWwoY2IsIGR1cmF0aW9uKTtcbiAgICB9LFxuICAgIGNsZWFySW50ZXJ2YWw6IGZ1bmN0aW9uIChoYW5kbGUpIHtcbiAgICAgICAgcmV0dXJuIGNsZWFySW50ZXJ2YWwoaGFuZGxlKTtcbiAgICB9XG59O1xuXG5sZXQgdGVzdGluZyA9IGZhbHNlO1xubGV0IHJlcXVlc3QgPSBudWxsO1xuXG5leHBvcnQgY2xhc3MgR2xvYmFsIHtcblxuICAgIHN0YXRpYyBfdGVzdGluZygpIHtcbiAgICAgICAgdGVzdGluZyA9IHRydWU7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBsb2NhdGlvbigpIHtcbiAgICAgICAgaWYgKCF0ZXN0aW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYXRpb247XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0IGxvY2FsU3RvcmFnZSgpIHtcbiAgICAgICAgaWYgKCF0ZXN0aW5nICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxTdG9yYWdlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBzZXNzaW9uU3RvcmFnZSgpIHtcbiAgICAgICAgaWYgKCF0ZXN0aW5nICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gc2Vzc2lvblN0b3JhZ2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgc2V0WE1MSHR0cFJlcXVlc3QobmV3UmVxdWVzdCkge1xuICAgICAgICByZXF1ZXN0ID0gbmV3UmVxdWVzdDtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0IFhNTEh0dHBSZXF1ZXN0KCkge1xuICAgICAgICBpZiAoIXRlc3RpbmcgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiByZXF1ZXN0IHx8IFhNTEh0dHBSZXF1ZXN0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGdldCB0aW1lcigpIHtcbiAgICAgICAgaWYgKCF0ZXN0aW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gdGltZXI7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5pbXBvcnQgeyBMb2cgfSBmcm9tICcuL0xvZy5qcyc7XG5pbXBvcnQgeyBJRnJhbWVXaW5kb3cgfSBmcm9tICcuL0lGcmFtZVdpbmRvdy5qcyc7XG5cbmV4cG9ydCBjbGFzcyBJRnJhbWVOYXZpZ2F0b3Ige1xuXG4gICAgcHJlcGFyZShwYXJhbXMpIHtcbiAgICAgICAgbGV0IGZyYW1lID0gbmV3IElGcmFtZVdpbmRvdyhwYXJhbXMpO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZyYW1lKTtcbiAgICB9XG5cbiAgICBjYWxsYmFjayh1cmwpIHtcbiAgICAgICAgTG9nLmRlYnVnKFwiSUZyYW1lTmF2aWdhdG9yLmNhbGxiYWNrXCIpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBJRnJhbWVXaW5kb3cubm90aWZ5UGFyZW50KHVybCk7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nLmpzJztcblxuY29uc3QgRGVmYXVsdFRpbWVvdXQgPSAxMDAwMDtcblxuZXhwb3J0IGNsYXNzIElGcmFtZVdpbmRvdyB7XG5cbiAgICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcbiAgICAgICAgdGhpcy5fcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgICAgICAgICAgdGhpcy5fcmVqZWN0ID0gcmVqZWN0O1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLl9ib3VuZE1lc3NhZ2VFdmVudCA9IHRoaXMuX21lc3NhZ2UuYmluZCh0aGlzKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIHRoaXMuX2JvdW5kTWVzc2FnZUV2ZW50LCBmYWxzZSk7XG5cbiAgICAgICAgdGhpcy5fZnJhbWUgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlmcmFtZVwiKTtcblxuICAgICAgICAvLyBzaG90Z3VuIGFwcHJvYWNoXG4gICAgICAgIHRoaXMuX2ZyYW1lLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuICAgICAgICB0aGlzLl9mcmFtZS5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICAgICAgdGhpcy5fZnJhbWUud2lkdGggPSAwO1xuICAgICAgICB0aGlzLl9mcmFtZS5oZWlnaHQgPSAwO1xuXG4gICAgICAgIHdpbmRvdy5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuX2ZyYW1lKTtcbiAgICB9XG5cbiAgICBuYXZpZ2F0ZShwYXJhbXMpIHtcbiAgICAgICAgaWYgKCFwYXJhbXMgfHwgIXBhcmFtcy51cmwpIHtcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yKFwiTm8gdXJsIHByb3ZpZGVkXCIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbGV0IHRpbWVvdXQgPSBwYXJhbXMuc2lsZW50UmVxdWVzdFRpbWVvdXQgfHwgRGVmYXVsdFRpbWVvdXQ7XG4gICAgICAgICAgICBMb2cuZGVidWcoXCJJRnJhbWVXaW5kb3cubmF2aWdhdGU6IFVzaW5nIHRpbWVvdXQgb2Y6XCIsIHRpbWVvdXQpO1xuICAgICAgICAgICAgdGhpcy5fdGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCh0aGlzLl90aW1lb3V0LmJpbmQodGhpcyksIHRpbWVvdXQpO1xuICAgICAgICAgICAgdGhpcy5fZnJhbWUuc3JjID0gcGFyYW1zLnVybDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnByb21pc2U7XG4gICAgfVxuXG4gICAgZ2V0IHByb21pc2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcm9taXNlO1xuICAgIH1cblxuICAgIF9zdWNjZXNzKGRhdGEpIHtcbiAgICAgICAgdGhpcy5fY2xlYW51cCgpO1xuXG4gICAgICAgIExvZy5kZWJ1ZyhcIklGcmFtZVdpbmRvdzogU3VjY2Vzc2Z1bCByZXNwb25zZSBmcm9tIGZyYW1lIHdpbmRvd1wiKTtcbiAgICAgICAgdGhpcy5fcmVzb2x2ZShkYXRhKTtcbiAgICB9XG4gICAgX2Vycm9yKG1lc3NhZ2UpIHtcbiAgICAgICAgdGhpcy5fY2xlYW51cCgpO1xuXG4gICAgICAgIExvZy5lcnJvcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5fcmVqZWN0KG5ldyBFcnJvcihtZXNzYWdlKSk7XG4gICAgfVxuXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMuX2NsZWFudXAoKTtcbiAgICB9XG5cbiAgICBfY2xlYW51cCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2ZyYW1lKSB7XG4gICAgICAgICAgICBMb2cuZGVidWcoXCJJRnJhbWVXaW5kb3c6IGNsZWFudXBcIik7XG5cbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCB0aGlzLl9ib3VuZE1lc3NhZ2VFdmVudCwgZmFsc2UpO1xuICAgICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLl90aW1lcik7XG4gICAgICAgICAgICB3aW5kb3cuZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0aGlzLl9mcmFtZSk7XG5cbiAgICAgICAgICAgIHRoaXMuX3RpbWVyID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX2ZyYW1lID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX2JvdW5kTWVzc2FnZUV2ZW50ID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF90aW1lb3V0KCkge1xuICAgICAgICBMb2cuZGVidWcoXCJJRnJhbWVXaW5kb3cudGltZW91dFwiKTtcbiAgICAgICAgdGhpcy5fZXJyb3IoXCJGcmFtZSB3aW5kb3cgdGltZWQgb3V0XCIpO1xuICAgIH1cblxuICAgIF9tZXNzYWdlKGUpIHtcbiAgICAgICAgTG9nLmRlYnVnKFwiSUZyYW1lV2luZG93Lm1lc3NhZ2VcIik7XG5cbiAgICAgICAgaWYgKHRoaXMuX3RpbWVyICYmXG4gICAgICAgICAgICBlLm9yaWdpbiA9PT0gdGhpcy5fb3JpZ2luICYmXG4gICAgICAgICAgICBlLnNvdXJjZSA9PT0gdGhpcy5fZnJhbWUuY29udGVudFdpbmRvdyAmJlxuICAgICAgICAgICAgKHR5cGVvZiBlLmRhdGEgPT09ICdzdHJpbmcnICYmIChlLmRhdGEuc3RhcnRzV2l0aCgnaHR0cDovLycpIHx8IGUuZGF0YS5zdGFydHNXaXRoKCdodHRwczovLycpKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBsZXQgdXJsID0gZS5kYXRhO1xuICAgICAgICAgICAgaWYgKHVybCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N1Y2Nlc3MoeyB1cmw6IHVybCB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Vycm9yKFwiSW52YWxpZCByZXNwb25zZSBmcm9tIGZyYW1lXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IF9vcmlnaW4oKSB7XG4gICAgICAgIHJldHVybiBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiArIGxvY2F0aW9uLmhvc3Q7XG4gICAgfVxuXG4gICAgc3RhdGljIG5vdGlmeVBhcmVudCh1cmwpIHtcbiAgICAgICAgTG9nLmRlYnVnKFwiSUZyYW1lV2luZG93Lm5vdGlmeVBhcmVudFwiKTtcbiAgICAgICAgdXJsID0gdXJsIHx8IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgICAgICBpZiAodXJsKSB7XG4gICAgICAgICAgICBMb2cuZGVidWcoXCJJRnJhbWVXaW5kb3cubm90aWZ5UGFyZW50OiBwb3N0aW5nIHVybCBtZXNzYWdlIHRvIHBhcmVudFwiKTtcbiAgICAgICAgICAgIHdpbmRvdy5wYXJlbnQucG9zdE1lc3NhZ2UodXJsLCBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiArIGxvY2F0aW9uLmhvc3QpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cuanMnO1xuXG5leHBvcnQgY2xhc3MgSW5NZW1vcnlXZWJTdG9yYWdle1xuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHRoaXMuX2RhdGEgPSB7fTtcbiAgICB9XG5cbiAgICBnZXRJdGVtKGtleSkge1xuICAgICAgICBMb2cuZGVidWcoXCJJbk1lbW9yeVdlYlN0b3JhZ2UuZ2V0SXRlbVwiLCBrZXkpO1xuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YVtrZXldO1xuICAgIH1cblxuICAgIHNldEl0ZW0oa2V5LCB2YWx1ZSl7XG4gICAgICAgIExvZy5kZWJ1ZyhcIkluTWVtb3J5V2ViU3RvcmFnZS5zZXRJdGVtXCIsIGtleSk7XG4gICAgICAgIHRoaXMuX2RhdGFba2V5XSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHJlbW92ZUl0ZW0oa2V5KXtcbiAgICAgICAgTG9nLmRlYnVnKFwiSW5NZW1vcnlXZWJTdG9yYWdlLnJlbW92ZUl0ZW1cIiwga2V5KTtcbiAgICAgICAgZGVsZXRlIHRoaXMuX2RhdGFba2V5XTtcbiAgICB9XG5cbiAgICBnZXQgbGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcy5fZGF0YSkubGVuZ3RoO1xuICAgIH1cblxuICAgIGtleShpbmRleCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcy5fZGF0YSlbaW5kZXhdO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IGp3cywgS2V5VXRpbCwgWDUwOSwgY3J5cHRvLCBoZXh0b2I2NHUsIGI2NHRvaGV4LCBBbGxvd2VkU2lnbmluZ0FsZ3MgfSBmcm9tICcuL2NyeXB0by9qc3JzYXNpZ24nO1xuaW1wb3J0IGdldEpvc2VVdGlsIGZyb20gJy4vSm9zZVV0aWxJbXBsJztcblxuZXhwb3J0IGNvbnN0IEpvc2VVdGlsID0gZ2V0Sm9zZVV0aWwoeyBqd3MsIEtleVV0aWwsIFg1MDksIGNyeXB0bywgaGV4dG9iNjR1LCBiNjR0b2hleCwgQWxsb3dlZFNpZ25pbmdBbGdzIH0pO1xuIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRKb3NlVXRpbCh7IGp3cywgS2V5VXRpbCwgWDUwOSwgY3J5cHRvLCBoZXh0b2I2NHUsIGI2NHRvaGV4LCBBbGxvd2VkU2lnbmluZ0FsZ3MgfSkge1xuICAgIHJldHVybiBjbGFzcyBKb3NlVXRpbCB7XG5cbiAgICAgICAgc3RhdGljIHBhcnNlSnd0KGp3dCkge1xuICAgICAgICAgICAgTG9nLmRlYnVnKFwiSm9zZVV0aWwucGFyc2VKd3RcIik7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhciB0b2tlbiA9IGp3cy5KV1MucGFyc2Uoand0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBoZWFkZXI6IHRva2VuLmhlYWRlck9iaixcbiAgICAgICAgICAgICAgICAgICAgcGF5bG9hZDogdG9rZW4ucGF5bG9hZE9ialxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBMb2cuZXJyb3IoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgdmFsaWRhdGVKd3Qoand0LCBrZXksIGlzc3VlciwgYXVkaWVuY2UsIGNsb2NrU2tldywgbm93LCB0aW1lSW5zZW5zaXRpdmUpIHtcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIkpvc2VVdGlsLnZhbGlkYXRlSnd0XCIpO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChrZXkua3R5ID09PSBcIlJTQVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXkuZSAmJiBrZXkubikge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5ID0gS2V5VXRpbC5nZXRLZXkoa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkueDVjICYmIGtleS54NWMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGV4ID0gYjY0dG9oZXgoa2V5Lng1Y1swXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXkgPSBYNTA5LmdldFB1YmxpY0tleUZyb21DZXJ0SGV4KGhleCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJKb3NlVXRpbC52YWxpZGF0ZUp3dDogUlNBIGtleSBtaXNzaW5nIGtleSBtYXRlcmlhbFwiLCBrZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIlJTQSBrZXkgbWlzc2luZyBrZXkgbWF0ZXJpYWxcIikpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkua3R5ID09PSBcIkVDXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleS5jcnYgJiYga2V5LnggJiYga2V5LnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleSA9IEtleVV0aWwuZ2V0S2V5KGtleSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJKb3NlVXRpbC52YWxpZGF0ZUp3dDogRUMga2V5IG1pc3Npbmcga2V5IG1hdGVyaWFsXCIsIGtleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiRUMga2V5IG1pc3Npbmcga2V5IG1hdGVyaWFsXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIkpvc2VVdGlsLnZhbGlkYXRlSnd0OiBVbnN1cHBvcnRlZCBrZXkgdHlwZVwiLCBrZXkgJiYga2V5Lmt0eSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBrZXkgdHlwZTogXCIgKyBrZXkgJiYga2V5Lmt0eSkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBKb3NlVXRpbC5fdmFsaWRhdGVKd3Qoand0LCBrZXksIGlzc3VlciwgYXVkaWVuY2UsIGNsb2NrU2tldywgbm93LCB0aW1lSW5zZW5zaXRpdmUpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIExvZy5lcnJvcihlICYmIGUubWVzc2FnZSB8fCBlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXCJKV1QgdmFsaWRhdGlvbiBmYWlsZWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgdmFsaWRhdGVKd3RBdHRyaWJ1dGVzKGp3dCwgaXNzdWVyLCBhdWRpZW5jZSwgY2xvY2tTa2V3LCBub3csIHRpbWVJbnNlbnNpdGl2ZSkge1xuICAgICAgICAgICAgaWYgKCFjbG9ja1NrZXcpIHtcbiAgICAgICAgICAgICAgICBjbG9ja1NrZXcgPSAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIW5vdykge1xuICAgICAgICAgICAgICAgIG5vdyA9IHBhcnNlSW50KERhdGUubm93KCkgLyAxMDAwKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHBheWxvYWQgPSBKb3NlVXRpbC5wYXJzZUp3dChqd3QpLnBheWxvYWQ7XG5cbiAgICAgICAgICAgIGlmICghcGF5bG9hZC5pc3MpIHtcbiAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJKb3NlVXRpbC5fdmFsaWRhdGVKd3Q6IGlzc3VlciB3YXMgbm90IHByb3ZpZGVkXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJpc3N1ZXIgd2FzIG5vdCBwcm92aWRlZFwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocGF5bG9hZC5pc3MgIT09IGlzc3Vlcikge1xuICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIkpvc2VVdGlsLl92YWxpZGF0ZUp3dDogSW52YWxpZCBpc3N1ZXIgaW4gdG9rZW5cIiwgcGF5bG9hZC5pc3MpO1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJJbnZhbGlkIGlzc3VlciBpbiB0b2tlbjogXCIgKyBwYXlsb2FkLmlzcykpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXBheWxvYWQuYXVkKSB7XG4gICAgICAgICAgICAgICAgTG9nLmVycm9yKFwiSm9zZVV0aWwuX3ZhbGlkYXRlSnd0OiBhdWQgd2FzIG5vdCBwcm92aWRlZFwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiYXVkIHdhcyBub3QgcHJvdmlkZWRcIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHZhbGlkQXVkaWVuY2UgPSBwYXlsb2FkLmF1ZCA9PT0gYXVkaWVuY2UgfHwgKEFycmF5LmlzQXJyYXkocGF5bG9hZC5hdWQpICYmIHBheWxvYWQuYXVkLmluZGV4T2YoYXVkaWVuY2UpID49IDApO1xuICAgICAgICAgICAgaWYgKCF2YWxpZEF1ZGllbmNlKSB7XG4gICAgICAgICAgICAgICAgTG9nLmVycm9yKFwiSm9zZVV0aWwuX3ZhbGlkYXRlSnd0OiBJbnZhbGlkIGF1ZGllbmNlIGluIHRva2VuXCIsIHBheWxvYWQuYXVkKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiSW52YWxpZCBhdWRpZW5jZSBpbiB0b2tlbjogXCIgKyBwYXlsb2FkLmF1ZCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBheWxvYWQuYXpwICYmIHBheWxvYWQuYXpwICE9PSBhdWRpZW5jZSkge1xuICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIkpvc2VVdGlsLl92YWxpZGF0ZUp3dDogSW52YWxpZCBhenAgaW4gdG9rZW5cIiwgcGF5bG9hZC5henApO1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJJbnZhbGlkIGF6cCBpbiB0b2tlbjogXCIgKyBwYXlsb2FkLmF6cCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXRpbWVJbnNlbnNpdGl2ZSkge1xuICAgICAgICAgICAgICAgIHZhciBsb3dlck5vdyA9IG5vdyArIGNsb2NrU2tldztcbiAgICAgICAgICAgICAgICB2YXIgdXBwZXJOb3cgPSBub3cgLSBjbG9ja1NrZXc7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXBheWxvYWQuaWF0KSB7XG4gICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIkpvc2VVdGlsLl92YWxpZGF0ZUp3dDogaWF0IHdhcyBub3QgcHJvdmlkZWRcIik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJpYXQgd2FzIG5vdCBwcm92aWRlZFwiKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChsb3dlck5vdyA8IHBheWxvYWQuaWF0KSB7XG4gICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIkpvc2VVdGlsLl92YWxpZGF0ZUp3dDogaWF0IGlzIGluIHRoZSBmdXR1cmVcIiwgcGF5bG9hZC5pYXQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiaWF0IGlzIGluIHRoZSBmdXR1cmU6IFwiICsgcGF5bG9hZC5pYXQpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAocGF5bG9hZC5uYmYgJiYgbG93ZXJOb3cgPCBwYXlsb2FkLm5iZikge1xuICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJKb3NlVXRpbC5fdmFsaWRhdGVKd3Q6IG5iZiBpcyBpbiB0aGUgZnV0dXJlXCIsIHBheWxvYWQubmJmKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIm5iZiBpcyBpbiB0aGUgZnV0dXJlOiBcIiArIHBheWxvYWQubmJmKSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCFwYXlsb2FkLmV4cCkge1xuICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJKb3NlVXRpbC5fdmFsaWRhdGVKd3Q6IGV4cCB3YXMgbm90IHByb3ZpZGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiZXhwIHdhcyBub3QgcHJvdmlkZWRcIikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocGF5bG9hZC5leHAgPCB1cHBlck5vdykge1xuICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJKb3NlVXRpbC5fdmFsaWRhdGVKd3Q6IGV4cCBpcyBpbiB0aGUgcGFzdFwiLCBwYXlsb2FkLmV4cCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJleHAgaXMgaW4gdGhlIHBhc3Q6XCIgKyBwYXlsb2FkLmV4cCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShwYXlsb2FkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBfdmFsaWRhdGVKd3Qoand0LCBrZXksIGlzc3VlciwgYXVkaWVuY2UsIGNsb2NrU2tldywgbm93LCB0aW1lSW5zZW5zaXRpdmUpIHtcblxuICAgICAgICAgICAgcmV0dXJuIEpvc2VVdGlsLnZhbGlkYXRlSnd0QXR0cmlidXRlcyhqd3QsIGlzc3VlciwgYXVkaWVuY2UsIGNsb2NrU2tldywgbm93LCB0aW1lSW5zZW5zaXRpdmUpLnRoZW4ocGF5bG9hZCA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFqd3MuSldTLnZlcmlmeShqd3QsIGtleSwgQWxsb3dlZFNpZ25pbmdBbGdzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKFwiSm9zZVV0aWwuX3ZhbGlkYXRlSnd0OiBzaWduYXR1cmUgdmFsaWRhdGlvbiBmYWlsZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwic2lnbmF0dXJlIHZhbGlkYXRpb24gZmFpbGVkXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXlsb2FkO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKGUgJiYgZS5tZXNzYWdlIHx8IGUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwic2lnbmF0dXJlIHZhbGlkYXRpb24gZmFpbGVkXCIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBoYXNoU3RyaW5nKHZhbHVlLCBhbGcpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyeXB0by5VdGlsLmhhc2hTdHJpbmcodmFsdWUsIGFsZyk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgTG9nLmVycm9yKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGhleFRvQmFzZTY0VXJsKHZhbHVlKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBoZXh0b2I2NHUodmFsdWUpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIExvZy5lcnJvcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nLmpzJztcbmltcG9ydCB7IEdsb2JhbCB9IGZyb20gJy4vR2xvYmFsLmpzJztcblxuZXhwb3J0IGNsYXNzIEpzb25TZXJ2aWNlIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgYWRkaXRpb25hbENvbnRlbnRUeXBlcyA9IG51bGwsIFxuICAgICAgICBYTUxIdHRwUmVxdWVzdEN0b3IgPSBHbG9iYWwuWE1MSHR0cFJlcXVlc3QsIFxuICAgICAgICBqd3RIYW5kbGVyID0gbnVsbFxuICAgICkge1xuICAgICAgICBpZiAoYWRkaXRpb25hbENvbnRlbnRUeXBlcyAmJiBBcnJheS5pc0FycmF5KGFkZGl0aW9uYWxDb250ZW50VHlwZXMpKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZW50VHlwZXMgPSBhZGRpdGlvbmFsQ29udGVudFR5cGVzLnNsaWNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZW50VHlwZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jb250ZW50VHlwZXMucHVzaCgnYXBwbGljYXRpb24vanNvbicpO1xuICAgICAgICBpZiAoand0SGFuZGxlcikge1xuICAgICAgICAgICAgdGhpcy5fY29udGVudFR5cGVzLnB1c2goJ2FwcGxpY2F0aW9uL2p3dCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fWE1MSHR0cFJlcXVlc3QgPSBYTUxIdHRwUmVxdWVzdEN0b3I7XG4gICAgICAgIHRoaXMuX2p3dEhhbmRsZXIgPSBqd3RIYW5kbGVyO1xuICAgIH1cblxuICAgIGdldEpzb24odXJsLCB0b2tlbikge1xuICAgICAgICBpZiAoIXVybCl7XG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJKc29uU2VydmljZS5nZXRKc29uOiBObyB1cmwgcGFzc2VkXCIpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidXJsXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgTG9nLmRlYnVnKFwiSnNvblNlcnZpY2UuZ2V0SnNvbiwgdXJsOiBcIiwgdXJsKTtcblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICAgICAgICB2YXIgcmVxID0gbmV3IHRoaXMuX1hNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICByZXEub3BlbignR0VUJywgdXJsKTtcblxuICAgICAgICAgICAgdmFyIGFsbG93ZWRDb250ZW50VHlwZXMgPSB0aGlzLl9jb250ZW50VHlwZXM7XG4gICAgICAgICAgICB2YXIgand0SGFuZGxlciA9IHRoaXMuX2p3dEhhbmRsZXI7XG5cbiAgICAgICAgICAgIHJlcS5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJKc29uU2VydmljZS5nZXRKc29uOiBIVFRQIHJlc3BvbnNlIHJlY2VpdmVkLCBzdGF0dXNcIiwgcmVxLnN0YXR1cyk7XG5cbiAgICAgICAgICAgICAgICBpZiAocmVxLnN0YXR1cyA9PT0gMjAwKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRlbnRUeXBlID0gcmVxLmdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1UeXBlXCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29udGVudFR5cGUpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZvdW5kID0gYWxsb3dlZENvbnRlbnRUeXBlcy5maW5kKGl0ZW09PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udGVudFR5cGUuc3RhcnRzV2l0aChpdGVtKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZvdW5kID09IFwiYXBwbGljYXRpb24vand0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqd3RIYW5kbGVyKHJlcSkudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShKU09OLnBhcnNlKHJlcS5yZXNwb25zZVRleHQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJKc29uU2VydmljZS5nZXRKc29uOiBFcnJvciBwYXJzaW5nIEpTT04gcmVzcG9uc2VcIiwgZS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KEVycm9yKFwiSW52YWxpZCByZXNwb25zZSBDb250ZW50LVR5cGU6IFwiICsgY29udGVudFR5cGUgKyBcIiwgZnJvbSBVUkw6IFwiICsgdXJsKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoRXJyb3IocmVxLnN0YXR1c1RleHQgKyBcIiAoXCIgKyByZXEuc3RhdHVzICsgXCIpXCIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXEub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIkpzb25TZXJ2aWNlLmdldEpzb246IG5ldHdvcmsgZXJyb3JcIik7XG4gICAgICAgICAgICAgICAgcmVqZWN0KEVycm9yKFwiTmV0d29yayBFcnJvclwiKSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJKc29uU2VydmljZS5nZXRKc29uOiB0b2tlbiBwYXNzZWQsIHNldHRpbmcgQXV0aG9yaXphdGlvbiBoZWFkZXJcIik7XG4gICAgICAgICAgICAgICAgcmVxLnNldFJlcXVlc3RIZWFkZXIoXCJBdXRob3JpemF0aW9uXCIsIFwiQmVhcmVyIFwiICsgdG9rZW4pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXEuc2VuZCgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwb3N0Rm9ybSh1cmwsIHBheWxvYWQsIGJhc2ljQXV0aCkge1xuICAgICAgICBpZiAoIXVybCl7XG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJKc29uU2VydmljZS5wb3N0Rm9ybTogTm8gdXJsIHBhc3NlZFwiKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInVybFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIExvZy5kZWJ1ZyhcIkpzb25TZXJ2aWNlLnBvc3RGb3JtLCB1cmw6IFwiLCB1cmwpO1xuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgICAgICAgIHZhciByZXEgPSBuZXcgdGhpcy5fWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgICAgIHJlcS5vcGVuKCdQT1NUJywgdXJsKTtcblxuICAgICAgICAgICAgdmFyIGFsbG93ZWRDb250ZW50VHlwZXMgPSB0aGlzLl9jb250ZW50VHlwZXM7XG5cbiAgICAgICAgICAgIHJlcS5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJKc29uU2VydmljZS5wb3N0Rm9ybTogSFRUUCByZXNwb25zZSByZWNlaXZlZCwgc3RhdHVzXCIsIHJlcS5zdGF0dXMpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHJlcS5zdGF0dXMgPT09IDIwMCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50VHlwZSA9IHJlcS5nZXRSZXNwb25zZUhlYWRlcihcIkNvbnRlbnQtVHlwZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRlbnRUeXBlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmb3VuZCA9IGFsbG93ZWRDb250ZW50VHlwZXMuZmluZChpdGVtPT57XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRlbnRUeXBlLnN0YXJ0c1dpdGgoaXRlbSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3VuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoSlNPTi5wYXJzZShyZXEucmVzcG9uc2VUZXh0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKFwiSnNvblNlcnZpY2UucG9zdEZvcm06IEVycm9yIHBhcnNpbmcgSlNPTiByZXNwb25zZVwiLCBlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZWplY3QoRXJyb3IoXCJJbnZhbGlkIHJlc3BvbnNlIENvbnRlbnQtVHlwZTogXCIgKyBjb250ZW50VHlwZSArIFwiLCBmcm9tIFVSTDogXCIgKyB1cmwpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChyZXEuc3RhdHVzID09PSA0MDApIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgY29udGVudFR5cGUgPSByZXEuZ2V0UmVzcG9uc2VIZWFkZXIoXCJDb250ZW50LVR5cGVcIik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb250ZW50VHlwZSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZm91bmQgPSBhbGxvd2VkQ29udGVudFR5cGVzLmZpbmQoaXRlbT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250ZW50VHlwZS5zdGFydHNXaXRoKGl0ZW0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGF5bG9hZCA9IEpTT04ucGFyc2UocmVxLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXlsb2FkICYmIHBheWxvYWQuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIkpzb25TZXJ2aWNlLnBvc3RGb3JtOiBFcnJvciBmcm9tIHNlcnZlcjogXCIsIHBheWxvYWQuZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihwYXlsb2FkLmVycm9yKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKFwiSnNvblNlcnZpY2UucG9zdEZvcm06IEVycm9yIHBhcnNpbmcgSlNPTiByZXNwb25zZVwiLCBlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZWplY3QoRXJyb3IocmVxLnN0YXR1c1RleHQgKyBcIiAoXCIgKyByZXEuc3RhdHVzICsgXCIpXCIpKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJlcS5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgTG9nLmVycm9yKFwiSnNvblNlcnZpY2UucG9zdEZvcm06IG5ldHdvcmsgZXJyb3JcIik7XG4gICAgICAgICAgICAgICAgcmVqZWN0KEVycm9yKFwiTmV0d29yayBFcnJvclwiKSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBsZXQgYm9keSA9IFwiXCI7XG4gICAgICAgICAgICBmb3IobGV0IGtleSBpbiBwYXlsb2FkKSB7XG5cbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBwYXlsb2FkW2tleV07XG5cbiAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoYm9keS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5ICs9IFwiJlwiO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgYm9keSArPSBlbmNvZGVVUklDb21wb25lbnQoa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgYm9keSArPSBcIj1cIjtcbiAgICAgICAgICAgICAgICAgICAgYm9keSArPSBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmVxLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIik7XG5cbiAgICAgICAgICAgIGlmIChiYXNpY0F1dGggIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXEuc2V0UmVxdWVzdEhlYWRlcihcIkF1dGhvcml6YXRpb25cIiwgXCJCYXNpYyBcIiArIGJ0b2EoYmFzaWNBdXRoKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlcS5zZW5kKGJvZHkpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5sZXQgbm9wTG9nZ2VyID0ge1xuICAgIGRlYnVnKCl7fSxcbiAgICBpbmZvKCl7fSxcbiAgICB3YXJuKCl7fSxcbiAgICBlcnJvcigpe31cbn07XG5cbmNvbnN0IE5PTkUgPSAwO1xuY29uc3QgRVJST1IgPSAxO1xuY29uc3QgV0FSTiA9IDI7XG5jb25zdCBJTkZPID0gMztcbmNvbnN0IERFQlVHID0gNDtcblxubGV0IGxvZ2dlcjtcbmxldCBsZXZlbDtcblxuZXhwb3J0IGNsYXNzIExvZyB7XG4gICAgc3RhdGljIGdldCBOT05FKCkge3JldHVybiBOT05FfTtcbiAgICBzdGF0aWMgZ2V0IEVSUk9SKCkge3JldHVybiBFUlJPUn07XG4gICAgc3RhdGljIGdldCBXQVJOKCkge3JldHVybiBXQVJOfTtcbiAgICBzdGF0aWMgZ2V0IElORk8oKSB7cmV0dXJuIElORk99O1xuICAgIHN0YXRpYyBnZXQgREVCVUcoKSB7cmV0dXJuIERFQlVHfTtcbiAgICBcbiAgICBzdGF0aWMgcmVzZXQoKXtcbiAgICAgICAgbGV2ZWwgPSBJTkZPO1xuICAgICAgICBsb2dnZXIgPSBub3BMb2dnZXI7XG4gICAgfVxuICAgIFxuICAgIHN0YXRpYyBnZXQgbGV2ZWwoKXtcbiAgICAgICAgcmV0dXJuIGxldmVsO1xuICAgIH1cbiAgICBzdGF0aWMgc2V0IGxldmVsKHZhbHVlKXtcbiAgICAgICAgaWYgKE5PTkUgPD0gdmFsdWUgJiYgdmFsdWUgPD0gREVCVUcpe1xuICAgICAgICAgICAgbGV2ZWwgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgbG9nIGxldmVsXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIHN0YXRpYyBnZXQgbG9nZ2VyKCl7XG4gICAgICAgIHJldHVybiBsb2dnZXI7XG4gICAgfVxuICAgIHN0YXRpYyBzZXQgbG9nZ2VyKHZhbHVlKXtcbiAgICAgICAgaWYgKCF2YWx1ZS5kZWJ1ZyAmJiB2YWx1ZS5pbmZvKSB7XG4gICAgICAgICAgICAvLyBqdXN0IHRvIHN0YXkgYmFja3dhcmRzIGNvbXBhdC4gY2FuIHJlbW92ZSBpbiAyLjBcbiAgICAgICAgICAgIHZhbHVlLmRlYnVnID0gdmFsdWUuaW5mbztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZS5kZWJ1ZyAmJiB2YWx1ZS5pbmZvICYmIHZhbHVlLndhcm4gJiYgdmFsdWUuZXJyb3Ipe1xuICAgICAgICAgICAgbG9nZ2VyID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGxvZ2dlclwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBzdGF0aWMgZGVidWcoLi4uYXJncyl7XG4gICAgICAgIGlmIChsZXZlbCA+PSBERUJVRyl7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcuYXBwbHkobG9nZ2VyLCBBcnJheS5mcm9tKGFyZ3MpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgaW5mbyguLi5hcmdzKXtcbiAgICAgICAgaWYgKGxldmVsID49IElORk8pe1xuICAgICAgICAgICAgbG9nZ2VyLmluZm8uYXBwbHkobG9nZ2VyLCBBcnJheS5mcm9tKGFyZ3MpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgd2FybiguLi5hcmdzKXtcbiAgICAgICAgaWYgKGxldmVsID49IFdBUk4pe1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4uYXBwbHkobG9nZ2VyLCBBcnJheS5mcm9tKGFyZ3MpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgZXJyb3IoLi4uYXJncyl7XG4gICAgICAgIGlmIChsZXZlbCA+PSBFUlJPUil7XG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IuYXBwbHkobG9nZ2VyLCBBcnJheS5mcm9tKGFyZ3MpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuTG9nLnJlc2V0KCk7XG4iLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5pbXBvcnQgeyBMb2cgfSBmcm9tICcuL0xvZy5qcyc7XG5pbXBvcnQgeyBKc29uU2VydmljZSB9IGZyb20gJy4vSnNvblNlcnZpY2UuanMnO1xuXG5jb25zdCBPaWRjTWV0YWRhdGFVcmxQYXRoID0gJy53ZWxsLWtub3duL29wZW5pZC1jb25maWd1cmF0aW9uJztcblxuZXhwb3J0IGNsYXNzIE1ldGFkYXRhU2VydmljZSB7XG4gICAgY29uc3RydWN0b3Ioc2V0dGluZ3MsIEpzb25TZXJ2aWNlQ3RvciA9IEpzb25TZXJ2aWNlKSB7XG4gICAgICAgIGlmICghc2V0dGluZ3MpIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIk1ldGFkYXRhU2VydmljZTogTm8gc2V0dGluZ3MgcGFzc2VkIHRvIE1ldGFkYXRhU2VydmljZVwiKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInNldHRpbmdzXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fc2V0dGluZ3MgPSBzZXR0aW5ncztcbiAgICAgICAgdGhpcy5fanNvblNlcnZpY2UgPSBuZXcgSnNvblNlcnZpY2VDdG9yKFsnYXBwbGljYXRpb24vandrLXNldCtqc29uJ10pO1xuICAgIH1cblxuICAgIGdldCBtZXRhZGF0YVVybCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9tZXRhZGF0YVVybCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3NldHRpbmdzLm1ldGFkYXRhVXJsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWV0YWRhdGFVcmwgPSB0aGlzLl9zZXR0aW5ncy5tZXRhZGF0YVVybDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX21ldGFkYXRhVXJsID0gdGhpcy5fc2V0dGluZ3MuYXV0aG9yaXR5O1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX21ldGFkYXRhVXJsICYmIHRoaXMuX21ldGFkYXRhVXJsLmluZGV4T2YoT2lkY01ldGFkYXRhVXJsUGF0aCkgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9tZXRhZGF0YVVybFt0aGlzLl9tZXRhZGF0YVVybC5sZW5ndGggLSAxXSAhPT0gJy8nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tZXRhZGF0YVVybCArPSAnLyc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWV0YWRhdGFVcmwgKz0gT2lkY01ldGFkYXRhVXJsUGF0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fbWV0YWRhdGFVcmw7XG4gICAgfVxuXG4gICAgcmVzZXRTaWduaW5nS2V5cygpIHtcbiAgICAgICAgdGhpcy5fc2V0dGluZ3MgPSB0aGlzLl9zZXR0aW5ncyB8fCB7fVxuICAgICAgICB0aGlzLl9zZXR0aW5ncy5zaWduaW5nS2V5cyA9IHVuZGVmaW5lZFxuICAgIH1cblxuICAgIGdldE1ldGFkYXRhKCkge1xuICAgICAgICBpZiAodGhpcy5fc2V0dGluZ3MubWV0YWRhdGEpIHtcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIk1ldGFkYXRhU2VydmljZS5nZXRNZXRhZGF0YTogUmV0dXJuaW5nIG1ldGFkYXRhIGZyb20gc2V0dGluZ3NcIik7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX3NldHRpbmdzLm1ldGFkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5tZXRhZGF0YVVybCkge1xuICAgICAgICAgICAgTG9nLmVycm9yKFwiTWV0YWRhdGFTZXJ2aWNlLmdldE1ldGFkYXRhOiBObyBhdXRob3JpdHkgb3IgbWV0YWRhdGFVcmwgY29uZmlndXJlZCBvbiBzZXR0aW5nc1wiKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyBhdXRob3JpdHkgb3IgbWV0YWRhdGFVcmwgY29uZmlndXJlZCBvbiBzZXR0aW5nc1wiKSk7XG4gICAgICAgIH1cblxuICAgICAgICBMb2cuZGVidWcoXCJNZXRhZGF0YVNlcnZpY2UuZ2V0TWV0YWRhdGE6IGdldHRpbmcgbWV0YWRhdGEgZnJvbVwiLCB0aGlzLm1ldGFkYXRhVXJsKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fanNvblNlcnZpY2UuZ2V0SnNvbih0aGlzLm1ldGFkYXRhVXJsKVxuICAgICAgICAgICAgLnRoZW4obWV0YWRhdGEgPT4ge1xuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIk1ldGFkYXRhU2VydmljZS5nZXRNZXRhZGF0YToganNvbiByZWNlaXZlZFwiKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2YXIgc2VlZCA9IHRoaXMuX3NldHRpbmdzLm1ldGFkYXRhU2VlZCB8fCB7fTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXR0aW5ncy5tZXRhZGF0YSA9IE9iamVjdC5hc3NpZ24oe30sIHNlZWQsIG1ldGFkYXRhKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2V0dGluZ3MubWV0YWRhdGE7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBnZXRJc3N1ZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRNZXRhZGF0YVByb3BlcnR5KFwiaXNzdWVyXCIpO1xuICAgIH1cblxuICAgIGdldEF1dGhvcml6YXRpb25FbmRwb2ludCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldE1ldGFkYXRhUHJvcGVydHkoXCJhdXRob3JpemF0aW9uX2VuZHBvaW50XCIpO1xuICAgIH1cblxuICAgIGdldFVzZXJJbmZvRW5kcG9pbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRNZXRhZGF0YVByb3BlcnR5KFwidXNlcmluZm9fZW5kcG9pbnRcIik7XG4gICAgfVxuXG4gICAgZ2V0VG9rZW5FbmRwb2ludChvcHRpb25hbD10cnVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRNZXRhZGF0YVByb3BlcnR5KFwidG9rZW5fZW5kcG9pbnRcIiwgb3B0aW9uYWwpO1xuICAgIH1cblxuICAgIGdldENoZWNrU2Vzc2lvbklmcmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldE1ldGFkYXRhUHJvcGVydHkoXCJjaGVja19zZXNzaW9uX2lmcmFtZVwiLCB0cnVlKTtcbiAgICB9XG5cbiAgICBnZXRFbmRTZXNzaW9uRW5kcG9pbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRNZXRhZGF0YVByb3BlcnR5KFwiZW5kX3Nlc3Npb25fZW5kcG9pbnRcIiwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgZ2V0UmV2b2NhdGlvbkVuZHBvaW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0TWV0YWRhdGFQcm9wZXJ0eShcInJldm9jYXRpb25fZW5kcG9pbnRcIiwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgZ2V0S2V5c0VuZHBvaW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0TWV0YWRhdGFQcm9wZXJ0eShcImp3a3NfdXJpXCIsIHRydWUpO1xuICAgIH1cblxuICAgIF9nZXRNZXRhZGF0YVByb3BlcnR5KG5hbWUsIG9wdGlvbmFsPWZhbHNlKSB7XG4gICAgICAgIExvZy5kZWJ1ZyhcIk1ldGFkYXRhU2VydmljZS5nZXRNZXRhZGF0YVByb3BlcnR5IGZvcjogXCIgKyBuYW1lKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5nZXRNZXRhZGF0YSgpLnRoZW4obWV0YWRhdGEgPT4ge1xuICAgICAgICAgICAgTG9nLmRlYnVnKFwiTWV0YWRhdGFTZXJ2aWNlLmdldE1ldGFkYXRhUHJvcGVydHk6IG1ldGFkYXRhIHJlY2lldmVkXCIpO1xuXG4gICAgICAgICAgICBpZiAobWV0YWRhdGFbbmFtZV0gPT09IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbmFsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIExvZy53YXJuKFwiTWV0YWRhdGFTZXJ2aWNlLmdldE1ldGFkYXRhUHJvcGVydHk6IE1ldGFkYXRhIGRvZXMgbm90IGNvbnRhaW4gb3B0aW9uYWwgcHJvcGVydHkgXCIgKyBuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIk1ldGFkYXRhU2VydmljZS5nZXRNZXRhZGF0YVByb3BlcnR5OiBNZXRhZGF0YSBkb2VzIG5vdCBjb250YWluIHByb3BlcnR5IFwiICsgbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGFkYXRhIGRvZXMgbm90IGNvbnRhaW4gcHJvcGVydHkgXCIgKyBuYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBtZXRhZGF0YVtuYW1lXTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0U2lnbmluZ0tleXMoKSB7XG4gICAgICAgIGlmICh0aGlzLl9zZXR0aW5ncy5zaWduaW5nS2V5cykge1xuICAgICAgICAgICAgTG9nLmRlYnVnKFwiTWV0YWRhdGFTZXJ2aWNlLmdldFNpZ25pbmdLZXlzOiBSZXR1cm5pbmcgc2lnbmluZ0tleXMgZnJvbSBzZXR0aW5nc1wiKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fc2V0dGluZ3Muc2lnbmluZ0tleXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldE1ldGFkYXRhUHJvcGVydHkoXCJqd2tzX3VyaVwiKS50aGVuKGp3a3NfdXJpID0+IHtcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIk1ldGFkYXRhU2VydmljZS5nZXRTaWduaW5nS2V5czogandrc191cmkgcmVjZWl2ZWRcIiwgandrc191cmkpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fanNvblNlcnZpY2UuZ2V0SnNvbihqd2tzX3VyaSkudGhlbihrZXlTZXQgPT4ge1xuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIk1ldGFkYXRhU2VydmljZS5nZXRTaWduaW5nS2V5czoga2V5IHNldCByZWNlaXZlZFwiLCBrZXlTZXQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFrZXlTZXQua2V5cykge1xuICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJNZXRhZGF0YVNlcnZpY2UuZ2V0U2lnbmluZ0tleXM6IE1pc3Npbmcga2V5cyBvbiBrZXlzZXRcIik7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3Npbmcga2V5cyBvbiBrZXlzZXRcIik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0dGluZ3Muc2lnbmluZ0tleXMgPSBrZXlTZXQua2V5cztcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2V0dGluZ3Muc2lnbmluZ0tleXM7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cuanMnO1xuaW1wb3J0IHsgT2lkY0NsaWVudFNldHRpbmdzIH0gZnJvbSAnLi9PaWRjQ2xpZW50U2V0dGluZ3MuanMnO1xuaW1wb3J0IHsgRXJyb3JSZXNwb25zZSB9IGZyb20gJy4vRXJyb3JSZXNwb25zZS5qcyc7XG5pbXBvcnQgeyBTaWduaW5SZXF1ZXN0IH0gZnJvbSAnLi9TaWduaW5SZXF1ZXN0LmpzJztcbmltcG9ydCB7IFNpZ25pblJlc3BvbnNlIH0gZnJvbSAnLi9TaWduaW5SZXNwb25zZS5qcyc7XG5pbXBvcnQgeyBTaWdub3V0UmVxdWVzdCB9IGZyb20gJy4vU2lnbm91dFJlcXVlc3QuanMnO1xuaW1wb3J0IHsgU2lnbm91dFJlc3BvbnNlIH0gZnJvbSAnLi9TaWdub3V0UmVzcG9uc2UuanMnO1xuaW1wb3J0IHsgU2lnbmluU3RhdGUgfSBmcm9tICcuL1NpZ25pblN0YXRlLmpzJztcbmltcG9ydCB7IFN0YXRlIH0gZnJvbSAnLi9TdGF0ZS5qcyc7XG5cbmV4cG9ydCBjbGFzcyBPaWRjQ2xpZW50IHtcbiAgICBjb25zdHJ1Y3RvcihzZXR0aW5ncyA9IHt9KSB7XG4gICAgICAgIGlmIChzZXR0aW5ncyBpbnN0YW5jZW9mIE9pZGNDbGllbnRTZXR0aW5ncykge1xuICAgICAgICAgICAgdGhpcy5fc2V0dGluZ3MgPSBzZXR0aW5ncztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3NldHRpbmdzID0gbmV3IE9pZGNDbGllbnRTZXR0aW5ncyhzZXR0aW5ncyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgX3N0YXRlU3RvcmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLnN0YXRlU3RvcmU7XG4gICAgfVxuICAgIGdldCBfdmFsaWRhdG9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXR0aW5ncy52YWxpZGF0b3I7XG4gICAgfVxuICAgIGdldCBfbWV0YWRhdGFTZXJ2aWNlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXR0aW5ncy5tZXRhZGF0YVNlcnZpY2U7XG4gICAgfVxuXG4gICAgZ2V0IHNldHRpbmdzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2V0dGluZ3M7XG4gICAgfVxuICAgIGdldCBtZXRhZGF0YVNlcnZpY2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tZXRhZGF0YVNlcnZpY2U7XG4gICAgfVxuXG4gICAgY3JlYXRlU2lnbmluUmVxdWVzdCh7XG4gICAgICAgIHJlc3BvbnNlX3R5cGUsIHNjb3BlLCByZWRpcmVjdF91cmksXG4gICAgICAgIC8vIGRhdGEgd2FzIG1lYW50IHRvIGJlIHRoZSBwbGFjZSBhIGNhbGxlciBjb3VsZCBpbmRpY2F0ZSB0aGUgZGF0YSB0b1xuICAgICAgICAvLyBoYXZlIHJvdW5kIHRyaXBwZWQsIGJ1dCBwZW9wbGUgd2VyZSBnZXR0aW5nIGNvbmZ1c2VkLCBzbyBpIGFkZGVkIHN0YXRlIChzaW5jZSB0aGF0IG1hdGNoZXMgdGhlIHNwZWMpXG4gICAgICAgIC8vIGFuZCBzbyBub3cgaWYgZGF0YSBpcyBub3QgcGFzc2VkLCBidXQgc3RhdGUgaXMgdGhlbiBzdGF0ZSB3aWxsIGJlIHVzZWRcbiAgICAgICAgZGF0YSwgc3RhdGUsIHByb21wdCwgZGlzcGxheSwgbWF4X2FnZSwgdWlfbG9jYWxlcywgaWRfdG9rZW5faGludCwgbG9naW5faGludCwgYWNyX3ZhbHVlcyxcbiAgICAgICAgcmVzb3VyY2UsIHJlcXVlc3QsIHJlcXVlc3RfdXJpLCByZXNwb25zZV9tb2RlLCBleHRyYVF1ZXJ5UGFyYW1zLCBleHRyYVRva2VuUGFyYW1zLCByZXF1ZXN0X3R5cGUsIHNraXBVc2VySW5mbyB9ID0ge30sXG4gICAgICAgIHN0YXRlU3RvcmVcbiAgICApIHtcbiAgICAgICAgTG9nLmRlYnVnKFwiT2lkY0NsaWVudC5jcmVhdGVTaWduaW5SZXF1ZXN0XCIpO1xuXG4gICAgICAgIGxldCBjbGllbnRfaWQgPSB0aGlzLl9zZXR0aW5ncy5jbGllbnRfaWQ7XG4gICAgICAgIHJlc3BvbnNlX3R5cGUgPSByZXNwb25zZV90eXBlIHx8IHRoaXMuX3NldHRpbmdzLnJlc3BvbnNlX3R5cGU7XG4gICAgICAgIHNjb3BlID0gc2NvcGUgfHwgdGhpcy5fc2V0dGluZ3Muc2NvcGU7XG4gICAgICAgIHJlZGlyZWN0X3VyaSA9IHJlZGlyZWN0X3VyaSB8fCB0aGlzLl9zZXR0aW5ncy5yZWRpcmVjdF91cmk7XG5cbiAgICAgICAgLy8gaWRfdG9rZW5faGludCwgbG9naW5faGludCBhcmVuJ3QgYWxsb3dlZCBvbiBfc2V0dGluZ3NcbiAgICAgICAgcHJvbXB0ID0gcHJvbXB0IHx8IHRoaXMuX3NldHRpbmdzLnByb21wdDtcbiAgICAgICAgZGlzcGxheSA9IGRpc3BsYXkgfHwgdGhpcy5fc2V0dGluZ3MuZGlzcGxheTtcbiAgICAgICAgbWF4X2FnZSA9IG1heF9hZ2UgfHwgdGhpcy5fc2V0dGluZ3MubWF4X2FnZTtcbiAgICAgICAgdWlfbG9jYWxlcyA9IHVpX2xvY2FsZXMgfHwgdGhpcy5fc2V0dGluZ3MudWlfbG9jYWxlcztcbiAgICAgICAgYWNyX3ZhbHVlcyA9IGFjcl92YWx1ZXMgfHwgdGhpcy5fc2V0dGluZ3MuYWNyX3ZhbHVlcztcbiAgICAgICAgcmVzb3VyY2UgPSByZXNvdXJjZSB8fCB0aGlzLl9zZXR0aW5ncy5yZXNvdXJjZTtcbiAgICAgICAgcmVzcG9uc2VfbW9kZSA9IHJlc3BvbnNlX21vZGUgfHwgdGhpcy5fc2V0dGluZ3MucmVzcG9uc2VfbW9kZTtcbiAgICAgICAgZXh0cmFRdWVyeVBhcmFtcyA9IGV4dHJhUXVlcnlQYXJhbXMgfHwgdGhpcy5fc2V0dGluZ3MuZXh0cmFRdWVyeVBhcmFtcztcbiAgICAgICAgZXh0cmFUb2tlblBhcmFtcyA9IGV4dHJhVG9rZW5QYXJhbXMgfHwgdGhpcy5fc2V0dGluZ3MuZXh0cmFUb2tlblBhcmFtcztcblxuICAgICAgICBsZXQgYXV0aG9yaXR5ID0gdGhpcy5fc2V0dGluZ3MuYXV0aG9yaXR5O1xuXG4gICAgICAgIGlmIChTaWduaW5SZXF1ZXN0LmlzQ29kZShyZXNwb25zZV90eXBlKSAmJiByZXNwb25zZV90eXBlICE9PSBcImNvZGVcIikge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk9wZW5JRCBDb25uZWN0IGh5YnJpZCBmbG93IGlzIG5vdCBzdXBwb3J0ZWRcIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX21ldGFkYXRhU2VydmljZS5nZXRBdXRob3JpemF0aW9uRW5kcG9pbnQoKS50aGVuKHVybCA9PiB7XG4gICAgICAgICAgICBMb2cuZGVidWcoXCJPaWRjQ2xpZW50LmNyZWF0ZVNpZ25pblJlcXVlc3Q6IFJlY2VpdmVkIGF1dGhvcml6YXRpb24gZW5kcG9pbnRcIiwgdXJsKTtcblxuICAgICAgICAgICAgbGV0IHNpZ25pblJlcXVlc3QgPSBuZXcgU2lnbmluUmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgdXJsLFxuICAgICAgICAgICAgICAgIGNsaWVudF9pZCxcbiAgICAgICAgICAgICAgICByZWRpcmVjdF91cmksXG4gICAgICAgICAgICAgICAgcmVzcG9uc2VfdHlwZSxcbiAgICAgICAgICAgICAgICBzY29wZSxcbiAgICAgICAgICAgICAgICBkYXRhOiBkYXRhIHx8IHN0YXRlLFxuICAgICAgICAgICAgICAgIGF1dGhvcml0eSxcbiAgICAgICAgICAgICAgICBwcm9tcHQsIGRpc3BsYXksIG1heF9hZ2UsIHVpX2xvY2FsZXMsIGlkX3Rva2VuX2hpbnQsIGxvZ2luX2hpbnQsIGFjcl92YWx1ZXMsXG4gICAgICAgICAgICAgICAgcmVzb3VyY2UsIHJlcXVlc3QsIHJlcXVlc3RfdXJpLCBleHRyYVF1ZXJ5UGFyYW1zLCBleHRyYVRva2VuUGFyYW1zLCByZXF1ZXN0X3R5cGUsIHJlc3BvbnNlX21vZGUsXG4gICAgICAgICAgICAgICAgY2xpZW50X3NlY3JldDogdGhpcy5fc2V0dGluZ3MuY2xpZW50X3NlY3JldCxcbiAgICAgICAgICAgICAgICBza2lwVXNlckluZm9cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB2YXIgc2lnbmluU3RhdGUgPSBzaWduaW5SZXF1ZXN0LnN0YXRlO1xuICAgICAgICAgICAgc3RhdGVTdG9yZSA9IHN0YXRlU3RvcmUgfHwgdGhpcy5fc3RhdGVTdG9yZTtcblxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlU3RvcmUuc2V0KHNpZ25pblN0YXRlLmlkLCBzaWduaW5TdGF0ZS50b1N0b3JhZ2VTdHJpbmcoKSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNpZ25pblJlcXVlc3Q7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVhZFNpZ25pblJlc3BvbnNlU3RhdGUodXJsLCBzdGF0ZVN0b3JlLCByZW1vdmVTdGF0ZSA9IGZhbHNlKSB7XG4gICAgICAgIExvZy5kZWJ1ZyhcIk9pZGNDbGllbnQucmVhZFNpZ25pblJlc3BvbnNlU3RhdGVcIik7XG5cbiAgICAgICAgbGV0IHVzZVF1ZXJ5ID0gdGhpcy5fc2V0dGluZ3MucmVzcG9uc2VfbW9kZSA9PT0gXCJxdWVyeVwiIHx8IFxuICAgICAgICAgICAgKCF0aGlzLl9zZXR0aW5ncy5yZXNwb25zZV9tb2RlICYmIFNpZ25pblJlcXVlc3QuaXNDb2RlKHRoaXMuX3NldHRpbmdzLnJlc3BvbnNlX3R5cGUpKTtcbiAgICAgICAgbGV0IGRlbGltaXRlciA9IHVzZVF1ZXJ5ID8gXCI/XCIgOiBcIiNcIjtcblxuICAgICAgICB2YXIgcmVzcG9uc2UgPSBuZXcgU2lnbmluUmVzcG9uc2UodXJsLCBkZWxpbWl0ZXIpO1xuXG4gICAgICAgIGlmICghcmVzcG9uc2Uuc3RhdGUpIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIk9pZGNDbGllbnQucmVhZFNpZ25pblJlc3BvbnNlU3RhdGU6IE5vIHN0YXRlIGluIHJlc3BvbnNlXCIpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIHN0YXRlIGluIHJlc3BvbnNlXCIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlU3RvcmUgPSBzdGF0ZVN0b3JlIHx8IHRoaXMuX3N0YXRlU3RvcmU7XG5cbiAgICAgICAgdmFyIHN0YXRlQXBpID0gcmVtb3ZlU3RhdGUgPyBzdGF0ZVN0b3JlLnJlbW92ZS5iaW5kKHN0YXRlU3RvcmUpIDogc3RhdGVTdG9yZS5nZXQuYmluZChzdGF0ZVN0b3JlKTtcblxuICAgICAgICByZXR1cm4gc3RhdGVBcGkocmVzcG9uc2Uuc3RhdGUpLnRoZW4oc3RvcmVkU3RhdGVTdHJpbmcgPT4ge1xuICAgICAgICAgICAgaWYgKCFzdG9yZWRTdGF0ZVN0cmluZykge1xuICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIk9pZGNDbGllbnQucmVhZFNpZ25pblJlc3BvbnNlU3RhdGU6IE5vIG1hdGNoaW5nIHN0YXRlIGZvdW5kIGluIHN0b3JhZ2VcIik7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gbWF0Y2hpbmcgc3RhdGUgZm91bmQgaW4gc3RvcmFnZVwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IHN0YXRlID0gU2lnbmluU3RhdGUuZnJvbVN0b3JhZ2VTdHJpbmcoc3RvcmVkU3RhdGVTdHJpbmcpO1xuICAgICAgICAgICAgcmV0dXJuIHtzdGF0ZSwgcmVzcG9uc2V9O1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcm9jZXNzU2lnbmluUmVzcG9uc2UodXJsLCBzdGF0ZVN0b3JlKSB7XG4gICAgICAgIExvZy5kZWJ1ZyhcIk9pZGNDbGllbnQucHJvY2Vzc1NpZ25pblJlc3BvbnNlXCIpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLnJlYWRTaWduaW5SZXNwb25zZVN0YXRlKHVybCwgc3RhdGVTdG9yZSwgdHJ1ZSkudGhlbigoe3N0YXRlLCByZXNwb25zZX0pID0+IHtcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIk9pZGNDbGllbnQucHJvY2Vzc1NpZ25pblJlc3BvbnNlOiBSZWNlaXZlZCBzdGF0ZSBmcm9tIHN0b3JhZ2U7IHZhbGlkYXRpbmcgcmVzcG9uc2VcIik7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdmFsaWRhdG9yLnZhbGlkYXRlU2lnbmluUmVzcG9uc2Uoc3RhdGUsIHJlc3BvbnNlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY3JlYXRlU2lnbm91dFJlcXVlc3Qoe2lkX3Rva2VuX2hpbnQsIGRhdGEsIHN0YXRlLCBwb3N0X2xvZ291dF9yZWRpcmVjdF91cmksIGV4dHJhUXVlcnlQYXJhbXMsIHJlcXVlc3RfdHlwZSB9ID0ge30sXG4gICAgICAgIHN0YXRlU3RvcmVcbiAgICApIHtcbiAgICAgICAgTG9nLmRlYnVnKFwiT2lkY0NsaWVudC5jcmVhdGVTaWdub3V0UmVxdWVzdFwiKTtcblxuICAgICAgICBwb3N0X2xvZ291dF9yZWRpcmVjdF91cmkgPSBwb3N0X2xvZ291dF9yZWRpcmVjdF91cmkgfHwgdGhpcy5fc2V0dGluZ3MucG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpO1xuICAgICAgICBleHRyYVF1ZXJ5UGFyYW1zID0gZXh0cmFRdWVyeVBhcmFtcyB8fCB0aGlzLl9zZXR0aW5ncy5leHRyYVF1ZXJ5UGFyYW1zO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9tZXRhZGF0YVNlcnZpY2UuZ2V0RW5kU2Vzc2lvbkVuZHBvaW50KCkudGhlbih1cmwgPT4ge1xuICAgICAgICAgICAgaWYgKCF1cmwpIHtcbiAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJPaWRjQ2xpZW50LmNyZWF0ZVNpZ25vdXRSZXF1ZXN0OiBObyBlbmQgc2Vzc2lvbiBlbmRwb2ludCB1cmwgcmV0dXJuZWRcIik7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm8gZW5kIHNlc3Npb24gZW5kcG9pbnRcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIk9pZGNDbGllbnQuY3JlYXRlU2lnbm91dFJlcXVlc3Q6IFJlY2VpdmVkIGVuZCBzZXNzaW9uIGVuZHBvaW50XCIsIHVybCk7XG5cbiAgICAgICAgICAgIGxldCByZXF1ZXN0ID0gbmV3IFNpZ25vdXRSZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICB1cmwsXG4gICAgICAgICAgICAgICAgaWRfdG9rZW5faGludCxcbiAgICAgICAgICAgICAgICBwb3N0X2xvZ291dF9yZWRpcmVjdF91cmksXG4gICAgICAgICAgICAgICAgZGF0YTogZGF0YSB8fCBzdGF0ZSxcbiAgICAgICAgICAgICAgICBleHRyYVF1ZXJ5UGFyYW1zLFxuICAgICAgICAgICAgICAgIHJlcXVlc3RfdHlwZVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHZhciBzaWdub3V0U3RhdGUgPSByZXF1ZXN0LnN0YXRlO1xuICAgICAgICAgICAgaWYgKHNpZ25vdXRTdGF0ZSkge1xuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIk9pZGNDbGllbnQuY3JlYXRlU2lnbm91dFJlcXVlc3Q6IFNpZ25vdXQgcmVxdWVzdCBoYXMgc3RhdGUgdG8gcGVyc2lzdFwiKTtcblxuICAgICAgICAgICAgICAgIHN0YXRlU3RvcmUgPSBzdGF0ZVN0b3JlIHx8IHRoaXMuX3N0YXRlU3RvcmU7XG4gICAgICAgICAgICAgICAgc3RhdGVTdG9yZS5zZXQoc2lnbm91dFN0YXRlLmlkLCBzaWdub3V0U3RhdGUudG9TdG9yYWdlU3RyaW5nKCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVxdWVzdDtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVhZFNpZ25vdXRSZXNwb25zZVN0YXRlKHVybCwgc3RhdGVTdG9yZSwgcmVtb3ZlU3RhdGUgPSBmYWxzZSkge1xuICAgICAgICBMb2cuZGVidWcoXCJPaWRjQ2xpZW50LnJlYWRTaWdub3V0UmVzcG9uc2VTdGF0ZVwiKTtcblxuICAgICAgICB2YXIgcmVzcG9uc2UgPSBuZXcgU2lnbm91dFJlc3BvbnNlKHVybCk7XG4gICAgICAgIGlmICghcmVzcG9uc2Uuc3RhdGUpIHtcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIk9pZGNDbGllbnQucmVhZFNpZ25vdXRSZXNwb25zZVN0YXRlOiBObyBzdGF0ZSBpbiByZXNwb25zZVwiKTtcblxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgTG9nLndhcm4oXCJPaWRjQ2xpZW50LnJlYWRTaWdub3V0UmVzcG9uc2VTdGF0ZTogUmVzcG9uc2Ugd2FzIGVycm9yOiBcIiwgcmVzcG9uc2UuZXJyb3IpO1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3JSZXNwb25zZShyZXNwb25zZSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHtzdGF0ZTogdW5kZWZpbmVkLCByZXNwb25zZX0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHN0YXRlS2V5ID0gcmVzcG9uc2Uuc3RhdGU7XG5cbiAgICAgICAgc3RhdGVTdG9yZSA9IHN0YXRlU3RvcmUgfHwgdGhpcy5fc3RhdGVTdG9yZTtcblxuICAgICAgICB2YXIgc3RhdGVBcGkgPSByZW1vdmVTdGF0ZSA/IHN0YXRlU3RvcmUucmVtb3ZlLmJpbmQoc3RhdGVTdG9yZSkgOiBzdGF0ZVN0b3JlLmdldC5iaW5kKHN0YXRlU3RvcmUpO1xuICAgICAgICByZXR1cm4gc3RhdGVBcGkoc3RhdGVLZXkpLnRoZW4oc3RvcmVkU3RhdGVTdHJpbmcgPT4ge1xuICAgICAgICAgICAgaWYgKCFzdG9yZWRTdGF0ZVN0cmluZykge1xuICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIk9pZGNDbGllbnQucmVhZFNpZ25vdXRSZXNwb25zZVN0YXRlOiBObyBtYXRjaGluZyBzdGF0ZSBmb3VuZCBpbiBzdG9yYWdlXCIpO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIG1hdGNoaW5nIHN0YXRlIGZvdW5kIGluIHN0b3JhZ2VcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBzdGF0ZSA9IFN0YXRlLmZyb21TdG9yYWdlU3RyaW5nKHN0b3JlZFN0YXRlU3RyaW5nKTtcblxuICAgICAgICAgICAgcmV0dXJuIHtzdGF0ZSwgcmVzcG9uc2V9O1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcm9jZXNzU2lnbm91dFJlc3BvbnNlKHVybCwgc3RhdGVTdG9yZSkge1xuICAgICAgICBMb2cuZGVidWcoXCJPaWRjQ2xpZW50LnByb2Nlc3NTaWdub3V0UmVzcG9uc2VcIik7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMucmVhZFNpZ25vdXRSZXNwb25zZVN0YXRlKHVybCwgc3RhdGVTdG9yZSwgdHJ1ZSkudGhlbigoe3N0YXRlLCByZXNwb25zZX0pID0+IHtcbiAgICAgICAgICAgIGlmIChzdGF0ZSkge1xuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIk9pZGNDbGllbnQucHJvY2Vzc1NpZ25vdXRSZXNwb25zZTogUmVjZWl2ZWQgc3RhdGUgZnJvbSBzdG9yYWdlOyB2YWxpZGF0aW5nIHJlc3BvbnNlXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl92YWxpZGF0b3IudmFsaWRhdGVTaWdub3V0UmVzcG9uc2Uoc3RhdGUsIHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIk9pZGNDbGllbnQucHJvY2Vzc1NpZ25vdXRSZXNwb25zZTogTm8gc3RhdGUgZnJvbSBzdG9yYWdlOyBza2lwcGluZyB2YWxpZGF0aW5nIHJlc3BvbnNlXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY2xlYXJTdGFsZVN0YXRlKHN0YXRlU3RvcmUpIHtcbiAgICAgICAgTG9nLmRlYnVnKFwiT2lkY0NsaWVudC5jbGVhclN0YWxlU3RhdGVcIik7XG5cbiAgICAgICAgc3RhdGVTdG9yZSA9IHN0YXRlU3RvcmUgfHwgdGhpcy5fc3RhdGVTdG9yZTtcblxuICAgICAgICByZXR1cm4gU3RhdGUuY2xlYXJTdGFsZVN0YXRlKHN0YXRlU3RvcmUsIHRoaXMuc2V0dGluZ3Muc3RhbGVTdGF0ZUFnZSk7XG4gICAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cuanMnO1xuaW1wb3J0IHsgQ2xvY2tTZXJ2aWNlIH0gZnJvbSAnLi9DbG9ja1NlcnZpY2UuanMnO1xuaW1wb3J0IHsgV2ViU3RvcmFnZVN0YXRlU3RvcmUgfSBmcm9tICcuL1dlYlN0b3JhZ2VTdGF0ZVN0b3JlLmpzJztcbmltcG9ydCB7IFJlc3BvbnNlVmFsaWRhdG9yIH0gZnJvbSAnLi9SZXNwb25zZVZhbGlkYXRvci5qcyc7XG5pbXBvcnQgeyBNZXRhZGF0YVNlcnZpY2UgfSBmcm9tICcuL01ldGFkYXRhU2VydmljZS5qcyc7XG5cbmNvbnN0IE9pZGNNZXRhZGF0YVVybFBhdGggPSAnLndlbGwta25vd24vb3BlbmlkLWNvbmZpZ3VyYXRpb24nO1xuXG5jb25zdCBEZWZhdWx0UmVzcG9uc2VUeXBlID0gXCJpZF90b2tlblwiO1xuY29uc3QgRGVmYXVsdFNjb3BlID0gXCJvcGVuaWRcIjtcbmNvbnN0IERlZmF1bHRDbGllbnRBdXRoZW50aWNhdGlvbiA9IFwiY2xpZW50X3NlY3JldF9wb3N0XCIgLy8gVGhlIGRlZmF1bHQgdmFsdWUgbXVzdCBiZSBjbGllbnRfc2VjcmV0X2Jhc2ljLCBhcyBleHBsYWluZWQgaW4gaHR0cHM6Ly9vcGVuaWQubmV0L3NwZWNzL29wZW5pZC1jb25uZWN0LWNvcmUtMV8wLmh0bWwjQ2xpZW50QXV0aGVudGljYXRpb25cbmNvbnN0IERlZmF1bHRTdGFsZVN0YXRlQWdlID0gNjAgKiAxNTsgLy8gc2Vjb25kc1xuY29uc3QgRGVmYXVsdENsb2NrU2tld0luU2Vjb25kcyA9IDYwICogNTtcblxuZXhwb3J0IGNsYXNzIE9pZGNDbGllbnRTZXR0aW5ncyB7XG4gICAgY29uc3RydWN0b3Ioe1xuICAgICAgICAvLyBtZXRhZGF0YSByZWxhdGVkXG4gICAgICAgIGF1dGhvcml0eSwgbWV0YWRhdGFVcmwsIG1ldGFkYXRhLCBzaWduaW5nS2V5cywgbWV0YWRhdGFTZWVkLFxuICAgICAgICAvLyBjbGllbnQgcmVsYXRlZFxuICAgICAgICBjbGllbnRfaWQsIGNsaWVudF9zZWNyZXQsIHJlc3BvbnNlX3R5cGUgPSBEZWZhdWx0UmVzcG9uc2VUeXBlLCBzY29wZSA9IERlZmF1bHRTY29wZSxcbiAgICAgICAgcmVkaXJlY3RfdXJpLCBwb3N0X2xvZ291dF9yZWRpcmVjdF91cmksXG4gICAgICAgIGNsaWVudF9hdXRoZW50aWNhdGlvbiA9IERlZmF1bHRDbGllbnRBdXRoZW50aWNhdGlvbixcbiAgICAgICAgLy8gb3B0aW9uYWwgcHJvdG9jb2xcbiAgICAgICAgcHJvbXB0LCBkaXNwbGF5LCBtYXhfYWdlLCB1aV9sb2NhbGVzLCBhY3JfdmFsdWVzLCByZXNvdXJjZSwgcmVzcG9uc2VfbW9kZSxcbiAgICAgICAgLy8gYmVoYXZpb3IgZmxhZ3NcbiAgICAgICAgZmlsdGVyUHJvdG9jb2xDbGFpbXMgPSB0cnVlLCBsb2FkVXNlckluZm8gPSB0cnVlLFxuICAgICAgICBzdGFsZVN0YXRlQWdlID0gRGVmYXVsdFN0YWxlU3RhdGVBZ2UsIFxuICAgICAgICBjbG9ja1NrZXcgPSBEZWZhdWx0Q2xvY2tTa2V3SW5TZWNvbmRzLFxuICAgICAgICBjbG9ja1NlcnZpY2UgPSBuZXcgQ2xvY2tTZXJ2aWNlKCksXG4gICAgICAgIHVzZXJJbmZvSnd0SXNzdWVyID0gJ09QJyxcbiAgICAgICAgbWVyZ2VDbGFpbXMgPSBmYWxzZSxcbiAgICAgICAgLy8gb3RoZXIgYmVoYXZpb3JcbiAgICAgICAgc3RhdGVTdG9yZSA9IG5ldyBXZWJTdG9yYWdlU3RhdGVTdG9yZSgpLFxuICAgICAgICBSZXNwb25zZVZhbGlkYXRvckN0b3IgPSBSZXNwb25zZVZhbGlkYXRvcixcbiAgICAgICAgTWV0YWRhdGFTZXJ2aWNlQ3RvciA9IE1ldGFkYXRhU2VydmljZSxcbiAgICAgICAgLy8gZXh0cmEgcXVlcnkgcGFyYW1zXG4gICAgICAgIGV4dHJhUXVlcnlQYXJhbXMgPSB7fSxcbiAgICAgICAgZXh0cmFUb2tlblBhcmFtcyA9IHt9XG4gICAgfSA9IHt9KSB7XG5cbiAgICAgICAgdGhpcy5fYXV0aG9yaXR5ID0gYXV0aG9yaXR5O1xuICAgICAgICB0aGlzLl9tZXRhZGF0YVVybCA9IG1ldGFkYXRhVXJsO1xuICAgICAgICB0aGlzLl9tZXRhZGF0YSA9IG1ldGFkYXRhO1xuICAgICAgICB0aGlzLl9tZXRhZGF0YVNlZWQgPSBtZXRhZGF0YVNlZWQ7XG4gICAgICAgIHRoaXMuX3NpZ25pbmdLZXlzID0gc2lnbmluZ0tleXM7XG5cbiAgICAgICAgdGhpcy5fY2xpZW50X2lkID0gY2xpZW50X2lkO1xuICAgICAgICB0aGlzLl9jbGllbnRfc2VjcmV0ID0gY2xpZW50X3NlY3JldDtcbiAgICAgICAgdGhpcy5fcmVzcG9uc2VfdHlwZSA9IHJlc3BvbnNlX3R5cGU7XG4gICAgICAgIHRoaXMuX3Njb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuX3JlZGlyZWN0X3VyaSA9IHJlZGlyZWN0X3VyaTtcbiAgICAgICAgdGhpcy5fcG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpID0gcG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpO1xuICAgICAgICB0aGlzLl9jbGllbnRfYXV0aGVudGljYXRpb24gPSBjbGllbnRfYXV0aGVudGljYXRpb247XG5cbiAgICAgICAgdGhpcy5fcHJvbXB0ID0gcHJvbXB0O1xuICAgICAgICB0aGlzLl9kaXNwbGF5ID0gZGlzcGxheTtcbiAgICAgICAgdGhpcy5fbWF4X2FnZSA9IG1heF9hZ2U7XG4gICAgICAgIHRoaXMuX3VpX2xvY2FsZXMgPSB1aV9sb2NhbGVzO1xuICAgICAgICB0aGlzLl9hY3JfdmFsdWVzID0gYWNyX3ZhbHVlcztcbiAgICAgICAgdGhpcy5fcmVzb3VyY2UgPSByZXNvdXJjZTtcbiAgICAgICAgdGhpcy5fcmVzcG9uc2VfbW9kZSA9IHJlc3BvbnNlX21vZGU7XG5cbiAgICAgICAgdGhpcy5fZmlsdGVyUHJvdG9jb2xDbGFpbXMgPSAhIWZpbHRlclByb3RvY29sQ2xhaW1zO1xuICAgICAgICB0aGlzLl9sb2FkVXNlckluZm8gPSAhIWxvYWRVc2VySW5mbztcbiAgICAgICAgdGhpcy5fc3RhbGVTdGF0ZUFnZSA9IHN0YWxlU3RhdGVBZ2U7XG4gICAgICAgIHRoaXMuX2Nsb2NrU2tldyA9IGNsb2NrU2tldztcbiAgICAgICAgdGhpcy5fY2xvY2tTZXJ2aWNlID0gY2xvY2tTZXJ2aWNlO1xuICAgICAgICB0aGlzLl91c2VySW5mb0p3dElzc3VlciA9IHVzZXJJbmZvSnd0SXNzdWVyO1xuICAgICAgICB0aGlzLl9tZXJnZUNsYWltcyA9ICEhbWVyZ2VDbGFpbXM7XG5cbiAgICAgICAgdGhpcy5fc3RhdGVTdG9yZSA9IHN0YXRlU3RvcmU7XG4gICAgICAgIHRoaXMuX3ZhbGlkYXRvciA9IG5ldyBSZXNwb25zZVZhbGlkYXRvckN0b3IodGhpcyk7XG4gICAgICAgIHRoaXMuX21ldGFkYXRhU2VydmljZSA9IG5ldyBNZXRhZGF0YVNlcnZpY2VDdG9yKHRoaXMpO1xuXG4gICAgICAgIHRoaXMuX2V4dHJhUXVlcnlQYXJhbXMgPSB0eXBlb2YgZXh0cmFRdWVyeVBhcmFtcyA9PT0gJ29iamVjdCcgPyBleHRyYVF1ZXJ5UGFyYW1zIDoge307XG4gICAgICAgIHRoaXMuX2V4dHJhVG9rZW5QYXJhbXMgPSB0eXBlb2YgZXh0cmFUb2tlblBhcmFtcyA9PT0gJ29iamVjdCcgPyBleHRyYVRva2VuUGFyYW1zIDoge307XG4gICAgfVxuXG4gICAgLy8gY2xpZW50IGNvbmZpZ1xuICAgIGdldCBjbGllbnRfaWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnRfaWQ7XG4gICAgfVxuICAgIHNldCBjbGllbnRfaWQodmFsdWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9jbGllbnRfaWQpIHtcbiAgICAgICAgICAgIC8vIG9uZS10aW1lIHNldCBvbmx5XG4gICAgICAgICAgICB0aGlzLl9jbGllbnRfaWQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIk9pZGNDbGllbnRTZXR0aW5ncy5zZXRfY2xpZW50X2lkOiBjbGllbnRfaWQgaGFzIGFscmVhZHkgYmVlbiBhc3NpZ25lZC5cIilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImNsaWVudF9pZCBoYXMgYWxyZWFkeSBiZWVuIGFzc2lnbmVkLlwiKVxuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBjbGllbnRfc2VjcmV0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50X3NlY3JldDtcbiAgICB9XG4gICAgZ2V0IHJlc3BvbnNlX3R5cGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXNwb25zZV90eXBlO1xuICAgIH1cbiAgICBnZXQgc2NvcGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zY29wZTtcbiAgICB9XG4gICAgZ2V0IHJlZGlyZWN0X3VyaSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlZGlyZWN0X3VyaTtcbiAgICB9XG4gICAgZ2V0IHBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Bvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaTtcbiAgICB9XG4gICAgZ2V0IGNsaWVudF9hdXRoZW50aWNhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudF9hdXRoZW50aWNhdGlvbjtcbiAgICB9XG4gICAgXG5cbiAgICAvLyBvcHRpb25hbCBwcm90b2NvbCBwYXJhbXNcbiAgICBnZXQgcHJvbXB0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJvbXB0O1xuICAgIH1cbiAgICBnZXQgZGlzcGxheSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Rpc3BsYXk7XG4gICAgfVxuICAgIGdldCBtYXhfYWdlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWF4X2FnZTtcbiAgICB9XG4gICAgZ2V0IHVpX2xvY2FsZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl91aV9sb2NhbGVzO1xuICAgIH1cbiAgICBnZXQgYWNyX3ZhbHVlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Fjcl92YWx1ZXM7XG4gICAgfVxuICAgIGdldCByZXNvdXJjZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc291cmNlO1xuICAgIH1cbiAgICBnZXQgcmVzcG9uc2VfbW9kZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc3BvbnNlX21vZGU7XG4gICAgfVxuXG5cbiAgICAvLyBtZXRhZGF0YVxuICAgIGdldCBhdXRob3JpdHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hdXRob3JpdHk7XG4gICAgfVxuICAgIHNldCBhdXRob3JpdHkodmFsdWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9hdXRob3JpdHkpIHtcbiAgICAgICAgICAgIC8vIG9uZS10aW1lIHNldCBvbmx5XG4gICAgICAgICAgICB0aGlzLl9hdXRob3JpdHkgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIk9pZGNDbGllbnRTZXR0aW5ncy5zZXRfYXV0aG9yaXR5OiBhdXRob3JpdHkgaGFzIGFscmVhZHkgYmVlbiBhc3NpZ25lZC5cIilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImF1dGhvcml0eSBoYXMgYWxyZWFkeSBiZWVuIGFzc2lnbmVkLlwiKVxuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBtZXRhZGF0YVVybCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9tZXRhZGF0YVVybCkge1xuICAgICAgICAgICAgdGhpcy5fbWV0YWRhdGFVcmwgPSB0aGlzLmF1dGhvcml0eTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuX21ldGFkYXRhVXJsICYmIHRoaXMuX21ldGFkYXRhVXJsLmluZGV4T2YoT2lkY01ldGFkYXRhVXJsUGF0aCkgPCAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX21ldGFkYXRhVXJsW3RoaXMuX21ldGFkYXRhVXJsLmxlbmd0aCAtIDFdICE9PSAnLycpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWV0YWRhdGFVcmwgKz0gJy8nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9tZXRhZGF0YVVybCArPSBPaWRjTWV0YWRhdGFVcmxQYXRoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX21ldGFkYXRhVXJsO1xuICAgIH1cblxuICAgIC8vIHNldHRhYmxlL2NhY2hhYmxlIG1ldGFkYXRhIHZhbHVlc1xuICAgIGdldCBtZXRhZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21ldGFkYXRhO1xuICAgIH1cbiAgICBzZXQgbWV0YWRhdGEodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fbWV0YWRhdGEgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IG1ldGFkYXRhU2VlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21ldGFkYXRhU2VlZDtcbiAgICB9XG4gICAgc2V0IG1ldGFkYXRhU2VlZCh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9tZXRhZGF0YVNlZWQgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBnZXQgc2lnbmluZ0tleXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zaWduaW5nS2V5cztcbiAgICB9XG4gICAgc2V0IHNpZ25pbmdLZXlzKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3NpZ25pbmdLZXlzID0gdmFsdWU7XG4gICAgfVxuXG4gICAgLy8gYmVoYXZpb3IgZmxhZ3NcbiAgICBnZXQgZmlsdGVyUHJvdG9jb2xDbGFpbXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9maWx0ZXJQcm90b2NvbENsYWltcztcbiAgICB9XG4gICAgZ2V0IGxvYWRVc2VySW5mbygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvYWRVc2VySW5mbztcbiAgICB9XG4gICAgZ2V0IHN0YWxlU3RhdGVBZ2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGFsZVN0YXRlQWdlO1xuICAgIH1cbiAgICBnZXQgY2xvY2tTa2V3KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xvY2tTa2V3O1xuICAgIH1cbiAgICBnZXQgdXNlckluZm9Kd3RJc3N1ZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl91c2VySW5mb0p3dElzc3VlcjtcbiAgICB9XG4gICAgZ2V0IG1lcmdlQ2xhaW1zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWVyZ2VDbGFpbXM7XG4gICAgfVxuICAgIFxuICAgIGdldCBzdGF0ZVN0b3JlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RhdGVTdG9yZTtcbiAgICB9XG4gICAgZ2V0IHZhbGlkYXRvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbGlkYXRvcjtcbiAgICB9XG4gICAgZ2V0IG1ldGFkYXRhU2VydmljZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21ldGFkYXRhU2VydmljZTtcbiAgICB9XG5cbiAgICAvLyBleHRyYSBxdWVyeSBwYXJhbXNcbiAgICBnZXQgZXh0cmFRdWVyeVBhcmFtcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4dHJhUXVlcnlQYXJhbXM7XG4gICAgfVxuICAgIHNldCBleHRyYVF1ZXJ5UGFyYW1zKHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKXtcbiAgICAgICAgICAgIHRoaXMuX2V4dHJhUXVlcnlQYXJhbXMgPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2V4dHJhUXVlcnlQYXJhbXMgPSB7fTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGV4dHJhIHRva2VuIHBhcmFtc1xuICAgIGdldCBleHRyYVRva2VuUGFyYW1zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXh0cmFUb2tlblBhcmFtcztcbiAgICB9XG4gICAgc2V0IGV4dHJhVG9rZW5QYXJhbXModmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpe1xuICAgICAgICAgICAgdGhpcy5fZXh0cmFUb2tlblBhcmFtcyA9IHZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZXh0cmFUb2tlblBhcmFtcyA9IHt9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gZ2V0IHRoZSB0aW1lXG4gICAgZ2V0RXBvY2hUaW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xvY2tTZXJ2aWNlLmdldEVwb2NoVGltZSgpO1xuICAgIH1cbn1cbiIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nLmpzJztcbmltcG9ydCB7IFBvcHVwV2luZG93IH0gZnJvbSAnLi9Qb3B1cFdpbmRvdy5qcyc7XG5cbmV4cG9ydCBjbGFzcyBQb3B1cE5hdmlnYXRvciB7XG5cbiAgICBwcmVwYXJlKHBhcmFtcykge1xuICAgICAgICBsZXQgcG9wdXAgPSBuZXcgUG9wdXBXaW5kb3cocGFyYW1zKTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShwb3B1cCk7XG4gICAgfVxuXG4gICAgY2FsbGJhY2sodXJsLCBrZWVwT3BlbiwgZGVsaW1pdGVyKSB7XG4gICAgICAgIExvZy5kZWJ1ZyhcIlBvcHVwTmF2aWdhdG9yLmNhbGxiYWNrXCIpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBQb3B1cFdpbmRvdy5ub3RpZnlPcGVuZXIodXJsLCBrZWVwT3BlbiwgZGVsaW1pdGVyKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGUpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cuanMnO1xuaW1wb3J0IHsgVXJsVXRpbGl0eSB9IGZyb20gJy4vVXJsVXRpbGl0eS5qcyc7XG5cbmNvbnN0IENoZWNrRm9yUG9wdXBDbG9zZWRJbnRlcnZhbCA9IDUwMDtcbmNvbnN0IERlZmF1bHRQb3B1cEZlYXR1cmVzID0gJ2xvY2F0aW9uPW5vLHRvb2xiYXI9bm8sd2lkdGg9NTAwLGhlaWdodD01MDAsbGVmdD0xMDAsdG9wPTEwMDsnO1xuLy9jb25zdCBEZWZhdWx0UG9wdXBGZWF0dXJlcyA9ICdsb2NhdGlvbj1ubyx0b29sYmFyPW5vLHdpZHRoPTUwMCxoZWlnaHQ9NTAwLGxlZnQ9MTAwLHRvcD0xMDA7cmVzaXphYmxlPXllcyc7XG5cbmNvbnN0IERlZmF1bHRQb3B1cFRhcmdldCA9IFwiX2JsYW5rXCI7XG5cbmV4cG9ydCBjbGFzcyBQb3B1cFdpbmRvdyB7XG5cbiAgICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcbiAgICAgICAgdGhpcy5fcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgICAgICAgICAgdGhpcy5fcmVqZWN0ID0gcmVqZWN0O1xuICAgICAgICB9KTtcblxuICAgICAgICBsZXQgdGFyZ2V0ID0gcGFyYW1zLnBvcHVwV2luZG93VGFyZ2V0IHx8IERlZmF1bHRQb3B1cFRhcmdldDtcbiAgICAgICAgbGV0IGZlYXR1cmVzID0gcGFyYW1zLnBvcHVwV2luZG93RmVhdHVyZXMgfHwgRGVmYXVsdFBvcHVwRmVhdHVyZXM7XG5cbiAgICAgICAgdGhpcy5fcG9wdXAgPSB3aW5kb3cub3BlbignJywgdGFyZ2V0LCBmZWF0dXJlcyk7XG4gICAgICAgIGlmICh0aGlzLl9wb3B1cCkge1xuICAgICAgICAgICAgTG9nLmRlYnVnKFwiUG9wdXBXaW5kb3cuY3RvcjogcG9wdXAgc3VjY2Vzc2Z1bGx5IGNyZWF0ZWRcIik7XG4gICAgICAgICAgICB0aGlzLl9jaGVja0ZvclBvcHVwQ2xvc2VkVGltZXIgPSB3aW5kb3cuc2V0SW50ZXJ2YWwodGhpcy5fY2hlY2tGb3JQb3B1cENsb3NlZC5iaW5kKHRoaXMpLCBDaGVja0ZvclBvcHVwQ2xvc2VkSW50ZXJ2YWwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IHByb21pc2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcm9taXNlO1xuICAgIH1cblxuICAgIG5hdmlnYXRlKHBhcmFtcykge1xuICAgICAgICBpZiAoIXRoaXMuX3BvcHVwKSB7XG4gICAgICAgICAgICB0aGlzLl9lcnJvcihcIlBvcHVwV2luZG93Lm5hdmlnYXRlOiBFcnJvciBvcGVuaW5nIHBvcHVwIHdpbmRvd1wiKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghcGFyYW1zIHx8ICFwYXJhbXMudXJsKSB7XG4gICAgICAgICAgICB0aGlzLl9lcnJvcihcIlBvcHVwV2luZG93Lm5hdmlnYXRlOiBubyB1cmwgcHJvdmlkZWRcIik7XG4gICAgICAgICAgICB0aGlzLl9lcnJvcihcIk5vIHVybCBwcm92aWRlZFwiKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlBvcHVwV2luZG93Lm5hdmlnYXRlOiBTZXR0aW5nIFVSTCBpbiBwb3B1cFwiKTtcblxuICAgICAgICAgICAgdGhpcy5faWQgPSBwYXJhbXMuaWQ7XG4gICAgICAgICAgICBpZiAodGhpcy5faWQpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3dbXCJwb3B1cENhbGxiYWNrX1wiICsgcGFyYW1zLmlkXSA9IHRoaXMuX2NhbGxiYWNrLmJpbmQodGhpcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX3BvcHVwLmZvY3VzKCk7XG4gICAgICAgICAgICB0aGlzLl9wb3B1cC53aW5kb3cubG9jYXRpb24gPSBwYXJhbXMudXJsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMucHJvbWlzZTtcbiAgICB9XG5cbiAgICBfc3VjY2VzcyhkYXRhKSB7XG4gICAgICAgIExvZy5kZWJ1ZyhcIlBvcHVwV2luZG93LmNhbGxiYWNrOiBTdWNjZXNzZnVsIHJlc3BvbnNlIGZyb20gcG9wdXAgd2luZG93XCIpO1xuXG4gICAgICAgIHRoaXMuX2NsZWFudXAoKTtcbiAgICAgICAgdGhpcy5fcmVzb2x2ZShkYXRhKTtcbiAgICB9XG4gICAgX2Vycm9yKG1lc3NhZ2UpIHtcbiAgICAgICAgTG9nLmVycm9yKFwiUG9wdXBXaW5kb3cuZXJyb3I6IFwiLCBtZXNzYWdlKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2NsZWFudXAoKTtcbiAgICAgICAgdGhpcy5fcmVqZWN0KG5ldyBFcnJvcihtZXNzYWdlKSk7XG4gICAgfVxuXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMuX2NsZWFudXAoZmFsc2UpO1xuICAgIH1cblxuICAgIF9jbGVhbnVwKGtlZXBPcGVuKSB7XG4gICAgICAgIExvZy5kZWJ1ZyhcIlBvcHVwV2luZG93LmNsZWFudXBcIik7XG5cbiAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwodGhpcy5fY2hlY2tGb3JQb3B1cENsb3NlZFRpbWVyKTtcbiAgICAgICAgdGhpcy5fY2hlY2tGb3JQb3B1cENsb3NlZFRpbWVyID0gbnVsbDtcblxuICAgICAgICBkZWxldGUgd2luZG93W1wicG9wdXBDYWxsYmFja19cIiArIHRoaXMuX2lkXTtcblxuICAgICAgICBpZiAodGhpcy5fcG9wdXAgJiYgIWtlZXBPcGVuKSB7XG4gICAgICAgICAgICB0aGlzLl9wb3B1cC5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3BvcHVwID0gbnVsbDtcbiAgICB9XG5cbiAgICBfY2hlY2tGb3JQb3B1cENsb3NlZCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9wb3B1cCB8fCB0aGlzLl9wb3B1cC5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yKFwiUG9wdXAgd2luZG93IGNsb3NlZFwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9jYWxsYmFjayh1cmwsIGtlZXBPcGVuKSB7XG4gICAgICAgIHRoaXMuX2NsZWFudXAoa2VlcE9wZW4pO1xuXG4gICAgICAgIGlmICh1cmwpIHtcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlBvcHVwV2luZG93LmNhbGxiYWNrIHN1Y2Nlc3NcIik7XG4gICAgICAgICAgICB0aGlzLl9zdWNjZXNzKHsgdXJsOiB1cmwgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBMb2cuZGVidWcoXCJQb3B1cFdpbmRvdy5jYWxsYmFjazogSW52YWxpZCByZXNwb25zZSBmcm9tIHBvcHVwXCIpO1xuICAgICAgICAgICAgdGhpcy5fZXJyb3IoXCJJbnZhbGlkIHJlc3BvbnNlIGZyb20gcG9wdXBcIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgbm90aWZ5T3BlbmVyKHVybCwga2VlcE9wZW4sIGRlbGltaXRlcikge1xuICAgICAgICBpZiAod2luZG93Lm9wZW5lcikge1xuICAgICAgICAgICAgdXJsID0gdXJsIHx8IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgICAgICAgICAgaWYgKHVybCkge1xuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gVXJsVXRpbGl0eS5wYXJzZVVybEZyYWdtZW50KHVybCwgZGVsaW1pdGVyKTtcblxuICAgICAgICAgICAgICAgIGlmIChkYXRhLnN0YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuYW1lID0gXCJwb3B1cENhbGxiYWNrX1wiICsgZGF0YS5zdGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gd2luZG93Lm9wZW5lcltuYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJQb3B1cFdpbmRvdy5ub3RpZnlPcGVuZXI6IHBhc3NpbmcgdXJsIG1lc3NhZ2UgdG8gb3BlbmVyXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sodXJsLCBrZWVwT3Blbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBMb2cud2FybihcIlBvcHVwV2luZG93Lm5vdGlmeU9wZW5lcjogbm8gbWF0Y2hpbmcgY2FsbGJhY2sgZm91bmQgb24gb3BlbmVyXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBMb2cud2FybihcIlBvcHVwV2luZG93Lm5vdGlmeU9wZW5lcjogbm8gc3RhdGUgZm91bmQgaW4gcmVzcG9uc2UgdXJsXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIExvZy53YXJuKFwiUG9wdXBXaW5kb3cubm90aWZ5T3BlbmVyOiBubyB3aW5kb3cub3BlbmVyLiBDYW4ndCBjb21wbGV0ZSBub3RpZmljYXRpb24uXCIpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cuanMnO1xuXG5leHBvcnQgY2xhc3MgUmVkaXJlY3ROYXZpZ2F0b3Ige1xuXG4gICAgcHJlcGFyZSgpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzKTtcbiAgICB9XG5cbiAgICBuYXZpZ2F0ZShwYXJhbXMpIHtcbiAgICAgICAgaWYgKCFwYXJhbXMgfHwgIXBhcmFtcy51cmwpIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlJlZGlyZWN0TmF2aWdhdG9yLm5hdmlnYXRlOiBObyB1cmwgcHJvdmlkZWRcIik7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gdXJsIHByb3ZpZGVkXCIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXJhbXMudXNlUmVwbGFjZVRvTmF2aWdhdGUpIHtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHBhcmFtcy51cmwpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uID0gcGFyYW1zLnVybDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICBnZXQgdXJsKCkge1xuICAgICAgICByZXR1cm4gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gICAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cuanMnO1xuaW1wb3J0IHsgTWV0YWRhdGFTZXJ2aWNlIH0gZnJvbSAnLi9NZXRhZGF0YVNlcnZpY2UuanMnO1xuaW1wb3J0IHsgVXNlckluZm9TZXJ2aWNlIH0gZnJvbSAnLi9Vc2VySW5mb1NlcnZpY2UuanMnO1xuaW1wb3J0IHsgVG9rZW5DbGllbnQgfSBmcm9tICcuL1Rva2VuQ2xpZW50LmpzJztcbmltcG9ydCB7IEVycm9yUmVzcG9uc2UgfSBmcm9tICcuL0Vycm9yUmVzcG9uc2UuanMnO1xuaW1wb3J0IHsgSm9zZVV0aWwgfSBmcm9tICcuL0pvc2VVdGlsLmpzJztcblxuY29uc3QgUHJvdG9jb2xDbGFpbXMgPSBbXCJub25jZVwiLCBcImF0X2hhc2hcIiwgXCJpYXRcIiwgXCJuYmZcIiwgXCJleHBcIiwgXCJhdWRcIiwgXCJpc3NcIiwgXCJjX2hhc2hcIl07XG5cbmV4cG9ydCBjbGFzcyBSZXNwb25zZVZhbGlkYXRvciB7XG5cbiAgICBjb25zdHJ1Y3RvcihzZXR0aW5ncywgXG4gICAgICAgIE1ldGFkYXRhU2VydmljZUN0b3IgPSBNZXRhZGF0YVNlcnZpY2UsXG4gICAgICAgIFVzZXJJbmZvU2VydmljZUN0b3IgPSBVc2VySW5mb1NlcnZpY2UsIFxuICAgICAgICBqb3NlVXRpbCA9IEpvc2VVdGlsLFxuICAgICAgICBUb2tlbkNsaWVudEN0b3IgPSBUb2tlbkNsaWVudCkge1xuICAgICAgICBpZiAoIXNldHRpbmdzKSB7XG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5jdG9yOiBObyBzZXR0aW5ncyBwYXNzZWQgdG8gUmVzcG9uc2VWYWxpZGF0b3JcIik7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzZXR0aW5nc1wiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3NldHRpbmdzID0gc2V0dGluZ3M7XG4gICAgICAgIHRoaXMuX21ldGFkYXRhU2VydmljZSA9IG5ldyBNZXRhZGF0YVNlcnZpY2VDdG9yKHRoaXMuX3NldHRpbmdzKTtcbiAgICAgICAgdGhpcy5fdXNlckluZm9TZXJ2aWNlID0gbmV3IFVzZXJJbmZvU2VydmljZUN0b3IodGhpcy5fc2V0dGluZ3MpO1xuICAgICAgICB0aGlzLl9qb3NlVXRpbCA9IGpvc2VVdGlsO1xuICAgICAgICB0aGlzLl90b2tlbkNsaWVudCA9IG5ldyBUb2tlbkNsaWVudEN0b3IodGhpcy5fc2V0dGluZ3MpO1xuICAgIH1cblxuICAgIHZhbGlkYXRlU2lnbmluUmVzcG9uc2Uoc3RhdGUsIHJlc3BvbnNlKSB7XG4gICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLnZhbGlkYXRlU2lnbmluUmVzcG9uc2VcIik7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb2Nlc3NTaWduaW5QYXJhbXMoc3RhdGUsIHJlc3BvbnNlKS50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLnZhbGlkYXRlU2lnbmluUmVzcG9uc2U6IHN0YXRlIHByb2Nlc3NlZFwiKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl92YWxpZGF0ZVRva2VucyhzdGF0ZSwgcmVzcG9uc2UpLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLnZhbGlkYXRlU2lnbmluUmVzcG9uc2U6IHRva2VucyB2YWxpZGF0ZWRcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Byb2Nlc3NDbGFpbXMoc3RhdGUsIHJlc3BvbnNlKS50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IudmFsaWRhdGVTaWduaW5SZXNwb25zZTogY2xhaW1zIHByb2Nlc3NlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhbGlkYXRlU2lnbm91dFJlc3BvbnNlKHN0YXRlLCByZXNwb25zZSkge1xuICAgICAgICBpZiAoc3RhdGUuaWQgIT09IHJlc3BvbnNlLnN0YXRlKSB7XG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci52YWxpZGF0ZVNpZ25vdXRSZXNwb25zZTogU3RhdGUgZG9lcyBub3QgbWF0Y2hcIik7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiU3RhdGUgZG9lcyBub3QgbWF0Y2hcIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbm93IHRoYXQgd2Uga25vdyB0aGUgc3RhdGUgbWF0Y2hlcywgdGFrZSB0aGUgc3RvcmVkIGRhdGFcbiAgICAgICAgLy8gYW5kIHNldCBpdCBpbnRvIHRoZSByZXNwb25zZSBzbyBjYWxsZXJzIGNhbiBnZXQgdGhlaXIgc3RhdGVcbiAgICAgICAgLy8gdGhpcyBpcyBpbXBvcnRhbnQgZm9yIGJvdGggc3VjY2VzcyAmIGVycm9yIG91dGNvbWVzXG4gICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLnZhbGlkYXRlU2lnbm91dFJlc3BvbnNlOiBzdGF0ZSB2YWxpZGF0ZWRcIik7XG4gICAgICAgIHJlc3BvbnNlLnN0YXRlID0gc3RhdGUuZGF0YTtcblxuICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3IpIHtcbiAgICAgICAgICAgIExvZy53YXJuKFwiUmVzcG9uc2VWYWxpZGF0b3IudmFsaWRhdGVTaWdub3V0UmVzcG9uc2U6IFJlc3BvbnNlIHdhcyBlcnJvclwiLCByZXNwb25zZS5lcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yUmVzcG9uc2UocmVzcG9uc2UpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzcG9uc2UpO1xuICAgIH1cblxuICAgIF9wcm9jZXNzU2lnbmluUGFyYW1zKHN0YXRlLCByZXNwb25zZSkge1xuICAgICAgICBpZiAoc3RhdGUuaWQgIT09IHJlc3BvbnNlLnN0YXRlKSB7XG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5fcHJvY2Vzc1NpZ25pblBhcmFtczogU3RhdGUgZG9lcyBub3QgbWF0Y2hcIik7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiU3RhdGUgZG9lcyBub3QgbWF0Y2hcIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFzdGF0ZS5jbGllbnRfaWQpIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl9wcm9jZXNzU2lnbmluUGFyYW1zOiBObyBjbGllbnRfaWQgb24gc3RhdGVcIik7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gY2xpZW50X2lkIG9uIHN0YXRlXCIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghc3RhdGUuYXV0aG9yaXR5KSB7XG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5fcHJvY2Vzc1NpZ25pblBhcmFtczogTm8gYXV0aG9yaXR5IG9uIHN0YXRlXCIpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIGF1dGhvcml0eSBvbiBzdGF0ZVwiKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB0aGlzIGFsbG93cyB0aGUgYXV0aG9yaXR5IHRvIGJlIGxvYWRlZCBmcm9tIHRoZSBzaWduaW4gc3RhdGVcbiAgICAgICAgaWYgKCF0aGlzLl9zZXR0aW5ncy5hdXRob3JpdHkpIHtcbiAgICAgICAgICAgIHRoaXMuX3NldHRpbmdzLmF1dGhvcml0eSA9IHN0YXRlLmF1dGhvcml0eTtcbiAgICAgICAgfVxuICAgICAgICAvLyBlbnN1cmUgd2UncmUgdXNpbmcgdGhlIGNvcnJlY3QgYXV0aG9yaXR5IGlmIHRoZSBhdXRob3JpdHkgaXMgbm90IGxvYWRlZCBmcm9tIHNpZ25pbiBzdGF0ZVxuICAgICAgICBlbHNlIGlmICh0aGlzLl9zZXR0aW5ncy5hdXRob3JpdHkgJiYgdGhpcy5fc2V0dGluZ3MuYXV0aG9yaXR5ICE9PSBzdGF0ZS5hdXRob3JpdHkpIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl9wcm9jZXNzU2lnbmluUGFyYW1zOiBhdXRob3JpdHkgbWlzbWF0Y2ggb24gc2V0dGluZ3MgdnMuIHNpZ25pbiBzdGF0ZVwiKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJhdXRob3JpdHkgbWlzbWF0Y2ggb24gc2V0dGluZ3MgdnMuIHNpZ25pbiBzdGF0ZVwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdGhpcyBhbGxvd3MgdGhlIGNsaWVudF9pZCB0byBiZSBsb2FkZWQgZnJvbSB0aGUgc2lnbmluIHN0YXRlXG4gICAgICAgIGlmICghdGhpcy5fc2V0dGluZ3MuY2xpZW50X2lkKSB7XG4gICAgICAgICAgICB0aGlzLl9zZXR0aW5ncy5jbGllbnRfaWQgPSBzdGF0ZS5jbGllbnRfaWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZW5zdXJlIHdlJ3JlIHVzaW5nIHRoZSBjb3JyZWN0IGNsaWVudF9pZCBpZiB0aGUgY2xpZW50X2lkIGlzIG5vdCBsb2FkZWQgZnJvbSBzaWduaW4gc3RhdGVcbiAgICAgICAgZWxzZSBpZiAodGhpcy5fc2V0dGluZ3MuY2xpZW50X2lkICYmIHRoaXMuX3NldHRpbmdzLmNsaWVudF9pZCAhPT0gc3RhdGUuY2xpZW50X2lkKSB7XG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5fcHJvY2Vzc1NpZ25pblBhcmFtczogY2xpZW50X2lkIG1pc21hdGNoIG9uIHNldHRpbmdzIHZzLiBzaWduaW4gc3RhdGVcIik7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiY2xpZW50X2lkIG1pc21hdGNoIG9uIHNldHRpbmdzIHZzLiBzaWduaW4gc3RhdGVcIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbm93IHRoYXQgd2Uga25vdyB0aGUgc3RhdGUgbWF0Y2hlcywgdGFrZSB0aGUgc3RvcmVkIGRhdGFcbiAgICAgICAgLy8gYW5kIHNldCBpdCBpbnRvIHRoZSByZXNwb25zZSBzbyBjYWxsZXJzIGNhbiBnZXQgdGhlaXIgc3RhdGVcbiAgICAgICAgLy8gdGhpcyBpcyBpbXBvcnRhbnQgZm9yIGJvdGggc3VjY2VzcyAmIGVycm9yIG91dGNvbWVzXG4gICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLl9wcm9jZXNzU2lnbmluUGFyYW1zOiBzdGF0ZSB2YWxpZGF0ZWRcIik7XG4gICAgICAgIHJlc3BvbnNlLnN0YXRlID0gc3RhdGUuZGF0YTtcblxuICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3IpIHtcbiAgICAgICAgICAgIExvZy53YXJuKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3Byb2Nlc3NTaWduaW5QYXJhbXM6IFJlc3BvbnNlIHdhcyBlcnJvclwiLCByZXNwb25zZS5lcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yUmVzcG9uc2UocmVzcG9uc2UpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdGF0ZS5ub25jZSAmJiAhcmVzcG9uc2UuaWRfdG9rZW4pIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl9wcm9jZXNzU2lnbmluUGFyYW1zOiBFeHBlY3RpbmcgaWRfdG9rZW4gaW4gcmVzcG9uc2VcIik7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gaWRfdG9rZW4gaW4gcmVzcG9uc2VcIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFzdGF0ZS5ub25jZSAmJiByZXNwb25zZS5pZF90b2tlbikge1xuICAgICAgICAgICAgTG9nLmVycm9yKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3Byb2Nlc3NTaWduaW5QYXJhbXM6IE5vdCBleHBlY3RpbmcgaWRfdG9rZW4gaW4gcmVzcG9uc2VcIik7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiVW5leHBlY3RlZCBpZF90b2tlbiBpbiByZXNwb25zZVwiKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RhdGUuY29kZV92ZXJpZmllciAmJiAhcmVzcG9uc2UuY29kZSkge1xuICAgICAgICAgICAgTG9nLmVycm9yKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3Byb2Nlc3NTaWduaW5QYXJhbXM6IEV4cGVjdGluZyBjb2RlIGluIHJlc3BvbnNlXCIpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIGNvZGUgaW4gcmVzcG9uc2VcIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFzdGF0ZS5jb2RlX3ZlcmlmaWVyICYmIHJlc3BvbnNlLmNvZGUpIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl9wcm9jZXNzU2lnbmluUGFyYW1zOiBOb3QgZXhwZWN0aW5nIGNvZGUgaW4gcmVzcG9uc2VcIik7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiVW5leHBlY3RlZCBjb2RlIGluIHJlc3BvbnNlXCIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcmVzcG9uc2Uuc2NvcGUpIHtcbiAgICAgICAgICAgIC8vIGlmIHRoZXJlJ3Mgbm8gc2NvcGUgb24gdGhlIHJlc3BvbnNlLCB0aGVuIGFzc3VtZSBhbGwgc2NvcGVzIGdyYW50ZWQgKHBlci1zcGVjKSBhbmQgY29weSBvdmVyIHNjb3BlcyBmcm9tIG9yaWdpbmFsIHJlcXVlc3RcbiAgICAgICAgICAgIHJlc3BvbnNlLnNjb3BlID0gc3RhdGUuc2NvcGU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3BvbnNlKTtcbiAgICB9XG5cbiAgICBfcHJvY2Vzc0NsYWltcyhzdGF0ZSwgcmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLmlzT3BlbklkQ29ubmVjdCkge1xuICAgICAgICAgICAgTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3Byb2Nlc3NDbGFpbXM6IHJlc3BvbnNlIGlzIE9JREMsIHByb2Nlc3NpbmcgY2xhaW1zXCIpO1xuXG4gICAgICAgICAgICByZXNwb25zZS5wcm9maWxlID0gdGhpcy5fZmlsdGVyUHJvdG9jb2xDbGFpbXMocmVzcG9uc2UucHJvZmlsZSk7XG5cbiAgICAgICAgICAgIGlmIChzdGF0ZS5za2lwVXNlckluZm8gIT09IHRydWUgJiYgdGhpcy5fc2V0dGluZ3MubG9hZFVzZXJJbmZvICYmIHJlc3BvbnNlLmFjY2Vzc190b2tlbikge1xuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLl9wcm9jZXNzQ2xhaW1zOiBsb2FkaW5nIHVzZXIgaW5mb1wiKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl91c2VySW5mb1NlcnZpY2UuZ2V0Q2xhaW1zKHJlc3BvbnNlLmFjY2Vzc190b2tlbikudGhlbihjbGFpbXMgPT4ge1xuICAgICAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci5fcHJvY2Vzc0NsYWltczogdXNlciBpbmZvIGNsYWltcyByZWNlaXZlZCBmcm9tIHVzZXIgaW5mbyBlbmRwb2ludFwiKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY2xhaW1zLnN1YiAhPT0gcmVzcG9uc2UucHJvZmlsZS5zdWIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl9wcm9jZXNzQ2xhaW1zOiBzdWIgZnJvbSB1c2VyIGluZm8gZW5kcG9pbnQgZG9lcyBub3QgbWF0Y2ggc3ViIGluIGlkX3Rva2VuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcInN1YiBmcm9tIHVzZXIgaW5mbyBlbmRwb2ludCBkb2VzIG5vdCBtYXRjaCBzdWIgaW4gaWRfdG9rZW5cIikpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UucHJvZmlsZSA9IHRoaXMuX21lcmdlQ2xhaW1zKHJlc3BvbnNlLnByb2ZpbGUsIGNsYWltcyk7XG4gICAgICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLl9wcm9jZXNzQ2xhaW1zOiB1c2VyIGluZm8gY2xhaW1zIHJlY2VpdmVkLCB1cGRhdGVkIHByb2ZpbGU6XCIsIHJlc3BvbnNlLnByb2ZpbGUpO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLl9wcm9jZXNzQ2xhaW1zOiBub3QgbG9hZGluZyB1c2VyIGluZm9cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBMb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci5fcHJvY2Vzc0NsYWltczogcmVzcG9uc2UgaXMgbm90IE9JREMsIG5vdCBwcm9jZXNzaW5nIGNsYWltc1wiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzcG9uc2UpO1xuICAgIH1cblxuICAgIF9tZXJnZUNsYWltcyhjbGFpbXMxLCBjbGFpbXMyKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBPYmplY3QuYXNzaWduKHt9LCBjbGFpbXMxKTtcblxuICAgICAgICBmb3IgKGxldCBuYW1lIGluIGNsYWltczIpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBjbGFpbXMyW25hbWVdO1xuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlcykpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZXMgPSBbdmFsdWVzXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSB2YWx1ZXNbaV07XG4gICAgICAgICAgICAgICAgaWYgKCFyZXN1bHRbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0W25hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0W25hbWVdKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0W25hbWVdLmluZGV4T2YodmFsdWUpIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0W25hbWVdLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlc3VsdFtuYW1lXSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdGhpcy5fc2V0dGluZ3MubWVyZ2VDbGFpbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFtuYW1lXSA9IHRoaXMuX21lcmdlQ2xhaW1zKHJlc3VsdFtuYW1lXSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0W25hbWVdID0gW3Jlc3VsdFtuYW1lXSwgdmFsdWVdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBfZmlsdGVyUHJvdG9jb2xDbGFpbXMoY2xhaW1zKSB7XG4gICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLl9maWx0ZXJQcm90b2NvbENsYWltcywgaW5jb21pbmcgY2xhaW1zOlwiLCBjbGFpbXMpO1xuXG4gICAgICAgIHZhciByZXN1bHQgPSBPYmplY3QuYXNzaWduKHt9LCBjbGFpbXMpO1xuXG4gICAgICAgIGlmICh0aGlzLl9zZXR0aW5ncy5fZmlsdGVyUHJvdG9jb2xDbGFpbXMpIHtcbiAgICAgICAgICAgIFByb3RvY29sQ2xhaW1zLmZvckVhY2godHlwZSA9PiB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHJlc3VsdFt0eXBlXTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBMb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci5fZmlsdGVyUHJvdG9jb2xDbGFpbXM6IHByb3RvY29sIGNsYWltcyBmaWx0ZXJlZFwiLCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX2ZpbHRlclByb3RvY29sQ2xhaW1zOiBwcm90b2NvbCBjbGFpbXMgbm90IGZpbHRlcmVkXCIpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIF92YWxpZGF0ZVRva2VucyhzdGF0ZSwgcmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLmNvZGUpIHtcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZVRva2VuczogVmFsaWRhdGluZyBjb2RlXCIpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Byb2Nlc3NDb2RlKHN0YXRlLCByZXNwb25zZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVzcG9uc2UuaWRfdG9rZW4pIHtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5hY2Nlc3NfdG9rZW4pIHtcbiAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVUb2tlbnM6IFZhbGlkYXRpbmcgaWRfdG9rZW4gYW5kIGFjY2Vzc190b2tlblwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdmFsaWRhdGVJZFRva2VuQW5kQWNjZXNzVG9rZW4oc3RhdGUsIHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlVG9rZW5zOiBWYWxpZGF0aW5nIGlkX3Rva2VuXCIpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbGlkYXRlSWRUb2tlbihzdGF0ZSwgcmVzcG9uc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlVG9rZW5zOiBObyBjb2RlIHRvIHByb2Nlc3Mgb3IgaWRfdG9rZW4gdG8gdmFsaWRhdGVcIik7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzcG9uc2UpO1xuICAgIH1cblxuICAgIF9wcm9jZXNzQ29kZShzdGF0ZSwgcmVzcG9uc2UpIHtcbiAgICAgICAgdmFyIHJlcXVlc3QgPSB7XG4gICAgICAgICAgICBjbGllbnRfaWQ6IHN0YXRlLmNsaWVudF9pZCxcbiAgICAgICAgICAgIGNsaWVudF9zZWNyZXQ6IHN0YXRlLmNsaWVudF9zZWNyZXQsXG4gICAgICAgICAgICBjb2RlIDogcmVzcG9uc2UuY29kZSxcbiAgICAgICAgICAgIHJlZGlyZWN0X3VyaTogc3RhdGUucmVkaXJlY3RfdXJpLFxuICAgICAgICAgICAgY29kZV92ZXJpZmllcjogc3RhdGUuY29kZV92ZXJpZmllclxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChzdGF0ZS5leHRyYVRva2VuUGFyYW1zICYmIHR5cGVvZihzdGF0ZS5leHRyYVRva2VuUGFyYW1zKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocmVxdWVzdCwgc3RhdGUuZXh0cmFUb2tlblBhcmFtcyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0aGlzLl90b2tlbkNsaWVudC5leGNoYW5nZUNvZGUocmVxdWVzdCkudGhlbih0b2tlblJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHRva2VuUmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRva2VuUmVzcG9uc2UsIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2Vba2V5XSA9IHRva2VuUmVzcG9uc2Vba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5pZF90b2tlbikge1xuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLl9wcm9jZXNzQ29kZTogdG9rZW4gcmVzcG9uc2Ugc3VjY2Vzc2Z1bCwgcHJvY2Vzc2luZyBpZF90b2tlblwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdmFsaWRhdGVJZFRva2VuQXR0cmlidXRlcyhzdGF0ZSwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3Byb2Nlc3NDb2RlOiB0b2tlbiByZXNwb25zZSBzdWNjZXNzZnVsLCByZXR1cm5pbmcgcmVzcG9uc2VcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX3ZhbGlkYXRlSWRUb2tlbkF0dHJpYnV0ZXMoc3RhdGUsIHJlc3BvbnNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tZXRhZGF0YVNlcnZpY2UuZ2V0SXNzdWVyKCkudGhlbihpc3N1ZXIgPT4ge1xuXG4gICAgICAgICAgICBsZXQgYXVkaWVuY2UgPSBzdGF0ZS5jbGllbnRfaWQ7XG4gICAgICAgICAgICBsZXQgY2xvY2tTa2V3SW5TZWNvbmRzID0gdGhpcy5fc2V0dGluZ3MuY2xvY2tTa2V3O1xuICAgICAgICAgICAgTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlSWRUb2tlbkF0dHJpYnV0ZXM6IFZhbGlkYWluZyBKV1QgYXR0cmlidXRlczsgdXNpbmcgY2xvY2sgc2tldyAoaW4gc2Vjb25kcykgb2Y6IFwiLCBjbG9ja1NrZXdJblNlY29uZHMpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2V0dGluZ3MuZ2V0RXBvY2hUaW1lKCkudGhlbihub3cgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9qb3NlVXRpbC52YWxpZGF0ZUp3dEF0dHJpYnV0ZXMocmVzcG9uc2UuaWRfdG9rZW4sIGlzc3VlciwgYXVkaWVuY2UsIGNsb2NrU2tld0luU2Vjb25kcywgbm93KS50aGVuKHBheWxvYWQgPT4ge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUubm9uY2UgJiYgc3RhdGUubm9uY2UgIT09IHBheWxvYWQubm9uY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUlkVG9rZW5BdHRyaWJ1dGVzOiBJbnZhbGlkIG5vbmNlIGluIGlkX3Rva2VuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkludmFsaWQgbm9uY2UgaW4gaWRfdG9rZW5cIikpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICghcGF5bG9hZC5zdWIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUlkVG9rZW5BdHRyaWJ1dGVzOiBObyBzdWIgcHJlc2VudCBpbiBpZF90b2tlblwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyBzdWIgcHJlc2VudCBpbiBpZF90b2tlblwiKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UucHJvZmlsZSA9IHBheWxvYWQ7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBfdmFsaWRhdGVJZFRva2VuQW5kQWNjZXNzVG9rZW4oc3RhdGUsIHJlc3BvbnNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92YWxpZGF0ZUlkVG9rZW4oc3RhdGUsIHJlc3BvbnNlKS50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl92YWxpZGF0ZUFjY2Vzc1Rva2VuKHJlc3BvbnNlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX2dldFNpZ25pbmdLZXlGb3JKd3Qoand0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tZXRhZGF0YVNlcnZpY2UuZ2V0U2lnbmluZ0tleXMoKS50aGVuKGtleXMgPT4ge1xuICAgICAgICAgICAgY29uc3Qga2lkID0gand0LmhlYWRlci5raWQ7XG4gICAgICAgICAgICBpZiAoIWtleXMpIHtcbiAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVJZFRva2VuOiBObyBzaWduaW5nIGtleXMgZnJvbSBtZXRhZGF0YVwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gc2lnbmluZyBrZXlzIGZyb20gbWV0YWRhdGFcIikpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBMb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVJZFRva2VuOiBSZWNlaXZlZCBzaWduaW5nIGtleXNcIik7XG4gICAgICAgICAgICBsZXQga2V5O1xuICAgICAgICAgICAgaWYgKCFraWQpIHtcbiAgICAgICAgICAgICAgICBrZXlzID0gdGhpcy5fZmlsdGVyQnlBbGcoa2V5cywgand0LmhlYWRlci5hbGcpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGtleXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVJZFRva2VuOiBObyBraWQgZm91bmQgaW4gaWRfdG9rZW4gYW5kIG1vcmUgdGhhbiBvbmUga2V5IGZvdW5kIGluIG1ldGFkYXRhXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8ga2lkIGZvdW5kIGluIGlkX3Rva2VuIGFuZCBtb3JlIHRoYW4gb25lIGtleSBmb3VuZCBpbiBtZXRhZGF0YVwiKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8ga2lkIGlzIG1hbmRhdG9yeSBvbmx5IHdoZW4gdGhlcmUgYXJlIG11bHRpcGxlIGtleXMgaW4gdGhlIHJlZmVyZW5jZWQgSldLIFNldCBkb2N1bWVudFxuICAgICAgICAgICAgICAgICAgICAvLyBzZWUgaHR0cDovL29wZW5pZC5uZXQvc3BlY3Mvb3BlbmlkLWNvbm5lY3QtY29yZS0xXzAuaHRtbCNTaWduaW5nXG4gICAgICAgICAgICAgICAgICAgIGtleSA9IGtleXNbMF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBrZXkgPSBrZXlzLmZpbHRlcihrZXkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ga2V5LmtpZCA9PT0ga2lkO1xuICAgICAgICAgICAgICAgIH0pWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShrZXkpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBfZ2V0U2lnbmluZ0tleUZvckp3dFdpdGhTaW5nbGVSZXRyeShqd3QpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldFNpZ25pbmdLZXlGb3JKd3Qoand0KS50aGVuKGtleSA9PiB7XG4gICAgICAgICAgICAvLyBSZWZyZXNoaW5nIHNpZ25pbmdLZXlzIGlmIG5vIHN1aXRhYmxlIHZlcmlmaWNhdGlvbiBrZXkgaXMgcHJlc2VudCBmb3IgZ2l2ZW4gand0IGhlYWRlci5cbiAgICAgICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgICAgICAgLy8gc2V0IHRvIHVuZGVmaW5lZCwgdG8gdHJpZ2dlciBuZXR3b3JrIGNhbGwgdG8gandrc191cmkuXG4gICAgICAgICAgICAgICAgdGhpcy5fbWV0YWRhdGFTZXJ2aWNlLnJlc2V0U2lnbmluZ0tleXMoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0U2lnbmluZ0tleUZvckp3dChqd3QpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF92YWxpZGF0ZUlkVG9rZW4oc3RhdGUsIHJlc3BvbnNlKSB7XG4gICAgICAgIGlmICghc3RhdGUubm9uY2UpIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUlkVG9rZW46IE5vIG5vbmNlIG9uIHN0YXRlXCIpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIG5vbmNlIG9uIHN0YXRlXCIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBqd3QgPSB0aGlzLl9qb3NlVXRpbC5wYXJzZUp3dChyZXNwb25zZS5pZF90b2tlbik7XG4gICAgICAgIGlmICghand0IHx8ICFqd3QuaGVhZGVyIHx8ICFqd3QucGF5bG9hZCkge1xuICAgICAgICAgICAgTG9nLmVycm9yKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlSWRUb2tlbjogRmFpbGVkIHRvIHBhcnNlIGlkX3Rva2VuXCIsIGp3dCk7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiRmFpbGVkIHRvIHBhcnNlIGlkX3Rva2VuXCIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdGF0ZS5ub25jZSAhPT0gand0LnBheWxvYWQubm9uY2UpIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUlkVG9rZW46IEludmFsaWQgbm9uY2UgaW4gaWRfdG9rZW5cIik7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiSW52YWxpZCBub25jZSBpbiBpZF90b2tlblwiKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fbWV0YWRhdGFTZXJ2aWNlLmdldElzc3VlcigpLnRoZW4oaXNzdWVyID0+IHtcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUlkVG9rZW46IFJlY2VpdmVkIGlzc3VlclwiKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRTaWduaW5nS2V5Rm9ySnd0V2l0aFNpbmdsZVJldHJ5KGp3dCkudGhlbihrZXkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUlkVG9rZW46IE5vIGtleSBtYXRjaGluZyBraWQgb3IgYWxnIGZvdW5kIGluIHNpZ25pbmcga2V5c1wiKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIGtleSBtYXRjaGluZyBraWQgb3IgYWxnIGZvdW5kIGluIHNpZ25pbmcga2V5c1wiKSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGV0IGF1ZGllbmNlID0gc3RhdGUuY2xpZW50X2lkO1xuXG4gICAgICAgICAgICAgICAgbGV0IGNsb2NrU2tld0luU2Vjb25kcyA9IHRoaXMuX3NldHRpbmdzLmNsb2NrU2tldztcbiAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVJZFRva2VuOiBWYWxpZGFpbmcgSldUOyB1c2luZyBjbG9jayBza2V3IChpbiBzZWNvbmRzKSBvZjogXCIsIGNsb2NrU2tld0luU2Vjb25kcyk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fam9zZVV0aWwudmFsaWRhdGVKd3QocmVzcG9uc2UuaWRfdG9rZW4sIGtleSwgaXNzdWVyLCBhdWRpZW5jZSwgY2xvY2tTa2V3SW5TZWNvbmRzKS50aGVuKCgpPT57XG4gICAgICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUlkVG9rZW46IEpXVCB2YWxpZGF0aW9uIHN1Y2Nlc3NmdWxcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFqd3QucGF5bG9hZC5zdWIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUlkVG9rZW46IE5vIHN1YiBwcmVzZW50IGluIGlkX3Rva2VuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIHN1YiBwcmVzZW50IGluIGlkX3Rva2VuXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLnByb2ZpbGUgPSBqd3QucGF5bG9hZDtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX2ZpbHRlckJ5QWxnKGtleXMsIGFsZyl7XG4gICAgICAgIHZhciBrdHkgPSBudWxsO1xuICAgICAgICBpZiAoYWxnLnN0YXJ0c1dpdGgoXCJSU1wiKSkge1xuICAgICAgICAgICAga3R5ID0gXCJSU0FcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhbGcuc3RhcnRzV2l0aChcIlBTXCIpKSB7XG4gICAgICAgICAgICBrdHkgPSBcIlBTXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYWxnLnN0YXJ0c1dpdGgoXCJFU1wiKSkge1xuICAgICAgICAgICAga3R5ID0gXCJFQ1wiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX2ZpbHRlckJ5QWxnOiBhbGcgbm90IHN1cHBvcnRlZDogXCIsIGFsZyk7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cblxuICAgICAgICBMb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci5fZmlsdGVyQnlBbGc6IExvb2tpbmcgZm9yIGtleXMgdGhhdCBtYXRjaCBrdHk6IFwiLCBrdHkpO1xuXG4gICAgICAgIGtleXMgPSBrZXlzLmZpbHRlcihrZXkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGtleS5rdHkgPT09IGt0eTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX2ZpbHRlckJ5QWxnOiBOdW1iZXIgb2Yga2V5cyB0aGF0IG1hdGNoIGt0eTogXCIsIGt0eSwga2V5cy5sZW5ndGgpO1xuXG4gICAgICAgIHJldHVybiBrZXlzO1xuICAgIH1cblxuICAgIF92YWxpZGF0ZUFjY2Vzc1Rva2VuKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmICghcmVzcG9uc2UucHJvZmlsZSkge1xuICAgICAgICAgICAgTG9nLmVycm9yKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlQWNjZXNzVG9rZW46IE5vIHByb2ZpbGUgbG9hZGVkIGZyb20gaWRfdG9rZW5cIik7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gcHJvZmlsZSBsb2FkZWQgZnJvbSBpZF90b2tlblwiKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXJlc3BvbnNlLnByb2ZpbGUuYXRfaGFzaCkge1xuICAgICAgICAgICAgTG9nLmVycm9yKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlQWNjZXNzVG9rZW46IE5vIGF0X2hhc2ggaW4gaWRfdG9rZW5cIik7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gYXRfaGFzaCBpbiBpZF90b2tlblwiKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXJlc3BvbnNlLmlkX3Rva2VuKSB7XG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVBY2Nlc3NUb2tlbjogTm8gaWRfdG9rZW5cIik7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gaWRfdG9rZW5cIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGp3dCA9IHRoaXMuX2pvc2VVdGlsLnBhcnNlSnd0KHJlc3BvbnNlLmlkX3Rva2VuKTtcbiAgICAgICAgaWYgKCFqd3QgfHwgIWp3dC5oZWFkZXIpIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUFjY2Vzc1Rva2VuOiBGYWlsZWQgdG8gcGFyc2UgaWRfdG9rZW5cIiwgand0KTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJGYWlsZWQgdG8gcGFyc2UgaWRfdG9rZW5cIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGhhc2hBbGcgPSBqd3QuaGVhZGVyLmFsZztcbiAgICAgICAgaWYgKCFoYXNoQWxnIHx8IGhhc2hBbGcubGVuZ3RoICE9PSA1KSB7XG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVBY2Nlc3NUb2tlbjogVW5zdXBwb3J0ZWQgYWxnOlwiLCBoYXNoQWxnKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBhbGc6IFwiICsgaGFzaEFsZykpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGhhc2hCaXRzID0gaGFzaEFsZy5zdWJzdHIoMiwgMyk7XG4gICAgICAgIGlmICghaGFzaEJpdHMpIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUFjY2Vzc1Rva2VuOiBVbnN1cHBvcnRlZCBhbGc6XCIsIGhhc2hBbGcsIGhhc2hCaXRzKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBhbGc6IFwiICsgaGFzaEFsZykpO1xuICAgICAgICB9XG5cbiAgICAgICAgaGFzaEJpdHMgPSBwYXJzZUludChoYXNoQml0cyk7XG4gICAgICAgIGlmIChoYXNoQml0cyAhPT0gMjU2ICYmIGhhc2hCaXRzICE9PSAzODQgJiYgaGFzaEJpdHMgIT09IDUxMikge1xuICAgICAgICAgICAgTG9nLmVycm9yKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlQWNjZXNzVG9rZW46IFVuc3VwcG9ydGVkIGFsZzpcIiwgaGFzaEFsZywgaGFzaEJpdHMpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIGFsZzogXCIgKyBoYXNoQWxnKSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgc2hhID0gXCJzaGFcIiArIGhhc2hCaXRzO1xuICAgICAgICB2YXIgaGFzaCA9IHRoaXMuX2pvc2VVdGlsLmhhc2hTdHJpbmcocmVzcG9uc2UuYWNjZXNzX3Rva2VuLCBzaGEpO1xuICAgICAgICBpZiAoIWhhc2gpIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUFjY2Vzc1Rva2VuOiBhY2Nlc3NfdG9rZW4gaGFzaCBmYWlsZWQ6XCIsIHNoYSk7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiRmFpbGVkIHRvIHZhbGlkYXRlIGF0X2hhc2hcIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGxlZnQgPSBoYXNoLnN1YnN0cigwLCBoYXNoLmxlbmd0aCAvIDIpO1xuICAgICAgICB2YXIgbGVmdF9iNjR1ID0gdGhpcy5fam9zZVV0aWwuaGV4VG9CYXNlNjRVcmwobGVmdCk7XG4gICAgICAgIGlmIChsZWZ0X2I2NHUgIT09IHJlc3BvbnNlLnByb2ZpbGUuYXRfaGFzaCkge1xuICAgICAgICAgICAgTG9nLmVycm9yKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlQWNjZXNzVG9rZW46IEZhaWxlZCB0byB2YWxpZGF0ZSBhdF9oYXNoXCIsIGxlZnRfYjY0dSwgcmVzcG9uc2UucHJvZmlsZS5hdF9oYXNoKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJGYWlsZWQgdG8gdmFsaWRhdGUgYXRfaGFzaFwiKSk7XG4gICAgICAgIH1cblxuICAgICAgICBMb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVBY2Nlc3NUb2tlbjogc3VjY2Vzc1wiKTtcblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3BvbnNlKTtcbiAgICB9XG59XG4iLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5pbXBvcnQgeyBMb2cgfSBmcm9tICcuL0xvZy5qcyc7XG5pbXBvcnQgeyBDaGVja1Nlc3Npb25JRnJhbWUgfSBmcm9tICcuL0NoZWNrU2Vzc2lvbklGcmFtZS5qcyc7XG5pbXBvcnQgeyBHbG9iYWwgfSBmcm9tICcuL0dsb2JhbC5qcyc7XG5cbmV4cG9ydCBjbGFzcyBTZXNzaW9uTW9uaXRvciB7XG5cbiAgICBjb25zdHJ1Y3Rvcih1c2VyTWFuYWdlciwgQ2hlY2tTZXNzaW9uSUZyYW1lQ3RvciA9IENoZWNrU2Vzc2lvbklGcmFtZSwgdGltZXIgPSBHbG9iYWwudGltZXIpIHtcbiAgICAgICAgaWYgKCF1c2VyTWFuYWdlcikge1xuICAgICAgICAgICAgTG9nLmVycm9yKFwiU2Vzc2lvbk1vbml0b3IuY3RvcjogTm8gdXNlciBtYW5hZ2VyIHBhc3NlZCB0byBTZXNzaW9uTW9uaXRvclwiKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInVzZXJNYW5hZ2VyXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fdXNlck1hbmFnZXIgPSB1c2VyTWFuYWdlcjtcbiAgICAgICAgdGhpcy5fQ2hlY2tTZXNzaW9uSUZyYW1lQ3RvciA9IENoZWNrU2Vzc2lvbklGcmFtZUN0b3I7XG4gICAgICAgIHRoaXMuX3RpbWVyID0gdGltZXI7XG5cbiAgICAgICAgdGhpcy5fdXNlck1hbmFnZXIuZXZlbnRzLmFkZFVzZXJMb2FkZWQodGhpcy5fc3RhcnQuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuX3VzZXJNYW5hZ2VyLmV2ZW50cy5hZGRVc2VyVW5sb2FkZWQodGhpcy5fc3RvcC5iaW5kKHRoaXMpKTtcblxuICAgICAgICBQcm9taXNlLnJlc29sdmUodGhpcy5fdXNlck1hbmFnZXIuZ2V0VXNlcigpLnRoZW4odXNlciA9PiB7XG4gICAgICAgICAgICAvLyBkb2luZyB0aGlzIG1hbnVhbGx5IGhlcmUgc2luY2UgY2FsbGluZyBnZXRVc2VyIFxuICAgICAgICAgICAgLy8gZG9lc24ndCB0cmlnZ2VyIGxvYWQgZXZlbnQuXG4gICAgICAgICAgICBpZiAodXNlcikge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXJ0KHVzZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc2V0dGluZ3MubW9uaXRvckFub255bW91c1Nlc3Npb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91c2VyTWFuYWdlci5xdWVyeVNlc3Npb25TdGF0dXMoKS50aGVuKHNlc3Npb24gPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdG1wVXNlciA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb25fc3RhdGUgOiBzZXNzaW9uLnNlc3Npb25fc3RhdGVcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlc3Npb24uc3ViICYmIHNlc3Npb24uc2lkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0bXBVc2VyLnByb2ZpbGUgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViOiBzZXNzaW9uLnN1YixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWQ6IHNlc3Npb24uc2lkXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0YXJ0KHRtcFVzZXIpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNhdGNoIHRvIHN1cHByZXNzIGVycm9ycyBzaW5jZSB3ZSdyZSBpbiBhIGN0b3JcbiAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKFwiU2Vzc2lvbk1vbml0b3IgY3RvcjogZXJyb3IgZnJvbSBxdWVyeVNlc3Npb25TdGF0dXM6XCIsIGVyci5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgIC8vIGNhdGNoIHRvIHN1cHByZXNzIGVycm9ycyBzaW5jZSB3ZSdyZSBpbiBhIGN0b3JcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlNlc3Npb25Nb25pdG9yIGN0b3I6IGVycm9yIGZyb20gZ2V0VXNlcjpcIiwgZXJyLm1lc3NhZ2UpO1xuICAgICAgICB9KSk7XG4gICAgfVxuXG4gICAgZ2V0IF9zZXR0aW5ncygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VzZXJNYW5hZ2VyLnNldHRpbmdzO1xuICAgIH1cbiAgICBnZXQgX21ldGFkYXRhU2VydmljZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VzZXJNYW5hZ2VyLm1ldGFkYXRhU2VydmljZTtcbiAgICB9XG4gICAgZ2V0IF9jbGllbnRfaWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZXR0aW5ncy5jbGllbnRfaWQ7XG4gICAgfVxuICAgIGdldCBfY2hlY2tTZXNzaW9uSW50ZXJ2YWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZXR0aW5ncy5jaGVja1Nlc3Npb25JbnRlcnZhbDtcbiAgICB9XG4gICAgZ2V0IF9zdG9wQ2hlY2tTZXNzaW9uT25FcnJvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NldHRpbmdzLnN0b3BDaGVja1Nlc3Npb25PbkVycm9yO1xuICAgIH1cblxuICAgIF9zdGFydCh1c2VyKSB7XG4gICAgICAgIGxldCBzZXNzaW9uX3N0YXRlID0gdXNlci5zZXNzaW9uX3N0YXRlO1xuXG4gICAgICAgIGlmIChzZXNzaW9uX3N0YXRlKSB7XG4gICAgICAgICAgICBpZiAodXNlci5wcm9maWxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3ViID0gdXNlci5wcm9maWxlLnN1YjtcbiAgICAgICAgICAgICAgICB0aGlzLl9zaWQgPSB1c2VyLnByb2ZpbGUuc2lkO1xuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlNlc3Npb25Nb25pdG9yLl9zdGFydDogc2Vzc2lvbl9zdGF0ZTpcIiwgc2Vzc2lvbl9zdGF0ZSwgXCIsIHN1YjpcIiwgdGhpcy5fc3ViKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N1YiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB0aGlzLl9zaWQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiU2Vzc2lvbk1vbml0b3IuX3N0YXJ0OiBzZXNzaW9uX3N0YXRlOlwiLCBzZXNzaW9uX3N0YXRlLCBcIiwgYW5vbnltb3VzIHVzZXJcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5fY2hlY2tTZXNzaW9uSUZyYW1lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWV0YWRhdGFTZXJ2aWNlLmdldENoZWNrU2Vzc2lvbklmcmFtZSgpLnRoZW4odXJsID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVybCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiU2Vzc2lvbk1vbml0b3IuX3N0YXJ0OiBJbml0aWFsaXppbmcgY2hlY2sgc2Vzc2lvbiBpZnJhbWVcIilcblxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNsaWVudF9pZCA9IHRoaXMuX2NsaWVudF9pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbnRlcnZhbCA9IHRoaXMuX2NoZWNrU2Vzc2lvbkludGVydmFsO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN0b3BPbkVycm9yID0gdGhpcy5fc3RvcENoZWNrU2Vzc2lvbk9uRXJyb3I7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrU2Vzc2lvbklGcmFtZSA9IG5ldyB0aGlzLl9DaGVja1Nlc3Npb25JRnJhbWVDdG9yKHRoaXMuX2NhbGxiYWNrLmJpbmQodGhpcyksIGNsaWVudF9pZCwgdXJsLCBpbnRlcnZhbCwgc3RvcE9uRXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tTZXNzaW9uSUZyYW1lLmxvYWQoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGVja1Nlc3Npb25JRnJhbWUuc3RhcnQoc2Vzc2lvbl9zdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZy53YXJuKFwiU2Vzc2lvbk1vbml0b3IuX3N0YXJ0OiBObyBjaGVjayBzZXNzaW9uIGlmcmFtZSBmb3VuZCBpbiB0aGUgbWV0YWRhdGFcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KS5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBjYXRjaCB0byBzdXBwcmVzcyBlcnJvcnMgc2luY2Ugd2UncmUgaW4gbm9uLXByb21pc2UgY2FsbGJhY2tcbiAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKFwiU2Vzc2lvbk1vbml0b3IuX3N0YXJ0OiBFcnJvciBmcm9tIGdldENoZWNrU2Vzc2lvbklmcmFtZTpcIiwgZXJyLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tTZXNzaW9uSUZyYW1lLnN0YXJ0KHNlc3Npb25fc3RhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3N0b3AoKSB7XG4gICAgICAgIHRoaXMuX3N1YiA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fc2lkID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmICh0aGlzLl9jaGVja1Nlc3Npb25JRnJhbWUpIHtcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlNlc3Npb25Nb25pdG9yLl9zdG9wXCIpO1xuICAgICAgICAgICAgdGhpcy5fY2hlY2tTZXNzaW9uSUZyYW1lLnN0b3AoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9zZXR0aW5ncy5tb25pdG9yQW5vbnltb3VzU2Vzc2lvbikge1xuICAgICAgICAgICAgLy8gdXNpbmcgYSB0aW1lciB0byBkZWxheSByZS1pbml0aWFsaXphdGlvbiB0byBhdm9pZCByYWNlIGNvbmRpdGlvbnMgZHVyaW5nIHNpZ25vdXRcbiAgICAgICAgICAgIGxldCB0aW1lckhhbmRsZSA9IHRoaXMuX3RpbWVyLnNldEludGVydmFsKCgpPT57XG4gICAgICAgICAgICAgICAgdGhpcy5fdGltZXIuY2xlYXJJbnRlcnZhbCh0aW1lckhhbmRsZSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl91c2VyTWFuYWdlci5xdWVyeVNlc3Npb25TdGF0dXMoKS50aGVuKHNlc3Npb24gPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdG1wVXNlciA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb25fc3RhdGUgOiBzZXNzaW9uLnNlc3Npb25fc3RhdGVcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlc3Npb24uc3ViICYmIHNlc3Npb24uc2lkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0bXBVc2VyLnByb2ZpbGUgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViOiBzZXNzaW9uLnN1YixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWQ6IHNlc3Npb24uc2lkXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0YXJ0KHRtcFVzZXIpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNhdGNoIHRvIHN1cHByZXNzIGVycm9ycyBzaW5jZSB3ZSdyZSBpbiBhIGNhbGxiYWNrXG4gICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIlNlc3Npb25Nb25pdG9yOiBlcnJvciBmcm9tIHF1ZXJ5U2Vzc2lvblN0YXR1czpcIiwgZXJyLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9LCAxMDAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9jYWxsYmFjaygpIHtcbiAgICAgICAgdGhpcy5fdXNlck1hbmFnZXIucXVlcnlTZXNzaW9uU3RhdHVzKCkudGhlbihzZXNzaW9uID0+IHtcbiAgICAgICAgICAgIHZhciByYWlzZUV2ZW50ID0gdHJ1ZTtcblxuICAgICAgICAgICAgaWYgKHNlc3Npb24pIHtcbiAgICAgICAgICAgICAgICBpZiAoc2Vzc2lvbi5zdWIgPT09IHRoaXMuX3N1Yikge1xuICAgICAgICAgICAgICAgICAgICByYWlzZUV2ZW50ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrU2Vzc2lvbklGcmFtZS5zdGFydChzZXNzaW9uLnNlc3Npb25fc3RhdGUpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZXNzaW9uLnNpZCA9PT0gdGhpcy5fc2lkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJTZXNzaW9uTW9uaXRvci5fY2FsbGJhY2s6IFNhbWUgc3ViIHN0aWxsIGxvZ2dlZCBpbiBhdCBPUCwgcmVzdGFydGluZyBjaGVjayBzZXNzaW9uIGlmcmFtZTsgc2Vzc2lvbl9zdGF0ZTpcIiwgc2Vzc2lvbi5zZXNzaW9uX3N0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlNlc3Npb25Nb25pdG9yLl9jYWxsYmFjazogU2FtZSBzdWIgc3RpbGwgbG9nZ2VkIGluIGF0IE9QLCBzZXNzaW9uIHN0YXRlIGhhcyBjaGFuZ2VkLCByZXN0YXJ0aW5nIGNoZWNrIHNlc3Npb24gaWZyYW1lOyBzZXNzaW9uX3N0YXRlOlwiLCBzZXNzaW9uLnNlc3Npb25fc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdXNlck1hbmFnZXIuZXZlbnRzLl9yYWlzZVVzZXJTZXNzaW9uQ2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJTZXNzaW9uTW9uaXRvci5fY2FsbGJhY2s6IERpZmZlcmVudCBzdWJqZWN0IHNpZ25lZCBpbnRvIE9QOlwiLCBzZXNzaW9uLnN1Yik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiU2Vzc2lvbk1vbml0b3IuX2NhbGxiYWNrOiBTdWJqZWN0IG5vIGxvbmdlciBzaWduZWQgaW50byBPUFwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHJhaXNlRXZlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fc3ViKSB7XG4gICAgICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlNlc3Npb25Nb25pdG9yLl9jYWxsYmFjazogU2Vzc2lvbk1vbml0b3IuX2NhbGxiYWNrOyByYWlzaW5nIHNpZ25lZCBvdXQgZXZlbnRcIik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3VzZXJNYW5hZ2VyLmV2ZW50cy5fcmFpc2VVc2VyU2lnbmVkT3V0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJTZXNzaW9uTW9uaXRvci5fY2FsbGJhY2s6IFNlc3Npb25Nb25pdG9yLl9jYWxsYmFjazsgcmFpc2luZyBzaWduZWQgaW4gZXZlbnRcIik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3VzZXJNYW5hZ2VyLmV2ZW50cy5fcmFpc2VVc2VyU2lnbmVkSW4oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5fc3ViKSB7XG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiU2Vzc2lvbk1vbml0b3IuX2NhbGxiYWNrOiBFcnJvciBjYWxsaW5nIHF1ZXJ5Q3VycmVudFNpZ25pblNlc3Npb247IHJhaXNpbmcgc2lnbmVkIG91dCBldmVudFwiLCBlcnIubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fdXNlck1hbmFnZXIuZXZlbnRzLl9yYWlzZVVzZXJTaWduZWRPdXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cuanMnO1xuaW1wb3J0IHsgVXJsVXRpbGl0eSB9IGZyb20gJy4vVXJsVXRpbGl0eS5qcyc7XG5pbXBvcnQgeyBTaWduaW5TdGF0ZSB9IGZyb20gJy4vU2lnbmluU3RhdGUuanMnO1xuXG5leHBvcnQgY2xhc3MgU2lnbmluUmVxdWVzdCB7XG4gICAgY29uc3RydWN0b3Ioe1xuICAgICAgICAvLyBtYW5kYXRvcnlcbiAgICAgICAgdXJsLCBjbGllbnRfaWQsIHJlZGlyZWN0X3VyaSwgcmVzcG9uc2VfdHlwZSwgc2NvcGUsIGF1dGhvcml0eSxcbiAgICAgICAgLy8gb3B0aW9uYWxcbiAgICAgICAgZGF0YSwgcHJvbXB0LCBkaXNwbGF5LCBtYXhfYWdlLCB1aV9sb2NhbGVzLCBpZF90b2tlbl9oaW50LCBsb2dpbl9oaW50LCBhY3JfdmFsdWVzLCByZXNvdXJjZSwgcmVzcG9uc2VfbW9kZSxcbiAgICAgICAgcmVxdWVzdCwgcmVxdWVzdF91cmksIGV4dHJhUXVlcnlQYXJhbXMsIHJlcXVlc3RfdHlwZSwgY2xpZW50X3NlY3JldCwgZXh0cmFUb2tlblBhcmFtcywgc2tpcFVzZXJJbmZvXG4gICAgfSkge1xuICAgICAgICBpZiAoIXVybCkge1xuICAgICAgICAgICAgTG9nLmVycm9yKFwiU2lnbmluUmVxdWVzdC5jdG9yOiBObyB1cmwgcGFzc2VkXCIpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidXJsXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY2xpZW50X2lkKSB7XG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJTaWduaW5SZXF1ZXN0LmN0b3I6IE5vIGNsaWVudF9pZCBwYXNzZWRcIik7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjbGllbnRfaWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFyZWRpcmVjdF91cmkpIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlNpZ25pblJlcXVlc3QuY3RvcjogTm8gcmVkaXJlY3RfdXJpIHBhc3NlZFwiKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInJlZGlyZWN0X3VyaVwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXJlc3BvbnNlX3R5cGUpIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlNpZ25pblJlcXVlc3QuY3RvcjogTm8gcmVzcG9uc2VfdHlwZSBwYXNzZWRcIik7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyZXNwb25zZV90eXBlXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc2NvcGUpIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlNpZ25pblJlcXVlc3QuY3RvcjogTm8gc2NvcGUgcGFzc2VkXCIpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwic2NvcGVcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFhdXRob3JpdHkpIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlNpZ25pblJlcXVlc3QuY3RvcjogTm8gYXV0aG9yaXR5IHBhc3NlZFwiKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImF1dGhvcml0eVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBvaWRjID0gU2lnbmluUmVxdWVzdC5pc09pZGMocmVzcG9uc2VfdHlwZSk7XG4gICAgICAgIGxldCBjb2RlID0gU2lnbmluUmVxdWVzdC5pc0NvZGUocmVzcG9uc2VfdHlwZSk7XG5cbiAgICAgICAgaWYgKCFyZXNwb25zZV9tb2RlKSB7XG4gICAgICAgICAgICByZXNwb25zZV9tb2RlID0gU2lnbmluUmVxdWVzdC5pc0NvZGUocmVzcG9uc2VfdHlwZSkgPyBcInF1ZXJ5XCIgOiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IG5ldyBTaWduaW5TdGF0ZSh7IG5vbmNlOiBvaWRjLCBcbiAgICAgICAgICAgIGRhdGEsIGNsaWVudF9pZCwgYXV0aG9yaXR5LCByZWRpcmVjdF91cmksIFxuICAgICAgICAgICAgY29kZV92ZXJpZmllcjogY29kZSwgXG4gICAgICAgICAgICByZXF1ZXN0X3R5cGUsIHJlc3BvbnNlX21vZGUsXG4gICAgICAgICAgICBjbGllbnRfc2VjcmV0LCBzY29wZSwgZXh0cmFUb2tlblBhcmFtcywgc2tpcFVzZXJJbmZvIH0pO1xuXG4gICAgICAgIHVybCA9IFVybFV0aWxpdHkuYWRkUXVlcnlQYXJhbSh1cmwsIFwiY2xpZW50X2lkXCIsIGNsaWVudF9pZCk7XG4gICAgICAgIHVybCA9IFVybFV0aWxpdHkuYWRkUXVlcnlQYXJhbSh1cmwsIFwicmVkaXJlY3RfdXJpXCIsIHJlZGlyZWN0X3VyaSk7XG4gICAgICAgIHVybCA9IFVybFV0aWxpdHkuYWRkUXVlcnlQYXJhbSh1cmwsIFwicmVzcG9uc2VfdHlwZVwiLCByZXNwb25zZV90eXBlKTtcbiAgICAgICAgdXJsID0gVXJsVXRpbGl0eS5hZGRRdWVyeVBhcmFtKHVybCwgXCJzY29wZVwiLCBzY29wZSk7XG5cbiAgICAgICAgdXJsID0gVXJsVXRpbGl0eS5hZGRRdWVyeVBhcmFtKHVybCwgXCJzdGF0ZVwiLCB0aGlzLnN0YXRlLmlkKTtcbiAgICAgICAgaWYgKG9pZGMpIHtcbiAgICAgICAgICAgIHVybCA9IFVybFV0aWxpdHkuYWRkUXVlcnlQYXJhbSh1cmwsIFwibm9uY2VcIiwgdGhpcy5zdGF0ZS5ub25jZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvZGUpIHtcbiAgICAgICAgICAgIHVybCA9IFVybFV0aWxpdHkuYWRkUXVlcnlQYXJhbSh1cmwsIFwiY29kZV9jaGFsbGVuZ2VcIiwgdGhpcy5zdGF0ZS5jb2RlX2NoYWxsZW5nZSk7XG4gICAgICAgICAgICB1cmwgPSBVcmxVdGlsaXR5LmFkZFF1ZXJ5UGFyYW0odXJsLCBcImNvZGVfY2hhbGxlbmdlX21ldGhvZFwiLCBcIlMyNTZcIik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb3B0aW9uYWwgPSB7IHByb21wdCwgZGlzcGxheSwgbWF4X2FnZSwgdWlfbG9jYWxlcywgaWRfdG9rZW5faGludCwgbG9naW5faGludCwgYWNyX3ZhbHVlcywgcmVzb3VyY2UsIHJlcXVlc3QsIHJlcXVlc3RfdXJpLCByZXNwb25zZV9tb2RlIH07XG4gICAgICAgIGZvcihsZXQga2V5IGluIG9wdGlvbmFsKXtcbiAgICAgICAgICAgIGlmIChvcHRpb25hbFtrZXldKSB7XG4gICAgICAgICAgICAgICAgdXJsID0gVXJsVXRpbGl0eS5hZGRRdWVyeVBhcmFtKHVybCwga2V5LCBvcHRpb25hbFtrZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvcihsZXQga2V5IGluIGV4dHJhUXVlcnlQYXJhbXMpe1xuICAgICAgICAgICAgdXJsID0gVXJsVXRpbGl0eS5hZGRRdWVyeVBhcmFtKHVybCwga2V5LCBleHRyYVF1ZXJ5UGFyYW1zW2tleV0pXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnVybCA9IHVybDtcbiAgICB9XG5cbiAgICBzdGF0aWMgaXNPaWRjKHJlc3BvbnNlX3R5cGUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlc3BvbnNlX3R5cGUuc3BsaXQoL1xccysvZykuZmlsdGVyKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybiBpdGVtID09PSBcImlkX3Rva2VuXCI7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gISEocmVzdWx0WzBdKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgaXNPQXV0aChyZXNwb25zZV90eXBlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZXNwb25zZV90eXBlLnNwbGl0KC9cXHMrL2cpLmZpbHRlcihmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICByZXR1cm4gaXRlbSA9PT0gXCJ0b2tlblwiO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuICEhKHJlc3VsdFswXSk7XG4gICAgfVxuICAgIFxuICAgIHN0YXRpYyBpc0NvZGUocmVzcG9uc2VfdHlwZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVzcG9uc2VfdHlwZS5zcGxpdCgvXFxzKy9nKS5maWx0ZXIoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW0gPT09IFwiY29kZVwiO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuICEhKHJlc3VsdFswXSk7XG4gICAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgVXJsVXRpbGl0eSB9IGZyb20gJy4vVXJsVXRpbGl0eS5qcyc7XG5cbmNvbnN0IE9pZGNTY29wZSA9IFwib3BlbmlkXCI7XG5cbmV4cG9ydCBjbGFzcyBTaWduaW5SZXNwb25zZSB7XG4gICAgY29uc3RydWN0b3IodXJsLCBkZWxpbWl0ZXIgPSBcIiNcIikge1xuXG4gICAgICAgIHZhciB2YWx1ZXMgPSBVcmxVdGlsaXR5LnBhcnNlVXJsRnJhZ21lbnQodXJsLCBkZWxpbWl0ZXIpO1xuXG4gICAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZXMpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodmFsdWVzLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgdGhpc1trZXldID0gdmFsdWVzW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wcm9maWxlID0gdW5kZWZpbmVkOyAvLyB3aWxsIGJlIHNldCBmcm9tIFJlc3BvbnNlVmFsaWRhdG9yXG4gICAgfVxuXG4gICAgZ2V0IGV4cGlyZXNfaW4oKSB7XG4gICAgICAgIGlmICh0aGlzLmV4cGlyZXNfYXQpIHtcbiAgICAgICAgICAgIGxldCBub3cgPSBwYXJzZUludChEYXRlLm5vdygpIC8gMTAwMCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5leHBpcmVzX2F0IC0gbm93O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHNldCBleHBpcmVzX2luKHZhbHVlKXtcbiAgICAgICAgbGV0IGV4cGlyZXNfaW4gPSBwYXJzZUludCh2YWx1ZSk7XG4gICAgICAgIGlmICh0eXBlb2YgZXhwaXJlc19pbiA9PT0gJ251bWJlcicgJiYgZXhwaXJlc19pbiA+IDApIHtcbiAgICAgICAgICAgIGxldCBub3cgPSBwYXJzZUludChEYXRlLm5vdygpIC8gMTAwMCk7XG4gICAgICAgICAgICB0aGlzLmV4cGlyZXNfYXQgPSBub3cgKyBleHBpcmVzX2luO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IGV4cGlyZWQoKSB7XG4gICAgICAgIGxldCBleHBpcmVzX2luID0gdGhpcy5leHBpcmVzX2luO1xuICAgICAgICBpZiAoZXhwaXJlc19pbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZXhwaXJlc19pbiA8PSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgZ2V0IHNjb3BlcygpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnNjb3BlIHx8IFwiXCIpLnNwbGl0KFwiIFwiKTtcbiAgICB9XG5cbiAgICBnZXQgaXNPcGVuSWRDb25uZWN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zY29wZXMuaW5kZXhPZihPaWRjU2NvcGUpID49IDAgfHwgISF0aGlzLmlkX3Rva2VuO1xuICAgIH1cbn1cbiIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nLmpzJztcbmltcG9ydCB7IFN0YXRlIH0gZnJvbSAnLi9TdGF0ZS5qcyc7XG5pbXBvcnQgeyBKb3NlVXRpbCB9IGZyb20gJy4vSm9zZVV0aWwuanMnO1xuaW1wb3J0IHJhbmRvbSBmcm9tICcuL3JhbmRvbS5qcyc7XG5cbmV4cG9ydCBjbGFzcyBTaWduaW5TdGF0ZSBleHRlbmRzIFN0YXRlIHtcbiAgICBjb25zdHJ1Y3Rvcih7bm9uY2UsIGF1dGhvcml0eSwgY2xpZW50X2lkLCByZWRpcmVjdF91cmksIGNvZGVfdmVyaWZpZXIsIHJlc3BvbnNlX21vZGUsIGNsaWVudF9zZWNyZXQsIHNjb3BlLCBleHRyYVRva2VuUGFyYW1zLCBza2lwVXNlckluZm99ID0ge30pIHtcbiAgICAgICAgc3VwZXIoYXJndW1lbnRzWzBdKTtcblxuICAgICAgICBpZiAobm9uY2UgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHRoaXMuX25vbmNlID0gcmFuZG9tKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobm9uY2UpIHtcbiAgICAgICAgICAgIHRoaXMuX25vbmNlID0gbm9uY2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29kZV92ZXJpZmllciA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgLy8gcmFuZG9tKCkgcHJvZHVjZXMgMzIgbGVuZ3RoXG4gICAgICAgICAgICB0aGlzLl9jb2RlX3ZlcmlmaWVyID0gcmFuZG9tKCkgKyByYW5kb20oKSArIHJhbmRvbSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNvZGVfdmVyaWZpZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvZGVfdmVyaWZpZXIgPSBjb2RlX3ZlcmlmaWVyO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAodGhpcy5jb2RlX3ZlcmlmaWVyKSB7XG4gICAgICAgICAgICBsZXQgaGFzaCA9IEpvc2VVdGlsLmhhc2hTdHJpbmcodGhpcy5jb2RlX3ZlcmlmaWVyLCBcIlNIQTI1NlwiKTtcbiAgICAgICAgICAgIHRoaXMuX2NvZGVfY2hhbGxlbmdlID0gSm9zZVV0aWwuaGV4VG9CYXNlNjRVcmwoaGFzaCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9yZWRpcmVjdF91cmkgPSByZWRpcmVjdF91cmk7XG4gICAgICAgIHRoaXMuX2F1dGhvcml0eSA9IGF1dGhvcml0eTtcbiAgICAgICAgdGhpcy5fY2xpZW50X2lkID0gY2xpZW50X2lkO1xuICAgICAgICB0aGlzLl9yZXNwb25zZV9tb2RlID0gcmVzcG9uc2VfbW9kZTtcbiAgICAgICAgdGhpcy5fY2xpZW50X3NlY3JldCA9IGNsaWVudF9zZWNyZXQ7XG4gICAgICAgIHRoaXMuX3Njb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuX2V4dHJhVG9rZW5QYXJhbXMgPSBleHRyYVRva2VuUGFyYW1zO1xuICAgICAgICB0aGlzLl9za2lwVXNlckluZm8gPSBza2lwVXNlckluZm87XG4gICAgfVxuXG4gICAgZ2V0IG5vbmNlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbm9uY2U7XG4gICAgfVxuICAgIGdldCBhdXRob3JpdHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hdXRob3JpdHk7XG4gICAgfVxuICAgIGdldCBjbGllbnRfaWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnRfaWQ7XG4gICAgfVxuICAgIGdldCByZWRpcmVjdF91cmkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZWRpcmVjdF91cmk7XG4gICAgfVxuICAgIGdldCBjb2RlX3ZlcmlmaWVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29kZV92ZXJpZmllcjtcbiAgICB9XG4gICAgZ2V0IGNvZGVfY2hhbGxlbmdlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29kZV9jaGFsbGVuZ2U7XG4gICAgfVxuICAgIGdldCByZXNwb25zZV9tb2RlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVzcG9uc2VfbW9kZTtcbiAgICB9XG4gICAgZ2V0IGNsaWVudF9zZWNyZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnRfc2VjcmV0O1xuICAgIH1cbiAgICBnZXQgc2NvcGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zY29wZTtcbiAgICB9XG4gICAgZ2V0IGV4dHJhVG9rZW5QYXJhbXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leHRyYVRva2VuUGFyYW1zO1xuICAgIH1cbiAgICBnZXQgc2tpcFVzZXJJbmZvKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2tpcFVzZXJJbmZvO1xuICAgIH1cbiAgICBcbiAgICB0b1N0b3JhZ2VTdHJpbmcoKSB7XG4gICAgICAgIExvZy5kZWJ1ZyhcIlNpZ25pblN0YXRlLnRvU3RvcmFnZVN0cmluZ1wiKTtcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIGlkOiB0aGlzLmlkLFxuICAgICAgICAgICAgZGF0YTogdGhpcy5kYXRhLFxuICAgICAgICAgICAgY3JlYXRlZDogdGhpcy5jcmVhdGVkLFxuICAgICAgICAgICAgcmVxdWVzdF90eXBlOiB0aGlzLnJlcXVlc3RfdHlwZSxcbiAgICAgICAgICAgIG5vbmNlOiB0aGlzLm5vbmNlLFxuICAgICAgICAgICAgY29kZV92ZXJpZmllcjogdGhpcy5jb2RlX3ZlcmlmaWVyLFxuICAgICAgICAgICAgcmVkaXJlY3RfdXJpOiB0aGlzLnJlZGlyZWN0X3VyaSxcbiAgICAgICAgICAgIGF1dGhvcml0eTogdGhpcy5hdXRob3JpdHksXG4gICAgICAgICAgICBjbGllbnRfaWQ6IHRoaXMuY2xpZW50X2lkLFxuICAgICAgICAgICAgcmVzcG9uc2VfbW9kZTogdGhpcy5yZXNwb25zZV9tb2RlLFxuICAgICAgICAgICAgY2xpZW50X3NlY3JldDogdGhpcy5jbGllbnRfc2VjcmV0LFxuICAgICAgICAgICAgc2NvcGU6IHRoaXMuc2NvcGUsXG4gICAgICAgICAgICBleHRyYVRva2VuUGFyYW1zIDogdGhpcy5leHRyYVRva2VuUGFyYW1zLFxuICAgICAgICAgICAgc2tpcFVzZXJJbmZvOiB0aGlzLnNraXBVc2VySW5mb1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbVN0b3JhZ2VTdHJpbmcoc3RvcmFnZVN0cmluZykge1xuICAgICAgICBMb2cuZGVidWcoXCJTaWduaW5TdGF0ZS5mcm9tU3RvcmFnZVN0cmluZ1wiKTtcbiAgICAgICAgdmFyIGRhdGEgPSBKU09OLnBhcnNlKHN0b3JhZ2VTdHJpbmcpO1xuICAgICAgICByZXR1cm4gbmV3IFNpZ25pblN0YXRlKGRhdGEpO1xuICAgIH1cbn1cbiIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nLmpzJztcbmltcG9ydCB7IFVybFV0aWxpdHkgfSBmcm9tICcuL1VybFV0aWxpdHkuanMnO1xuaW1wb3J0IHsgU3RhdGUgfSBmcm9tICcuL1N0YXRlLmpzJztcblxuZXhwb3J0IGNsYXNzIFNpZ25vdXRSZXF1ZXN0IHtcbiAgICBjb25zdHJ1Y3Rvcih7dXJsLCBpZF90b2tlbl9oaW50LCBwb3N0X2xvZ291dF9yZWRpcmVjdF91cmksIGRhdGEsIGV4dHJhUXVlcnlQYXJhbXMsIHJlcXVlc3RfdHlwZX0pIHtcbiAgICAgICAgaWYgKCF1cmwpIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlNpZ25vdXRSZXF1ZXN0LmN0b3I6IE5vIHVybCBwYXNzZWRcIik7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1cmxcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaWRfdG9rZW5faGludCkge1xuICAgICAgICAgICAgdXJsID0gVXJsVXRpbGl0eS5hZGRRdWVyeVBhcmFtKHVybCwgXCJpZF90b2tlbl9oaW50XCIsIGlkX3Rva2VuX2hpbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSkge1xuICAgICAgICAgICAgdXJsID0gVXJsVXRpbGl0eS5hZGRRdWVyeVBhcmFtKHVybCwgXCJwb3N0X2xvZ291dF9yZWRpcmVjdF91cmlcIiwgcG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpKTtcblxuICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gbmV3IFN0YXRlKHsgZGF0YSwgcmVxdWVzdF90eXBlIH0pO1xuXG4gICAgICAgICAgICAgICAgdXJsID0gVXJsVXRpbGl0eS5hZGRRdWVyeVBhcmFtKHVybCwgXCJzdGF0ZVwiLCB0aGlzLnN0YXRlLmlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvcihsZXQga2V5IGluIGV4dHJhUXVlcnlQYXJhbXMpe1xuICAgICAgICAgICAgdXJsID0gVXJsVXRpbGl0eS5hZGRRdWVyeVBhcmFtKHVybCwga2V5LCBleHRyYVF1ZXJ5UGFyYW1zW2tleV0pXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnVybCA9IHVybDtcbiAgICB9XG59XG4iLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5pbXBvcnQgeyBVcmxVdGlsaXR5IH0gZnJvbSAnLi9VcmxVdGlsaXR5LmpzJztcblxuZXhwb3J0IGNsYXNzIFNpZ25vdXRSZXNwb25zZSB7XG4gICAgY29uc3RydWN0b3IodXJsKSB7XG5cbiAgICAgICAgdmFyIHZhbHVlcyA9IFVybFV0aWxpdHkucGFyc2VVcmxGcmFnbWVudCh1cmwsIFwiP1wiKTtcblxuICAgICAgICB0aGlzLmVycm9yID0gdmFsdWVzLmVycm9yO1xuICAgICAgICB0aGlzLmVycm9yX2Rlc2NyaXB0aW9uID0gdmFsdWVzLmVycm9yX2Rlc2NyaXB0aW9uO1xuICAgICAgICB0aGlzLmVycm9yX3VyaSA9IHZhbHVlcy5lcnJvcl91cmk7XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHZhbHVlcy5zdGF0ZTtcbiAgICB9XG59XG4iLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5pbXBvcnQgeyBMb2cgfSBmcm9tICcuL0xvZy5qcyc7XG5cbmV4cG9ydCBjbGFzcyBTaWxlbnRSZW5ld1NlcnZpY2Uge1xuXG4gICAgY29uc3RydWN0b3IodXNlck1hbmFnZXIpIHtcbiAgICAgICAgdGhpcy5fdXNlck1hbmFnZXIgPSB1c2VyTWFuYWdlcjtcbiAgICB9XG5cbiAgICBzdGFydCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9jYWxsYmFjaykge1xuICAgICAgICAgICAgdGhpcy5fY2FsbGJhY2sgPSB0aGlzLl90b2tlbkV4cGlyaW5nLmJpbmQodGhpcyk7XG4gICAgICAgICAgICB0aGlzLl91c2VyTWFuYWdlci5ldmVudHMuYWRkQWNjZXNzVG9rZW5FeHBpcmluZyh0aGlzLl9jYWxsYmFjayk7XG5cbiAgICAgICAgICAgIC8vIHRoaXMgd2lsbCB0cmlnZ2VyIGxvYWRpbmcgb2YgdGhlIHVzZXIgc28gdGhlIGV4cGlyaW5nIGV2ZW50cyBjYW4gYmUgaW5pdGlhbGl6ZWRcbiAgICAgICAgICAgIHRoaXMuX3VzZXJNYW5hZ2VyLmdldFVzZXIoKS50aGVuKHVzZXI9PntcbiAgICAgICAgICAgICAgICAvLyBkZWxpYmVyYXRlIG5vcFxuICAgICAgICAgICAgfSkuY2F0Y2goZXJyPT57XG4gICAgICAgICAgICAgICAgLy8gY2F0Y2ggdG8gc3VwcHJlc3MgZXJyb3JzIHNpbmNlIHdlJ3JlIGluIGEgY3RvclxuICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIlNpbGVudFJlbmV3U2VydmljZS5zdGFydDogRXJyb3IgZnJvbSBnZXRVc2VyOlwiLCBlcnIubWVzc2FnZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0b3AoKSB7XG4gICAgICAgIGlmICh0aGlzLl9jYWxsYmFjaykge1xuICAgICAgICAgICAgdGhpcy5fdXNlck1hbmFnZXIuZXZlbnRzLnJlbW92ZUFjY2Vzc1Rva2VuRXhwaXJpbmcodGhpcy5fY2FsbGJhY2spO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2NhbGxiYWNrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3Rva2VuRXhwaXJpbmcoKSB7XG4gICAgICAgIHRoaXMuX3VzZXJNYW5hZ2VyLnNpZ25pblNpbGVudCgpLnRoZW4odXNlciA9PiB7XG4gICAgICAgICAgICBMb2cuZGVidWcoXCJTaWxlbnRSZW5ld1NlcnZpY2UuX3Rva2VuRXhwaXJpbmc6IFNpbGVudCB0b2tlbiByZW5ld2FsIHN1Y2Nlc3NmdWxcIik7XG4gICAgICAgIH0sIGVyciA9PiB7XG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJTaWxlbnRSZW5ld1NlcnZpY2UuX3Rva2VuRXhwaXJpbmc6IEVycm9yIGZyb20gc2lnbmluU2lsZW50OlwiLCBlcnIubWVzc2FnZSk7XG4gICAgICAgICAgICB0aGlzLl91c2VyTWFuYWdlci5ldmVudHMuX3JhaXNlU2lsZW50UmVuZXdFcnJvcihlcnIpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5pbXBvcnQgeyBMb2cgfSBmcm9tICcuL0xvZy5qcyc7XG5pbXBvcnQgcmFuZG9tIGZyb20gJy4vcmFuZG9tLmpzJztcblxuZXhwb3J0IGNsYXNzIFN0YXRlIHtcbiAgICBjb25zdHJ1Y3Rvcih7aWQsIGRhdGEsIGNyZWF0ZWQsIHJlcXVlc3RfdHlwZX0gPSB7fSkge1xuICAgICAgICB0aGlzLl9pZCA9IGlkIHx8IHJhbmRvbSgpO1xuICAgICAgICB0aGlzLl9kYXRhID0gZGF0YTtcblxuICAgICAgICBpZiAodHlwZW9mIGNyZWF0ZWQgPT09ICdudW1iZXInICYmIGNyZWF0ZWQgPiAwKSB7XG4gICAgICAgICAgICB0aGlzLl9jcmVhdGVkID0gY3JlYXRlZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2NyZWF0ZWQgPSBwYXJzZUludChEYXRlLm5vdygpIC8gMTAwMCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcmVxdWVzdF90eXBlID0gIHJlcXVlc3RfdHlwZTtcbiAgICB9XG5cbiAgICBnZXQgaWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcbiAgICB9XG4gICAgZ2V0IGRhdGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhO1xuICAgIH1cbiAgICBnZXQgY3JlYXRlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NyZWF0ZWQ7XG4gICAgfVxuICAgIGdldCByZXF1ZXN0X3R5cGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0X3R5cGU7XG4gICAgfVxuXG4gICAgdG9TdG9yYWdlU3RyaW5nKCkge1xuICAgICAgICBMb2cuZGVidWcoXCJTdGF0ZS50b1N0b3JhZ2VTdHJpbmdcIik7XG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBpZDogdGhpcy5pZCxcbiAgICAgICAgICAgIGRhdGE6IHRoaXMuZGF0YSxcbiAgICAgICAgICAgIGNyZWF0ZWQ6IHRoaXMuY3JlYXRlZCxcbiAgICAgICAgICAgIHJlcXVlc3RfdHlwZTogdGhpcy5yZXF1ZXN0X3R5cGVcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21TdG9yYWdlU3RyaW5nKHN0b3JhZ2VTdHJpbmcpIHtcbiAgICAgICAgTG9nLmRlYnVnKFwiU3RhdGUuZnJvbVN0b3JhZ2VTdHJpbmdcIik7XG4gICAgICAgIHJldHVybiBuZXcgU3RhdGUoSlNPTi5wYXJzZShzdG9yYWdlU3RyaW5nKSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGNsZWFyU3RhbGVTdGF0ZShzdG9yYWdlLCBhZ2UpIHtcblxuICAgICAgICB2YXIgY3V0b2ZmID0gRGF0ZS5ub3coKSAvIDEwMDAgLSBhZ2U7XG5cbiAgICAgICAgcmV0dXJuIHN0b3JhZ2UuZ2V0QWxsS2V5cygpLnRoZW4oa2V5cyA9PiB7XG4gICAgICAgICAgICBMb2cuZGVidWcoXCJTdGF0ZS5jbGVhclN0YWxlU3RhdGU6IGdvdCBrZXlzXCIsIGtleXMpO1xuXG4gICAgICAgICAgICB2YXIgcHJvbWlzZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgICAgIHZhciBwID0gc3RvcmFnZS5nZXQoa2V5KS50aGVuKGl0ZW0gPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmVtb3ZlID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gU3RhdGUuZnJvbVN0b3JhZ2VTdHJpbmcoaXRlbSlcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlN0YXRlLmNsZWFyU3RhbGVTdGF0ZTogZ290IGl0ZW0gZnJvbSBrZXk6IFwiLCBrZXksIHN0YXRlLmNyZWF0ZWQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLmNyZWF0ZWQgPD0gY3V0b2ZmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJTdGF0ZS5jbGVhclN0YWxlU3RhdGU6IEVycm9yIHBhcnNpbmcgc3RhdGUgZm9yIGtleVwiLCBrZXksIGUubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlN0YXRlLmNsZWFyU3RhbGVTdGF0ZTogbm8gaXRlbSBpbiBzdG9yYWdlIGZvciBrZXk6IFwiLCBrZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZW1vdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlN0YXRlLmNsZWFyU3RhbGVTdGF0ZTogcmVtb3ZlZCBpdGVtIGZvciBrZXk6IFwiLCBrZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0b3JhZ2UucmVtb3ZlKGtleSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHByb21pc2VzLnB1c2gocCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlN0YXRlLmNsZWFyU3RhbGVTdGF0ZTogd2FpdGluZyBvbiBwcm9taXNlIGNvdW50OlwiLCBwcm9taXNlcy5sZW5ndGgpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cuanMnO1xuaW1wb3J0IHsgR2xvYmFsIH0gZnJvbSAnLi9HbG9iYWwuanMnO1xuaW1wb3J0IHsgRXZlbnQgfSBmcm9tICcuL0V2ZW50LmpzJztcblxuY29uc3QgVGltZXJEdXJhdGlvbiA9IDU7IC8vIHNlY29uZHNcblxuZXhwb3J0IGNsYXNzIFRpbWVyIGV4dGVuZHMgRXZlbnQge1xuXG4gICAgY29uc3RydWN0b3IobmFtZSwgdGltZXIgPSBHbG9iYWwudGltZXIsIG5vd0Z1bmMgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgc3VwZXIobmFtZSk7XG4gICAgICAgIHRoaXMuX3RpbWVyID0gdGltZXI7XG5cbiAgICAgICAgaWYgKG5vd0Z1bmMpIHtcbiAgICAgICAgICAgIHRoaXMuX25vd0Z1bmMgPSBub3dGdW5jO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fbm93RnVuYyA9ICgpID0+IERhdGUubm93KCkgLyAxMDAwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IG5vdygpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KHRoaXMuX25vd0Z1bmMoKSk7XG4gICAgfVxuXG4gICAgaW5pdChkdXJhdGlvbikge1xuICAgICAgICBpZiAoZHVyYXRpb24gPD0gMCkge1xuICAgICAgICAgICAgZHVyYXRpb24gPSAxO1xuICAgICAgICB9XG4gICAgICAgIGR1cmF0aW9uID0gcGFyc2VJbnQoZHVyYXRpb24pO1xuXG4gICAgICAgIHZhciBleHBpcmF0aW9uID0gdGhpcy5ub3cgKyBkdXJhdGlvbjtcbiAgICAgICAgaWYgKHRoaXMuZXhwaXJhdGlvbiA9PT0gZXhwaXJhdGlvbiAmJiB0aGlzLl90aW1lckhhbmRsZSkge1xuICAgICAgICAgICAgLy8gbm8gbmVlZCB0byByZWluaXRpYWxpemUgdG8gc2FtZSBleHBpcmF0aW9uLCBzbyBiYWlsIG91dFxuICAgICAgICAgICAgTG9nLmRlYnVnKFwiVGltZXIuaW5pdCB0aW1lciBcIiArIHRoaXMuX25hbWUgKyBcIiBza2lwcGluZyBpbml0aWFsaXphdGlvbiBzaW5jZSBhbHJlYWR5IGluaXRpYWxpemVkIGZvciBleHBpcmF0aW9uOlwiLCB0aGlzLmV4cGlyYXRpb24pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jYW5jZWwoKTtcblxuICAgICAgICBMb2cuZGVidWcoXCJUaW1lci5pbml0IHRpbWVyIFwiICsgdGhpcy5fbmFtZSArIFwiIGZvciBkdXJhdGlvbjpcIiwgZHVyYXRpb24pO1xuICAgICAgICB0aGlzLl9leHBpcmF0aW9uID0gZXhwaXJhdGlvbjtcblxuICAgICAgICAvLyB3ZSdyZSB1c2luZyBhIGZhaXJseSBzaG9ydCB0aW1lciBhbmQgdGhlbiBjaGVja2luZyB0aGUgZXhwaXJhdGlvbiBpbiB0aGVcbiAgICAgICAgLy8gY2FsbGJhY2sgdG8gaGFuZGxlIHNjZW5hcmlvcyB3aGVyZSB0aGUgYnJvd3NlciBkZXZpY2Ugc2xlZXBzLCBhbmQgdGhlblxuICAgICAgICAvLyB0aGUgdGltZXJzIGVuZCB1cCBnZXR0aW5nIGRlbGF5ZWQuXG4gICAgICAgIHZhciB0aW1lckR1cmF0aW9uID0gVGltZXJEdXJhdGlvbjtcbiAgICAgICAgaWYgKGR1cmF0aW9uIDwgdGltZXJEdXJhdGlvbikge1xuICAgICAgICAgICAgdGltZXJEdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3RpbWVySGFuZGxlID0gdGhpcy5fdGltZXIuc2V0SW50ZXJ2YWwodGhpcy5fY2FsbGJhY2suYmluZCh0aGlzKSwgdGltZXJEdXJhdGlvbiAqIDEwMDApO1xuICAgIH1cbiAgICBcbiAgICBnZXQgZXhwaXJhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4cGlyYXRpb247XG4gICAgfVxuXG4gICAgY2FuY2VsKCkge1xuICAgICAgICBpZiAodGhpcy5fdGltZXJIYW5kbGUpIHtcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlRpbWVyLmNhbmNlbDogXCIsIHRoaXMuX25hbWUpO1xuICAgICAgICAgICAgdGhpcy5fdGltZXIuY2xlYXJJbnRlcnZhbCh0aGlzLl90aW1lckhhbmRsZSk7XG4gICAgICAgICAgICB0aGlzLl90aW1lckhhbmRsZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfY2FsbGJhY2soKSB7XG4gICAgICAgIHZhciBkaWZmID0gdGhpcy5fZXhwaXJhdGlvbiAtIHRoaXMubm93O1xuICAgICAgICBMb2cuZGVidWcoXCJUaW1lci5jYWxsYmFjazsgXCIgKyB0aGlzLl9uYW1lICsgXCIgdGltZXIgZXhwaXJlcyBpbjpcIiwgZGlmZik7XG5cbiAgICAgICAgaWYgKHRoaXMuX2V4cGlyYXRpb24gPD0gdGhpcy5ub3cpIHtcbiAgICAgICAgICAgIHRoaXMuY2FuY2VsKCk7XG4gICAgICAgICAgICBzdXBlci5yYWlzZSgpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgSnNvblNlcnZpY2UgfSBmcm9tICcuL0pzb25TZXJ2aWNlLmpzJztcbmltcG9ydCB7IE1ldGFkYXRhU2VydmljZSB9IGZyb20gJy4vTWV0YWRhdGFTZXJ2aWNlLmpzJztcbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nLmpzJztcblxuZXhwb3J0IGNsYXNzIFRva2VuQ2xpZW50IHtcbiAgICBjb25zdHJ1Y3RvcihzZXR0aW5ncywgSnNvblNlcnZpY2VDdG9yID0gSnNvblNlcnZpY2UsIE1ldGFkYXRhU2VydmljZUN0b3IgPSBNZXRhZGF0YVNlcnZpY2UpIHtcbiAgICAgICAgaWYgKCFzZXR0aW5ncykge1xuICAgICAgICAgICAgTG9nLmVycm9yKFwiVG9rZW5DbGllbnQuY3RvcjogTm8gc2V0dGluZ3MgcGFzc2VkXCIpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwic2V0dGluZ3NcIik7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9zZXR0aW5ncyA9IHNldHRpbmdzO1xuICAgICAgICB0aGlzLl9qc29uU2VydmljZSA9IG5ldyBKc29uU2VydmljZUN0b3IoKTtcbiAgICAgICAgdGhpcy5fbWV0YWRhdGFTZXJ2aWNlID0gbmV3IE1ldGFkYXRhU2VydmljZUN0b3IodGhpcy5fc2V0dGluZ3MpO1xuICAgIH1cblxuICAgIGV4Y2hhbmdlQ29kZShhcmdzID0ge30pIHtcbiAgICAgICAgYXJncyA9IE9iamVjdC5hc3NpZ24oe30sIGFyZ3MpO1xuXG4gICAgICAgIGFyZ3MuZ3JhbnRfdHlwZSA9IGFyZ3MuZ3JhbnRfdHlwZSB8fCBcImF1dGhvcml6YXRpb25fY29kZVwiO1xuICAgICAgICBhcmdzLmNsaWVudF9pZCA9IGFyZ3MuY2xpZW50X2lkIHx8IHRoaXMuX3NldHRpbmdzLmNsaWVudF9pZDtcbiAgICAgICAgYXJncy5jbGllbnRfc2VjcmV0ID0gYXJncy5jbGllbnRfc2VjcmV0IHx8IHRoaXMuX3NldHRpbmdzLmNsaWVudF9zZWNyZXQ7XG4gICAgICAgIGFyZ3MucmVkaXJlY3RfdXJpID0gYXJncy5yZWRpcmVjdF91cmkgfHwgdGhpcy5fc2V0dGluZ3MucmVkaXJlY3RfdXJpO1xuXG4gICAgICAgIHZhciBiYXNpY0F1dGggPSB1bmRlZmluZWQ7XG4gICAgICAgIHZhciBjbGllbnRfYXV0aGVudGljYXRpb24gPSBhcmdzLl9jbGllbnRfYXV0aGVudGljYXRpb24gfHwgdGhpcy5fc2V0dGluZ3MuX2NsaWVudF9hdXRoZW50aWNhdGlvbjtcbiAgICAgICAgZGVsZXRlIGFyZ3MuX2NsaWVudF9hdXRoZW50aWNhdGlvbjtcblxuICAgICAgICBpZiAoIWFyZ3MuY29kZSkge1xuICAgICAgICAgICAgTG9nLmVycm9yKFwiVG9rZW5DbGllbnQuZXhjaGFuZ2VDb2RlOiBObyBjb2RlIHBhc3NlZFwiKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJBIGNvZGUgaXMgcmVxdWlyZWRcIikpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghYXJncy5yZWRpcmVjdF91cmkpIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlRva2VuQ2xpZW50LmV4Y2hhbmdlQ29kZTogTm8gcmVkaXJlY3RfdXJpIHBhc3NlZFwiKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJBIHJlZGlyZWN0X3VyaSBpcyByZXF1aXJlZFwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFhcmdzLmNvZGVfdmVyaWZpZXIpIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlRva2VuQ2xpZW50LmV4Y2hhbmdlQ29kZTogTm8gY29kZV92ZXJpZmllciBwYXNzZWRcIik7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiQSBjb2RlX3ZlcmlmaWVyIGlzIHJlcXVpcmVkXCIpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWFyZ3MuY2xpZW50X2lkKSB7XG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJUb2tlbkNsaWVudC5leGNoYW5nZUNvZGU6IE5vIGNsaWVudF9pZCBwYXNzZWRcIik7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiQSBjbGllbnRfaWQgaXMgcmVxdWlyZWRcIikpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghYXJncy5jbGllbnRfc2VjcmV0ICYmIGNsaWVudF9hdXRoZW50aWNhdGlvbiA9PSBcImNsaWVudF9zZWNyZXRfYmFzaWNcIikge1xuICAgICAgICAgICAgTG9nLmVycm9yKFwiVG9rZW5DbGllbnQuZXhjaGFuZ2VDb2RlOiBObyBjbGllbnRfc2VjcmV0IHBhc3NlZFwiKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJBIGNsaWVudF9zZWNyZXQgaXMgcmVxdWlyZWRcIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2VuZGluZyB0aGUgY2xpZW50IGNyZWRlbnRpYWxzIHVzaW5nIHRoZSBCYXNpYyBBdXRoIG1ldGhvZFxuICAgICAgICBpZihjbGllbnRfYXV0aGVudGljYXRpb24gPT0gXCJjbGllbnRfc2VjcmV0X2Jhc2ljXCIpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGJhc2ljQXV0aCA9IGFyZ3MuY2xpZW50X2lkICsgJzonICsgYXJncy5jbGllbnRfc2VjcmV0O1xuICAgICAgICAgICAgZGVsZXRlIGFyZ3MuY2xpZW50X2lkO1xuICAgICAgICAgICAgZGVsZXRlIGFyZ3MuY2xpZW50X3NlY3JldDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9tZXRhZGF0YVNlcnZpY2UuZ2V0VG9rZW5FbmRwb2ludChmYWxzZSkudGhlbih1cmwgPT4ge1xuICAgICAgICAgICAgTG9nLmRlYnVnKFwiVG9rZW5DbGllbnQuZXhjaGFuZ2VDb2RlOiBSZWNlaXZlZCB0b2tlbiBlbmRwb2ludFwiKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9qc29uU2VydmljZS5wb3N0Rm9ybSh1cmwsIGFyZ3MsIGJhc2ljQXV0aCkudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiVG9rZW5DbGllbnQuZXhjaGFuZ2VDb2RlOiByZXNwb25zZSByZWNlaXZlZFwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZXhjaGFuZ2VSZWZyZXNoVG9rZW4oYXJncyA9IHt9KSB7XG4gICAgICAgIGFyZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBhcmdzKTtcblxuICAgICAgICBhcmdzLmdyYW50X3R5cGUgPSBhcmdzLmdyYW50X3R5cGUgfHwgXCJyZWZyZXNoX3Rva2VuXCI7XG4gICAgICAgIGFyZ3MuY2xpZW50X2lkID0gYXJncy5jbGllbnRfaWQgfHwgdGhpcy5fc2V0dGluZ3MuY2xpZW50X2lkO1xuICAgICAgICBhcmdzLmNsaWVudF9zZWNyZXQgPSBhcmdzLmNsaWVudF9zZWNyZXQgfHwgdGhpcy5fc2V0dGluZ3MuY2xpZW50X3NlY3JldDtcblxuICAgICAgICB2YXIgYmFzaWNBdXRoID0gdW5kZWZpbmVkO1xuICAgICAgICB2YXIgY2xpZW50X2F1dGhlbnRpY2F0aW9uID0gYXJncy5fY2xpZW50X2F1dGhlbnRpY2F0aW9uIHx8IHRoaXMuX3NldHRpbmdzLl9jbGllbnRfYXV0aGVudGljYXRpb247XG4gICAgICAgIGRlbGV0ZSBhcmdzLl9jbGllbnRfYXV0aGVudGljYXRpb247XG5cbiAgICAgICAgaWYgKCFhcmdzLnJlZnJlc2hfdG9rZW4pIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlRva2VuQ2xpZW50LmV4Y2hhbmdlUmVmcmVzaFRva2VuOiBObyByZWZyZXNoX3Rva2VuIHBhc3NlZFwiKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJBIHJlZnJlc2hfdG9rZW4gaXMgcmVxdWlyZWRcIikpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghYXJncy5jbGllbnRfaWQpIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlRva2VuQ2xpZW50LmV4Y2hhbmdlUmVmcmVzaFRva2VuOiBObyBjbGllbnRfaWQgcGFzc2VkXCIpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkEgY2xpZW50X2lkIGlzIHJlcXVpcmVkXCIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNlbmRpbmcgdGhlIGNsaWVudCBjcmVkZW50aWFscyB1c2luZyB0aGUgQmFzaWMgQXV0aCBtZXRob2RcbiAgICAgICAgaWYoY2xpZW50X2F1dGhlbnRpY2F0aW9uID09IFwiY2xpZW50X3NlY3JldF9iYXNpY1wiKVxuICAgICAgICB7XG4gICAgICAgICAgICBiYXNpY0F1dGggPSBhcmdzLmNsaWVudF9pZCArICc6JyArIGFyZ3MuY2xpZW50X3NlY3JldDtcbiAgICAgICAgICAgIGRlbGV0ZSBhcmdzLmNsaWVudF9pZDtcbiAgICAgICAgICAgIGRlbGV0ZSBhcmdzLmNsaWVudF9zZWNyZXQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fbWV0YWRhdGFTZXJ2aWNlLmdldFRva2VuRW5kcG9pbnQoZmFsc2UpLnRoZW4odXJsID0+IHtcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlRva2VuQ2xpZW50LmV4Y2hhbmdlUmVmcmVzaFRva2VuOiBSZWNlaXZlZCB0b2tlbiBlbmRwb2ludFwiKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2pzb25TZXJ2aWNlLnBvc3RGb3JtKHVybCwgYXJncywgYmFzaWNBdXRoKS50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJUb2tlbkNsaWVudC5leGNoYW5nZVJlZnJlc2hUb2tlbjogcmVzcG9uc2UgcmVjZWl2ZWRcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nLmpzJztcbmltcG9ydCB7IE1ldGFkYXRhU2VydmljZSB9IGZyb20gJy4vTWV0YWRhdGFTZXJ2aWNlLmpzJztcbmltcG9ydCB7IEdsb2JhbCB9IGZyb20gJy4vR2xvYmFsLmpzJztcblxuY29uc3QgQWNjZXNzVG9rZW5UeXBlSGludCA9IFwiYWNjZXNzX3Rva2VuXCI7XG5jb25zdCBSZWZyZXNoVG9rZW5UeXBlSGludCA9IFwicmVmcmVzaF90b2tlblwiO1xuXG5leHBvcnQgY2xhc3MgVG9rZW5SZXZvY2F0aW9uQ2xpZW50IHtcbiAgICBjb25zdHJ1Y3RvcihzZXR0aW5ncywgWE1MSHR0cFJlcXVlc3RDdG9yID0gR2xvYmFsLlhNTEh0dHBSZXF1ZXN0LCBNZXRhZGF0YVNlcnZpY2VDdG9yID0gTWV0YWRhdGFTZXJ2aWNlKSB7XG4gICAgICAgIGlmICghc2V0dGluZ3MpIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlRva2VuUmV2b2NhdGlvbkNsaWVudC5jdG9yOiBObyBzZXR0aW5ncyBwcm92aWRlZFwiKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHNldHRpbmdzIHByb3ZpZGVkLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3NldHRpbmdzID0gc2V0dGluZ3M7XG4gICAgICAgIHRoaXMuX1hNTEh0dHBSZXF1ZXN0Q3RvciA9IFhNTEh0dHBSZXF1ZXN0Q3RvcjtcbiAgICAgICAgdGhpcy5fbWV0YWRhdGFTZXJ2aWNlID0gbmV3IE1ldGFkYXRhU2VydmljZUN0b3IodGhpcy5fc2V0dGluZ3MpO1xuICAgIH1cblxuICAgIHJldm9rZSh0b2tlbiwgcmVxdWlyZWQsIHR5cGUgPSBcImFjY2Vzc190b2tlblwiKSB7XG4gICAgICAgIGlmICghdG9rZW4pIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlRva2VuUmV2b2NhdGlvbkNsaWVudC5yZXZva2U6IE5vIHRva2VuIHByb3ZpZGVkXCIpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gdG9rZW4gcHJvdmlkZWQuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGUgIT09IEFjY2Vzc1Rva2VuVHlwZUhpbnQgJiYgdHlwZSAhPSBSZWZyZXNoVG9rZW5UeXBlSGludCkge1xuICAgICAgICAgICAgTG9nLmVycm9yKFwiVG9rZW5SZXZvY2F0aW9uQ2xpZW50LnJldm9rZTogSW52YWxpZCB0b2tlbiB0eXBlXCIpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCB0b2tlbiB0eXBlLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9tZXRhZGF0YVNlcnZpY2UuZ2V0UmV2b2NhdGlvbkVuZHBvaW50KCkudGhlbih1cmwgPT4ge1xuICAgICAgICAgICAgaWYgKCF1cmwpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVxdWlyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKFwiVG9rZW5SZXZvY2F0aW9uQ2xpZW50LnJldm9rZTogUmV2b2NhdGlvbiBub3Qgc3VwcG9ydGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZXZvY2F0aW9uIG5vdCBzdXBwb3J0ZWRcIik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gbm90IHJlcXVpcmVkLCBzbyBkb24ndCBlcnJvciBhbmQganVzdCByZXR1cm5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlRva2VuUmV2b2NhdGlvbkNsaWVudC5yZXZva2U6IFJldm9raW5nIFwiICsgdHlwZSk7XG4gICAgICAgICAgICB2YXIgY2xpZW50X2lkID0gdGhpcy5fc2V0dGluZ3MuY2xpZW50X2lkO1xuICAgICAgICAgICAgdmFyIGNsaWVudF9zZWNyZXQgPSB0aGlzLl9zZXR0aW5ncy5jbGllbnRfc2VjcmV0O1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Jldm9rZSh1cmwsIGNsaWVudF9pZCwgY2xpZW50X3NlY3JldCwgdG9rZW4sIHR5cGUpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBfcmV2b2tlKHVybCwgY2xpZW50X2lkLCBjbGllbnRfc2VjcmV0LCB0b2tlbiwgdHlwZSkge1xuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgICAgICAgIHZhciB4aHIgPSBuZXcgdGhpcy5fWE1MSHR0cFJlcXVlc3RDdG9yKCk7XG4gICAgICAgICAgICB4aHIub3BlbihcIlBPU1RcIiwgdXJsKTtcblxuICAgICAgICAgICAgeGhyLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJUb2tlblJldm9jYXRpb25DbGllbnQucmV2b2tlOiBIVFRQIHJlc3BvbnNlIHJlY2VpdmVkLCBzdGF0dXNcIiwgeGhyLnN0YXR1cyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChFcnJvcih4aHIuc3RhdHVzVGV4dCArIFwiIChcIiArIHhoci5zdGF0dXMgKyBcIilcIikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB4aHIub25lcnJvciA9ICgpID0+IHsgXG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiVG9rZW5SZXZvY2F0aW9uQ2xpZW50LnJldm9rZTogTmV0d29yayBFcnJvci5cIilcbiAgICAgICAgICAgICAgICByZWplY3QoXCJOZXR3b3JrIEVycm9yXCIpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIGJvZHkgPSBcImNsaWVudF9pZD1cIiArIGVuY29kZVVSSUNvbXBvbmVudChjbGllbnRfaWQpO1xuICAgICAgICAgICAgaWYgKGNsaWVudF9zZWNyZXQpIHtcbiAgICAgICAgICAgICAgICBib2R5ICs9IFwiJmNsaWVudF9zZWNyZXQ9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoY2xpZW50X3NlY3JldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBib2R5ICs9IFwiJnRva2VuX3R5cGVfaGludD1cIiArIGVuY29kZVVSSUNvbXBvbmVudCh0eXBlKTtcbiAgICAgICAgICAgIGJvZHkgKz0gXCImdG9rZW49XCIgKyBlbmNvZGVVUklDb21wb25lbnQodG9rZW4pO1xuXG4gICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiKTtcbiAgICAgICAgICAgIHhoci5zZW5kKGJvZHkpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5pbXBvcnQgeyBMb2cgfSBmcm9tICcuL0xvZy5qcyc7XG5pbXBvcnQgeyBHbG9iYWwgfSBmcm9tICcuL0dsb2JhbC5qcyc7XG5cbmV4cG9ydCBjbGFzcyBVcmxVdGlsaXR5IHtcbiAgICBzdGF0aWMgYWRkUXVlcnlQYXJhbSh1cmwsIG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIGlmICh1cmwuaW5kZXhPZignPycpIDwgMCkge1xuICAgICAgICAgICAgdXJsICs9IFwiP1wiO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVybFt1cmwubGVuZ3RoIC0gMV0gIT09IFwiP1wiKSB7XG4gICAgICAgICAgICB1cmwgKz0gXCImXCI7XG4gICAgICAgIH1cblxuICAgICAgICB1cmwgKz0gZW5jb2RlVVJJQ29tcG9uZW50KG5hbWUpO1xuICAgICAgICB1cmwgKz0gXCI9XCI7XG4gICAgICAgIHVybCArPSBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpO1xuXG4gICAgICAgIHJldHVybiB1cmw7XG4gICAgfVxuXG4gICAgc3RhdGljIHBhcnNlVXJsRnJhZ21lbnQodmFsdWUsIGRlbGltaXRlciA9IFwiI1wiLCBnbG9iYWwgPSBHbG9iYWwpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpe1xuICAgICAgICAgICAgdmFsdWUgPSBnbG9iYWwubG9jYXRpb24uaHJlZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpZHggPSB2YWx1ZS5sYXN0SW5kZXhPZihkZWxpbWl0ZXIpO1xuICAgICAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc3Vic3RyKGlkeCArIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRlbGltaXRlciA9PT0gXCI/XCIpIHtcbiAgICAgICAgICAgIC8vIGlmIHdlJ3JlIGRvaW5nIHF1ZXJ5LCB0aGVuIHN0cmlwIG9mZiBoYXNoIGZyYWdtZW50IGJlZm9yZSB3ZSBwYXJzZVxuICAgICAgICAgICAgaWR4ID0gdmFsdWUuaW5kZXhPZignIycpO1xuICAgICAgICAgICAgaWYgKGlkeCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zdWJzdHIoMCwgaWR4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwYXJhbXMgPSB7fSxcbiAgICAgICAgICAgIHJlZ2V4ID0gLyhbXiY9XSspPShbXiZdKikvZyxcbiAgICAgICAgICAgIG07XG5cbiAgICAgICAgdmFyIGNvdW50ZXIgPSAwO1xuICAgICAgICB3aGlsZSAobSA9IHJlZ2V4LmV4ZWModmFsdWUpKSB7XG4gICAgICAgICAgICBwYXJhbXNbZGVjb2RlVVJJQ29tcG9uZW50KG1bMV0pXSA9IGRlY29kZVVSSUNvbXBvbmVudChtWzJdLnJlcGxhY2UoL1xcKy9nLCAnICcpKTtcbiAgICAgICAgICAgIGlmIChjb3VudGVyKysgPiA1MCkge1xuICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIlVybFV0aWxpdHkucGFyc2VVcmxGcmFnbWVudDogcmVzcG9uc2UgZXhjZWVkZWQgZXhwZWN0ZWQgbnVtYmVyIG9mIHBhcmFtZXRlcnNcIiwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBcIlJlc3BvbnNlIGV4Y2VlZGVkIGV4cGVjdGVkIG51bWJlciBvZiBwYXJhbWV0ZXJzXCJcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBwYXJhbXMpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJhbXM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge307XG4gICAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cuanMnO1xuXG5leHBvcnQgY2xhc3MgVXNlciB7XG4gICAgY29uc3RydWN0b3Ioe2lkX3Rva2VuLCBzZXNzaW9uX3N0YXRlLCBhY2Nlc3NfdG9rZW4sIHJlZnJlc2hfdG9rZW4sIHRva2VuX3R5cGUsIHNjb3BlLCBwcm9maWxlLCBleHBpcmVzX2F0LCBzdGF0ZSwgLi4ub3RoZXJWYWx1ZXN9KSB7XG4gICAgICAgIHRoaXMuaWRfdG9rZW4gPSBpZF90b2tlbjtcbiAgICAgICAgdGhpcy5zZXNzaW9uX3N0YXRlID0gc2Vzc2lvbl9zdGF0ZTtcbiAgICAgICAgdGhpcy5hY2Nlc3NfdG9rZW4gPSBhY2Nlc3NfdG9rZW47XG4gICAgICAgIHRoaXMucmVmcmVzaF90b2tlbiA9IHJlZnJlc2hfdG9rZW47XG4gICAgICAgIHRoaXMudG9rZW5fdHlwZSA9IHRva2VuX3R5cGU7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy5wcm9maWxlID0gcHJvZmlsZTtcbiAgICAgICAgdGhpcy5leHBpcmVzX2F0ID0gZXhwaXJlc19hdDtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgICAgICB0aGlzLm90aGVyVmFsdWVzID0gb3RoZXJWYWx1ZXM7XG4gICAgfVxuXG4gICAgZ2V0IGV4cGlyZXNfaW4oKSB7XG4gICAgICAgIGlmICh0aGlzLmV4cGlyZXNfYXQpIHtcbiAgICAgICAgICAgIGxldCBub3cgPSBwYXJzZUludChEYXRlLm5vdygpIC8gMTAwMCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5leHBpcmVzX2F0IC0gbm93O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHNldCBleHBpcmVzX2luKHZhbHVlKSB7XG4gICAgICAgIGxldCBleHBpcmVzX2luID0gcGFyc2VJbnQodmFsdWUpO1xuICAgICAgICBpZiAodHlwZW9mIGV4cGlyZXNfaW4gPT09ICdudW1iZXInICYmIGV4cGlyZXNfaW4gPiAwKSB7XG4gICAgICAgICAgICBsZXQgbm93ID0gcGFyc2VJbnQoRGF0ZS5ub3coKSAvIDEwMDApO1xuICAgICAgICAgICAgdGhpcy5leHBpcmVzX2F0ID0gbm93ICsgZXhwaXJlc19pbjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldCBleHBpcmVkKCkge1xuICAgICAgICBsZXQgZXhwaXJlc19pbiA9IHRoaXMuZXhwaXJlc19pbjtcbiAgICAgICAgaWYgKGV4cGlyZXNfaW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGV4cGlyZXNfaW4gPD0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGdldCBzY29wZXMoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5zY29wZSB8fCBcIlwiKS5zcGxpdChcIiBcIik7XG4gICAgfVxuXG4gICAgdG9TdG9yYWdlU3RyaW5nKCkge1xuICAgICAgICBMb2cuZGVidWcoXCJVc2VyLnRvU3RvcmFnZVN0cmluZ1wiKTtcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIGlkX3Rva2VuOiB0aGlzLmlkX3Rva2VuLFxuICAgICAgICAgICAgc2Vzc2lvbl9zdGF0ZTogdGhpcy5zZXNzaW9uX3N0YXRlLFxuICAgICAgICAgICAgYWNjZXNzX3Rva2VuOiB0aGlzLmFjY2Vzc190b2tlbixcbiAgICAgICAgICAgIHJlZnJlc2hfdG9rZW46IHRoaXMucmVmcmVzaF90b2tlbixcbiAgICAgICAgICAgIHRva2VuX3R5cGU6IHRoaXMudG9rZW5fdHlwZSxcbiAgICAgICAgICAgIHNjb3BlOiB0aGlzLnNjb3BlLFxuICAgICAgICAgICAgcHJvZmlsZTogdGhpcy5wcm9maWxlLFxuICAgICAgICAgICAgZXhwaXJlc19hdDogdGhpcy5leHBpcmVzX2F0LFxuICAgICAgICAgICAgLi4udGhpcy5vdGhlckNsYWltc1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbVN0b3JhZ2VTdHJpbmcoc3RvcmFnZVN0cmluZykge1xuICAgICAgICBMb2cuZGVidWcoXCJVc2VyLmZyb21TdG9yYWdlU3RyaW5nXCIpO1xuICAgICAgICByZXR1cm4gbmV3IFVzZXIoSlNPTi5wYXJzZShzdG9yYWdlU3RyaW5nKSk7XG4gICAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgSnNvblNlcnZpY2UgfSBmcm9tICcuL0pzb25TZXJ2aWNlLmpzJztcbmltcG9ydCB7IE1ldGFkYXRhU2VydmljZSB9IGZyb20gJy4vTWV0YWRhdGFTZXJ2aWNlLmpzJztcbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nLmpzJztcbmltcG9ydCB7IEpvc2VVdGlsIH0gZnJvbSAnLi9Kb3NlVXRpbC5qcyc7XG5cbmV4cG9ydCBjbGFzcyBVc2VySW5mb1NlcnZpY2Uge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBzZXR0aW5ncywgXG4gICAgICAgIEpzb25TZXJ2aWNlQ3RvciA9IEpzb25TZXJ2aWNlLCBcbiAgICAgICAgTWV0YWRhdGFTZXJ2aWNlQ3RvciA9IE1ldGFkYXRhU2VydmljZSwgXG4gICAgICAgIGpvc2VVdGlsID0gSm9zZVV0aWxcbiAgICApIHtcbiAgICAgICAgaWYgKCFzZXR0aW5ncykge1xuICAgICAgICAgICAgTG9nLmVycm9yKFwiVXNlckluZm9TZXJ2aWNlLmN0b3I6IE5vIHNldHRpbmdzIHBhc3NlZFwiKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInNldHRpbmdzXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fc2V0dGluZ3MgPSBzZXR0aW5ncztcbiAgICAgICAgdGhpcy5fanNvblNlcnZpY2UgPSBuZXcgSnNvblNlcnZpY2VDdG9yKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB0aGlzLl9nZXRDbGFpbXNGcm9tSnd0LmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLl9tZXRhZGF0YVNlcnZpY2UgPSBuZXcgTWV0YWRhdGFTZXJ2aWNlQ3Rvcih0aGlzLl9zZXR0aW5ncyk7XG4gICAgICAgIHRoaXMuX2pvc2VVdGlsID0gam9zZVV0aWw7XG4gICAgfVxuXG4gICAgZ2V0Q2xhaW1zKHRva2VuKSB7XG4gICAgICAgIGlmICghdG9rZW4pIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlVzZXJJbmZvU2VydmljZS5nZXRDbGFpbXM6IE5vIHRva2VuIHBhc3NlZFwiKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJBIHRva2VuIGlzIHJlcXVpcmVkXCIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9tZXRhZGF0YVNlcnZpY2UuZ2V0VXNlckluZm9FbmRwb2ludCgpLnRoZW4odXJsID0+IHtcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJJbmZvU2VydmljZS5nZXRDbGFpbXM6IHJlY2VpdmVkIHVzZXJpbmZvIHVybFwiLCB1cmwpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fanNvblNlcnZpY2UuZ2V0SnNvbih1cmwsIHRva2VuKS50aGVuKGNsYWltcyA9PiB7XG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlckluZm9TZXJ2aWNlLmdldENsYWltczogY2xhaW1zIHJlY2VpdmVkXCIsIGNsYWltcyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsYWltcztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBfZ2V0Q2xhaW1zRnJvbUp3dChyZXEpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxldCBqd3QgPSB0aGlzLl9qb3NlVXRpbC5wYXJzZUp3dChyZXEucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgIGlmICghand0IHx8ICFqd3QuaGVhZGVyIHx8ICFqd3QucGF5bG9hZCkge1xuICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIlVzZXJJbmZvU2VydmljZS5fZ2V0Q2xhaW1zRnJvbUp3dDogRmFpbGVkIHRvIHBhcnNlIEpXVFwiLCBqd3QpO1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJGYWlsZWQgdG8gcGFyc2UgaWRfdG9rZW5cIikpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIga2lkID0gand0LmhlYWRlci5raWQ7XG5cbiAgICAgICAgICAgIGxldCBpc3N1ZXJQcm9taXNlO1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzLl9zZXR0aW5ncy51c2VySW5mb0p3dElzc3Vlcikge1xuICAgICAgICAgICAgICAgIGNhc2UgJ09QJzpcbiAgICAgICAgICAgICAgICAgICAgaXNzdWVyUHJvbWlzZSA9IHRoaXMuX21ldGFkYXRhU2VydmljZS5nZXRJc3N1ZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnQU5ZJzpcbiAgICAgICAgICAgICAgICAgICAgaXNzdWVyUHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShqd3QucGF5bG9hZC5pc3MpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpc3N1ZXJQcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX3NldHRpbmdzLnVzZXJJbmZvSnd0SXNzdWVyKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBpc3N1ZXJQcm9taXNlLnRoZW4oaXNzdWVyID0+IHtcbiAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJVc2VySW5mb1NlcnZpY2UuX2dldENsYWltc0Zyb21Kd3Q6IFJlY2VpdmVkIGlzc3VlcjpcIiArIGlzc3Vlcik7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbWV0YWRhdGFTZXJ2aWNlLmdldFNpZ25pbmdLZXlzKCkudGhlbihrZXlzID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFrZXlzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJVc2VySW5mb1NlcnZpY2UuX2dldENsYWltc0Zyb21Kd3Q6IE5vIHNpZ25pbmcga2V5cyBmcm9tIG1ldGFkYXRhXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIHNpZ25pbmcga2V5cyBmcm9tIG1ldGFkYXRhXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJJbmZvU2VydmljZS5fZ2V0Q2xhaW1zRnJvbUp3dDogUmVjZWl2ZWQgc2lnbmluZyBrZXlzXCIpO1xuICAgICAgICAgICAgICAgICAgICBsZXQga2V5O1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWtpZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5cyA9IHRoaXMuX2ZpbHRlckJ5QWxnKGtleXMsIGp3dC5oZWFkZXIuYWxnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIlVzZXJJbmZvU2VydmljZS5fZ2V0Q2xhaW1zRnJvbUp3dDogTm8ga2lkIGZvdW5kIGluIGlkX3Rva2VuIGFuZCBtb3JlIHRoYW4gb25lIGtleSBmb3VuZCBpbiBtZXRhZGF0YVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8ga2lkIGZvdW5kIGluIGlkX3Rva2VuIGFuZCBtb3JlIHRoYW4gb25lIGtleSBmb3VuZCBpbiBtZXRhZGF0YVwiKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBraWQgaXMgbWFuZGF0b3J5IG9ubHkgd2hlbiB0aGVyZSBhcmUgbXVsdGlwbGUga2V5cyBpbiB0aGUgcmVmZXJlbmNlZCBKV0sgU2V0IGRvY3VtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2VlIGh0dHA6Ly9vcGVuaWQubmV0L3NwZWNzL29wZW5pZC1jb25uZWN0LWNvcmUtMV8wLmh0bWwjU2lnbmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleSA9IGtleXNbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXkgPSBrZXlzLmZpbHRlcihrZXkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBrZXkua2lkID09PSBraWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVswXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJVc2VySW5mb1NlcnZpY2UuX2dldENsYWltc0Zyb21Kd3Q6IE5vIGtleSBtYXRjaGluZyBraWQgb3IgYWxnIGZvdW5kIGluIHNpZ25pbmcga2V5c1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyBrZXkgbWF0Y2hpbmcga2lkIG9yIGFsZyBmb3VuZCBpbiBzaWduaW5nIGtleXNcIikpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IGF1ZGllbmNlID0gdGhpcy5fc2V0dGluZ3MuY2xpZW50X2lkO1xuXG4gICAgICAgICAgICAgICAgICAgIGxldCBjbG9ja1NrZXdJblNlY29uZHMgPSB0aGlzLl9zZXR0aW5ncy5jbG9ja1NrZXc7XG4gICAgICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJJbmZvU2VydmljZS5fZ2V0Q2xhaW1zRnJvbUp3dDogVmFsaWRhaW5nIEpXVDsgdXNpbmcgY2xvY2sgc2tldyAoaW4gc2Vjb25kcykgb2Y6IFwiLCBjbG9ja1NrZXdJblNlY29uZHMpO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9qb3NlVXRpbC52YWxpZGF0ZUp3dChyZXEucmVzcG9uc2VUZXh0LCBrZXksIGlzc3VlciwgYXVkaWVuY2UsIGNsb2NrU2tld0luU2Vjb25kcywgdW5kZWZpbmVkLCB0cnVlKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJJbmZvU2VydmljZS5fZ2V0Q2xhaW1zRnJvbUp3dDogSldUIHZhbGlkYXRpb24gc3VjY2Vzc2Z1bFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBqd3QucGF5bG9hZDtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgTG9nLmVycm9yKFwiVXNlckluZm9TZXJ2aWNlLl9nZXRDbGFpbXNGcm9tSnd0OiBFcnJvciBwYXJzaW5nIEpXVCByZXNwb25zZVwiLCBlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2ZpbHRlckJ5QWxnKGtleXMsIGFsZykge1xuICAgICAgICB2YXIga3R5ID0gbnVsbDtcbiAgICAgICAgaWYgKGFsZy5zdGFydHNXaXRoKFwiUlNcIikpIHtcbiAgICAgICAgICAgIGt0eSA9IFwiUlNBXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYWxnLnN0YXJ0c1dpdGgoXCJQU1wiKSkge1xuICAgICAgICAgICAga3R5ID0gXCJQU1wiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGFsZy5zdGFydHNXaXRoKFwiRVNcIikpIHtcbiAgICAgICAgICAgIGt0eSA9IFwiRUNcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJJbmZvU2VydmljZS5fZmlsdGVyQnlBbGc6IGFsZyBub3Qgc3VwcG9ydGVkOiBcIiwgYWxnKTtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJJbmZvU2VydmljZS5fZmlsdGVyQnlBbGc6IExvb2tpbmcgZm9yIGtleXMgdGhhdCBtYXRjaCBrdHk6IFwiLCBrdHkpO1xuXG4gICAgICAgIGtleXMgPSBrZXlzLmZpbHRlcihrZXkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGtleS5rdHkgPT09IGt0eTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgTG9nLmRlYnVnKFwiVXNlckluZm9TZXJ2aWNlLl9maWx0ZXJCeUFsZzogTnVtYmVyIG9mIGtleXMgdGhhdCBtYXRjaCBrdHk6IFwiLCBrdHksIGtleXMubGVuZ3RoKTtcblxuICAgICAgICByZXR1cm4ga2V5cztcbiAgICB9XG59XG4iLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5pbXBvcnQgeyBMb2cgfSBmcm9tICcuL0xvZy5qcyc7XG5pbXBvcnQgeyBPaWRjQ2xpZW50IH0gZnJvbSAnLi9PaWRjQ2xpZW50LmpzJztcbmltcG9ydCB7IFVzZXJNYW5hZ2VyU2V0dGluZ3MgfSBmcm9tICcuL1VzZXJNYW5hZ2VyU2V0dGluZ3MuanMnO1xuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4vVXNlci5qcyc7XG5pbXBvcnQgeyBVc2VyTWFuYWdlckV2ZW50cyB9IGZyb20gJy4vVXNlck1hbmFnZXJFdmVudHMuanMnO1xuaW1wb3J0IHsgU2lsZW50UmVuZXdTZXJ2aWNlIH0gZnJvbSAnLi9TaWxlbnRSZW5ld1NlcnZpY2UuanMnO1xuaW1wb3J0IHsgU2Vzc2lvbk1vbml0b3IgfSBmcm9tICcuL1Nlc3Npb25Nb25pdG9yLmpzJztcbmltcG9ydCB7IFNpZ25pblJlcXVlc3QgfSBmcm9tIFwiLi9TaWduaW5SZXF1ZXN0XCI7XG5pbXBvcnQgeyBUb2tlblJldm9jYXRpb25DbGllbnQgfSBmcm9tICcuL1Rva2VuUmV2b2NhdGlvbkNsaWVudC5qcyc7XG5pbXBvcnQgeyBUb2tlbkNsaWVudCB9IGZyb20gJy4vVG9rZW5DbGllbnQuanMnO1xuaW1wb3J0IHsgSm9zZVV0aWwgfSBmcm9tICcuL0pvc2VVdGlsLmpzJztcblxuXG5leHBvcnQgY2xhc3MgVXNlck1hbmFnZXIgZXh0ZW5kcyBPaWRjQ2xpZW50IHtcbiAgICBjb25zdHJ1Y3RvcihzZXR0aW5ncyA9IHt9LFxuICAgICAgICBTaWxlbnRSZW5ld1NlcnZpY2VDdG9yID0gU2lsZW50UmVuZXdTZXJ2aWNlLFxuICAgICAgICBTZXNzaW9uTW9uaXRvckN0b3IgPSBTZXNzaW9uTW9uaXRvcixcbiAgICAgICAgVG9rZW5SZXZvY2F0aW9uQ2xpZW50Q3RvciA9IFRva2VuUmV2b2NhdGlvbkNsaWVudCxcbiAgICAgICAgVG9rZW5DbGllbnRDdG9yID0gVG9rZW5DbGllbnQsXG4gICAgICAgIGpvc2VVdGlsID0gSm9zZVV0aWxcbiAgICApIHtcblxuICAgICAgICBpZiAoIShzZXR0aW5ncyBpbnN0YW5jZW9mIFVzZXJNYW5hZ2VyU2V0dGluZ3MpKSB7XG4gICAgICAgICAgICBzZXR0aW5ncyA9IG5ldyBVc2VyTWFuYWdlclNldHRpbmdzKHNldHRpbmdzKTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlcihzZXR0aW5ncyk7XG5cbiAgICAgICAgdGhpcy5fZXZlbnRzID0gbmV3IFVzZXJNYW5hZ2VyRXZlbnRzKHNldHRpbmdzKTtcbiAgICAgICAgdGhpcy5fc2lsZW50UmVuZXdTZXJ2aWNlID0gbmV3IFNpbGVudFJlbmV3U2VydmljZUN0b3IodGhpcyk7XG5cbiAgICAgICAgLy8gb3JkZXIgaXMgaW1wb3J0YW50IGZvciB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM7IHRoZXNlIHNlcnZpY2VzIGRlcGVuZCB1cG9uIHRoZSBldmVudHMuXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmF1dG9tYXRpY1NpbGVudFJlbmV3KSB7XG4gICAgICAgICAgICBMb2cuZGVidWcoXCJVc2VyTWFuYWdlci5jdG9yOiBhdXRvbWF0aWNTaWxlbnRSZW5ldyBpcyBjb25maWd1cmVkLCBzZXR0aW5nIHVwIHNpbGVudCByZW5ld1wiKTtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRTaWxlbnRSZW5ldygpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MubW9uaXRvclNlc3Npb24pIHtcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyLmN0b3I6IG1vbml0b3JTZXNzaW9uIGlzIGNvbmZpZ3VyZWQsIHNldHRpbmcgdXAgc2Vzc2lvbiBtb25pdG9yXCIpO1xuICAgICAgICAgICAgdGhpcy5fc2Vzc2lvbk1vbml0b3IgPSBuZXcgU2Vzc2lvbk1vbml0b3JDdG9yKHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fdG9rZW5SZXZvY2F0aW9uQ2xpZW50ID0gbmV3IFRva2VuUmV2b2NhdGlvbkNsaWVudEN0b3IodGhpcy5fc2V0dGluZ3MpO1xuICAgICAgICB0aGlzLl90b2tlbkNsaWVudCA9IG5ldyBUb2tlbkNsaWVudEN0b3IodGhpcy5fc2V0dGluZ3MpO1xuICAgICAgICB0aGlzLl9qb3NlVXRpbCA9IGpvc2VVdGlsO1xuICAgIH1cblxuICAgIGdldCBfcmVkaXJlY3ROYXZpZ2F0b3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLnJlZGlyZWN0TmF2aWdhdG9yO1xuICAgIH1cbiAgICBnZXQgX3BvcHVwTmF2aWdhdG9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXR0aW5ncy5wb3B1cE5hdmlnYXRvcjtcbiAgICB9XG4gICAgZ2V0IF9pZnJhbWVOYXZpZ2F0b3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLmlmcmFtZU5hdmlnYXRvcjtcbiAgICB9XG4gICAgZ2V0IF91c2VyU3RvcmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLnVzZXJTdG9yZTtcbiAgICB9XG5cbiAgICBnZXQgZXZlbnRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXZlbnRzO1xuICAgIH1cblxuICAgIGdldFVzZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sb2FkVXNlcigpLnRoZW4odXNlciA9PiB7XG4gICAgICAgICAgICBpZiAodXNlcikge1xuICAgICAgICAgICAgICAgIExvZy5pbmZvKFwiVXNlck1hbmFnZXIuZ2V0VXNlcjogdXNlciBsb2FkZWRcIik7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHMubG9hZCh1c2VyLCBmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdXNlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIExvZy5pbmZvKFwiVXNlck1hbmFnZXIuZ2V0VXNlcjogdXNlciBub3QgZm91bmQgaW4gc3RvcmFnZVwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVtb3ZlVXNlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmVVc2VyKG51bGwpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgTG9nLmluZm8oXCJVc2VyTWFuYWdlci5yZW1vdmVVc2VyOiB1c2VyIHJlbW92ZWQgZnJvbSBzdG9yYWdlXCIpO1xuICAgICAgICAgICAgdGhpcy5fZXZlbnRzLnVubG9hZCgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzaWduaW5SZWRpcmVjdChhcmdzID0ge30pIHtcbiAgICAgICAgYXJncyA9IE9iamVjdC5hc3NpZ24oe30sIGFyZ3MpO1xuXG4gICAgICAgIGFyZ3MucmVxdWVzdF90eXBlID0gXCJzaTpyXCI7XG4gICAgICAgIGxldCBuYXZQYXJhbXMgPSB7XG4gICAgICAgICAgICB1c2VSZXBsYWNlVG9OYXZpZ2F0ZSA6IGFyZ3MudXNlUmVwbGFjZVRvTmF2aWdhdGVcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NpZ25pblN0YXJ0KGFyZ3MsIHRoaXMuX3JlZGlyZWN0TmF2aWdhdG9yLCBuYXZQYXJhbXMpLnRoZW4oKCk9PntcbiAgICAgICAgICAgIExvZy5pbmZvKFwiVXNlck1hbmFnZXIuc2lnbmluUmVkaXJlY3Q6IHN1Y2Nlc3NmdWxcIik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzaWduaW5SZWRpcmVjdENhbGxiYWNrKHVybCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2lnbmluRW5kKHVybCB8fCB0aGlzLl9yZWRpcmVjdE5hdmlnYXRvci51cmwpLnRoZW4odXNlciA9PiB7XG4gICAgICAgICAgICBpZiAodXNlci5wcm9maWxlICYmIHVzZXIucHJvZmlsZS5zdWIpIHtcbiAgICAgICAgICAgICAgICBMb2cuaW5mbyhcIlVzZXJNYW5hZ2VyLnNpZ25pblJlZGlyZWN0Q2FsbGJhY2s6IHN1Y2Nlc3NmdWwsIHNpZ25lZCBpbiBzdWI6IFwiLCB1c2VyLnByb2ZpbGUuc3ViKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIExvZy5pbmZvKFwiVXNlck1hbmFnZXIuc2lnbmluUmVkaXJlY3RDYWxsYmFjazogbm8gc3ViXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdXNlcjtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2lnbmluUG9wdXAoYXJncyA9IHt9KSB7XG4gICAgICAgIGFyZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBhcmdzKTtcblxuICAgICAgICBhcmdzLnJlcXVlc3RfdHlwZSA9IFwic2k6cFwiO1xuICAgICAgICBsZXQgdXJsID0gYXJncy5yZWRpcmVjdF91cmkgfHwgdGhpcy5zZXR0aW5ncy5wb3B1cF9yZWRpcmVjdF91cmkgfHwgdGhpcy5zZXR0aW5ncy5yZWRpcmVjdF91cmk7XG4gICAgICAgIGlmICghdXJsKSB7XG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJVc2VyTWFuYWdlci5zaWduaW5Qb3B1cDogTm8gcG9wdXBfcmVkaXJlY3RfdXJpIG9yIHJlZGlyZWN0X3VyaSBjb25maWd1cmVkXCIpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIHBvcHVwX3JlZGlyZWN0X3VyaSBvciByZWRpcmVjdF91cmkgY29uZmlndXJlZFwiKSk7XG4gICAgICAgIH1cblxuICAgICAgICBhcmdzLnJlZGlyZWN0X3VyaSA9IHVybDtcbiAgICAgICAgYXJncy5kaXNwbGF5ID0gXCJwb3B1cFwiO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9zaWduaW4oYXJncywgdGhpcy5fcG9wdXBOYXZpZ2F0b3IsIHtcbiAgICAgICAgICAgIHN0YXJ0VXJsOiB1cmwsXG4gICAgICAgICAgICBwb3B1cFdpbmRvd0ZlYXR1cmVzOiBhcmdzLnBvcHVwV2luZG93RmVhdHVyZXMgfHwgdGhpcy5zZXR0aW5ncy5wb3B1cFdpbmRvd0ZlYXR1cmVzLFxuICAgICAgICAgICAgcG9wdXBXaW5kb3dUYXJnZXQ6IGFyZ3MucG9wdXBXaW5kb3dUYXJnZXQgfHwgdGhpcy5zZXR0aW5ncy5wb3B1cFdpbmRvd1RhcmdldFxuICAgICAgICB9KS50aGVuKHVzZXIgPT4ge1xuICAgICAgICAgICAgaWYgKHVzZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAodXNlci5wcm9maWxlICYmIHVzZXIucHJvZmlsZS5zdWIpIHtcbiAgICAgICAgICAgICAgICAgICAgTG9nLmluZm8oXCJVc2VyTWFuYWdlci5zaWduaW5Qb3B1cDogc2lnbmluUG9wdXAgc3VjY2Vzc2Z1bCwgc2lnbmVkIGluIHN1YjogXCIsIHVzZXIucHJvZmlsZS5zdWIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgTG9nLmluZm8oXCJVc2VyTWFuYWdlci5zaWduaW5Qb3B1cDogbm8gc3ViXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHVzZXI7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzaWduaW5Qb3B1cENhbGxiYWNrKHVybCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2lnbmluQ2FsbGJhY2sodXJsLCB0aGlzLl9wb3B1cE5hdmlnYXRvcikudGhlbih1c2VyID0+IHtcbiAgICAgICAgICAgIGlmICh1c2VyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHVzZXIucHJvZmlsZSAmJiB1c2VyLnByb2ZpbGUuc3ViKSB7XG4gICAgICAgICAgICAgICAgICAgIExvZy5pbmZvKFwiVXNlck1hbmFnZXIuc2lnbmluUG9wdXBDYWxsYmFjazogc3VjY2Vzc2Z1bCwgc2lnbmVkIGluIHN1YjogXCIsIHVzZXIucHJvZmlsZS5zdWIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgTG9nLmluZm8oXCJVc2VyTWFuYWdlci5zaWduaW5Qb3B1cENhbGxiYWNrOiBubyBzdWJcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdXNlcjtcbiAgICAgICAgfSkuY2F0Y2goZXJyPT57XG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJVc2VyTWFuYWdlci5zaWduaW5Qb3B1cENhbGxiYWNrIGVycm9yOiBcIiArIGVyciAmJiBlcnIubWVzc2FnZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNpZ25pblNpbGVudChhcmdzID0ge30pIHtcbiAgICAgICAgYXJncyA9IE9iamVjdC5hc3NpZ24oe30sIGFyZ3MpO1xuXG4gICAgICAgIC8vIGZpcnN0IGRldGVybWluZSBpZiB3ZSBoYXZlIGEgcmVmcmVzaCB0b2tlbiwgb3IgbmVlZCB0byB1c2UgaWZyYW1lXG4gICAgICAgIHJldHVybiB0aGlzLl9sb2FkVXNlcigpLnRoZW4odXNlciA9PiB7XG4gICAgICAgICAgICBpZiAodXNlciAmJiB1c2VyLnJlZnJlc2hfdG9rZW4pIHtcbiAgICAgICAgICAgICAgICBhcmdzLnJlZnJlc2hfdG9rZW4gPSB1c2VyLnJlZnJlc2hfdG9rZW47XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3VzZVJlZnJlc2hUb2tlbihhcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGFyZ3MucmVxdWVzdF90eXBlID0gXCJzaTpzXCI7XG4gICAgICAgICAgICAgICAgYXJncy5pZF90b2tlbl9oaW50ID0gYXJncy5pZF90b2tlbl9oaW50IHx8ICh0aGlzLnNldHRpbmdzLmluY2x1ZGVJZFRva2VuSW5TaWxlbnRSZW5ldyAmJiB1c2VyICYmIHVzZXIuaWRfdG9rZW4pO1xuICAgICAgICAgICAgICAgIGlmICh1c2VyICYmIHRoaXMuX3NldHRpbmdzLnZhbGlkYXRlU3ViT25TaWxlbnRSZW5ldykge1xuICAgICAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJVc2VyTWFuYWdlci5zaWduaW5TaWxlbnQsIHN1YmplY3QgcHJpb3IgdG8gc2lsZW50IHJlbmV3OiBcIiwgdXNlci5wcm9maWxlLnN1Yik7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3MuY3VycmVudF9zdWIgPSB1c2VyLnByb2ZpbGUuc3ViO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2lnbmluU2lsZW50SWZyYW1lKGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBfdXNlUmVmcmVzaFRva2VuKGFyZ3MgPSB7fSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdG9rZW5DbGllbnQuZXhjaGFuZ2VSZWZyZXNoVG9rZW4oYXJncykudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJVc2VyTWFuYWdlci5fdXNlUmVmcmVzaFRva2VuOiBObyByZXNwb25zZSByZXR1cm5lZCBmcm9tIHRva2VuIGVuZHBvaW50XCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcIk5vIHJlc3BvbnNlIHJldHVybmVkIGZyb20gdG9rZW4gZW5kcG9pbnRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXJlc3VsdC5hY2Nlc3NfdG9rZW4pIHtcbiAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJVc2VyTWFuYWdlci5fdXNlUmVmcmVzaFRva2VuOiBObyBhY2Nlc3MgdG9rZW4gcmV0dXJuZWQgZnJvbSB0b2tlbiBlbmRwb2ludFwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXCJObyBhY2Nlc3MgdG9rZW4gcmV0dXJuZWQgZnJvbSB0b2tlbiBlbmRwb2ludFwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xvYWRVc2VyKCkudGhlbih1c2VyID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodXNlcikge1xuICAgICAgICAgICAgICAgICAgICBsZXQgaWRUb2tlblZhbGlkYXRpb24gPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5pZF90b2tlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWRUb2tlblZhbGlkYXRpb24gPSB0aGlzLl92YWxpZGF0ZUlkVG9rZW5Gcm9tVG9rZW5SZWZyZXNoVG9rZW4odXNlci5wcm9maWxlLCByZXN1bHQuaWRfdG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlkVG9rZW5WYWxpZGF0aW9uLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuX3VzZVJlZnJlc2hUb2tlbjogcmVmcmVzaCB0b2tlbiByZXNwb25zZSBzdWNjZXNzXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXNlci5pZF90b2tlbiA9IHJlc3VsdC5pZF90b2tlbiB8fCB1c2VyLmlkX3Rva2VuO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXNlci5hY2Nlc3NfdG9rZW4gPSByZXN1bHQuYWNjZXNzX3Rva2VuO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXNlci5yZWZyZXNoX3Rva2VuID0gcmVzdWx0LnJlZnJlc2hfdG9rZW4gfHwgdXNlci5yZWZyZXNoX3Rva2VuO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXNlci5leHBpcmVzX2luID0gcmVzdWx0LmV4cGlyZXNfaW47XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN0b3JlVXNlcih1c2VyKS50aGVuKCgpPT57XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzLmxvYWQodXNlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVzZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX3ZhbGlkYXRlSWRUb2tlbkZyb21Ub2tlblJlZnJlc2hUb2tlbihwcm9maWxlLCBpZF90b2tlbikge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWV0YWRhdGFTZXJ2aWNlLmdldElzc3VlcigpLnRoZW4oaXNzdWVyID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLmdldEVwb2NoVGltZSgpLnRoZW4obm93ID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fam9zZVV0aWwudmFsaWRhdGVKd3RBdHRyaWJ1dGVzKGlkX3Rva2VuLCBpc3N1ZXIsIHRoaXMuX3NldHRpbmdzLmNsaWVudF9pZCwgdGhpcy5fc2V0dGluZ3MuY2xvY2tTa2V3LCBub3cpLnRoZW4ocGF5bG9hZCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghcGF5bG9hZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKFwiVXNlck1hbmFnZXIuX3ZhbGlkYXRlSWRUb2tlbkZyb21Ub2tlblJlZnJlc2hUb2tlbjogRmFpbGVkIHRvIHZhbGlkYXRlIGlkX3Rva2VuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkZhaWxlZCB0byB2YWxpZGF0ZSBpZF90b2tlblwiKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBheWxvYWQuc3ViICE9PSBwcm9maWxlLnN1Yikge1xuICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKFwiVXNlck1hbmFnZXIuX3ZhbGlkYXRlSWRUb2tlbkZyb21Ub2tlblJlZnJlc2hUb2tlbjogc3ViIGluIGlkX3Rva2VuIGRvZXMgbm90IG1hdGNoIGN1cnJlbnQgc3ViXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcInN1YiBpbiBpZF90b2tlbiBkb2VzIG5vdCBtYXRjaCBjdXJyZW50IHN1YlwiKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBheWxvYWQuYXV0aF90aW1lICYmIHBheWxvYWQuYXV0aF90aW1lICE9PSBwcm9maWxlLmF1dGhfdGltZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKFwiVXNlck1hbmFnZXIuX3ZhbGlkYXRlSWRUb2tlbkZyb21Ub2tlblJlZnJlc2hUb2tlbjogYXV0aF90aW1lIGluIGlkX3Rva2VuIGRvZXMgbm90IG1hdGNoIG9yaWdpbmFsIGF1dGhfdGltZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJhdXRoX3RpbWUgaW4gaWRfdG9rZW4gZG9lcyBub3QgbWF0Y2ggb3JpZ2luYWwgYXV0aF90aW1lXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocGF5bG9hZC5henAgJiYgcGF5bG9hZC5henAgIT09IHByb2ZpbGUuYXpwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJVc2VyTWFuYWdlci5fdmFsaWRhdGVJZFRva2VuRnJvbVRva2VuUmVmcmVzaFRva2VuOiBhenAgaW4gaWRfdG9rZW4gZG9lcyBub3QgbWF0Y2ggb3JpZ2luYWwgYXpwXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcImF6cCBpbiBpZF90b2tlbiBkb2VzIG5vdCBtYXRjaCBvcmlnaW5hbCBhenBcIikpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghcGF5bG9hZC5henAgJiYgcHJvZmlsZS5henApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIlVzZXJNYW5hZ2VyLl92YWxpZGF0ZUlkVG9rZW5Gcm9tVG9rZW5SZWZyZXNoVG9rZW46IGF6cCBub3QgaW4gaWRfdG9rZW4sIGJ1dCBwcmVzZW50IGluIG9yaWdpbmFsIGlkX3Rva2VuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcImF6cCBub3QgaW4gaWRfdG9rZW4sIGJ1dCBwcmVzZW50IGluIG9yaWdpbmFsIGlkX3Rva2VuXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICBfc2lnbmluU2lsZW50SWZyYW1lKGFyZ3MgPSB7fSkge1xuICAgICAgICBsZXQgdXJsID0gYXJncy5yZWRpcmVjdF91cmkgfHwgdGhpcy5zZXR0aW5ncy5zaWxlbnRfcmVkaXJlY3RfdXJpIHx8IHRoaXMuc2V0dGluZ3MucmVkaXJlY3RfdXJpO1xuICAgICAgICBpZiAoIXVybCkge1xuICAgICAgICAgICAgTG9nLmVycm9yKFwiVXNlck1hbmFnZXIuc2lnbmluU2lsZW50OiBObyBzaWxlbnRfcmVkaXJlY3RfdXJpIGNvbmZpZ3VyZWRcIik7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gc2lsZW50X3JlZGlyZWN0X3VyaSBjb25maWd1cmVkXCIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFyZ3MucmVkaXJlY3RfdXJpID0gdXJsO1xuICAgICAgICBhcmdzLnByb21wdCA9IGFyZ3MucHJvbXB0IHx8IFwibm9uZVwiO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9zaWduaW4oYXJncywgdGhpcy5faWZyYW1lTmF2aWdhdG9yLCB7XG4gICAgICAgICAgICBzdGFydFVybDogdXJsLFxuICAgICAgICAgICAgc2lsZW50UmVxdWVzdFRpbWVvdXQ6IGFyZ3Muc2lsZW50UmVxdWVzdFRpbWVvdXQgfHwgdGhpcy5zZXR0aW5ncy5zaWxlbnRSZXF1ZXN0VGltZW91dFxuICAgICAgICB9KS50aGVuKHVzZXIgPT4ge1xuICAgICAgICAgICAgaWYgKHVzZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAodXNlci5wcm9maWxlICYmIHVzZXIucHJvZmlsZS5zdWIpIHtcbiAgICAgICAgICAgICAgICAgICAgTG9nLmluZm8oXCJVc2VyTWFuYWdlci5zaWduaW5TaWxlbnQ6IHN1Y2Nlc3NmdWwsIHNpZ25lZCBpbiBzdWI6IFwiLCB1c2VyLnByb2ZpbGUuc3ViKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIExvZy5pbmZvKFwiVXNlck1hbmFnZXIuc2lnbmluU2lsZW50OiBubyBzdWJcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdXNlcjtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2lnbmluU2lsZW50Q2FsbGJhY2sodXJsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zaWduaW5DYWxsYmFjayh1cmwsIHRoaXMuX2lmcmFtZU5hdmlnYXRvcikudGhlbih1c2VyID0+IHtcbiAgICAgICAgICAgIGlmICh1c2VyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHVzZXIucHJvZmlsZSAmJiB1c2VyLnByb2ZpbGUuc3ViKSB7XG4gICAgICAgICAgICAgICAgICAgIExvZy5pbmZvKFwiVXNlck1hbmFnZXIuc2lnbmluU2lsZW50Q2FsbGJhY2s6IHN1Y2Nlc3NmdWwsIHNpZ25lZCBpbiBzdWI6IFwiLCB1c2VyLnByb2ZpbGUuc3ViKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIExvZy5pbmZvKFwiVXNlck1hbmFnZXIuc2lnbmluU2lsZW50Q2FsbGJhY2s6IG5vIHN1YlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB1c2VyO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzaWduaW5DYWxsYmFjayh1cmwpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhZFNpZ25pblJlc3BvbnNlU3RhdGUodXJsKS50aGVuKCh7c3RhdGUsIHJlc3BvbnNlfSkgPT4ge1xuICAgICAgICAgICAgaWYgKHN0YXRlLnJlcXVlc3RfdHlwZSA9PT0gXCJzaTpyXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zaWduaW5SZWRpcmVjdENhbGxiYWNrKHVybCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RhdGUucmVxdWVzdF90eXBlID09PSBcInNpOnBcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNpZ25pblBvcHVwQ2FsbGJhY2sodXJsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdGF0ZS5yZXF1ZXN0X3R5cGUgPT09IFwic2k6c1wiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2lnbmluU2lsZW50Q2FsbGJhY2sodXJsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJpbnZhbGlkIHJlc3BvbnNlX3R5cGUgaW4gc3RhdGVcIikpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzaWdub3V0Q2FsbGJhY2sodXJsLCBrZWVwT3Blbikge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWFkU2lnbm91dFJlc3BvbnNlU3RhdGUodXJsKS50aGVuKCh7c3RhdGUsIHJlc3BvbnNlfSkgPT4ge1xuICAgICAgICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLnJlcXVlc3RfdHlwZSA9PT0gXCJzbzpyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2lnbm91dFJlZGlyZWN0Q2FsbGJhY2sodXJsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLnJlcXVlc3RfdHlwZSA9PT0gXCJzbzpwXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2lnbm91dFBvcHVwQ2FsbGJhY2sodXJsLCBrZWVwT3Blbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJpbnZhbGlkIHJlc3BvbnNlX3R5cGUgaW4gc3RhdGVcIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBxdWVyeVNlc3Npb25TdGF0dXMoYXJncyA9IHt9KSB7XG4gICAgICAgIGFyZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBhcmdzKTtcblxuICAgICAgICBhcmdzLnJlcXVlc3RfdHlwZSA9IFwic2k6c1wiOyAvLyB0aGlzIGFjdHMgbGlrZSBhIHNpZ25pbiBzaWxlbnRcbiAgICAgICAgbGV0IHVybCA9IGFyZ3MucmVkaXJlY3RfdXJpIHx8IHRoaXMuc2V0dGluZ3Muc2lsZW50X3JlZGlyZWN0X3VyaSB8fCB0aGlzLnNldHRpbmdzLnJlZGlyZWN0X3VyaTtcbiAgICAgICAgaWYgKCF1cmwpIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlVzZXJNYW5hZ2VyLnF1ZXJ5U2Vzc2lvblN0YXR1czogTm8gc2lsZW50X3JlZGlyZWN0X3VyaSBjb25maWd1cmVkXCIpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIHNpbGVudF9yZWRpcmVjdF91cmkgY29uZmlndXJlZFwiKSk7XG4gICAgICAgIH1cblxuICAgICAgICBhcmdzLnJlZGlyZWN0X3VyaSA9IHVybDtcbiAgICAgICAgYXJncy5wcm9tcHQgPSBcIm5vbmVcIjtcbiAgICAgICAgYXJncy5yZXNwb25zZV90eXBlID0gYXJncy5yZXNwb25zZV90eXBlIHx8IHRoaXMuc2V0dGluZ3MucXVlcnlfc3RhdHVzX3Jlc3BvbnNlX3R5cGU7XG4gICAgICAgIGFyZ3Muc2NvcGUgPSBhcmdzLnNjb3BlIHx8IFwib3BlbmlkXCI7XG4gICAgICAgIGFyZ3Muc2tpcFVzZXJJbmZvID0gdHJ1ZTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fc2lnbmluU3RhcnQoYXJncywgdGhpcy5faWZyYW1lTmF2aWdhdG9yLCB7XG4gICAgICAgICAgICBzdGFydFVybDogdXJsLFxuICAgICAgICAgICAgc2lsZW50UmVxdWVzdFRpbWVvdXQ6IGFyZ3Muc2lsZW50UmVxdWVzdFRpbWVvdXQgfHwgdGhpcy5zZXR0aW5ncy5zaWxlbnRSZXF1ZXN0VGltZW91dFxuICAgICAgICB9KS50aGVuKG5hdlJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb2Nlc3NTaWduaW5SZXNwb25zZShuYXZSZXNwb25zZS51cmwpLnRoZW4oc2lnbmluUmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyLnF1ZXJ5U2Vzc2lvblN0YXR1czogZ290IHNpZ25pbiByZXNwb25zZVwiKTtcblxuICAgICAgICAgICAgICAgIGlmIChzaWduaW5SZXNwb25zZS5zZXNzaW9uX3N0YXRlICYmIHNpZ25pblJlc3BvbnNlLnByb2ZpbGUuc3ViKSB7XG4gICAgICAgICAgICAgICAgICAgIExvZy5pbmZvKFwiVXNlck1hbmFnZXIucXVlcnlTZXNzaW9uU3RhdHVzOiBxdWVyeVNlc3Npb25TdGF0dXMgc3VjY2VzcyBmb3Igc3ViOiBcIiwgIHNpZ25pblJlc3BvbnNlLnByb2ZpbGUuc3ViKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb25fc3RhdGU6IHNpZ25pblJlc3BvbnNlLnNlc3Npb25fc3RhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWI6IHNpZ25pblJlc3BvbnNlLnByb2ZpbGUuc3ViLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2lkOiBzaWduaW5SZXNwb25zZS5wcm9maWxlLnNpZFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgTG9nLmluZm8oXCJxdWVyeVNlc3Npb25TdGF0dXMgc3VjY2Vzc2Z1bCwgdXNlciBub3QgYXV0aGVudGljYXRlZFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVyci5zZXNzaW9uX3N0YXRlICYmIHRoaXMuc2V0dGluZ3MubW9uaXRvckFub255bW91c1Nlc3Npb24pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVyci5tZXNzYWdlID09IFwibG9naW5fcmVxdWlyZWRcIiB8fCBcbiAgICAgICAgICAgICAgICAgICAgICAgIGVyci5tZXNzYWdlID09IFwiY29uc2VudF9yZXF1aXJlZFwiIHx8IFxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyLm1lc3NhZ2UgPT0gXCJpbnRlcmFjdGlvbl9yZXF1aXJlZFwiIHx8IFxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyLm1lc3NhZ2UgPT0gXCJhY2NvdW50X3NlbGVjdGlvbl9yZXF1aXJlZFwiXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmluZm8oXCJVc2VyTWFuYWdlci5xdWVyeVNlc3Npb25TdGF0dXM6IHF1ZXJ5U2Vzc2lvblN0YXR1cyBzdWNjZXNzIGZvciBhbm9ueW1vdXMgdXNlclwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbl9zdGF0ZTogZXJyLnNlc3Npb25fc3RhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX3NpZ25pbihhcmdzLCBuYXZpZ2F0b3IsIG5hdmlnYXRvclBhcmFtcyA9IHt9KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zaWduaW5TdGFydChhcmdzLCBuYXZpZ2F0b3IsIG5hdmlnYXRvclBhcmFtcykudGhlbihuYXZSZXNwb25zZSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2lnbmluRW5kKG5hdlJlc3BvbnNlLnVybCwgYXJncyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfc2lnbmluU3RhcnQoYXJncywgbmF2aWdhdG9yLCBuYXZpZ2F0b3JQYXJhbXMgPSB7fSkge1xuXG4gICAgICAgIHJldHVybiBuYXZpZ2F0b3IucHJlcGFyZShuYXZpZ2F0b3JQYXJhbXMpLnRoZW4oaGFuZGxlID0+IHtcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyLl9zaWduaW5TdGFydDogZ290IG5hdmlnYXRvciB3aW5kb3cgaGFuZGxlXCIpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVTaWduaW5SZXF1ZXN0KGFyZ3MpLnRoZW4oc2lnbmluUmVxdWVzdCA9PiB7XG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuX3NpZ25pblN0YXJ0OiBnb3Qgc2lnbmluIHJlcXVlc3RcIik7XG5cbiAgICAgICAgICAgICAgICBuYXZpZ2F0b3JQYXJhbXMudXJsID0gc2lnbmluUmVxdWVzdC51cmw7XG4gICAgICAgICAgICAgICAgbmF2aWdhdG9yUGFyYW1zLmlkID0gc2lnbmluUmVxdWVzdC5zdGF0ZS5pZDtcblxuICAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGUubmF2aWdhdGUobmF2aWdhdG9yUGFyYW1zKTtcbiAgICAgICAgICAgIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGhhbmRsZS5jbG9zZSkge1xuICAgICAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJVc2VyTWFuYWdlci5fc2lnbmluU3RhcnQ6IEVycm9yIGFmdGVyIHByZXBhcmluZyBuYXZpZ2F0b3IsIGNsb3NpbmcgbmF2aWdhdG9yIHdpbmRvd1wiKTtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgX3NpZ25pbkVuZCh1cmwsIGFyZ3MgPSB7fSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9jZXNzU2lnbmluUmVzcG9uc2UodXJsKS50aGVuKHNpZ25pblJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyLl9zaWduaW5FbmQ6IGdvdCBzaWduaW4gcmVzcG9uc2VcIik7XG5cbiAgICAgICAgICAgIGxldCB1c2VyID0gbmV3IFVzZXIoc2lnbmluUmVzcG9uc2UpO1xuXG4gICAgICAgICAgICBpZiAoYXJncy5jdXJyZW50X3N1Yikge1xuICAgICAgICAgICAgICAgIGlmIChhcmdzLmN1cnJlbnRfc3ViICE9PSB1c2VyLnByb2ZpbGUuc3ViKSB7XG4gICAgICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyLl9zaWduaW5FbmQ6IGN1cnJlbnQgdXNlciBkb2VzIG5vdCBtYXRjaCB1c2VyIHJldHVybmVkIGZyb20gc2lnbmluLiBzdWIgZnJvbSBzaWduaW46IFwiLCB1c2VyLnByb2ZpbGUuc3ViKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcImxvZ2luX3JlcXVpcmVkXCIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyLl9zaWduaW5FbmQ6IGN1cnJlbnQgdXNlciBtYXRjaGVzIHVzZXIgcmV0dXJuZWQgZnJvbSBzaWduaW5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdG9yZVVzZXIodXNlcikudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuX3NpZ25pbkVuZDogdXNlciBzdG9yZWRcIik7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHMubG9hZCh1c2VyKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB1c2VyO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfc2lnbmluQ2FsbGJhY2sodXJsLCBuYXZpZ2F0b3IpIHtcbiAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuX3NpZ25pbkNhbGxiYWNrXCIpO1xuICAgICAgICBsZXQgdXNlUXVlcnkgPSB0aGlzLl9zZXR0aW5ncy5yZXNwb25zZV9tb2RlID09PSBcInF1ZXJ5XCIgfHwgKCF0aGlzLl9zZXR0aW5ncy5yZXNwb25zZV9tb2RlICYmIFNpZ25pblJlcXVlc3QuaXNDb2RlKHRoaXMuX3NldHRpbmdzLnJlc3BvbnNlX3R5cGUpKTtcbiAgICAgICAgbGV0IGRlbGltaXRlciA9IHVzZVF1ZXJ5ID8gXCI/XCIgOiBcIiNcIjtcbiAgICAgICAgcmV0dXJuIG5hdmlnYXRvci5jYWxsYmFjayh1cmwsIHVuZGVmaW5lZCwgZGVsaW1pdGVyKTtcbiAgICB9XG5cbiAgICBzaWdub3V0UmVkaXJlY3QoYXJncyA9IHt9KSB7XG4gICAgICAgIGFyZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBhcmdzKTtcblxuICAgICAgICBhcmdzLnJlcXVlc3RfdHlwZSA9IFwic286clwiO1xuICAgICAgICBsZXQgcG9zdExvZ291dFJlZGlyZWN0VXJpID0gYXJncy5wb3N0X2xvZ291dF9yZWRpcmVjdF91cmkgfHwgdGhpcy5zZXR0aW5ncy5wb3N0X2xvZ291dF9yZWRpcmVjdF91cmk7XG4gICAgICAgIGlmIChwb3N0TG9nb3V0UmVkaXJlY3RVcmkpe1xuICAgICAgICAgICAgYXJncy5wb3N0X2xvZ291dF9yZWRpcmVjdF91cmkgPSBwb3N0TG9nb3V0UmVkaXJlY3RVcmk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG5hdlBhcmFtcyA9IHtcbiAgICAgICAgICAgIHVzZVJlcGxhY2VUb05hdmlnYXRlIDogYXJncy51c2VSZXBsYWNlVG9OYXZpZ2F0ZVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGhpcy5fc2lnbm91dFN0YXJ0KGFyZ3MsIHRoaXMuX3JlZGlyZWN0TmF2aWdhdG9yLCBuYXZQYXJhbXMpLnRoZW4oKCk9PntcbiAgICAgICAgICAgIExvZy5pbmZvKFwiVXNlck1hbmFnZXIuc2lnbm91dFJlZGlyZWN0OiBzdWNjZXNzZnVsXCIpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2lnbm91dFJlZGlyZWN0Q2FsbGJhY2sodXJsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zaWdub3V0RW5kKHVybCB8fCB0aGlzLl9yZWRpcmVjdE5hdmlnYXRvci51cmwpLnRoZW4ocmVzcG9uc2U9PntcbiAgICAgICAgICAgIExvZy5pbmZvKFwiVXNlck1hbmFnZXIuc2lnbm91dFJlZGlyZWN0Q2FsbGJhY2s6IHN1Y2Nlc3NmdWxcIik7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNpZ25vdXRQb3B1cChhcmdzID0ge30pIHtcbiAgICAgICAgYXJncyA9IE9iamVjdC5hc3NpZ24oe30sIGFyZ3MpO1xuXG4gICAgICAgIGFyZ3MucmVxdWVzdF90eXBlID0gXCJzbzpwXCI7XG4gICAgICAgIGxldCB1cmwgPSBhcmdzLnBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSB8fCB0aGlzLnNldHRpbmdzLnBvcHVwX3Bvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSB8fCB0aGlzLnNldHRpbmdzLnBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaTtcbiAgICAgICAgYXJncy5wb3N0X2xvZ291dF9yZWRpcmVjdF91cmkgPSB1cmw7XG4gICAgICAgIGFyZ3MuZGlzcGxheSA9IFwicG9wdXBcIjtcbiAgICAgICAgaWYgKGFyZ3MucG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpKXtcbiAgICAgICAgICAgIC8vIHdlJ3JlIHB1dHRpbmcgYSBkdW1teSBlbnRyeSBpbiBoZXJlIGJlY2F1c2Ugd2VcbiAgICAgICAgICAgIC8vIG5lZWQgYSB1bmlxdWUgaWQgZnJvbSB0aGUgc3RhdGUgZm9yIG5vdGlmaWNhdGlvblxuICAgICAgICAgICAgLy8gdG8gdGhlIHBhcmVudCB3aW5kb3csIHdoaWNoIGlzIG5lY2Vzc2FyeSBpZiB3ZVxuICAgICAgICAgICAgLy8gcGxhbiB0byByZXR1cm4gYmFjayB0byB0aGUgY2xpZW50IGFmdGVyIHNpZ25vdXRcbiAgICAgICAgICAgIC8vIGFuZCBzbyB3ZSBjYW4gY2xvc2UgdGhlIHBvcHVwIGFmdGVyIHNpZ25vdXRcbiAgICAgICAgICAgIGFyZ3Muc3RhdGUgPSBhcmdzLnN0YXRlIHx8IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3NpZ25vdXQoYXJncywgdGhpcy5fcG9wdXBOYXZpZ2F0b3IsIHtcbiAgICAgICAgICAgIHN0YXJ0VXJsOiB1cmwsXG4gICAgICAgICAgICBwb3B1cFdpbmRvd0ZlYXR1cmVzOiBhcmdzLnBvcHVwV2luZG93RmVhdHVyZXMgfHwgdGhpcy5zZXR0aW5ncy5wb3B1cFdpbmRvd0ZlYXR1cmVzLFxuICAgICAgICAgICAgcG9wdXBXaW5kb3dUYXJnZXQ6IGFyZ3MucG9wdXBXaW5kb3dUYXJnZXQgfHwgdGhpcy5zZXR0aW5ncy5wb3B1cFdpbmRvd1RhcmdldFxuICAgICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIExvZy5pbmZvKFwiVXNlck1hbmFnZXIuc2lnbm91dFBvcHVwOiBzdWNjZXNzZnVsXCIpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2lnbm91dFBvcHVwQ2FsbGJhY2sodXJsLCBrZWVwT3Blbikge1xuICAgICAgICBpZiAodHlwZW9mKGtlZXBPcGVuKSA9PT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mKHVybCkgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAga2VlcE9wZW4gPSB1cmw7XG4gICAgICAgICAgICB1cmwgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGRlbGltaXRlciA9ICc/JztcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BvcHVwTmF2aWdhdG9yLmNhbGxiYWNrKHVybCwga2VlcE9wZW4sIGRlbGltaXRlcikudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBMb2cuaW5mbyhcIlVzZXJNYW5hZ2VyLnNpZ25vdXRQb3B1cENhbGxiYWNrOiBzdWNjZXNzZnVsXCIpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBfc2lnbm91dChhcmdzLCBuYXZpZ2F0b3IsIG5hdmlnYXRvclBhcmFtcyA9IHt9KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zaWdub3V0U3RhcnQoYXJncywgbmF2aWdhdG9yLCBuYXZpZ2F0b3JQYXJhbXMpLnRoZW4obmF2UmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NpZ25vdXRFbmQobmF2UmVzcG9uc2UudXJsKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9zaWdub3V0U3RhcnQoYXJncyA9IHt9LCBuYXZpZ2F0b3IsIG5hdmlnYXRvclBhcmFtcyA9IHt9KSB7XG4gICAgICAgIHJldHVybiBuYXZpZ2F0b3IucHJlcGFyZShuYXZpZ2F0b3JQYXJhbXMpLnRoZW4oaGFuZGxlID0+IHtcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyLl9zaWdub3V0U3RhcnQ6IGdvdCBuYXZpZ2F0b3Igd2luZG93IGhhbmRsZVwiKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xvYWRVc2VyKCkudGhlbih1c2VyID0+IHtcbiAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJVc2VyTWFuYWdlci5fc2lnbm91dFN0YXJ0OiBsb2FkZWQgY3VycmVudCB1c2VyIGZyb20gc3RvcmFnZVwiKTtcblxuICAgICAgICAgICAgICAgIHZhciByZXZva2VQcm9taXNlID0gdGhpcy5fc2V0dGluZ3MucmV2b2tlQWNjZXNzVG9rZW5PblNpZ25vdXQgPyB0aGlzLl9yZXZva2VJbnRlcm5hbCh1c2VyKSA6IFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXZva2VQcm9taXNlLnRoZW4oKCkgPT4ge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBpZF90b2tlbiA9IGFyZ3MuaWRfdG9rZW5faGludCB8fCB1c2VyICYmIHVzZXIuaWRfdG9rZW47XG4gICAgICAgICAgICAgICAgICAgIGlmIChpZF90b2tlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuX3NpZ25vdXRTdGFydDogU2V0dGluZyBpZF90b2tlbiBpbnRvIHNpZ25vdXQgcmVxdWVzdFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MuaWRfdG9rZW5faGludCA9IGlkX3Rva2VuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlVXNlcigpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuX3NpZ25vdXRTdGFydDogdXNlciByZW1vdmVkLCBjcmVhdGluZyBzaWdub3V0IHJlcXVlc3RcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVNpZ25vdXRSZXF1ZXN0KGFyZ3MpLnRoZW4oc2lnbm91dFJlcXVlc3QgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyLl9zaWdub3V0U3RhcnQ6IGdvdCBzaWdub3V0IHJlcXVlc3RcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3JQYXJhbXMudXJsID0gc2lnbm91dFJlcXVlc3QudXJsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaWdub3V0UmVxdWVzdC5zdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3JQYXJhbXMuaWQgPSBzaWdub3V0UmVxdWVzdC5zdGF0ZS5pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZS5uYXZpZ2F0ZShuYXZpZ2F0b3JQYXJhbXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoaGFuZGxlLmNsb3NlKSB7XG4gICAgICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyLl9zaWdub3V0U3RhcnQ6IEVycm9yIGFmdGVyIHByZXBhcmluZyBuYXZpZ2F0b3IsIGNsb3NpbmcgbmF2aWdhdG9yIHdpbmRvd1wiKTtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgX3NpZ25vdXRFbmQodXJsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb2Nlc3NTaWdub3V0UmVzcG9uc2UodXJsKS50aGVuKHNpZ25vdXRSZXNwb25zZSA9PiB7XG4gICAgICAgICAgICBMb2cuZGVidWcoXCJVc2VyTWFuYWdlci5fc2lnbm91dEVuZDogZ290IHNpZ25vdXQgcmVzcG9uc2VcIik7XG5cbiAgICAgICAgICAgIHJldHVybiBzaWdub3V0UmVzcG9uc2U7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldm9rZUFjY2Vzc1Rva2VuKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbG9hZFVzZXIoKS50aGVuKHVzZXIgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Jldm9rZUludGVybmFsKHVzZXIsIHRydWUpLnRoZW4oc3VjY2VzcyA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIucmV2b2tlQWNjZXNzVG9rZW46IHJlbW92aW5nIHRva2VuIHByb3BlcnRpZXMgZnJvbSB1c2VyIGFuZCByZS1zdG9yaW5nXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgIHVzZXIuYWNjZXNzX3Rva2VuID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgdXNlci5yZWZyZXNoX3Rva2VuID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgdXNlci5leHBpcmVzX2F0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgdXNlci50b2tlbl90eXBlID0gbnVsbDtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdG9yZVVzZXIodXNlcikudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJVc2VyTWFuYWdlci5yZXZva2VBY2Nlc3NUb2tlbjogdXNlciBzdG9yZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHMubG9hZCh1c2VyKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pLnRoZW4oKCk9PntcbiAgICAgICAgICAgIExvZy5pbmZvKFwiVXNlck1hbmFnZXIucmV2b2tlQWNjZXNzVG9rZW46IGFjY2VzcyB0b2tlbiByZXZva2VkIHN1Y2Nlc3NmdWxseVwiKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX3Jldm9rZUludGVybmFsKHVzZXIsIHJlcXVpcmVkKSB7XG4gICAgICAgIGlmICh1c2VyKSB7XG4gICAgICAgICAgICB2YXIgYWNjZXNzX3Rva2VuID0gdXNlci5hY2Nlc3NfdG9rZW47XG4gICAgICAgICAgICB2YXIgcmVmcmVzaF90b2tlbiA9IHVzZXIucmVmcmVzaF90b2tlbjtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Jldm9rZUFjY2Vzc1Rva2VuSW50ZXJuYWwoYWNjZXNzX3Rva2VuLCByZXF1aXJlZClcbiAgICAgICAgICAgICAgICAudGhlbihhdFN1Y2Nlc3MgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcmV2b2tlUmVmcmVzaFRva2VuSW50ZXJuYWwocmVmcmVzaF90b2tlbiwgcmVxdWlyZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihydFN1Y2Nlc3MgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYXRTdWNjZXNzICYmICFydFN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIucmV2b2tlQWNjZXNzVG9rZW46IG5vIG5lZWQgdG8gcmV2b2tlIGR1ZSB0byBubyB0b2tlbihzKSwgb3IgSldUIGZvcm1hdFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGF0U3VjY2VzcyB8fCBydFN1Y2Nlc3M7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZmFsc2UpO1xuICAgIH1cblxuICAgIF9yZXZva2VBY2Nlc3NUb2tlbkludGVybmFsKGFjY2Vzc190b2tlbiwgcmVxdWlyZWQpIHtcbiAgICAgICAgLy8gY2hlY2sgZm9yIEpXVCB2cy4gcmVmZXJlbmNlIHRva2VuXG4gICAgICAgIGlmICghYWNjZXNzX3Rva2VuIHx8IGFjY2Vzc190b2tlbi5pbmRleE9mKCcuJykgPj0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmYWxzZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fdG9rZW5SZXZvY2F0aW9uQ2xpZW50LnJldm9rZShhY2Nlc3NfdG9rZW4sIHJlcXVpcmVkKS50aGVuKCgpID0+IHRydWUpO1xuICAgIH1cblxuICAgIF9yZXZva2VSZWZyZXNoVG9rZW5JbnRlcm5hbChyZWZyZXNoX3Rva2VuLCByZXF1aXJlZCkge1xuICAgICAgICBpZiAoIXJlZnJlc2hfdG9rZW4pIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZmFsc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3Rva2VuUmV2b2NhdGlvbkNsaWVudC5yZXZva2UocmVmcmVzaF90b2tlbiwgcmVxdWlyZWQsIFwicmVmcmVzaF90b2tlblwiKS50aGVuKCgpID0+IHRydWUpO1xuICAgIH1cblxuICAgIHN0YXJ0U2lsZW50UmVuZXcoKSB7XG4gICAgICAgIHRoaXMuX3NpbGVudFJlbmV3U2VydmljZS5zdGFydCgpO1xuICAgIH1cblxuICAgIHN0b3BTaWxlbnRSZW5ldygpIHtcbiAgICAgICAgdGhpcy5fc2lsZW50UmVuZXdTZXJ2aWNlLnN0b3AoKTtcbiAgICB9XG5cbiAgICBnZXQgX3VzZXJTdG9yZUtleSgpIHtcbiAgICAgICAgcmV0dXJuIGB1c2VyOiR7dGhpcy5zZXR0aW5ncy5hdXRob3JpdHl9OiR7dGhpcy5zZXR0aW5ncy5jbGllbnRfaWR9YDtcbiAgICB9XG5cbiAgICBfbG9hZFVzZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl91c2VyU3RvcmUuZ2V0KHRoaXMuX3VzZXJTdG9yZUtleSkudGhlbihzdG9yYWdlU3RyaW5nID0+IHtcbiAgICAgICAgICAgIGlmIChzdG9yYWdlU3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuX2xvYWRVc2VyOiB1c2VyIHN0b3JhZ2VTdHJpbmcgbG9hZGVkXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBVc2VyLmZyb21TdG9yYWdlU3RyaW5nKHN0b3JhZ2VTdHJpbmcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBMb2cuZGVidWcoXCJVc2VyTWFuYWdlci5fbG9hZFVzZXI6IG5vIHVzZXIgc3RvcmFnZVN0cmluZ1wiKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzdG9yZVVzZXIodXNlcikge1xuICAgICAgICBpZiAodXNlcikge1xuICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuc3RvcmVVc2VyOiBzdG9yaW5nIHVzZXJcIik7XG5cbiAgICAgICAgICAgIHZhciBzdG9yYWdlU3RyaW5nID0gdXNlci50b1N0b3JhZ2VTdHJpbmcoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl91c2VyU3RvcmUuc2V0KHRoaXMuX3VzZXJTdG9yZUtleSwgc3RvcmFnZVN0cmluZyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBMb2cuZGVidWcoXCJzdG9yZVVzZXIuc3RvcmVVc2VyOiByZW1vdmluZyB1c2VyXCIpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3VzZXJTdG9yZS5yZW1vdmUodGhpcy5fdXNlclN0b3JlS2V5KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nLmpzJztcbmltcG9ydCB7IEFjY2Vzc1Rva2VuRXZlbnRzIH0gZnJvbSAnLi9BY2Nlc3NUb2tlbkV2ZW50cy5qcyc7XG5pbXBvcnQgeyBFdmVudCB9IGZyb20gJy4vRXZlbnQuanMnO1xuXG5leHBvcnQgY2xhc3MgVXNlck1hbmFnZXJFdmVudHMgZXh0ZW5kcyBBY2Nlc3NUb2tlbkV2ZW50cyB7XG5cbiAgICBjb25zdHJ1Y3RvcihzZXR0aW5ncykge1xuICAgICAgICBzdXBlcihzZXR0aW5ncyk7XG4gICAgICAgIHRoaXMuX3VzZXJMb2FkZWQgPSBuZXcgRXZlbnQoXCJVc2VyIGxvYWRlZFwiKTtcbiAgICAgICAgdGhpcy5fdXNlclVubG9hZGVkID0gbmV3IEV2ZW50KFwiVXNlciB1bmxvYWRlZFwiKTtcbiAgICAgICAgdGhpcy5fc2lsZW50UmVuZXdFcnJvciA9IG5ldyBFdmVudChcIlNpbGVudCByZW5ldyBlcnJvclwiKTtcbiAgICAgICAgdGhpcy5fdXNlclNpZ25lZEluID0gbmV3IEV2ZW50KFwiVXNlciBzaWduZWQgaW5cIik7XG4gICAgICAgIHRoaXMuX3VzZXJTaWduZWRPdXQgPSBuZXcgRXZlbnQoXCJVc2VyIHNpZ25lZCBvdXRcIik7XG4gICAgICAgIHRoaXMuX3VzZXJTZXNzaW9uQ2hhbmdlZCA9IG5ldyBFdmVudChcIlVzZXIgc2Vzc2lvbiBjaGFuZ2VkXCIpO1xuICAgIH1cblxuICAgIGxvYWQodXNlciwgcmFpc2VFdmVudD10cnVlKSB7XG4gICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyRXZlbnRzLmxvYWRcIik7XG4gICAgICAgIHN1cGVyLmxvYWQodXNlcik7XG4gICAgICAgIGlmIChyYWlzZUV2ZW50KSB7XG4gICAgICAgICAgICB0aGlzLl91c2VyTG9hZGVkLnJhaXNlKHVzZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHVubG9hZCgpIHtcbiAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXJFdmVudHMudW5sb2FkXCIpO1xuICAgICAgICBzdXBlci51bmxvYWQoKTtcbiAgICAgICAgdGhpcy5fdXNlclVubG9hZGVkLnJhaXNlKCk7XG4gICAgfVxuXG4gICAgYWRkVXNlckxvYWRlZChjYikge1xuICAgICAgICB0aGlzLl91c2VyTG9hZGVkLmFkZEhhbmRsZXIoY2IpO1xuICAgIH1cbiAgICByZW1vdmVVc2VyTG9hZGVkKGNiKSB7XG4gICAgICAgIHRoaXMuX3VzZXJMb2FkZWQucmVtb3ZlSGFuZGxlcihjYik7XG4gICAgfVxuXG4gICAgYWRkVXNlclVubG9hZGVkKGNiKSB7XG4gICAgICAgIHRoaXMuX3VzZXJVbmxvYWRlZC5hZGRIYW5kbGVyKGNiKTtcbiAgICB9XG4gICAgcmVtb3ZlVXNlclVubG9hZGVkKGNiKSB7XG4gICAgICAgIHRoaXMuX3VzZXJVbmxvYWRlZC5yZW1vdmVIYW5kbGVyKGNiKTtcbiAgICB9XG5cbiAgICBhZGRTaWxlbnRSZW5ld0Vycm9yKGNiKSB7XG4gICAgICAgIHRoaXMuX3NpbGVudFJlbmV3RXJyb3IuYWRkSGFuZGxlcihjYik7XG4gICAgfVxuICAgIHJlbW92ZVNpbGVudFJlbmV3RXJyb3IoY2IpIHtcbiAgICAgICAgdGhpcy5fc2lsZW50UmVuZXdFcnJvci5yZW1vdmVIYW5kbGVyKGNiKTtcbiAgICB9XG4gICAgX3JhaXNlU2lsZW50UmVuZXdFcnJvcihlKSB7XG4gICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyRXZlbnRzLl9yYWlzZVNpbGVudFJlbmV3RXJyb3JcIiwgZS5tZXNzYWdlKTtcbiAgICAgICAgdGhpcy5fc2lsZW50UmVuZXdFcnJvci5yYWlzZShlKTtcbiAgICB9XG5cbiAgICBhZGRVc2VyU2lnbmVkSW4oY2IpIHtcbiAgICAgICAgdGhpcy5fdXNlclNpZ25lZEluLmFkZEhhbmRsZXIoY2IpO1xuICAgIH1cbiAgICByZW1vdmVVc2VyU2lnbmVkSW4oY2IpIHtcbiAgICAgICAgdGhpcy5fdXNlclNpZ25lZEluLnJlbW92ZUhhbmRsZXIoY2IpO1xuICAgIH1cbiAgICBfcmFpc2VVc2VyU2lnbmVkSW4oKSB7XG4gICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyRXZlbnRzLl9yYWlzZVVzZXJTaWduZWRJblwiKTtcbiAgICAgICAgdGhpcy5fdXNlclNpZ25lZEluLnJhaXNlKCk7XG4gICAgfVxuXG4gICAgYWRkVXNlclNpZ25lZE91dChjYikge1xuICAgICAgICB0aGlzLl91c2VyU2lnbmVkT3V0LmFkZEhhbmRsZXIoY2IpO1xuICAgIH1cbiAgICByZW1vdmVVc2VyU2lnbmVkT3V0KGNiKSB7XG4gICAgICAgIHRoaXMuX3VzZXJTaWduZWRPdXQucmVtb3ZlSGFuZGxlcihjYik7XG4gICAgfVxuICAgIF9yYWlzZVVzZXJTaWduZWRPdXQoKSB7XG4gICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyRXZlbnRzLl9yYWlzZVVzZXJTaWduZWRPdXRcIik7XG4gICAgICAgIHRoaXMuX3VzZXJTaWduZWRPdXQucmFpc2UoKTtcbiAgICB9XG5cbiAgICBhZGRVc2VyU2Vzc2lvbkNoYW5nZWQoY2IpIHtcbiAgICAgICAgdGhpcy5fdXNlclNlc3Npb25DaGFuZ2VkLmFkZEhhbmRsZXIoY2IpO1xuICAgIH1cbiAgICByZW1vdmVVc2VyU2Vzc2lvbkNoYW5nZWQoY2IpIHtcbiAgICAgICAgdGhpcy5fdXNlclNlc3Npb25DaGFuZ2VkLnJlbW92ZUhhbmRsZXIoY2IpO1xuICAgIH1cbiAgICBfcmFpc2VVc2VyU2Vzc2lvbkNoYW5nZWQoKSB7XG4gICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyRXZlbnRzLl9yYWlzZVVzZXJTZXNzaW9uQ2hhbmdlZFwiKTtcbiAgICAgICAgdGhpcy5fdXNlclNlc3Npb25DaGFuZ2VkLnJhaXNlKCk7XG4gICAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cuanMnO1xuaW1wb3J0IHsgT2lkY0NsaWVudFNldHRpbmdzIH0gZnJvbSAnLi9PaWRjQ2xpZW50U2V0dGluZ3MuanMnO1xuaW1wb3J0IHsgUmVkaXJlY3ROYXZpZ2F0b3IgfSBmcm9tICcuL1JlZGlyZWN0TmF2aWdhdG9yLmpzJztcbmltcG9ydCB7IFBvcHVwTmF2aWdhdG9yIH0gZnJvbSAnLi9Qb3B1cE5hdmlnYXRvci5qcyc7XG5pbXBvcnQgeyBJRnJhbWVOYXZpZ2F0b3IgfSBmcm9tICcuL0lGcmFtZU5hdmlnYXRvci5qcyc7XG5pbXBvcnQgeyBXZWJTdG9yYWdlU3RhdGVTdG9yZSB9IGZyb20gJy4vV2ViU3RvcmFnZVN0YXRlU3RvcmUuanMnO1xuaW1wb3J0IHsgR2xvYmFsIH0gZnJvbSAnLi9HbG9iYWwuanMnO1xuaW1wb3J0IHsgU2lnbmluUmVxdWVzdCB9IGZyb20gJy4vU2lnbmluUmVxdWVzdC5qcyc7XG5cbmNvbnN0IERlZmF1bHRBY2Nlc3NUb2tlbkV4cGlyaW5nTm90aWZpY2F0aW9uVGltZSA9IDYwO1xuY29uc3QgRGVmYXVsdENoZWNrU2Vzc2lvbkludGVydmFsID0gMjAwMDtcblxuZXhwb3J0IGNsYXNzIFVzZXJNYW5hZ2VyU2V0dGluZ3MgZXh0ZW5kcyBPaWRjQ2xpZW50U2V0dGluZ3Mge1xuICAgIGNvbnN0cnVjdG9yKHtcbiAgICAgICAgcG9wdXBfcmVkaXJlY3RfdXJpLFxuICAgICAgICBwb3B1cF9wb3N0X2xvZ291dF9yZWRpcmVjdF91cmksXG4gICAgICAgIHBvcHVwV2luZG93RmVhdHVyZXMsXG4gICAgICAgIHBvcHVwV2luZG93VGFyZ2V0LFxuICAgICAgICBzaWxlbnRfcmVkaXJlY3RfdXJpLFxuICAgICAgICBzaWxlbnRSZXF1ZXN0VGltZW91dCxcbiAgICAgICAgYXV0b21hdGljU2lsZW50UmVuZXcgPSBmYWxzZSxcbiAgICAgICAgdmFsaWRhdGVTdWJPblNpbGVudFJlbmV3ID0gZmFsc2UsXG4gICAgICAgIGluY2x1ZGVJZFRva2VuSW5TaWxlbnRSZW5ldyA9IHRydWUsXG4gICAgICAgIG1vbml0b3JTZXNzaW9uID0gdHJ1ZSxcbiAgICAgICAgbW9uaXRvckFub255bW91c1Nlc3Npb24gPSBmYWxzZSxcbiAgICAgICAgY2hlY2tTZXNzaW9uSW50ZXJ2YWwgPSBEZWZhdWx0Q2hlY2tTZXNzaW9uSW50ZXJ2YWwsXG4gICAgICAgIHN0b3BDaGVja1Nlc3Npb25PbkVycm9yID0gdHJ1ZSxcbiAgICAgICAgcXVlcnlfc3RhdHVzX3Jlc3BvbnNlX3R5cGUsXG4gICAgICAgIHJldm9rZUFjY2Vzc1Rva2VuT25TaWdub3V0ID0gZmFsc2UsXG4gICAgICAgIGFjY2Vzc1Rva2VuRXhwaXJpbmdOb3RpZmljYXRpb25UaW1lID0gRGVmYXVsdEFjY2Vzc1Rva2VuRXhwaXJpbmdOb3RpZmljYXRpb25UaW1lLFxuICAgICAgICByZWRpcmVjdE5hdmlnYXRvciA9IG5ldyBSZWRpcmVjdE5hdmlnYXRvcigpLFxuICAgICAgICBwb3B1cE5hdmlnYXRvciA9IG5ldyBQb3B1cE5hdmlnYXRvcigpLFxuICAgICAgICBpZnJhbWVOYXZpZ2F0b3IgPSBuZXcgSUZyYW1lTmF2aWdhdG9yKCksXG4gICAgICAgIHVzZXJTdG9yZSA9IG5ldyBXZWJTdG9yYWdlU3RhdGVTdG9yZSh7IHN0b3JlOiBHbG9iYWwuc2Vzc2lvblN0b3JhZ2UgfSlcbiAgICB9ID0ge30pIHtcbiAgICAgICAgc3VwZXIoYXJndW1lbnRzWzBdKTtcblxuICAgICAgICB0aGlzLl9wb3B1cF9yZWRpcmVjdF91cmkgPSBwb3B1cF9yZWRpcmVjdF91cmk7XG4gICAgICAgIHRoaXMuX3BvcHVwX3Bvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSA9IHBvcHVwX3Bvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaTtcbiAgICAgICAgdGhpcy5fcG9wdXBXaW5kb3dGZWF0dXJlcyA9IHBvcHVwV2luZG93RmVhdHVyZXM7XG4gICAgICAgIHRoaXMuX3BvcHVwV2luZG93VGFyZ2V0ID0gcG9wdXBXaW5kb3dUYXJnZXQ7XG5cbiAgICAgICAgdGhpcy5fc2lsZW50X3JlZGlyZWN0X3VyaSA9IHNpbGVudF9yZWRpcmVjdF91cmk7XG4gICAgICAgIHRoaXMuX3NpbGVudFJlcXVlc3RUaW1lb3V0ID0gc2lsZW50UmVxdWVzdFRpbWVvdXQ7XG4gICAgICAgIHRoaXMuX2F1dG9tYXRpY1NpbGVudFJlbmV3ID0gYXV0b21hdGljU2lsZW50UmVuZXc7XG4gICAgICAgIHRoaXMuX3ZhbGlkYXRlU3ViT25TaWxlbnRSZW5ldyA9IHZhbGlkYXRlU3ViT25TaWxlbnRSZW5ldztcbiAgICAgICAgdGhpcy5faW5jbHVkZUlkVG9rZW5JblNpbGVudFJlbmV3ID0gaW5jbHVkZUlkVG9rZW5JblNpbGVudFJlbmV3O1xuICAgICAgICB0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyaW5nTm90aWZpY2F0aW9uVGltZSA9IGFjY2Vzc1Rva2VuRXhwaXJpbmdOb3RpZmljYXRpb25UaW1lO1xuXG4gICAgICAgIHRoaXMuX21vbml0b3JTZXNzaW9uID0gbW9uaXRvclNlc3Npb247XG4gICAgICAgIHRoaXMuX21vbml0b3JBbm9ueW1vdXNTZXNzaW9uID0gbW9uaXRvckFub255bW91c1Nlc3Npb247XG4gICAgICAgIHRoaXMuX2NoZWNrU2Vzc2lvbkludGVydmFsID0gY2hlY2tTZXNzaW9uSW50ZXJ2YWw7XG4gICAgICAgIHRoaXMuX3N0b3BDaGVja1Nlc3Npb25PbkVycm9yID0gc3RvcENoZWNrU2Vzc2lvbk9uRXJyb3I7XG4gICAgICAgIGlmIChxdWVyeV9zdGF0dXNfcmVzcG9uc2VfdHlwZSkge1xuICAgICAgICAgICAgdGhpcy5fcXVlcnlfc3RhdHVzX3Jlc3BvbnNlX3R5cGUgPSBxdWVyeV9zdGF0dXNfcmVzcG9uc2VfdHlwZTtcbiAgICAgICAgfSBcbiAgICAgICAgZWxzZSBpZiAoYXJndW1lbnRzWzBdICYmIGFyZ3VtZW50c1swXS5yZXNwb25zZV90eXBlKSB7XG4gICAgICAgICAgICB0aGlzLl9xdWVyeV9zdGF0dXNfcmVzcG9uc2VfdHlwZSA9IFNpZ25pblJlcXVlc3QuaXNPaWRjKGFyZ3VtZW50c1swXS5yZXNwb25zZV90eXBlKSA/IFwiaWRfdG9rZW5cIiA6IFwiY29kZVwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fcXVlcnlfc3RhdHVzX3Jlc3BvbnNlX3R5cGUgPSBcImlkX3Rva2VuXCI7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcmV2b2tlQWNjZXNzVG9rZW5PblNpZ25vdXQgPSByZXZva2VBY2Nlc3NUb2tlbk9uU2lnbm91dDtcblxuICAgICAgICB0aGlzLl9yZWRpcmVjdE5hdmlnYXRvciA9IHJlZGlyZWN0TmF2aWdhdG9yO1xuICAgICAgICB0aGlzLl9wb3B1cE5hdmlnYXRvciA9IHBvcHVwTmF2aWdhdG9yO1xuICAgICAgICB0aGlzLl9pZnJhbWVOYXZpZ2F0b3IgPSBpZnJhbWVOYXZpZ2F0b3I7XG5cbiAgICAgICAgdGhpcy5fdXNlclN0b3JlID0gdXNlclN0b3JlO1xuICAgIH1cblxuICAgIGdldCBwb3B1cF9yZWRpcmVjdF91cmkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wb3B1cF9yZWRpcmVjdF91cmk7XG4gICAgfVxuICAgIGdldCBwb3B1cF9wb3N0X2xvZ291dF9yZWRpcmVjdF91cmkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wb3B1cF9wb3N0X2xvZ291dF9yZWRpcmVjdF91cmk7XG4gICAgfVxuICAgIGdldCBwb3B1cFdpbmRvd0ZlYXR1cmVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcG9wdXBXaW5kb3dGZWF0dXJlcztcbiAgICB9XG4gICAgZ2V0IHBvcHVwV2luZG93VGFyZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcG9wdXBXaW5kb3dUYXJnZXQ7XG4gICAgfVxuXG4gICAgZ2V0IHNpbGVudF9yZWRpcmVjdF91cmkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zaWxlbnRfcmVkaXJlY3RfdXJpO1xuICAgIH1cbiAgICAgZ2V0IHNpbGVudFJlcXVlc3RUaW1lb3V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2lsZW50UmVxdWVzdFRpbWVvdXQ7XG4gICAgfVxuICAgIGdldCBhdXRvbWF0aWNTaWxlbnRSZW5ldygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2F1dG9tYXRpY1NpbGVudFJlbmV3O1xuICAgIH1cbiAgICBnZXQgdmFsaWRhdGVTdWJPblNpbGVudFJlbmV3KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmFsaWRhdGVTdWJPblNpbGVudFJlbmV3O1xuICAgIH1cbiAgICBnZXQgaW5jbHVkZUlkVG9rZW5JblNpbGVudFJlbmV3KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faW5jbHVkZUlkVG9rZW5JblNpbGVudFJlbmV3O1xuICAgIH1cbiAgICBnZXQgYWNjZXNzVG9rZW5FeHBpcmluZ05vdGlmaWNhdGlvblRpbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyaW5nTm90aWZpY2F0aW9uVGltZTtcbiAgICB9XG5cbiAgICBnZXQgbW9uaXRvclNlc3Npb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tb25pdG9yU2Vzc2lvbjtcbiAgICB9XG4gICAgZ2V0IG1vbml0b3JBbm9ueW1vdXNTZXNzaW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbW9uaXRvckFub255bW91c1Nlc3Npb247XG4gICAgfVxuICAgIGdldCBjaGVja1Nlc3Npb25JbnRlcnZhbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NoZWNrU2Vzc2lvbkludGVydmFsO1xuICAgIH1cbiAgICBnZXQgc3RvcENoZWNrU2Vzc2lvbk9uRXJyb3IoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0b3BDaGVja1Nlc3Npb25PbkVycm9yO1xuICAgIH1cbiAgICBnZXQgcXVlcnlfc3RhdHVzX3Jlc3BvbnNlX3R5cGUoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3F1ZXJ5X3N0YXR1c19yZXNwb25zZV90eXBlO1xuICAgIH1cbiAgICBnZXQgcmV2b2tlQWNjZXNzVG9rZW5PblNpZ25vdXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXZva2VBY2Nlc3NUb2tlbk9uU2lnbm91dDtcbiAgICB9XG5cbiAgICBnZXQgcmVkaXJlY3ROYXZpZ2F0b3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZWRpcmVjdE5hdmlnYXRvcjtcbiAgICB9XG4gICAgZ2V0IHBvcHVwTmF2aWdhdG9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcG9wdXBOYXZpZ2F0b3I7XG4gICAgfVxuICAgIGdldCBpZnJhbWVOYXZpZ2F0b3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pZnJhbWVOYXZpZ2F0b3I7XG4gICAgfVxuXG4gICAgZ2V0IHVzZXJTdG9yZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VzZXJTdG9yZTtcbiAgICB9XG59XG4iLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5pbXBvcnQgeyBMb2cgfSBmcm9tICcuL0xvZy5qcyc7XG5pbXBvcnQgeyBHbG9iYWwgfSBmcm9tICcuL0dsb2JhbC5qcyc7XG5cbmV4cG9ydCBjbGFzcyBXZWJTdG9yYWdlU3RhdGVTdG9yZSB7XG4gICAgY29uc3RydWN0b3Ioe3ByZWZpeCA9IFwib2lkYy5cIiwgc3RvcmUgPSBHbG9iYWwubG9jYWxTdG9yYWdlfSA9IHt9KSB7XG4gICAgICAgIHRoaXMuX3N0b3JlID0gc3RvcmU7XG4gICAgICAgIHRoaXMuX3ByZWZpeCA9IHByZWZpeDtcbiAgICB9XG5cbiAgICBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICBMb2cuZGVidWcoXCJXZWJTdG9yYWdlU3RhdGVTdG9yZS5zZXRcIiwga2V5KTtcblxuICAgICAgICBrZXkgPSB0aGlzLl9wcmVmaXggKyBrZXk7XG5cbiAgICAgICAgdGhpcy5fc3RvcmUuc2V0SXRlbShrZXksIHZhbHVlKTtcblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgZ2V0KGtleSkge1xuICAgICAgICBMb2cuZGVidWcoXCJXZWJTdG9yYWdlU3RhdGVTdG9yZS5nZXRcIiwga2V5KTtcblxuICAgICAgICBrZXkgPSB0aGlzLl9wcmVmaXggKyBrZXk7XG5cbiAgICAgICAgbGV0IGl0ZW0gPSB0aGlzLl9zdG9yZS5nZXRJdGVtKGtleSk7XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShpdGVtKTtcbiAgICB9XG5cbiAgICByZW1vdmUoa2V5KSB7XG4gICAgICAgIExvZy5kZWJ1ZyhcIldlYlN0b3JhZ2VTdGF0ZVN0b3JlLnJlbW92ZVwiLCBrZXkpO1xuXG4gICAgICAgIGtleSA9IHRoaXMuX3ByZWZpeCArIGtleTtcblxuICAgICAgICBsZXQgaXRlbSA9IHRoaXMuX3N0b3JlLmdldEl0ZW0oa2V5KTtcbiAgICAgICAgdGhpcy5fc3RvcmUucmVtb3ZlSXRlbShrZXkpO1xuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoaXRlbSk7XG4gICAgfVxuXG4gICAgZ2V0QWxsS2V5cygpIHtcbiAgICAgICAgTG9nLmRlYnVnKFwiV2ViU3RvcmFnZVN0YXRlU3RvcmUuZ2V0QWxsS2V5c1wiKTtcblxuICAgICAgICB2YXIga2V5cyA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLl9zdG9yZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGxldCBrZXkgPSB0aGlzLl9zdG9yZS5rZXkoaW5kZXgpO1xuXG4gICAgICAgICAgICBpZiAoa2V5LmluZGV4T2YodGhpcy5fcHJlZml4KSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGtleXMucHVzaChrZXkuc3Vic3RyKHRoaXMuX3ByZWZpeC5sZW5ndGgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoa2V5cyk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgandzLCBLRVlVVElMIGFzIEtleVV0aWwsIFg1MDksIGNyeXB0bywgaGV4dG9iNjR1LCBiNjR0b2hleCB9IGZyb20gJy4uLy4uL2pzcnNhc2lnbi9kaXN0L2pzcnNhc2lnbi5qcyc7XG5cbmNvbnN0IEFsbG93ZWRTaWduaW5nQWxncyA9IFsnUlMyNTYnLCAnUlMzODQnLCAnUlM1MTInLCAnUFMyNTYnLCAnUFMzODQnLCAnUFM1MTInLCAnRVMyNTYnLCAnRVMzODQnLCAnRVM1MTInXTtcblxuZXhwb3J0IHtcbiAgICBqd3MsXG4gICAgS2V5VXRpbCxcbiAgICBYNTA5LFxuICAgIGNyeXB0byxcbiAgICBoZXh0b2I2NHUsXG4gICAgYjY0dG9oZXgsXG4gICAgQWxsb3dlZFNpZ25pbmdBbGdzXG59O1xuIiwiLyoqXG4gKiBHZW5lcmF0ZXMgUkZDNDEyMiB2ZXJzaW9uIDQgZ3VpZCAoKVxuICovXG5cbnZhciBjcnlwdG8gPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpID8gKHdpbmRvdy5jcnlwdG8gfHwgd2luZG93Lm1zQ3J5cHRvKSA6IG51bGw7XG5cbmZ1bmN0aW9uIF9jcnlwdG9VdWlkdjQoKSB7XG4gIHJldHVybiAoWzFlN10rLTFlMystNGUzKy04ZTMrLTFlMTEpLnJlcGxhY2UoL1swMThdL2csIGMgPT5cbiAgICAoYyBeIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkoMSkpWzBdICYgMTUgPj4gYyAvIDQpLnRvU3RyaW5nKDE2KVxuICApXG59XG5cbmZ1bmN0aW9uIF91dWlkdjQoKSB7XG4gICAgcmV0dXJuIChbMWU3XSstMWUzKy00ZTMrLThlMystMWUxMSkucmVwbGFjZSgvWzAxOF0vZywgYyA9PlxuICAgIChjIF4gTWF0aC5yYW5kb20oKSAqIDE2ID4+IGMgLyA0KS50b1N0cmluZygxNilcbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByYW5kb20oKSB7XG4gIHZhciBoYXNDcnlwdG8gPSBjcnlwdG8gIT0gJ3VuZGVmaW5lZCcgJiYgY3J5cHRvICE9PSBudWxsO1xuICB2YXIgaGFzUmFuZG9tVmFsdWVzID0gaGFzQ3J5cHRvICYmICh0eXBlb2YoY3J5cHRvLmdldFJhbmRvbVZhbHVlcykgIT0gJ3VuZGVmaW5lZCcpOyAgXG4gIHZhciB1dWlkID0gaGFzUmFuZG9tVmFsdWVzID8gX2NyeXB0b1V1aWR2NCA6IF91dWlkdjQ7XG4gIHJldHVybiB1dWlkKCkucmVwbGFjZSgvLS9nLCAnJyk7XG59XG4iLCJjb25zdCBWZXJzaW9uID0gXCIxLjExLjVcIjsgZXhwb3J0IHtWZXJzaW9ufTsiXSwic291cmNlUm9vdCI6IiJ9